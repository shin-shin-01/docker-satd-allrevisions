,CommitID,Dockerfiles,LatestDockerfile,Comments,Date,FirstCommit Date,Deleted Date,isSATD
0,f395016eaa830892acf62f93aaf7dd607654d888,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"#COPY hack/dockerfile/binaries-commits /

",Fri Aug 10 21:33:59 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
1,f395016eaa830892acf62f93aaf7dd607654d888,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Fri Aug 10 21:33:59 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2,f395016eaa830892acf62f93aaf7dd607654d888,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Fri Aug 10 21:33:59 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
3,f395016eaa830892acf62f93aaf7dd607654d888,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Fri Aug 10 21:33:59 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
4,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Apr 4 06:57:53 2018 -0700,Fri Sep 8 16:43:04 2017 +0200,,1
5,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Apr 4 06:57:53 2018 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
6,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Apr 4 06:57:53 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
7,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Apr 4 06:57:53 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
8,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
9,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
10,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
11,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
12,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
13,7681719a2479511e0ef37a0d4d62b1f7dbd0447f,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
14,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 22 10:15:18 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
15,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
16,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 22 10:15:18 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
17,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
18,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 22 10:15:18 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
19,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
20,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 22 10:15:18 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
21,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
22,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Sep 22 10:15:18 2016 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
23,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 22 10:15:18 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
24,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
25,169ed37aca37a12c1dc5d73a3955cade97b9af83,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 16 13:59:10 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
26,169ed37aca37a12c1dc5d73a3955cade97b9af83,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 16 13:59:10 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
27,169ed37aca37a12c1dc5d73a3955cade97b9af83,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 16 13:59:10 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
28,169ed37aca37a12c1dc5d73a3955cade97b9af83,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 16 13:59:10 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
29,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
30,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
31,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
32,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
33,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
34,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
35,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
36,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
37,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
38,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
39,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 12:58:44 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
40,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
41,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Wed Oct 19 12:58:44 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
42,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Wed Oct 19 12:58:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
43,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
44,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 12:58:44 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
45,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
46,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Oct 19 12:58:44 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
47,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
48,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 12:58:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
49,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
50,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 12:58:44 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
51,5d03410dc207a90cb64fd0f92c3830b34b9e94cd,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
52,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
53,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
54,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
55,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
56,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue May 24 16:39:52 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
57,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
58,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
59,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
60,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
61,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
62,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
63,c5c3e7945de098d678d86df68f26066f3b952180,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
64,e8f6d5eb59de5d1398473c658158adb032de6e6d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 31 03:16:42 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
65,e8f6d5eb59de5d1398473c658158adb032de6e6d,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 31 03:16:42 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
66,08e66af0b30f789b58bf37eba6b42f5b45feaff1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Apr 21 09:22:26 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
67,08e66af0b30f789b58bf37eba6b42f5b45feaff1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Apr 21 09:22:26 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
68,824b119187656e9475e2a02cd33d44f946f9d17b,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Feb 18 14:20:46 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
69,824b119187656e9475e2a02cd33d44f946f9d17b,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",Wed Feb 18 14:20:46 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
70,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
71,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
72,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
73,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
74,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
75,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
76,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
77,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Apr 22 09:30:57 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
78,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
79,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Fri Apr 22 09:30:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
80,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
81,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
82,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Fri Apr 22 09:30:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
83,de7c442d63079c0efc71a8b34ae3b7ae25cd37b6,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
84,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
85,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
86,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Nov 14 14:17:44 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
87,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
88,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
89,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Nov 14 14:17:44 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
90,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
91,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
92,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Nov 14 14:17:44 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
93,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
94,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
95,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
96,d8cda430a70d88ca32d323117d81188f8291abc1,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
97,a24ce5fa27876a2853ee5fa2a361cb7cbdbaa872,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 1 20:51:16 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
98,a24ce5fa27876a2853ee5fa2a361cb7cbdbaa872,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu May 1 20:51:16 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
99,27af1fc1fb374752e98fc0ba72a6a03ac7059185,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 3 12:09:52 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
100,27af1fc1fb374752e98fc0ba72a6a03ac7059185,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Feb 3 12:09:52 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
101,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
102,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
103,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
104,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
105,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
106,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
107,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
108,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 11 18:39:13 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
109,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 11 18:39:13 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
110,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
111,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
112,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
113,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
114,2ca875c002fac22f67a6cbffff7320733b86c36b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
115,da964dbf5841c6622b70fb36f7f7f523238f8cbb,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",Wed Jan 20 18:51:34 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
116,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
117,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
118,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Apr 4 14:27:44 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
119,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
120,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
121,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
122,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
123,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
124,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
125,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
126,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
127,ac4137dabaecbf6354b958973545b8e1379dca5f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
128,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Jul 21 10:21:52 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
129,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
130,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
131,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
132,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 21 10:21:52 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
133,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 21 10:21:52 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
134,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
135,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
136,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 21 10:21:52 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
137,de47d59158ecfaa148b34328a4e4cf9750a96ebe,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 21 10:21:52 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
138,848d45107ac7e3c4dbfdbde06ef076bc84983943,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Apr 9 21:58:09 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
139,848d45107ac7e3c4dbfdbde06ef076bc84983943,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Apr 9 21:58:09 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
140,848d45107ac7e3c4dbfdbde06ef076bc84983943,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Apr 9 21:58:09 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
141,848d45107ac7e3c4dbfdbde06ef076bc84983943,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Apr 9 21:58:09 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
142,848d45107ac7e3c4dbfdbde06ef076bc84983943,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Thu Apr 9 21:58:09 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
143,848d45107ac7e3c4dbfdbde06ef076bc84983943,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Thu Apr 9 21:58:09 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
144,848d45107ac7e3c4dbfdbde06ef076bc84983943,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Thu Apr 9 21:58:09 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
145,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
146,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
147,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Aug 26 13:52:10 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
148,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
149,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
150,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
151,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
152,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
153,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
154,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
155,0ef65cbad6b93ab706e641a77f6d4c71c27f975e,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
156,40ff3bacc151e3ed7e69ece83f6837ffb3e0d4c0,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 23:10:32 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
157,40ff3bacc151e3ed7e69ece83f6837ffb3e0d4c0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 23:10:32 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
158,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Feb 7 14:45:41 2018 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
159,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
160,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
161,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Wed Feb 7 14:45:41 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
162,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
163,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
164,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
165,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
166,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Feb 7 14:45:41 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
167,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
168,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
169,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Wed Feb 7 14:45:41 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
170,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
171,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Feb 7 14:45:41 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
172,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
173,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
174,72d7f124627389a0f80850316f7bdd54c5ccbf5c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Wed Feb 7 14:45:41 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
175,6fb90ed484e943d6cfc0849ab8f7be32241c9802,components/engine/Dockerfile.solaris,components/engine/Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",Tue Jun 7 00:45:21 2016 -0700,Tue Jun 7 00:45:21 2016 -0700,Tue Oct 24 14:32:52 2017 -0400,1
176,6fb90ed484e943d6cfc0849ab8f7be32241c9802,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 00:45:21 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
177,6fb90ed484e943d6cfc0849ab8f7be32241c9802,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 7 00:45:21 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
178,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Dec 5 11:57:59 2016 -0500,Tue Dec 1 09:47:19 2015 +0100,,1
179,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 5 11:57:59 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
180,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
181,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Dec 5 11:57:59 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
182,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
183,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Dec 5 11:57:59 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
184,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
185,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 5 11:57:59 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
186,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
187,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 5 11:57:59 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
188,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
189,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 5 11:57:59 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
190,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
191,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
192,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
193,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Jun 15 14:57:34 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
194,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
195,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
196,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
197,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
198,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
199,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
200,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
201,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
202,4a8d3f13a73011b52851193691c30d31619707ea,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
203,57c34191f2bcdc0f6d0f60583cc37522a0e25a2b,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 11:59:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
204,57c34191f2bcdc0f6d0f60583cc37522a0e25a2b,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 11:59:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
205,57c34191f2bcdc0f6d0f60583cc37522a0e25a2b,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Thu Sep 7 11:59:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
206,57c34191f2bcdc0f6d0f60583cc37522a0e25a2b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 11:59:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
207,57c34191f2bcdc0f6d0f60583cc37522a0e25a2b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 11:59:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
208,57c34191f2bcdc0f6d0f60583cc37522a0e25a2b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Thu Sep 7 11:59:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
209,57c34191f2bcdc0f6d0f60583cc37522a0e25a2b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 11:59:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
210,57c34191f2bcdc0f6d0f60583cc37522a0e25a2b,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 11:59:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
211,57c34191f2bcdc0f6d0f60583cc37522a0e25a2b,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Sep 7 11:59:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
212,42e69b0a32942923a9294f45cc1b9e53f7f28902,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat Jul 20 12:46:07 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
213,d29ee326fa77e27c6140dbda148a91049c7ff0f1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
214,d29ee326fa77e27c6140dbda148a91049c7ff0f1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
215,d29ee326fa77e27c6140dbda148a91049c7ff0f1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
216,d29ee326fa77e27c6140dbda148a91049c7ff0f1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
217,d29ee326fa77e27c6140dbda148a91049c7ff0f1,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
218,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
219,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
220,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
221,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
222,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
223,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
224,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
225,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
226,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Jun 16 17:18:44 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
227,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
228,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
229,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
230,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
231,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
232,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
233,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
234,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Feb 27 06:28:29 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
235,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
236,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
237,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Feb 27 06:28:29 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
238,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
239,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
240,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
241,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
242,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
243,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Fri Sep 8 16:43:04 2017 +0200,,1
244,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
245,55e0468775ac12057a8e8d43b219c7ceb61db658,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
246,5a7cb6c53608d1ba862170c679e7e10d3224a1a2,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 10:15:27 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
247,5a7cb6c53608d1ba862170c679e7e10d3224a1a2,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 10:15:27 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
248,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
249,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
250,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Fri Jun 30 01:29:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
251,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Fri Jun 30 01:29:56 2017 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
252,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
253,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
254,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
255,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
256,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
257,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
258,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Jun 30 01:29:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
259,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
260,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
261,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Fri Jun 30 01:29:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
262,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Jun 30 01:29:56 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
263,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
264,2aa938f1f090559d016af3a76222dae0609c3c39,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Dec 30 13:20:11 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
265,2aa938f1f090559d016af3a76222dae0609c3c39,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Dec 30 13:20:11 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
266,2aa938f1f090559d016af3a76222dae0609c3c39,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Dec 30 13:20:11 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
267,f89e068ef42bb4d69a4aa2ac154ff7c77e1bded1,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 22:46:49 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
268,f89e068ef42bb4d69a4aa2ac154ff7c77e1bded1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 22:46:49 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
269,6ea263459b0bb9906c5ce2bc7402746e713a141f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Oct 8 10:54:39 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
270,54b4ccf1dfc35102fb2bc63f9c9f08c65bd4e63b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Oct 2 22:41:31 2018 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
271,54b4ccf1dfc35102fb2bc63f9c9f08c65bd4e63b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Oct 2 22:41:31 2018 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
272,54b4ccf1dfc35102fb2bc63f9c9f08c65bd4e63b,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Oct 2 22:41:31 2018 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
273,54b4ccf1dfc35102fb2bc63f9c9f08c65bd4e63b,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Tue Oct 2 22:41:31 2018 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
274,54b4ccf1dfc35102fb2bc63f9c9f08c65bd4e63b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
275,54b4ccf1dfc35102fb2bc63f9c9f08c65bd4e63b,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
276,54b4ccf1dfc35102fb2bc63f9c9f08c65bd4e63b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
277,54b4ccf1dfc35102fb2bc63f9c9f08c65bd4e63b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
278,54b4ccf1dfc35102fb2bc63f9c9f08c65bd4e63b,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
279,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile.gccgo,components/engine/Dockerfile.gccgo,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 20 22:53:54 2016 +1100,Mon Aug 17 09:20:45 2015 +0000,Wed Aug 24 11:09:35 2016 +0100,1
280,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 22:53:54 2016 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
281,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile,components/engine/Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 20 22:53:54 2016 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
282,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 22:53:54 2016 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
283,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
284,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
285,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
286,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
287,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
288,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
289,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
290,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
291,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
292,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
293,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
294,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
295,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
296,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
297,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
298,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
299,a880fa14a9a1b77057b1d6c3b7dd92fc2fa23c5a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
300,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
301,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
302,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
303,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
304,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
305,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
306,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
307,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
308,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
309,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
310,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
311,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
312,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
313,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
314,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
315,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
316,2e3d85e90f97047aa5e56be9df8ae814eb7d2624,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Mon Nov 4 16:11:33 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
317,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
318,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
319,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Wed Nov 1 21:28:37 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
320,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
321,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
322,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
323,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
324,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Wed Nov 1 21:28:37 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
325,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
326,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
327,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
328,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
329,cbad1c68f7910f27f632fd26441038a89ad187b6,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Nov 1 21:28:37 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
330,67ef149cd98e9b3a6175967ddfe7a96d42c96479,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Tue Oct 15 11:44:56 2013 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
331,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
332,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
333,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
334,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
335,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
336,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 13:51:30 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
337,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 13:51:30 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
338,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
339,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
340,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
341,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
342,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
343,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
344,2365ad5675272c3ace9f4d5219997068698c9c19,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
345,6763064207ddf42c0b8943dd803942962f1b4aed,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",Tue Mar 1 09:05:12 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
346,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 28 10:29:17 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
347,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
348,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Nov 28 10:29:17 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
349,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
350,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 28 10:29:17 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
351,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
352,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 28 10:29:17 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
353,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
354,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 28 10:29:17 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
355,2345e8bf51648aa7331b4638e9be8917ce59c744,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
356,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
357,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
358,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
359,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
360,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
361,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
362,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
363,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
364,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
365,9244630a6b3c73aaa8d1a8d5719b6924f742e019,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
366,673b53a1a497596c6c286fad068a3667b0e1686b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
367,673b53a1a497596c6c286fad068a3667b0e1686b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
368,673b53a1a497596c6c286fad068a3667b0e1686b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
369,673b53a1a497596c6c286fad068a3667b0e1686b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
370,673b53a1a497596c6c286fad068a3667b0e1686b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
371,1123ba3f3bbe948b62812b88fdfd812a09d74233,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
372,1123ba3f3bbe948b62812b88fdfd812a09d74233,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
373,1123ba3f3bbe948b62812b88fdfd812a09d74233,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
374,1123ba3f3bbe948b62812b88fdfd812a09d74233,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
375,1123ba3f3bbe948b62812b88fdfd812a09d74233,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
376,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 4 09:03:41 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
377,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
378,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Nov 4 09:03:41 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
379,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
380,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Fri Nov 4 09:03:41 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
381,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
382,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 4 09:03:41 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
383,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
384,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 4 09:03:41 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
385,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
386,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 4 09:03:41 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
387,4ca3d7782bdc76f8a8cc30a7b19a7c774ad63250,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
388,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
389,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
390,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
391,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
392,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
393,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
394,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
395,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Jun 7 14:30:43 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
396,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
397,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
398,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
399,87fa5c341b9a919a7fb5885710c7e8347a9108c3,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
400,6ee28c633d753566ce05456ca00bd86028113a17,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 19:47:09 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
401,6ee28c633d753566ce05456ca00bd86028113a17,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 19:47:09 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
402,d823c21aaa22886bbfaf6f9a9732ec486ab14526,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 13 14:22:48 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
403,d823c21aaa22886bbfaf6f9a9732ec486ab14526,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Apr 13 14:22:48 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
404,d823c21aaa22886bbfaf6f9a9732ec486ab14526,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 13 14:22:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
405,d823c21aaa22886bbfaf6f9a9732ec486ab14526,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Apr 13 14:22:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
406,d823c21aaa22886bbfaf6f9a9732ec486ab14526,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 13 14:22:48 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
407,d823c21aaa22886bbfaf6f9a9732ec486ab14526,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Apr 13 14:22:48 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
408,d823c21aaa22886bbfaf6f9a9732ec486ab14526,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 13 14:22:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
409,d823c21aaa22886bbfaf6f9a9732ec486ab14526,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Wed Apr 13 14:22:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
410,d823c21aaa22886bbfaf6f9a9732ec486ab14526,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Apr 13 14:22:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
411,65f0de5a38b9ee4836d27d874134d76f06e4b690,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Fri Oct 21 19:56:16 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
412,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
413,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
414,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Sat Apr 23 15:11:08 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
415,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 23 15:11:08 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
416,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Sat Apr 23 15:11:08 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
417,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Apr 23 15:11:08 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
418,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
419,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
420,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
421,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 23 15:11:08 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
422,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Sat Apr 23 15:11:08 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
423,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Apr 23 15:11:08 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
424,bdbb1213a7a03f26bb11e5e4dcb9e59f3cd96517,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
425,bdbb1213a7a03f26bb11e5e4dcb9e59f3cd96517,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
426,bdbb1213a7a03f26bb11e5e4dcb9e59f3cd96517,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
427,bdbb1213a7a03f26bb11e5e4dcb9e59f3cd96517,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
428,bdbb1213a7a03f26bb11e5e4dcb9e59f3cd96517,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
429,bdbb1213a7a03f26bb11e5e4dcb9e59f3cd96517,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
430,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
431,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
432,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
433,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
434,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
435,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
436,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
437,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
438,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
439,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
440,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
441,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
442,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
443,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
444,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
445,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
446,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
447,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
448,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
449,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
450,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
451,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
452,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
453,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
454,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Apr 25 12:55:28 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
455,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
456,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Mon Apr 25 12:55:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
457,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
458,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
459,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Mon Apr 25 12:55:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
460,3ee9fe57f824ff771ef2645553d86cbf1a1e0682,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
461,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 7 17:10:04 2017 -0800,Fri Sep 8 16:43:04 2017 +0200,,1
462,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
463,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
464,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
465,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
466,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
467,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
468,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Dec 7 17:10:04 2017 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
469,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 7 17:10:04 2017 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
470,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Thu Dec 7 17:10:04 2017 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
471,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Sep 13 09:28:01 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
472,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
473,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Tue Sep 13 09:28:01 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
474,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
475,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Sep 13 09:28:01 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
476,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
477,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Sep 13 09:28:01 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
478,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
479,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Sep 13 09:28:01 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
480,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Sep 13 09:28:01 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
481,53ebd11affe79074848df47e47661033be85ea20,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
482,9952183b818f1f289977db5331bc5f590c31dbd8,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 12:21:55 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
483,9952183b818f1f289977db5331bc5f590c31dbd8,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 12:21:55 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
484,fb774be576a5df7d575a17a0e238dc43972571bd,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:19:39 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
485,fb774be576a5df7d575a17a0e238dc43972571bd,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:19:39 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
486,fb774be576a5df7d575a17a0e238dc43972571bd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:19:39 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
487,fb774be576a5df7d575a17a0e238dc43972571bd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:19:39 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
488,5bcf01ef67a430c6bcfdeeb1f63f9443291dfb87,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 20 18:32:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
489,5bcf01ef67a430c6bcfdeeb1f63f9443291dfb87,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 20 18:32:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
490,5bcf01ef67a430c6bcfdeeb1f63f9443291dfb87,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 20 18:32:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
491,38974ef6a25315017aa9fd79fa78420d7a422fb0,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jun 27 15:03:22 2018 -0700,Fri Sep 8 16:43:04 2017 +0200,,1
492,38974ef6a25315017aa9fd79fa78420d7a422fb0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
493,38974ef6a25315017aa9fd79fa78420d7a422fb0,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
494,38974ef6a25315017aa9fd79fa78420d7a422fb0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
495,38974ef6a25315017aa9fd79fa78420d7a422fb0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
496,38974ef6a25315017aa9fd79fa78420d7a422fb0,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
497,38974ef6a25315017aa9fd79fa78420d7a422fb0,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Jun 27 15:03:22 2018 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
498,38974ef6a25315017aa9fd79fa78420d7a422fb0,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jun 27 15:03:22 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
499,38974ef6a25315017aa9fd79fa78420d7a422fb0,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jun 27 15:03:22 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
500,4c0e9a70666324c751229e1afbe4b1015655fc84,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 5 15:38:41 2015 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
501,4c0e9a70666324c751229e1afbe4b1015655fc84,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Nov 5 15:38:41 2015 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
502,7dc11f73bea561c646a957fa37f404377df64a19,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Wed Oct 2 20:18:15 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
503,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
504,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
505,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 13 04:52:10 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
506,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
507,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
508,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
509,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
510,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Feb 13 04:52:10 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
511,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
512,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
513,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
514,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
515,b660bf165d1197716d38360c1d8d209417b65fbd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Feb 13 04:52:10 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
516,def859f313460fbb3e542350de861c45b9a3a130,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 27 18:15:01 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
517,def859f313460fbb3e542350de861c45b9a3a130,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 27 18:15:01 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
518,def859f313460fbb3e542350de861c45b9a3a130,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 27 18:15:01 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
519,def859f313460fbb3e542350de861c45b9a3a130,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 27 18:15:01 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
520,def859f313460fbb3e542350de861c45b9a3a130,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 27 18:15:01 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
521,def859f313460fbb3e542350de861c45b9a3a130,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 27 18:15:01 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
522,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
523,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
524,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Wed Aug 2 23:07:36 2017 +1000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
525,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
526,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
527,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Wed Aug 2 23:07:36 2017 +1000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
528,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
529,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
530,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
531,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
532,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Aug 2 23:07:36 2017 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
533,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
534,8fc8b79463d8cd3fd984e635e256fa6a5788189e,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
535,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
536,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
537,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
538,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
539,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
540,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
541,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
542,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
543,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
544,dd4630ca9ce7c00e3d6459e73ab82b2f43724488,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
545,f303319a62c544de6cd3f09809f79d5eb6383800,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Feb 14 03:27:31 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
546,f303319a62c544de6cd3f09809f79d5eb6383800,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Feb 14 03:27:31 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
547,6cdca3d860753affe0911ec22e07c7c6f0e225d6,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Apr 29 14:30:23 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
548,6cdca3d860753affe0911ec22e07c7c6f0e225d6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Apr 29 14:30:23 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
549,6cdca3d860753affe0911ec22e07c7c6f0e225d6,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Wed Apr 29 14:30:23 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
550,6cdca3d860753affe0911ec22e07c7c6f0e225d6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Apr 29 14:30:23 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
551,cf6b7d2b1ef135f2655b09ad7b66c3c4ed959e12,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 30 16:49:57 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
552,cf6b7d2b1ef135f2655b09ad7b66c3c4ed959e12,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jul 30 16:49:57 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
553,cf6b7d2b1ef135f2655b09ad7b66c3c4ed959e12,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jul 30 16:49:57 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
554,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue May 1 13:40:27 2018 -0400,Fri Sep 8 16:43:04 2017 +0200,,1
555,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue May 1 13:40:27 2018 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
556,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue May 1 13:40:27 2018 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
557,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
558,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
559,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
560,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
561,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
562,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
563,267d640e44cb5862732c86359a1bdba95478e266,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Tue May 1 13:40:27 2018 -0400,Tue Dec 1 09:47:19 2015 +0100,,1
564,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
565,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
566,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
567,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
568,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
569,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
570,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
571,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
572,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Mon Apr 25 10:21:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
573,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
574,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
575,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Mon Apr 25 10:21:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
576,67162abf1a1093d95b45e8a5bb66bc6826abb98f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
577,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 18:31:33 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
578,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
579,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 18:31:33 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
580,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
581,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 18:31:33 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
582,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
583,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 8 18:31:33 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
584,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
585,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Sep 8 18:31:33 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
586,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 18:31:33 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
587,820ac3028cde8f54af3ad4f8ccf2a54753b11da2,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
588,108637a2eb9bc8ccb31b39017af692fe353a1b8b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 20 09:35:41 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
589,108637a2eb9bc8ccb31b39017af692fe353a1b8b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jul 20 09:35:41 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
590,108637a2eb9bc8ccb31b39017af692fe353a1b8b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jul 20 09:35:41 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
591,8fdf3e64cddef4d3f750062975910c10c6a293d0,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Jan 4 11:58:11 2019 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
592,eb2a27714959a45db3ee1a13d9349b9016c0e198,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Apr 8 18:45:52 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
593,eb2a27714959a45db3ee1a13d9349b9016c0e198,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Apr 8 18:45:52 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
594,eb2a27714959a45db3ee1a13d9349b9016c0e198,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Apr 8 18:45:52 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
595,eb2a27714959a45db3ee1a13d9349b9016c0e198,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
596,eb2a27714959a45db3ee1a13d9349b9016c0e198,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
597,eb2a27714959a45db3ee1a13d9349b9016c0e198,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
598,eb2a27714959a45db3ee1a13d9349b9016c0e198,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
599,eb2a27714959a45db3ee1a13d9349b9016c0e198,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
600,eb2a27714959a45db3ee1a13d9349b9016c0e198,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Apr 8 18:45:52 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
601,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
602,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
603,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
604,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 22 19:55:25 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
605,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
606,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
607,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
608,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
609,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
610,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
611,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
612,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
613,10e1615e9a47a89f88ee4f5d99cf8c44e7ce2ce0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
614,aa307ffad85ddffdf6c6517b895057ffb861186c,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Wed Sep 19 14:26:03 2018 -0700,Thu Aug 23 22:53:57 2018 +0000,Thu Dec 5 14:55:10 2019 +0100,1
615,aa307ffad85ddffdf6c6517b895057ffb861186c,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Wed Sep 19 14:26:03 2018 -0700,Thu Aug 23 22:53:57 2018 +0000,Thu Dec 5 14:55:10 2019 +0100,1
616,aa307ffad85ddffdf6c6517b895057ffb861186c,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-init - TODO move this out, last time we bumped was 2016!
",Wed Sep 19 14:26:03 2018 -0700,Thu Aug 23 22:53:57 2018 +0000,Thu Dec 5 14:55:10 2019 +0100,1
617,aa307ffad85ddffdf6c6517b895057ffb861186c,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Wed Sep 19 14:26:03 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
618,aa307ffad85ddffdf6c6517b895057ffb861186c,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Wed Sep 19 14:26:03 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
619,aa307ffad85ddffdf6c6517b895057ffb861186c,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Wed Sep 19 14:26:03 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
620,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
621,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
622,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
623,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
624,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
625,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
626,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
627,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
628,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
629,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
630,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
631,8080d1d7e4d6d8fe776d636730220a9654a31723,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
632,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sun Jun 10 17:41:22 2018 +0300,Fri Feb 27 22:37:25 2015 -0700,,1
633,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sun Jun 10 17:41:22 2018 +0300,Fri Feb 27 22:37:25 2015 -0700,,1
634,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sun Jun 10 17:41:22 2018 +0300,Fri Sep 8 16:43:04 2017 +0200,,1
635,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Sun Jun 10 17:41:22 2018 +0300,Tue Dec 1 09:47:19 2015 +0100,,1
636,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
637,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
638,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
639,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
640,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
641,693307ee7dd075b9eca4250fc21f09dd58a60098,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
642,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
643,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
644,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
645,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
646,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Thu Dec 1 08:33:30 2016 -0500,Tue Dec 1 09:47:19 2015 +0100,,1
647,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Dec 1 08:33:30 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
648,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
649,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
650,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
651,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
652,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
653,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
654,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
655,adf7112b0ed1285e93c729104b6c6744105ba1e0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
656,adf7112b0ed1285e93c729104b6c6744105ba1e0,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
657,adf7112b0ed1285e93c729104b6c6744105ba1e0,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
658,adf7112b0ed1285e93c729104b6c6744105ba1e0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
659,adf7112b0ed1285e93c729104b6c6744105ba1e0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
660,adf7112b0ed1285e93c729104b6c6744105ba1e0,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
661,fd3779deb1e88561ebcb33ba361e36ebd220290d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 8 14:02:32 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
662,fd3779deb1e88561ebcb33ba361e36ebd220290d,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Dec 8 14:02:32 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
663,fd3779deb1e88561ebcb33ba361e36ebd220290d,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Dec 8 14:02:32 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
664,fd3779deb1e88561ebcb33ba361e36ebd220290d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 8 14:02:32 2017 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
665,fd3779deb1e88561ebcb33ba361e36ebd220290d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Dec 8 14:02:32 2017 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
666,fd3779deb1e88561ebcb33ba361e36ebd220290d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Fri Dec 8 14:02:32 2017 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
667,fdae7fc74977956e1d46e51a89d656d682c770f4,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Apr 16 11:33:49 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
668,fdae7fc74977956e1d46e51a89d656d682c770f4,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Apr 16 11:33:49 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
669,a6482c217b470c7b665340acec09a930761e08d9,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Dec 5 18:40:31 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
670,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
671,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
672,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
673,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Jun 13 19:33:00 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
674,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
675,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
676,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
677,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
678,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
679,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
680,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
681,555a6b9040f9a3fe014b99507d2d5bc7431b1b48,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
682,536d686ec45dc193bf931b1ccf732c791c503ccf,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 3 15:09:54 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
683,536d686ec45dc193bf931b1ccf732c791c503ccf,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 3 15:09:54 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
684,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Jul 1 11:45:19 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
685,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
686,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
687,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
688,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
689,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
690,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
691,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
692,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
693,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
694,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
695,84d90cb33369ffb6a47ac3b9533840c3fe75965a,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
696,05a05baa0e6c5464c512c08d8577a342e682b91c,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Thu Nov 17 13:54:56 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
697,a017bc90a9319a0aa9fada69c7764dcd8c60d859,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Sat Nov 5 21:05:06 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
698,1ec6bf08bd7d505757211abd5b8fda879f09a59f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 14 11:54:37 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
699,1ec6bf08bd7d505757211abd5b8fda879f09a59f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jul 14 11:54:37 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
700,1ec6bf08bd7d505757211abd5b8fda879f09a59f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jul 14 11:54:37 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
701,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Sep 29 11:02:38 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
702,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
703,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 11:02:38 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
704,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
705,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 11:02:38 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
706,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
707,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 29 11:02:38 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
708,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
709,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 11:02:38 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
710,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
711,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 11:02:38 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
712,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
713,7afe53c8ebe66e30b72e0a15e1e0fe28abd710df,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 5 14:17:42 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
714,7afe53c8ebe66e30b72e0a15e1e0fe28abd710df,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 5 14:17:42 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
715,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed May 24 21:11:16 2017 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
716,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
717,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
718,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
719,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
720,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
721,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
722,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
723,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed May 24 21:11:16 2017 -0400,Tue Dec 1 09:47:19 2015 +0100,,1
724,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
725,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
726,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
727,9ac5a907347a94a3bbe7a5a249a5e027946816d4,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
728,bafb3eba74b0d1a29dfb8b4505418573140d1778,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Mar 30 10:27:59 2020 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
729,bafb3eba74b0d1a29dfb8b4505418573140d1778,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Mar 30 10:27:59 2020 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
730,bafb3eba74b0d1a29dfb8b4505418573140d1778,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Mon Mar 30 10:27:59 2020 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
731,bafb3eba74b0d1a29dfb8b4505418573140d1778,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Mar 30 10:27:59 2020 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
732,ef88e7ace239192347f65205608160b8137c0942,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Nov 4 14:39:12 2015 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
733,ef88e7ace239192347f65205608160b8137c0942,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 4 14:39:12 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
734,ef88e7ace239192347f65205608160b8137c0942,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 4 14:39:12 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
735,ef88e7ace239192347f65205608160b8137c0942,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Nov 4 14:39:12 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
736,ef88e7ace239192347f65205608160b8137c0942,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 4 14:39:12 2015 -0500,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
737,ef88e7ace239192347f65205608160b8137c0942,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 4 14:39:12 2015 -0500,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
738,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu May 19 21:13:35 2016 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
739,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 19 21:13:35 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
740,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 19 21:13:35 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
741,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 19 21:13:35 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
742,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 19 21:13:35 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
743,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 19 21:13:35 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
744,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 19 21:13:35 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
745,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 19 21:13:35 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
746,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 19 21:13:35 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
747,7fe655caac4b56da0004a5a7c52765b7e09aef1f,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Thu May 19 21:13:35 2016 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
748,8c95486169ba0ef2a7093ad78a236b73db08237f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Aug 11 17:08:33 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
749,8c95486169ba0ef2a7093ad78a236b73db08237f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Aug 11 17:08:33 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
750,8c95486169ba0ef2a7093ad78a236b73db08237f,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Sun Aug 11 17:08:33 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
751,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
752,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile,components/engine/Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 27 09:46:26 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
753,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
754,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
755,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
756,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
757,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
758,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
759,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
760,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
761,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
762,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
763,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
764,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
765,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
766,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
767,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
768,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
769,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
770,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
771,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
772,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
773,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
774,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
775,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
776,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
777,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
778,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
779,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 17 12:09:50 2017 +0000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
780,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
781,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
782,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Jan 17 12:09:50 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
783,ecfeb35159006d06d734f9efff370a61037e7f89,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
784,949c541343106647fcabfc811b1c0c9a6e20c7ae,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 1 16:35:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
785,949c541343106647fcabfc811b1c0c9a6e20c7ae,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Sep 1 16:35:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
786,f6d59457ea0764320b2cafaa8b3e685337deadfc,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Oct 18 10:23:09 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
787,f6d59457ea0764320b2cafaa8b3e685337deadfc,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Oct 18 10:23:09 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
788,f6d59457ea0764320b2cafaa8b3e685337deadfc,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Oct 18 10:23:09 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
789,f6d59457ea0764320b2cafaa8b3e685337deadfc,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Oct 18 10:23:09 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
790,f6d59457ea0764320b2cafaa8b3e685337deadfc,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Oct 18 10:23:09 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
791,5689fc7e46fe801ad59bd45a18eff0409e35297e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 9 18:22:19 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
792,5689fc7e46fe801ad59bd45a18eff0409e35297e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 9 18:22:19 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
793,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 21 16:18:22 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
794,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
795,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 21 16:18:22 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
796,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
797,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Wed Sep 21 16:18:22 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
798,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
799,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 21 16:18:22 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
800,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
801,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 21 16:18:22 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
802,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
803,deb2f0462013b812ea18432ef49b306623febdd3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 6 23:10:05 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
804,deb2f0462013b812ea18432ef49b306623febdd3,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 6 23:10:05 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
805,c0eb53edfc491c6d715a820204fa46648de71128,components/cli/dockerfiles/Dockerfile.dev,components/cli/dockerfiles/Dockerfile.dev,"# FIXME(vdemeester) only used for e2e, could be in e2e special image in the future
",Wed May 9 10:07:34 2018 +0200,Tue Apr 18 19:12:24 2017 -0400,,1
806,0bc6e1ab1daef60223471263bfa2cf62cbaa9e6a,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Feb 5 23:23:00 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
807,0bc6e1ab1daef60223471263bfa2cf62cbaa9e6a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Feb 5 23:23:00 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
808,0bc6e1ab1daef60223471263bfa2cf62cbaa9e6a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Feb 5 23:23:00 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
809,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
810,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
811,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
812,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
813,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
814,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
815,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
816,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
817,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
818,63a6b47bce5f0dc1a18bdc5bde0e1977aec23b0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
819,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
820,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
821,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
822,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
823,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
824,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 29 13:35:19 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
825,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
826,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
827,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
828,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
829,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
830,05c587d41d8b01e64855247dd0e61e83d0198505,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
831,79bc167c15cf847a2930b00f70676d84a7c8cf86,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Thu Sep 26 11:59:51 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
832,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
833,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
834,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Oct 4 23:22:23 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
835,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
836,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
837,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Wed Oct 4 23:22:23 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
838,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Oct 4 23:22:23 2017 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
839,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
840,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
841,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
842,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
843,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Oct 4 23:22:23 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
844,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
845,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
846,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
847,9aa7f4c8ce3312a40df70fd60c1b3817b7e8543d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Wed Oct 4 23:22:23 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
848,ae45d9cbead510f527a8882333d5b40be40c1352,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 31 13:58:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
849,ae45d9cbead510f527a8882333d5b40be40c1352,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Mar 31 13:58:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
850,ae45d9cbead510f527a8882333d5b40be40c1352,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 31 13:58:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
851,ae45d9cbead510f527a8882333d5b40be40c1352,components/engine/Dockerfile.centos,components/engine/Dockerfile.centos,"# Wrap all commands in the ""docker-in-docker"" script to allow nested containers
#ENTRYPOINT [""hack/dind""]
",Tue Mar 31 13:58:17 2015 -0700,Tue Mar 31 13:58:17 2015 -0700,Thu Apr 30 15:30:42 2015 -0700,1
852,ddcc75658740d174c2f8a93f354a012fbf8cc546,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 31 21:48:03 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
853,ddcc75658740d174c2f8a93f354a012fbf8cc546,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Mar 31 21:48:03 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
854,ddcc75658740d174c2f8a93f354a012fbf8cc546,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Tue Mar 31 21:48:03 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
855,a1663344f62f3cd3497326c23a26798e4683f012,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 8 23:09:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
856,a1663344f62f3cd3497326c23a26798e4683f012,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jan 8 23:09:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
857,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
858,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
859,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
860,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
861,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
862,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
863,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
864,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
865,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
866,1aa240e6dc28bf26f61ae307176c087dd7d54944,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
867,fbe6bc13ee6735bf2b2be7853c2e014923545993,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Oct 28 08:32:33 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
868,fbe6bc13ee6735bf2b2be7853c2e014923545993,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Oct 28 08:32:33 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
869,2a37fdb61567f725bf3a635856a4cfc0f8d7d3e6,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
870,2a37fdb61567f725bf3a635856a4cfc0f8d7d3e6,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
871,2a37fdb61567f725bf3a635856a4cfc0f8d7d3e6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
872,2a37fdb61567f725bf3a635856a4cfc0f8d7d3e6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
873,2a37fdb61567f725bf3a635856a4cfc0f8d7d3e6,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
874,817f075302c94ac7b2b92ee803c4cff55a852dbe,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 10 12:51:54 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
875,817f075302c94ac7b2b92ee803c4cff55a852dbe,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Aug 10 12:51:54 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
876,817f075302c94ac7b2b92ee803c4cff55a852dbe,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Aug 10 12:51:54 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
877,1375a98c5e2ccd28565a50ec48db9d9887c1f9eb,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 13 19:26:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
878,1375a98c5e2ccd28565a50ec48db9d9887c1f9eb,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 13 19:26:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
879,1375a98c5e2ccd28565a50ec48db9d9887c1f9eb,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Mon Apr 13 19:26:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
880,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
881,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
882,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Mon Jan 22 13:40:19 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
883,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
884,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
885,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
886,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
887,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Mon Jan 22 13:40:19 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
888,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Jan 22 13:40:19 2018 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
889,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
890,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Mon Jan 22 13:40:19 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
891,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
892,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Jan 22 13:40:19 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
893,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Jan 22 13:40:19 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
894,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
895,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
896,e9f8cfe726c903c31215135880d038766256d6f9,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
897,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 23 09:20:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
898,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
899,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 23 09:20:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
900,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
901,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Sep 23 09:20:57 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
902,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
903,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 23 09:20:57 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
904,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
905,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 23 09:20:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
906,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
907,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Fri Sep 23 09:20:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
908,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
909,b985b8195af92487c9d4aef4c6d36689e46f1f78,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 30 09:49:10 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
910,b985b8195af92487c9d4aef4c6d36689e46f1f78,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 30 09:49:10 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
911,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Oct 26 21:29:29 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
912,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
913,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
914,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
915,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Thu Oct 26 21:29:29 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
916,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Thu Oct 26 21:29:29 2017 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
917,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
918,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
919,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
920,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
921,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
922,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
923,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Oct 26 21:29:29 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
924,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
925,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
926,d815178654dac0ec452e35ad343ebe56323569bc,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Thu Oct 26 21:29:29 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
927,dd98136a3d32e2d450659a35806e2ad18d0536a7,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Wed Jun 1 21:41:19 2016 -0300,Tue Dec 1 09:47:19 2015 +0100,,1
928,dc33a78fc6b34d721b116e595312c113e5fb81af,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Oct 3 18:57:29 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
929,dc33a78fc6b34d721b116e595312c113e5fb81af,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Oct 3 18:57:29 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
930,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Jun 9 14:56:14 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
931,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
932,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
933,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
934,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
935,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
936,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
937,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
938,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
939,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
940,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
941,14ac7227ab6e9c75d22e5f5df0f4821cd5a70f94,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
942,537f6ff11c563da33df9ec8812f5a418b2d87a04,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 5 10:12:57 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
943,537f6ff11c563da33df9ec8812f5a418b2d87a04,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 5 10:12:57 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
944,94ae8f10c7281c0b5bd8f0945ac9ce250dbd55db,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 27 18:21:47 2017 -0800,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
945,94ae8f10c7281c0b5bd8f0945ac9ce250dbd55db,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Nov 27 18:21:47 2017 -0800,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
946,31a1aed04a3e1b88d9906e19877bca056863d7e0,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"#COPY hack/dockerfile/binaries-commits /

",Fri Aug 10 16:08:29 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
947,31a1aed04a3e1b88d9906e19877bca056863d7e0,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Fri Aug 10 16:08:29 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
948,31a1aed04a3e1b88d9906e19877bca056863d7e0,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Fri Aug 10 16:08:29 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
949,31a1aed04a3e1b88d9906e19877bca056863d7e0,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Fri Aug 10 16:08:29 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
950,75761ed8161519d961c0076ec7bb48b5ff1fbc04,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 25 10:54:36 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
951,75761ed8161519d961c0076ec7bb48b5ff1fbc04,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 25 10:54:36 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
952,75761ed8161519d961c0076ec7bb48b5ff1fbc04,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 25 10:54:36 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
953,75761ed8161519d961c0076ec7bb48b5ff1fbc04,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 25 10:54:36 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
954,f32b25fee3762f720d5f9adc6c14dda87f33dbb1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 16 12:22:00 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
955,f32b25fee3762f720d5f9adc6c14dda87f33dbb1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 16 12:22:00 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
956,f32b25fee3762f720d5f9adc6c14dda87f33dbb1,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Mon Mar 16 12:22:00 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
957,2ad5a11c175c200545932eb5e1c03f1dcf8dee55,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Feb 26 14:17:25 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
958,2ad5a11c175c200545932eb5e1c03f1dcf8dee55,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Feb 26 14:17:25 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
959,2ad5a11c175c200545932eb5e1c03f1dcf8dee55,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Feb 26 14:17:25 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
960,d18c57d82005aa6f595619ed1d72106557fdad10,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Sat Apr 18 17:42:24 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
961,d18c57d82005aa6f595619ed1d72106557fdad10,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Sat Apr 18 17:42:24 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
962,28d6652c846cca88136b241ce8aa067998232269,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 19 13:28:51 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
963,28d6652c846cca88136b241ce8aa067998232269,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 19 13:28:51 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
964,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
965,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
966,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
967,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
968,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
969,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
970,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
971,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
972,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
973,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
974,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 29 09:35:42 2016 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
975,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
976,eecbb6fc3ca93840f48c1874e150551add220c82,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
977,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
978,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
979,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Mar 18 11:50:19 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
980,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
981,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
982,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
983,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
984,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
985,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
986,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
987,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
988,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
989,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
990,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
991,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
992,8ba16d91c89869390a3726e59cce1bef3a83cc97,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
993,786f8ce10f399cf390625b4cf349aa6bc8369112,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 9 17:05:51 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
994,786f8ce10f399cf390625b4cf349aa6bc8369112,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jul 9 17:05:51 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
995,a9e705684f637797c0f5ab988208e378de4ca7e2,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jan 29 18:13:13 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
996,a9e705684f637797c0f5ab988208e378de4ca7e2,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jan 29 18:13:13 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
997,a9e705684f637797c0f5ab988208e378de4ca7e2,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jan 29 18:13:13 2020 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
998,a9e705684f637797c0f5ab988208e378de4ca7e2,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jan 29 18:13:13 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
999,a9e705684f637797c0f5ab988208e378de4ca7e2,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 29 18:13:13 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1000,a9e705684f637797c0f5ab988208e378de4ca7e2,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jan 29 18:13:13 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1001,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1002,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1003,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1004,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1005,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",Thu Mar 24 18:41:34 2016 -0400,Tue Dec 1 09:47:19 2015 +0100,,1
1006,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1007,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1008,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1009,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1010,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1011,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1012,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1013,e7eeee7715696ef32750aae1f11553f3f9a194a0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1014,dd2618f69bdcbb8532d6f18969b10453ad6c5f87,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat May 21 17:42:31 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1015,dd2618f69bdcbb8532d6f18969b10453ad6c5f87,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat May 21 17:42:31 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1016,19d03a598a46c0ef0e508a6681d88856324143a6,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Tue Sep 18 08:25:04 2018 -0700,Thu Aug 23 22:53:57 2018 +0000,Thu Dec 5 14:55:10 2019 +0100,1
1017,19d03a598a46c0ef0e508a6681d88856324143a6,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Tue Sep 18 08:25:04 2018 -0700,Thu Aug 23 22:53:57 2018 +0000,Thu Dec 5 14:55:10 2019 +0100,1
1018,19d03a598a46c0ef0e508a6681d88856324143a6,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-init - TODO move this out, last time we bumped was 2016!
",Tue Sep 18 08:25:04 2018 -0700,Thu Aug 23 22:53:57 2018 +0000,Thu Dec 5 14:55:10 2019 +0100,1
1019,cb79d90bc2975563b0167ecdbfca2c8cb801f77c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 31 14:54:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1020,cb79d90bc2975563b0167ecdbfca2c8cb801f77c,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jul 31 14:54:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1021,cb79d90bc2975563b0167ecdbfca2c8cb801f77c,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 31 14:54:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1022,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 4 21:50:15 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1023,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 4 21:50:15 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1024,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1025,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1026,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1027,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1028,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1029,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1030,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1031,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1032,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1033,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1034,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1035,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1036,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1037,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1038,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1039,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1040,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1041,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 22 20:55:47 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
1042,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1043,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1044,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1045,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1046,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1047,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1048,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1049,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1050,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1051,ce07920e99580fc1f485b998fe05aea1e2e90a88,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1052,ccde1983ecf950c178809b19b17dc2c845c1af20,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 13 12:39:05 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1053,ccde1983ecf950c178809b19b17dc2c845c1af20,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 13 12:39:05 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1054,ccde1983ecf950c178809b19b17dc2c845c1af20,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Oct 13 12:39:05 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1055,8273ff6e18d86dcb892d75b5376902441ef256b4,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 14 06:16:41 2014 +0100,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1056,8273ff6e18d86dcb892d75b5376902441ef256b4,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Nov 14 06:16:41 2014 +0100,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1057,8273ff6e18d86dcb892d75b5376902441ef256b4,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 14 06:16:41 2014 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1058,8273ff6e18d86dcb892d75b5376902441ef256b4,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Nov 14 06:16:41 2014 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1059,e5820ed7e4b39ee86c7a0b12702340d6f296667a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 3 16:26:19 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1060,e5820ed7e4b39ee86c7a0b12702340d6f296667a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Sep 3 16:26:19 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1061,e5820ed7e4b39ee86c7a0b12702340d6f296667a,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Sep 3 16:26:19 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1062,79b92f27aa2690e85e628e6ce11033bf0333d828,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 19 05:04:08 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1063,79b92f27aa2690e85e628e6ce11033bf0333d828,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jun 19 05:04:08 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1064,2c4f0e56a8c7e01ba39bba7a062351f7830f3bac,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Feb 22 10:51:50 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
1065,970480b8f8cf2b4730078f136de5e7341571be25,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",Fri Sep 6 20:16:13 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1066,ea19201d03499f36c564ae854b18c7622499f971,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Apr 10 15:46:21 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1067,ea19201d03499f36c564ae854b18c7622499f971,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Apr 10 15:46:21 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1068,162b61e65766b78c801f3937bde267cf532aa610,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 13 21:35:21 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1069,162b61e65766b78c801f3937bde267cf532aa610,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 13 21:35:21 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1070,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Sep 25 10:03:37 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1071,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1072,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1073,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1074,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1075,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1076,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Sep 25 10:03:37 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1077,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1078,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1079,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1080,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1081,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Mon Sep 25 10:03:37 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1082,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1083,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1084,954a7de027cf2698dd24cc4f0ec33a433c1efe8b,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Mon Sep 25 10:03:37 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1085,86214961dea1d51ad013c176cc8e5b93f81b15bc,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Apr 30 15:21:05 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1086,86214961dea1d51ad013c176cc8e5b93f81b15bc,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Apr 30 15:21:05 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1087,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1088,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1089,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1090,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1091,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1092,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1093,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1094,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1095,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1096,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1097,5882c6376d4feef2ca6a948dbcc653581660693d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1098,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1099,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1100,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1101,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1102,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1103,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 4 22:43:53 2016 +0800,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1104,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1105,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1106,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1107,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1108,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1109,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1110,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1111,bce1c130261c625b7697809c00c272f63262dea3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 20:05:37 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1112,bce1c130261c625b7697809c00c272f63262dea3,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 20:05:37 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1113,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1114,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1115,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1116,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1117,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1118,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1119,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1120,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1121,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1122,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1123,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1124,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1125,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1126,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1127,20a8382c828c63c54dc6f9b0403a5f3b41068977,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1128,6a60a419681de62ae7c641c83664bb7740fa908c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 30 00:50:10 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1129,6a60a419681de62ae7c641c83664bb7740fa908c,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 30 00:50:10 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1130,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Nov 3 09:47:50 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1131,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1132,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 09:47:50 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1133,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1134,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 09:47:50 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1135,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1136,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 09:47:50 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1137,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1138,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Nov 3 09:47:50 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1139,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1140,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 09:47:50 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1141,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1142,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 29 04:59:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1143,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Apr 29 04:59:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1144,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 29 04:59:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1145,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 29 04:59:19 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1146,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 29 04:59:19 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1147,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 29 04:59:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1148,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Fri Apr 29 04:59:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1149,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 29 04:59:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1150,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 29 04:59:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1151,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Fri Apr 29 04:59:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1152,943ca186081af85c6fa3fea8b988b042a6a9bbff,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 29 04:59:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1153,3705ed705edf8a565dd11e22f5955d7d42e5b72a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 25 17:12:18 2013 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1154,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 3 15:09:53 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1155,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 3 15:09:53 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1156,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Jun 3 15:09:53 2016 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1157,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 3 15:09:53 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1158,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 3 15:09:53 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1159,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 3 15:09:53 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1160,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 3 15:09:53 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1161,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 3 15:09:53 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1162,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 3 15:09:53 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1163,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Fri Jun 3 15:09:53 2016 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1164,d5bd1836f1283b04c225928044c7b0e813dc9d27,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 13 21:13:28 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1165,d5bd1836f1283b04c225928044c7b0e813dc9d27,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 13 21:13:28 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1166,d5bd1836f1283b04c225928044c7b0e813dc9d27,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 13 21:13:28 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1167,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Apr 11 14:51:19 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
1168,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1169,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1170,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1171,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1172,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1173,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1174,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1175,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1176,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1177,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1178,ec5e265b2a970be992d95a84cb15eb3e8cef0c78,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1179,584efdb025a35e2bf2fbdfe81bae217d715ed8f9,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sun Jun 7 20:04:59 2020 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
1180,584efdb025a35e2bf2fbdfe81bae217d715ed8f9,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sun Jun 7 20:04:59 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1181,584efdb025a35e2bf2fbdfe81bae217d715ed8f9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Jun 7 20:04:59 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1182,584efdb025a35e2bf2fbdfe81bae217d715ed8f9,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sun Jun 7 20:04:59 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1183,584efdb025a35e2bf2fbdfe81bae217d715ed8f9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sun Jun 7 20:04:59 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1184,584efdb025a35e2bf2fbdfe81bae217d715ed8f9,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sun Jun 7 20:04:59 2020 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1185,584efdb025a35e2bf2fbdfe81bae217d715ed8f9,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sun Jun 7 20:04:59 2020 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1186,8698a97b77a8dedcfff48daefa3ebdfcc01b3a28,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1187,8698a97b77a8dedcfff48daefa3ebdfcc01b3a28,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1188,8698a97b77a8dedcfff48daefa3ebdfcc01b3a28,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1189,8698a97b77a8dedcfff48daefa3ebdfcc01b3a28,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1190,8698a97b77a8dedcfff48daefa3ebdfcc01b3a28,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1191,8698a97b77a8dedcfff48daefa3ebdfcc01b3a28,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Fri Dec 14 00:42:34 2018 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1192,8698a97b77a8dedcfff48daefa3ebdfcc01b3a28,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Dec 14 00:42:34 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1193,8698a97b77a8dedcfff48daefa3ebdfcc01b3a28,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Dec 14 00:42:34 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1194,8698a97b77a8dedcfff48daefa3ebdfcc01b3a28,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Dec 14 00:42:34 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
1195,02217a3ce5ab2f76732bc20a124398678ac4b4b3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 30 17:44:33 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1196,02217a3ce5ab2f76732bc20a124398678ac4b4b3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 30 17:44:33 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1197,02217a3ce5ab2f76732bc20a124398678ac4b4b3,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 30 17:44:33 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1198,02217a3ce5ab2f76732bc20a124398678ac4b4b3,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 30 17:44:33 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1199,bdfe0db1e59fb6942e83ab67c43fde4576907d1d,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Feb 17 11:52:43 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1200,bdfe0db1e59fb6942e83ab67c43fde4576907d1d,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Feb 17 11:52:43 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1201,bdfe0db1e59fb6942e83ab67c43fde4576907d1d,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Feb 17 11:52:43 2020 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1202,bdfe0db1e59fb6942e83ab67c43fde4576907d1d,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Feb 17 11:52:43 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1203,bdfe0db1e59fb6942e83ab67c43fde4576907d1d,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Feb 17 11:52:43 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1204,bdfe0db1e59fb6942e83ab67c43fde4576907d1d,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Feb 17 11:52:43 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1205,788a1fc55811c971b72a024eb15456bed4a75de9,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Mon Sep 30 21:14:54 2013 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
1206,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1207,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1208,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1209,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1210,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1211,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1212,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1213,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1214,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile,components/engine/Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Tue Jan 26 14:21:07 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1215,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1216,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1217,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1218,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1219,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1220,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1221,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1222,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1223,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1224,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1225,ccd4b60a2c22ed5a376c71076278479e541773d9,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Apr 16 16:31:49 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1226,ccd4b60a2c22ed5a376c71076278479e541773d9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Apr 16 16:31:49 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1227,ccd4b60a2c22ed5a376c71076278479e541773d9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Apr 16 16:31:49 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1228,ccd4b60a2c22ed5a376c71076278479e541773d9,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Apr 16 16:31:49 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1229,f757666ccd49bfdea26d19b65f1dbbc9b1b4cb23,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 18 16:49:16 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1230,f757666ccd49bfdea26d19b65f1dbbc9b1b4cb23,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Mar 18 16:49:16 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1231,c52a89950ab91116a032b0cb2b0a299e6b4952d4,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 12 21:51:12 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1232,26c37e453e8bb6679a8e68d7e9d792d95925e459,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Feb 14 03:27:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1233,26c37e453e8bb6679a8e68d7e9d792d95925e459,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Feb 14 03:27:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1234,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Jan 27 02:14:36 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1235,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1236,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1237,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1238,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1239,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1240,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1241,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1242,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1243,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1244,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1245,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1246,b3f0aa463e90774e5a3a616f83069e05f54b0755,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Fri Jan 27 02:14:36 2017 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1247,c3fecdb77d54de0150bca80b7e5e77d05f4f709e,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jan 17 15:18:44 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1248,c3fecdb77d54de0150bca80b7e5e77d05f4f709e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jan 17 15:18:44 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1249,c3fecdb77d54de0150bca80b7e5e77d05f4f709e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jan 17 15:18:44 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1250,c3fecdb77d54de0150bca80b7e5e77d05f4f709e,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Jan 17 15:18:44 2020 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1251,c3fecdb77d54de0150bca80b7e5e77d05f4f709e,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Jan 17 15:18:44 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1252,c3fecdb77d54de0150bca80b7e5e77d05f4f709e,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Jan 17 15:18:44 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1253,1a2b48337a98668400966d1e585bcb1a2946f407,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 08:37:13 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1254,1a2b48337a98668400966d1e585bcb1a2946f407,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 08:37:13 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1255,f708c1ef17a5e4a1ec5b06bab40711f966cdb5a6,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:17:16 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1256,f708c1ef17a5e4a1ec5b06bab40711f966cdb5a6,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:17:16 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1257,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 14:33:06 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1258,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 14:33:06 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1259,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Jan 16 14:33:06 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1260,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 14:33:06 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1261,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Tue Jan 16 14:33:06 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1262,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 14:33:06 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1263,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jan 16 14:33:06 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1264,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 14:33:06 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1265,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 14:33:06 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1266,cd6c81a6fb09f79951eed6489b0c5d1463d2e058,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Jan 16 14:33:06 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1267,588f1dc8ae4be6bd58da684b30abb4404350b0ef,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Feb 27 12:00:12 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1268,588f1dc8ae4be6bd58da684b30abb4404350b0ef,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Feb 27 12:00:12 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1269,1ea6d146444f82d91ea3a00d8e34d86ec0538c76,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 12 15:01:09 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1270,1ea6d146444f82d91ea3a00d8e34d86ec0538c76,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jan 12 15:01:09 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1271,c1f75e87da09ff136188fc554d9cd236814de2bc,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 21 15:59:23 2014 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
1272,c1f75e87da09ff136188fc554d9cd236814de2bc,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 21 15:59:23 2014 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
1273,c1f75e87da09ff136188fc554d9cd236814de2bc,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 21 15:59:23 2014 +1000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1274,c1f75e87da09ff136188fc554d9cd236814de2bc,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 21 15:59:23 2014 +1000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1275,860b923b316ea7fee6eb294dc0ecbc916e510b25,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jul 17 13:59:16 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1276,860b923b316ea7fee6eb294dc0ecbc916e510b25,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jul 17 13:59:16 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1277,860b923b316ea7fee6eb294dc0ecbc916e510b25,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jul 17 13:59:16 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1278,860b923b316ea7fee6eb294dc0ecbc916e510b25,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 17 13:59:16 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1279,860b923b316ea7fee6eb294dc0ecbc916e510b25,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 17 13:59:16 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1280,860b923b316ea7fee6eb294dc0ecbc916e510b25,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jul 17 13:59:16 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1281,475e43a2b776ef4b962357b20c8013785b48247e,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 7 16:49:46 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1282,475e43a2b776ef4b962357b20c8013785b48247e,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Dec 7 16:49:46 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1283,b741751f8d0ca7a59149b853a3ee2520e1eace6e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 18 18:47:35 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1284,b741751f8d0ca7a59149b853a3ee2520e1eace6e,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Dec 18 18:47:35 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1285,073155174d9a656cfee8507a13302c686d90a5de,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 1 17:14:48 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1286,073155174d9a656cfee8507a13302c686d90a5de,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Oct 1 17:14:48 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1287,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 11:52:27 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1288,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 11:52:27 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1289,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 11:52:27 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1290,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 11:52:27 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1291,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Mon Jul 18 11:52:27 2016 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1292,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 11:52:27 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1293,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 11:52:27 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1294,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 11:52:27 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1295,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 11:52:27 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1296,b9565b1842c31d725f28d5fa22776cc99ee96796,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Jul 18 11:52:27 2016 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1297,f93512b7e110c5eb291464d2a45ca9ccde4be809,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 7 18:40:40 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1298,f93512b7e110c5eb291464d2a45ca9ccde4be809,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 7 18:40:40 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1299,4f7600ab37b264aabe7da884e86dd2a91c1f82e7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 16 12:16:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1300,4f7600ab37b264aabe7da884e86dd2a91c1f82e7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jul 16 12:16:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1301,4f7600ab37b264aabe7da884e86dd2a91c1f82e7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Jul 16 12:16:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1302,4f7600ab37b264aabe7da884e86dd2a91c1f82e7,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jul 16 12:16:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1303,aac739f262be67252196efa0bdba64eb7424d445,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1304,aac739f262be67252196efa0bdba64eb7424d445,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1305,aac739f262be67252196efa0bdba64eb7424d445,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1306,aac739f262be67252196efa0bdba64eb7424d445,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1307,aac739f262be67252196efa0bdba64eb7424d445,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1308,aac739f262be67252196efa0bdba64eb7424d445,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1309,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Aug 28 10:08:30 2018 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1310,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Aug 28 10:08:30 2018 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1311,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Aug 28 10:08:30 2018 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
1312,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Tue Aug 28 10:08:30 2018 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1313,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1314,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1315,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1316,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1317,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1318,96399ab1de660c9ef044e759786e63255580fe9c,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1319,d4bd5f023899dac68a24993f44adb02c54d5d9e8,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 28 16:43:36 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1320,d4bd5f023899dac68a24993f44adb02c54d5d9e8,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu May 28 16:43:36 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1321,d4bd5f023899dac68a24993f44adb02c54d5d9e8,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 28 16:43:36 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1322,736b960e2df15e35aca9abec3ef6a9bc64ead7b3,components/engine/testing/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",Sat Sep 21 12:14:40 2013 -0700,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
1323,18cc518bbe7419c4403f271087c0012e55965f3d,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Tue Oct 8 01:14:51 2019 +0000,Tue Dec 1 09:47:19 2015 +0100,,1
1324,52fb1313cbb7392ff988c07138721ac603ca64fb,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Tue May 7 11:19:39 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
1325,52fb1313cbb7392ff988c07138721ac603ca64fb,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 7 11:19:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1326,52fb1313cbb7392ff988c07138721ac603ca64fb,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue May 7 11:19:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1327,52fb1313cbb7392ff988c07138721ac603ca64fb,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue May 7 11:19:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1328,52fb1313cbb7392ff988c07138721ac603ca64fb,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue May 7 11:19:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1329,52fb1313cbb7392ff988c07138721ac603ca64fb,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue May 7 11:19:39 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1330,52fb1313cbb7392ff988c07138721ac603ca64fb,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue May 7 11:19:39 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1331,503a6ed4ffd6af08d03275cdb5989d818afcbcff,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1332,503a6ed4ffd6af08d03275cdb5989d818afcbcff,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1333,503a6ed4ffd6af08d03275cdb5989d818afcbcff,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1334,503a6ed4ffd6af08d03275cdb5989d818afcbcff,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1335,503a6ed4ffd6af08d03275cdb5989d818afcbcff,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1336,503a6ed4ffd6af08d03275cdb5989d818afcbcff,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 2 09:56:29 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1337,503a6ed4ffd6af08d03275cdb5989d818afcbcff,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Feb 2 09:56:29 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1338,047286999000f427e7acaac47c0fd5a43c3c7f2f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sat Jul 20 10:32:08 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1339,047286999000f427e7acaac47c0fd5a43c3c7f2f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat Jul 20 10:32:08 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1340,047286999000f427e7acaac47c0fd5a43c3c7f2f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jul 20 10:32:08 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1341,047286999000f427e7acaac47c0fd5a43c3c7f2f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Jul 20 10:32:08 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1342,047286999000f427e7acaac47c0fd5a43c3c7f2f,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Sat Jul 20 10:32:08 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1343,a82c11e041f4eabd84f961906c23d57da2c50e98,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon May 11 22:12:50 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1344,a82c11e041f4eabd84f961906c23d57da2c50e98,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon May 11 22:12:50 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1345,a82c11e041f4eabd84f961906c23d57da2c50e98,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Mon May 11 22:12:50 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1346,a82c11e041f4eabd84f961906c23d57da2c50e98,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon May 11 22:12:50 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1347,429cac7027fcbce4554df1052341daac1db4ec6e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 12 11:47:40 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1348,429cac7027fcbce4554df1052341daac1db4ec6e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jan 12 11:47:40 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1349,2b1fd26fbfade7213d4c92676eb5c6ef7353ac6d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 25 04:19:49 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1350,2b1fd26fbfade7213d4c92676eb5c6ef7353ac6d,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Feb 25 04:19:49 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1351,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1352,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1353,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1354,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1355,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1356,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1357,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1358,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1359,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1360,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1361,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1362,7262ef8faa14c17e9281ddc6988b69dda623e7bc,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Sun Jul 10 11:11:27 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1363,6ae4c9014c47cc292e642bb85211b74fcf01af7a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 24 22:19:50 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1364,6ae4c9014c47cc292e642bb85211b74fcf01af7a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jul 24 22:19:50 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1365,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Thu Dec 20 15:47:24 2018 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1366,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Dec 20 15:47:24 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1367,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 20 15:47:24 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1368,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 20 15:47:24 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
1369,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1370,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1371,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1372,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1373,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1374,0a34cb148d2b08668f092cfb2586efe7bab572a9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 5 12:26:23 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1375,0a34cb148d2b08668f092cfb2586efe7bab572a9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 5 12:26:23 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1376,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1377,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1378,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 7 22:19:46 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1379,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1380,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1381,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1382,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1383,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1384,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1385,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1386,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1387,ac28c835746250e11e4d3282a0bae2577e95a936,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1388,b199d8e0f888f84b122efec40848de695686d7e5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 6 08:41:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1389,b199d8e0f888f84b122efec40848de695686d7e5,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed May 6 08:41:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1390,b199d8e0f888f84b122efec40848de695686d7e5,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 6 08:41:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1391,f41baa0c49b69fd8cfdbdec41d8a0d616175b6ef,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 16 09:45:37 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1392,f41baa0c49b69fd8cfdbdec41d8a0d616175b6ef,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 16 09:45:37 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1393,47b1490da36cf1845f3c9f392b83de315704a61b,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Nov 5 16:48:09 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
1394,47b1490da36cf1845f3c9f392b83de315704a61b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Nov 5 16:48:09 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1395,47b1490da36cf1845f3c9f392b83de315704a61b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Nov 5 16:48:09 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1396,47b1490da36cf1845f3c9f392b83de315704a61b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1397,47b1490da36cf1845f3c9f392b83de315704a61b,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1398,47b1490da36cf1845f3c9f392b83de315704a61b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1399,47b1490da36cf1845f3c9f392b83de315704a61b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1400,47b1490da36cf1845f3c9f392b83de315704a61b,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1401,47b1490da36cf1845f3c9f392b83de315704a61b,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Nov 5 16:48:09 2018 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1402,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Oct 19 00:30:47 2016 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1403,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1404,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 00:30:47 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1405,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1406,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 00:30:47 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1407,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1408,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 00:30:47 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1409,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1410,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 00:30:47 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1411,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1412,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Wed Oct 19 00:30:47 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1413,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1414,ab7b12335604ab80c22c35851bb20c41cc1b0da1,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Dec 23 17:32:32 2019 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1415,ab7b12335604ab80c22c35851bb20c41cc1b0da1,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Dec 23 17:32:32 2019 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1416,ab7b12335604ab80c22c35851bb20c41cc1b0da1,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Dec 23 17:32:32 2019 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1417,ab7b12335604ab80c22c35851bb20c41cc1b0da1,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Dec 23 17:32:32 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1418,ab7b12335604ab80c22c35851bb20c41cc1b0da1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Dec 23 17:32:32 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1419,ab7b12335604ab80c22c35851bb20c41cc1b0da1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Dec 23 17:32:32 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1420,8e1d3b052252a4dac865fa1bb1810b1edf3625cd,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 11 13:01:30 2016 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1421,8e1d3b052252a4dac865fa1bb1810b1edf3625cd,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 11 13:01:30 2016 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1422,8e1d3b052252a4dac865fa1bb1810b1edf3625cd,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 11 13:01:30 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1423,8e1d3b052252a4dac865fa1bb1810b1edf3625cd,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 11 13:01:30 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1424,8e1d3b052252a4dac865fa1bb1810b1edf3625cd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1425,8e1d3b052252a4dac865fa1bb1810b1edf3625cd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1426,8e1d3b052252a4dac865fa1bb1810b1edf3625cd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1427,8e1d3b052252a4dac865fa1bb1810b1edf3625cd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1428,8e1d3b052252a4dac865fa1bb1810b1edf3625cd,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1429,2c409e6dd8414f9d2ad96062490ff071195a387b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 9 14:44:14 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1430,2c409e6dd8414f9d2ad96062490ff071195a387b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 9 14:44:14 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1431,2c409e6dd8414f9d2ad96062490ff071195a387b,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Mon Mar 9 14:44:14 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1432,7d2e2990e3bfed9762cf23f365decd7df26a6d90,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 20 20:40:19 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1433,7d2e2990e3bfed9762cf23f365decd7df26a6d90,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 20 20:40:19 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1434,83fc2cf8e78cd875beeed9de179bde06b4bad3b7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 11 14:29:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1435,83fc2cf8e78cd875beeed9de179bde06b4bad3b7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 11 14:29:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1436,83fc2cf8e78cd875beeed9de179bde06b4bad3b7,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Nov 11 14:29:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1437,83fc2cf8e78cd875beeed9de179bde06b4bad3b7,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Nov 11 14:29:02 2015 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
1438,88e80730cfb49d52b5a1dab22e5286609f90e527,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 20 22:06:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1439,88e80730cfb49d52b5a1dab22e5286609f90e527,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 20 22:06:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1440,88e80730cfb49d52b5a1dab22e5286609f90e527,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Mon Apr 20 22:06:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1441,1fcfa3c1aabd517aca3f04b2e72dc1a10dc04db5,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 22:41:27 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1442,1fcfa3c1aabd517aca3f04b2e72dc1a10dc04db5,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 22:41:27 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1443,ac2b82954f8a6ca82ef155d4fc3df0760605b3d2,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 23:28:24 2016 +0530,Fri Jun 21 19:42:17 2013 -0700,,1
1444,ac2b82954f8a6ca82ef155d4fc3df0760605b3d2,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 29 23:28:24 2016 +0530,Fri Jun 21 19:42:17 2013 -0700,,1
1445,8d563825a16fd94b54fa84114c3320dee3a42445,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 4 21:12:18 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1446,301cefd6fc2c77ab4bb642356fbe5ac9e176d215,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sun May 3 02:03:01 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1447,301cefd6fc2c77ab4bb642356fbe5ac9e176d215,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun May 3 02:03:01 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1448,301cefd6fc2c77ab4bb642356fbe5ac9e176d215,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sun May 3 02:03:01 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1449,301cefd6fc2c77ab4bb642356fbe5ac9e176d215,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sun May 3 02:03:01 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1450,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1451,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1452,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1453,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1454,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1455,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1456,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1457,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1458,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1459,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1460,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1461,ba23c7ef71ae002e1909881a245e72a6f45768ba,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1462,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Feb 16 13:51:30 2018 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
1463,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
1464,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1465,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1466,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1467,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1468,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Fri Feb 16 13:51:30 2018 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1469,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1470,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1471,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1472,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1473,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Fri Feb 16 13:51:30 2018 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1474,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1475,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1476,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Feb 16 13:51:30 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1477,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Mar 24 09:18:03 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1478,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1479,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1480,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1481,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1482,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1483,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1484,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1485,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1486,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1487,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1488,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1489,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1490,354272cd569efce8f34610ab129b8ac2f41d0474,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 23 13:11:45 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1491,354272cd569efce8f34610ab129b8ac2f41d0474,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 23 13:11:45 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1492,3c66acc1395b28e0ba740292af624f103a65c986,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Sat Aug 19 21:23:38 2017 +0700,Tue Dec 1 09:47:19 2015 +0100,,1
1493,0017c3b28a1dbd57177830cd40fc2ced01f05f40,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Apr 30 15:30:42 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1494,0017c3b28a1dbd57177830cd40fc2ced01f05f40,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Apr 30 15:30:42 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1495,0017c3b28a1dbd57177830cd40fc2ced01f05f40,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Apr 30 15:30:42 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1496,bf729dca8bd9fd81d46c13280bf3ac22f6e1b4c3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 19 23:55:28 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1497,bf729dca8bd9fd81d46c13280bf3ac22f6e1b4c3,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon May 19 23:55:28 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1498,f5fbec30c07fa15efe6ae2f6147f326f62d2686f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jun 24 14:31:04 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1499,f5fbec30c07fa15efe6ae2f6147f326f62d2686f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jun 24 14:31:04 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1500,66d82094557af000c672ff5df477a5ef9001a06a,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat May 16 15:03:55 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1501,66d82094557af000c672ff5df477a5ef9001a06a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat May 16 15:03:55 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1502,66d82094557af000c672ff5df477a5ef9001a06a,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sat May 16 15:03:55 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1503,66d82094557af000c672ff5df477a5ef9001a06a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sat May 16 15:03:55 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1504,66d82094557af000c672ff5df477a5ef9001a06a,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sat May 16 15:03:55 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1505,66d82094557af000c672ff5df477a5ef9001a06a,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat May 16 15:03:55 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1506,66d82094557af000c672ff5df477a5ef9001a06a,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat May 16 15:03:55 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1507,dd5b8c65d451a6d8f7e9e06c90db76811019aeed,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 27 09:33:42 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1508,dd5b8c65d451a6d8f7e9e06c90db76811019aeed,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",Tue Jan 27 09:33:42 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1509,dd5b8c65d451a6d8f7e9e06c90db76811019aeed,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 27 09:33:42 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1510,c7e970855b91bdf20bb8ca493b12325565885f36,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Dec 1 21:31:28 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1511,c57100a022149cf6ba7b4c604a36d7bb6425f7d8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 29 19:42:28 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1512,c57100a022149cf6ba7b4c604a36d7bb6425f7d8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Jan 29 19:42:28 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1513,c57100a022149cf6ba7b4c604a36d7bb6425f7d8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jan 29 19:42:28 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1514,6500d184c6dee866f299e3ab5f41168dc150079a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1515,6500d184c6dee866f299e3ab5f41168dc150079a,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1516,6500d184c6dee866f299e3ab5f41168dc150079a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1517,6500d184c6dee866f299e3ab5f41168dc150079a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1518,6500d184c6dee866f299e3ab5f41168dc150079a,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1519,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1520,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1521,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1522,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1523,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1524,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Mar 30 22:03:10 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1525,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1526,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1527,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1528,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1529,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1530,1917da0dad3be70acacbc5b24a094c37c8a2d6c4,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1531,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1532,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1533,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1534,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1535,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1536,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1537,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1538,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed May 4 13:09:53 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1539,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1540,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Wed May 4 13:09:53 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1541,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1542,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1543,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Wed May 4 13:09:53 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1544,783763f84c129835e740de13d9c01bc2d30262d3,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1545,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1546,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Wed May 11 15:25:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1547,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1548,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1549,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Wed May 11 15:25:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1550,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1551,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1552,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1553,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1554,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1555,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1556,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1557,f15ebde7e0ba018c2c908ea3eb2005c7fc83be8d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1558,44b4b488aa4fbfc32578f584b2368a848b344f05,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 17 14:35:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1559,44b4b488aa4fbfc32578f584b2368a848b344f05,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 17 14:35:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1560,44b4b488aa4fbfc32578f584b2368a848b344f05,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jul 17 14:35:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1561,69c59ed353bb96d4a2d8e824d9cd643671dca178,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Mar 9 18:24:49 2015 -0600,Fri Feb 27 22:37:25 2015 -0700,,1
1562,9327ca0955ad75cc1beb759784326304123c6b05,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",Mon Aug 26 15:51:22 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1563,7f0a3ef787b0ad0a9514e6395f650ed49b7bc515,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 5 12:32:43 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1564,7f0a3ef787b0ad0a9514e6395f650ed49b7bc515,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Aug 5 12:32:43 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1565,99471f9ab2cc66ce7db4de59150068beb22ab7f3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 27 12:56:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1566,99471f9ab2cc66ce7db4de59150068beb22ab7f3,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 27 12:56:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1567,99471f9ab2cc66ce7db4de59150068beb22ab7f3,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Oct 27 12:56:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1568,497f1fa7f5e3d3637c934a6f55d5cd10ea76904b,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 23 09:01:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1569,497f1fa7f5e3d3637c934a6f55d5cd10ea76904b,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 23 09:01:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1570,497f1fa7f5e3d3637c934a6f55d5cd10ea76904b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 23 09:01:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1571,497f1fa7f5e3d3637c934a6f55d5cd10ea76904b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 23 09:01:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1572,497f1fa7f5e3d3637c934a6f55d5cd10ea76904b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 23 09:01:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1573,497f1fa7f5e3d3637c934a6f55d5cd10ea76904b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 23 09:01:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1574,497f1fa7f5e3d3637c934a6f55d5cd10ea76904b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 23 09:01:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1575,497f1fa7f5e3d3637c934a6f55d5cd10ea76904b,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 23 09:01:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1576,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1577,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1578,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1579,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1580,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1581,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1582,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1583,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1584,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1585,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1586,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1587,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1588,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1589,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1590,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1591,6a7d53836d6d74b0124e371d122153f326042207,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1592,2dde49a6073ff03fb10285be48a7be611a959dd7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 9 20:36:58 2014 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
1593,2dde49a6073ff03fb10285be48a7be611a959dd7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 9 20:36:58 2014 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
1594,8afc09fa08b4fb45d4bb115d8d1f8d99b225038f,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Thu Nov 10 12:45:56 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
1595,ba4e682cde6ad56a7fe88c5e61c976e1db93338b,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.6
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",Wed Nov 6 20:05:26 2013 -0800,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
1596,ba4e682cde6ad56a7fe88c5e61c976e1db93338b,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.4
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",Wed Nov 6 20:05:26 2013 -0800,Fri Oct 18 22:33:16 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
1597,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1598,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1599,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Aug 1 14:26:13 2017 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1600,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1601,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1602,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1603,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1604,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1605,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1606,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1607,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1608,8fb9073dbb921f2bcd407f3009517b7cbfb302f9,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1609,9f1a5d95f2b8d7ec13aebd300a902be43d1a009c,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 22 12:32:10 2015 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1610,9f1a5d95f2b8d7ec13aebd300a902be43d1a009c,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Nov 22 12:32:10 2015 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1611,9f1a5d95f2b8d7ec13aebd300a902be43d1a009c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 22 12:32:10 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1612,9f1a5d95f2b8d7ec13aebd300a902be43d1a009c,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Nov 22 12:32:10 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1613,7bf2abf2b60624c992c7712eea7914c9e743b97b,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Fri Feb 27 01:10:50 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1614,7bf2abf2b60624c992c7712eea7914c9e743b97b,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Fri Feb 27 01:10:50 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1615,a87f17c01b656ee15599ca926f8d2943c0aa4741,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 6 15:13:24 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1616,a87f17c01b656ee15599ca926f8d2943c0aa4741,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 6 15:13:24 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1617,a87f17c01b656ee15599ca926f8d2943c0aa4741,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 6 15:13:24 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1618,a87f17c01b656ee15599ca926f8d2943c0aa4741,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 6 15:13:24 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1619,a87f17c01b656ee15599ca926f8d2943c0aa4741,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 6 15:13:24 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1620,a87f17c01b656ee15599ca926f8d2943c0aa4741,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 6 15:13:24 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1621,a87f17c01b656ee15599ca926f8d2943c0aa4741,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 6 15:13:24 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1622,a87f17c01b656ee15599ca926f8d2943c0aa4741,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 6 15:13:24 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1623,dd52c68ae4d8dbcbb34a4ba7983eb160dbfe37fc,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed May 22 16:49:55 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1624,dd52c68ae4d8dbcbb34a4ba7983eb160dbfe37fc,components/engine/Dockerfile.buildkit,components/engine/Dockerfile.buildkit,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed May 22 16:49:55 2019 -0700,Wed May 22 16:49:55 2019 -0700,Fri Jun 7 10:10:31 2019 -0700,1
1625,dd52c68ae4d8dbcbb34a4ba7983eb160dbfe37fc,components/engine/Dockerfile.buildkit,components/engine/Dockerfile.buildkit,"# Options for hack/validate/gometalinter
",Wed May 22 16:49:55 2019 -0700,Wed May 22 16:49:55 2019 -0700,Fri Jun 7 10:10:31 2019 -0700,1
1626,2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1627,2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1628,2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1629,2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1630,2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1631,2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 16:04:36 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1632,2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 16:04:36 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1633,03dfb7ff42b410ef08081b49e470653295419c05,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 8 16:44:10 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1634,03dfb7ff42b410ef08081b49e470653295419c05,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jan 8 16:44:10 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1635,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 00:42:35 2016 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1636,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1637,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Thu Sep 8 00:42:35 2016 +0300,Tue Dec 1 09:47:19 2015 +0100,,1
1638,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 00:42:35 2016 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1639,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1640,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 00:42:35 2016 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1641,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1642,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 8 00:42:35 2016 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1643,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1644,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Sep 8 00:42:35 2016 +0300,Fri Feb 27 22:37:25 2015 -0700,,1
1645,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 00:42:35 2016 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1646,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1647,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jun 13 09:21:50 2015 -0700,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1648,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Jun 13 09:21:50 2015 -0700,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1649,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jun 13 09:21:50 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1650,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Jun 13 09:21:50 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1651,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Jun 13 09:21:50 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1652,4ee32ba904e8ab9af44d37d414b3800a37e4caa7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 1 17:21:09 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1653,4ee32ba904e8ab9af44d37d414b3800a37e4caa7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jun 1 17:21:09 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1654,4ee32ba904e8ab9af44d37d414b3800a37e4caa7,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 1 17:21:09 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1655,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 31 11:22:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1656,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1657,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Mon Oct 31 11:22:28 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
1658,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Oct 31 11:22:28 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1659,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1660,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Oct 31 11:22:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1661,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1662,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 31 11:22:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1663,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1664,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 31 11:22:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1665,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1666,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 31 11:22:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1667,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1668,d372e2ab22a2ef14805bc4aebbfc25f1d36e036d,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Feb 26 09:46:55 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1669,d372e2ab22a2ef14805bc4aebbfc25f1d36e036d,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Feb 26 09:46:55 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1670,67781f51915f41e441b1efa27edd709679af3fd2,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 5 15:20:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1671,67781f51915f41e441b1efa27edd709679af3fd2,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jun 5 15:20:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1672,67781f51915f41e441b1efa27edd709679af3fd2,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 5 15:20:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1673,66c2c983d63e518293237d7ce2230c547693dd7d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 1 15:23:33 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1674,66c2c983d63e518293237d7ce2230c547693dd7d,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Dec 1 15:23:33 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1675,d54200583f029be01180f58a6c155ec81deee662,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat May 16 18:41:46 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1676,a19c2a666bc0e6265c0de54cd88da453c316e6a2,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Apr 8 23:24:43 2019 +0000,Fri Sep 8 16:43:04 2017 +0200,,1
1677,a19c2a666bc0e6265c0de54cd88da453c316e6a2,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1678,a19c2a666bc0e6265c0de54cd88da453c316e6a2,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1679,a19c2a666bc0e6265c0de54cd88da453c316e6a2,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1680,a19c2a666bc0e6265c0de54cd88da453c316e6a2,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1681,a19c2a666bc0e6265c0de54cd88da453c316e6a2,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1682,a19c2a666bc0e6265c0de54cd88da453c316e6a2,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Apr 8 23:24:43 2019 +0000,Tue Dec 1 09:47:19 2015 +0100,,1
1683,a19c2a666bc0e6265c0de54cd88da453c316e6a2,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Apr 8 23:24:43 2019 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1684,a19c2a666bc0e6265c0de54cd88da453c316e6a2,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Apr 8 23:24:43 2019 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1685,7cbc25f5ba95eeea670a91d47504b823b9e0f04d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 31 12:27:50 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1686,7cbc25f5ba95eeea670a91d47504b823b9e0f04d,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 31 12:27:50 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1687,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Apr 17 18:18:46 2017 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
1688,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
1689,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1690,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1691,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1692,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1693,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1694,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1695,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1696,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1697,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1698,a8b3ac7249227d42799924b538781a42b2aab9d3,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1699,14018d9149a323f1dd497b4a454339ea0ac042cf,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Sun Nov 20 14:14:51 2016 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
1700,14018d9149a323f1dd497b4a454339ea0ac042cf,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sun Nov 20 14:14:51 2016 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
1701,14018d9149a323f1dd497b4a454339ea0ac042cf,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 20 14:14:51 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1702,14018d9149a323f1dd497b4a454339ea0ac042cf,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sun Nov 20 14:14:51 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1703,14018d9149a323f1dd497b4a454339ea0ac042cf,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 20 14:14:51 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1704,14018d9149a323f1dd497b4a454339ea0ac042cf,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sun Nov 20 14:14:51 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1705,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1706,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1707,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1708,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1709,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1710,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1711,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Jun 27 11:45:05 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1712,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1713,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1714,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1715,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1716,e9a348a21b0b7ebc570d3e9dc55ff2c9fbb3570f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1717,96f809cfc7bfbf6e3b91859d228dfeefe9c1536f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 13:47:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1718,96f809cfc7bfbf6e3b91859d228dfeefe9c1536f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 13:47:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1719,2ad1ba753b2e24bc8be9c44df1db937db1e5caee,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Aug 10 12:13:38 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1720,2ad1ba753b2e24bc8be9c44df1db937db1e5caee,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Aug 10 12:13:38 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1721,2ad1ba753b2e24bc8be9c44df1db937db1e5caee,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Mon Aug 10 12:13:38 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1722,2ad1ba753b2e24bc8be9c44df1db937db1e5caee,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Aug 10 12:13:38 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1723,2ad1ba753b2e24bc8be9c44df1db937db1e5caee,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Aug 10 12:13:38 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1724,2ad1ba753b2e24bc8be9c44df1db937db1e5caee,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Aug 10 12:13:38 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1725,2ad1ba753b2e24bc8be9c44df1db937db1e5caee,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Aug 10 12:13:38 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1726,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1727,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1728,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1729,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1730,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1731,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Dec 19 09:45:10 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
1732,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Dec 19 09:45:10 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1733,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Dec 19 09:45:10 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1734,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Dec 19 09:45:10 2018 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1735,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1736,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1737,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1738,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1739,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1740,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1741,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Fri Feb 23 22:24:47 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1742,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1743,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1744,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Fri Feb 23 22:24:47 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1745,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1746,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1747,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Feb 23 22:24:47 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1748,ac8d6423ee0cdfb35758f3dabf4221404c8ca551,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Mar 25 13:19:13 2016 +0900,Fri Feb 27 22:37:25 2015 -0700,,1
1749,d1ba4251b4b028a62efb204893a19ebfede3ee7a,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Sep 9 23:19:03 2019 +0000,Tue Dec 1 09:47:19 2015 +0100,,1
1750,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 7 11:02:51 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1751,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1752,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Wed Sep 7 11:02:51 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1753,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1754,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 7 11:02:51 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1755,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1756,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 7 11:02:51 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1757,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1758,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 7 11:02:51 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1759,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1760,3ebcf90785255b0a68a5874de2e4a24a19e95f9c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 14:02:06 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1761,3ebcf90785255b0a68a5874de2e4a24a19e95f9c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 14:02:06 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1762,0f4b49bea82d2dc2fb6004befdde9f1d380cb527,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",Tue Jan 14 19:23:30 2014 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1763,6ada5204458e84e69242c9c79f3b0d4fcc846e16,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 4 18:51:08 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1764,6ada5204458e84e69242c9c79f3b0d4fcc846e16,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 4 18:51:08 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1765,6ada5204458e84e69242c9c79f3b0d4fcc846e16,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Dec 4 18:51:08 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1766,055c08f69c65d11e0d73604c4784b80ff60a045e,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat Apr 4 00:44:25 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1767,055c08f69c65d11e0d73604c4784b80ff60a045e,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sat Apr 4 00:44:25 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1768,055c08f69c65d11e0d73604c4784b80ff60a045e,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat Apr 4 00:44:25 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1769,055c08f69c65d11e0d73604c4784b80ff60a045e,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Apr 4 00:44:25 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1770,055c08f69c65d11e0d73604c4784b80ff60a045e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Apr 4 00:44:25 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1771,055c08f69c65d11e0d73604c4784b80ff60a045e,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sat Apr 4 00:44:25 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1772,055c08f69c65d11e0d73604c4784b80ff60a045e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sat Apr 4 00:44:25 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1773,6150221be34e401da3514cab1e8ccb6eabc6f812,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1774,6150221be34e401da3514cab1e8ccb6eabc6f812,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1775,6150221be34e401da3514cab1e8ccb6eabc6f812,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1776,6150221be34e401da3514cab1e8ccb6eabc6f812,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1777,6150221be34e401da3514cab1e8ccb6eabc6f812,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1778,6150221be34e401da3514cab1e8ccb6eabc6f812,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1779,3fa1f9cccb1bdd1f3186ba69c61ad8a62b19b58b,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Wed Sep 12 14:58:01 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
1780,3fa1f9cccb1bdd1f3186ba69c61ad8a62b19b58b,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Wed Sep 12 14:58:01 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
1781,3fa1f9cccb1bdd1f3186ba69c61ad8a62b19b58b,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Wed Sep 12 14:58:01 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
1782,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1783,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1784,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1785,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1786,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1787,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1788,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 11:51:22 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1789,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 11:51:22 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1790,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1791,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1792,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1793,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1794,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1795,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1796,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1797,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1798,7e8cf8c782dd824f71cc9ae0b16f42fbd884e4da,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Feb 27 22:37:25 2015 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1799,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1800,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1801,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1802,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1803,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1804,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1805,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1806,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1807,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1808,c25f7e149be31f6bfc3b9547c27246c43e53f3ac,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1809,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 14:38:47 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1810,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1811,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 14:38:47 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1812,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1813,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Jun 27 14:38:47 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1814,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 14:38:47 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1815,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1816,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 14:38:47 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1817,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1818,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Jun 27 14:38:47 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1819,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1820,38148174724822a308780246fce0c75101047a3a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 13:06:37 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1821,38148174724822a308780246fce0c75101047a3a,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 13:06:37 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1822,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1823,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1824,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1825,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1826,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1827,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1828,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1829,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1830,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1831,3366bf6a8a922a0666b7bbc9c3fdb7c4974c9884,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1832,2a1e2c7de1d97b0f8123e0e7d0cd79d4efa10c80,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 17:34:24 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1833,2a1e2c7de1d97b0f8123e0e7d0cd79d4efa10c80,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Fri Apr 15 17:34:24 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1834,2a1e2c7de1d97b0f8123e0e7d0cd79d4efa10c80,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 17:34:24 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1835,1d51022fe81c77d3b394b80996310fa5e6812c1e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 14 22:03:52 2018 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1836,1d51022fe81c77d3b394b80996310fa5e6812c1e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Wed Feb 14 22:03:52 2018 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1837,1d51022fe81c77d3b394b80996310fa5e6812c1e,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 14 22:03:52 2018 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1838,1d51022fe81c77d3b394b80996310fa5e6812c1e,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Feb 14 22:03:52 2018 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1839,aac90cd92e4389ce099b59cb7313755538ca4d48,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",Sun Oct 27 12:13:03 2013 -0700,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
1840,6b24ea22aec08e05b0eab4e71b6c23e79307d3a3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 20 23:34:48 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1841,6b24ea22aec08e05b0eab4e71b6c23e79307d3a3,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue May 20 23:34:48 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1842,917596f19e8583d745cb9f2706e505925b5ca381,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Apr 16 11:39:54 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1843,917596f19e8583d745cb9f2706e505925b5ca381,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Apr 16 11:39:54 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1844,f4e6667402d8e434946797208fec769b644ce4cf,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1845,f4e6667402d8e434946797208fec769b644ce4cf,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1846,f4e6667402d8e434946797208fec769b644ce4cf,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1847,f4e6667402d8e434946797208fec769b644ce4cf,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1848,f4e6667402d8e434946797208fec769b644ce4cf,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1849,f4e6667402d8e434946797208fec769b644ce4cf,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1850,64a1b4f929c078ce1cc7dc979c197dc188579334,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 4 16:22:59 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1851,64a1b4f929c078ce1cc7dc979c197dc188579334,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Oct 4 16:22:59 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1852,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1853,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1854,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1855,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1856,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Tue Mar 15 11:12:09 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1857,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1858,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1859,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1860,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1861,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1862,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1863,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Tue Mar 15 11:12:09 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1864,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1865,69df5cc0399c7e7c5857f744b9c01b71ea983727,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 14 06:16:41 2014 +0100,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1866,69df5cc0399c7e7c5857f744b9c01b71ea983727,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Nov 14 06:16:41 2014 +0100,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1867,69df5cc0399c7e7c5857f744b9c01b71ea983727,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 14 06:16:41 2014 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1868,69df5cc0399c7e7c5857f744b9c01b71ea983727,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Nov 14 06:16:41 2014 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1869,7075a0e2844e4092b6d6830d1a7b69f09f7238a9,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 17 19:05:52 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1870,7075a0e2844e4092b6d6830d1a7b69f09f7238a9,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Feb 17 19:05:52 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1871,747ee646ecb7811edab25a324624bf17faa5eedd,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Jul 22 17:22:13 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1872,747ee646ecb7811edab25a324624bf17faa5eedd,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Jul 22 17:22:13 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1873,747ee646ecb7811edab25a324624bf17faa5eedd,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Jul 22 17:22:13 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1874,f048e88551f5b154ef9fc428a2339346d0e9ffc7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 16:27:53 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1875,f048e88551f5b154ef9fc428a2339346d0e9ffc7,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 16:27:53 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1876,a2dd40c398bbb2b5a5f4415b1b80110c7b371f45,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 28 14:35:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1877,a2dd40c398bbb2b5a5f4415b1b80110c7b371f45,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Aug 28 14:35:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1878,a2dd40c398bbb2b5a5f4415b1b80110c7b371f45,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 28 14:35:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1879,c48adc6929a1f41dd086e3f9b91af773bbd2c8f2,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 13 11:46:02 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
1880,c48adc6929a1f41dd086e3f9b91af773bbd2c8f2,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Mar 13 11:46:02 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
1881,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 5 02:58:14 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1882,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 5 02:58:14 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1883,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 5 02:58:14 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1884,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 5 02:58:14 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1885,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 5 02:58:14 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1886,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 5 02:58:14 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1887,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Fri Jan 5 02:58:14 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1888,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 5 02:58:14 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1889,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Fri Jan 5 02:58:14 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1890,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 5 02:58:14 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1891,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Jan 5 02:58:14 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1892,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 12 10:38:55 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1893,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1894,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Sep 12 10:38:55 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1895,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1896,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Sep 12 10:38:55 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1897,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 12 10:38:55 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1898,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1899,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 12 10:38:55 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1900,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1901,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 12 10:38:55 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1902,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1903,1d1c9e39ccc23ed88e761fa3129e72c48fed5fa3,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 20 15:43:06 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
1904,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Apr 15 12:45:35 2016 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1905,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1906,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Fri Apr 15 12:45:35 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1907,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1908,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1909,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1910,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1911,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1912,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1913,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1914,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1915,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1916,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1917,a55662ddc92796225da9a986993a062f3fcbb660,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1918,a55662ddc92796225da9a986993a062f3fcbb660,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1919,a55662ddc92796225da9a986993a062f3fcbb660,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1920,a55662ddc92796225da9a986993a062f3fcbb660,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1921,a55662ddc92796225da9a986993a062f3fcbb660,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1922,eb437391da197986d4e781e47e60ad88829cb867,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1923,eb437391da197986d4e781e47e60ad88829cb867,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1924,eb437391da197986d4e781e47e60ad88829cb867,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1925,eb437391da197986d4e781e47e60ad88829cb867,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1926,eb437391da197986d4e781e47e60ad88829cb867,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1927,853ddc3c312eedfbf5825d5edf58e3551dbfdd23,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Mar 11 10:08:51 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1928,853ddc3c312eedfbf5825d5edf58e3551dbfdd23,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Mar 11 10:08:51 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1929,255fb9b1d6e1629084e874ab3deeeda526aa7ab8,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 30 11:45:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1930,255fb9b1d6e1629084e874ab3deeeda526aa7ab8,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",Fri Jan 30 11:45:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1931,255fb9b1d6e1629084e874ab3deeeda526aa7ab8,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 30 11:45:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1932,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1933,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1934,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1935,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1936,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1937,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1938,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1939,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1940,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.solaris,components/engine/Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",Tue Jun 20 16:39:52 2017 -0400,Tue Jun 7 00:45:21 2016 -0700,Tue Oct 24 14:32:52 2017 -0400,1
1941,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1942,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1943,75f7edc9b6d3db48e524810599193656c42b7a27,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Thu Aug 23 22:53:57 2018 +0000,Thu Aug 23 22:53:57 2018 +0000,Thu Dec 5 14:55:10 2019 +0100,1
1944,75f7edc9b6d3db48e524810599193656c42b7a27,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Thu Aug 23 22:53:57 2018 +0000,Thu Aug 23 22:53:57 2018 +0000,Thu Dec 5 14:55:10 2019 +0100,1
1945,75f7edc9b6d3db48e524810599193656c42b7a27,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-init - TODO move this out, last time we bumped was 2016!
",Thu Aug 23 22:53:57 2018 +0000,Thu Aug 23 22:53:57 2018 +0000,Thu Dec 5 14:55:10 2019 +0100,1
1946,4914ef91f7a108ed48f3e0eb98c703822c5e1fe9,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 16 23:21:08 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1947,4914ef91f7a108ed48f3e0eb98c703822c5e1fe9,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jun 16 23:21:08 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1948,4914ef91f7a108ed48f3e0eb98c703822c5e1fe9,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 16 23:21:08 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1949,33aa0c2b851e1b478f1e55dc5e4a45cc8ceeac41,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Mon Sep 30 13:57:30 2013 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
1950,bcd131a7aaa378d3a5f210f8330d8d41b8f13d5c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 19:34:27 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1951,bcd131a7aaa378d3a5f210f8330d8d41b8f13d5c,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 19:34:27 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1952,b9794db2727ca701066c622dec1ae353ced24ba4,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 7 14:09:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1953,b9794db2727ca701066c622dec1ae353ced24ba4,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 7 14:09:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1954,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1955,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1956,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1957,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1958,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1959,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1960,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1961,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1962,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1963,322ee8f8125c12cfb4236cd56a3a3ff59fe6b6de,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1964,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1965,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1966,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1967,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1968,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1969,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1970,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Jan 16 10:49:18 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1971,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1972,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1973,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Jan 16 10:49:18 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1974,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Jan 16 10:49:18 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
1975,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
1976,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1977,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Tue Jan 16 10:49:18 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1978,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1979,e9c2f9fe7767f6893998ef723acbf9c866dbfa69,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jan 16 10:49:18 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1980,a029475e13503b2dcf3707691efb3af56e2be472,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Aug 28 12:43:35 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1981,a029475e13503b2dcf3707691efb3af56e2be472,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Aug 28 12:43:35 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1982,6ee5c993f071246368a349e28f538726ac3b0bc2,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:15:03 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
1983,47f750ae1046f098f1676ed94176c955f87c628f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Feb 9 15:19:08 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1984,47f750ae1046f098f1676ed94176c955f87c628f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Feb 9 15:19:08 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1985,19caa36bb6232b34a500265cf8c8f46d89ac4d79,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 30 15:47:54 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1986,19caa36bb6232b34a500265cf8c8f46d89ac4d79,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon May 30 15:47:54 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1987,19caa36bb6232b34a500265cf8c8f46d89ac4d79,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon May 30 15:47:54 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1988,7bef93723c911971da6fbb12ad26697205d1a9e1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 12 10:52:00 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1989,7bef93723c911971da6fbb12ad26697205d1a9e1,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu May 12 10:52:00 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1990,2652782fc983bd35c9e2a7a888c3ebb595cc31e1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 11 08:51:06 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1991,2652782fc983bd35c9e2a7a888c3ebb595cc31e1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Sep 11 08:51:06 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1992,78d72e085706a5a8f0b909e1efc15d45559a1a99,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 4 13:20:01 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1993,78d72e085706a5a8f0b909e1efc15d45559a1a99,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon May 4 13:20:01 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1994,78d72e085706a5a8f0b909e1efc15d45559a1a99,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon May 4 13:20:01 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1995,be24a20fff04d3aa60dfafd747b5497246ecb3e0,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Nov 1 10:42:19 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
1996,be24a20fff04d3aa60dfafd747b5497246ecb3e0,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Nov 1 10:42:19 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1997,be24a20fff04d3aa60dfafd747b5497246ecb3e0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Nov 1 10:42:19 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1998,be24a20fff04d3aa60dfafd747b5497246ecb3e0,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Nov 1 10:42:19 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1999,be24a20fff04d3aa60dfafd747b5497246ecb3e0,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Nov 1 10:42:19 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2000,b527679d3de004d4fade80616f7a54b1dec4f3b5,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Sat Apr 18 12:59:20 2015 +0200,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2001,b527679d3de004d4fade80616f7a54b1dec4f3b5,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Sat Apr 18 12:59:20 2015 +0200,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2002,e3d2b9b31445212cc0ef3ca4a1437835a4e59d32,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Apr 18 16:44:33 2017 -0500,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2003,e3d2b9b31445212cc0ef3ca4a1437835a4e59d32,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Apr 18 16:44:33 2017 -0500,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2004,221acbe18c723f6193f9e7b89195e67efc720740,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 16 14:15:57 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2005,221acbe18c723f6193f9e7b89195e67efc720740,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Apr 16 14:15:57 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2006,07d60783cbbd01ad3e237aa197404b724a8c5ef5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 15 13:19:32 2015 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
2007,07d60783cbbd01ad3e237aa197404b724a8c5ef5,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 15 13:19:32 2015 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
2008,07d60783cbbd01ad3e237aa197404b724a8c5ef5,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 15 13:19:32 2015 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
2009,119882d0e43a96d4036fbc4948f1bd8d65d329da,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Feb 25 22:35:08 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2010,119882d0e43a96d4036fbc4948f1bd8d65d329da,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Feb 25 22:35:08 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2011,c659f5ca429ed77547cb8c2774bee0c2bb9a36e5,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Aug 16 10:02:22 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
2012,c659f5ca429ed77547cb8c2774bee0c2bb9a36e5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 16 10:02:22 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2013,c659f5ca429ed77547cb8c2774bee0c2bb9a36e5,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Aug 16 10:02:22 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2014,c659f5ca429ed77547cb8c2774bee0c2bb9a36e5,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Aug 16 10:02:22 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2015,c659f5ca429ed77547cb8c2774bee0c2bb9a36e5,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Aug 16 10:02:22 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2016,c659f5ca429ed77547cb8c2774bee0c2bb9a36e5,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Aug 16 10:02:22 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2017,44554632a387f6410c9e3b40978a9773c5ad5e91,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Dec 1 15:11:10 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2018,9374b2888eb7d8088e0d726191dc9629285e6928,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 14 20:43:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2019,9374b2888eb7d8088e0d726191dc9629285e6928,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Aug 14 20:43:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2020,9374b2888eb7d8088e0d726191dc9629285e6928,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Aug 14 20:43:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2021,1f9824720a27e887211af377911059ab5f9d7e84,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 8 23:07:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2022,1f9824720a27e887211af377911059ab5f9d7e84,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jan 8 23:07:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2023,50c142535c0ba1468c717a1299e3421e39e2e9af,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sun Mar 1 00:31:43 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2024,50c142535c0ba1468c717a1299e3421e39e2e9af,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Mar 1 00:31:43 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2025,50c142535c0ba1468c717a1299e3421e39e2e9af,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sun Mar 1 00:31:43 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2026,50c142535c0ba1468c717a1299e3421e39e2e9af,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sun Mar 1 00:31:43 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2027,8db570e797daad12a8f2c6691fef884ac3d9d324,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 22 16:45:25 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2028,8db570e797daad12a8f2c6691fef884ac3d9d324,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 22 16:45:25 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2029,8db570e797daad12a8f2c6691fef884ac3d9d324,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 22 16:45:25 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2030,6f7d08bf451ac36576f790557c954aab945310bf,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 17 22:36:26 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2031,b0523c12b84eff998a3816d65e51e979975ab300,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 13 10:41:24 2014 +0400,Fri Jun 21 19:42:17 2013 -0700,,1
2032,b0523c12b84eff998a3816d65e51e979975ab300,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Aug 13 10:41:24 2014 +0400,Fri Jun 21 19:42:17 2013 -0700,,1
2033,4d0b394b25cccfaf1b0527a7f85c210421f47959,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 18 15:06:23 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2034,4d0b394b25cccfaf1b0527a7f85c210421f47959,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Dec 18 15:06:23 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2035,46fbf389dad357b475cdbe624dcd96c1fb406f86,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jul 15 14:21:41 2020 +0900,Tue Dec 1 09:47:19 2015 +0100,,1
2036,46fbf389dad357b475cdbe624dcd96c1fb406f86,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jul 15 14:21:41 2020 +0900,Fri Feb 27 22:37:25 2015 -0700,,1
2037,46fbf389dad357b475cdbe624dcd96c1fb406f86,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jul 15 14:21:41 2020 +0900,Fri Feb 27 22:37:25 2015 -0700,,1
2038,46fbf389dad357b475cdbe624dcd96c1fb406f86,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jul 15 14:21:41 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2039,46fbf389dad357b475cdbe624dcd96c1fb406f86,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 15 14:21:41 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2040,46fbf389dad357b475cdbe624dcd96c1fb406f86,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Wed Jul 15 14:21:41 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2041,46fbf389dad357b475cdbe624dcd96c1fb406f86,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jul 15 14:21:41 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2042,5ca82c401df8f0d035205702e2b6848d6afa3910,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 24 20:40:41 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2043,5ca82c401df8f0d035205702e2b6848d6afa3910,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO add linux/386 and linux/arm
",Tue Dec 24 20:40:41 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2044,5ca82c401df8f0d035205702e2b6848d6afa3910,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Dec 24 20:40:41 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2045,b78e8b77566527980c57fbe74c9a4e1eecaad881,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 28 12:56:50 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2046,b78e8b77566527980c57fbe74c9a4e1eecaad881,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Oct 28 12:56:50 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2047,b78e8b77566527980c57fbe74c9a4e1eecaad881,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Oct 28 12:56:50 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2048,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2049,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2050,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2051,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2052,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2053,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2054,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 18 18:28:43 2018 +0000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2055,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 18 18:28:43 2018 +0000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2056,db703b35d897b3576cb65395ff22909a90013c20,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Tue Nov 29 11:06:45 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2057,db703b35d897b3576cb65395ff22909a90013c20,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 29 11:06:45 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2058,e84e5b6b76623c103308db9da20339cf679d4847,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 9 12:00:37 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2059,e84e5b6b76623c103308db9da20339cf679d4847,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jul 9 12:00:37 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2060,e84e5b6b76623c103308db9da20339cf679d4847,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Jul 9 12:00:37 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2061,e84e5b6b76623c103308db9da20339cf679d4847,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jul 9 12:00:37 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2062,e84e5b6b76623c103308db9da20339cf679d4847,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Tue Jul 9 12:00:37 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
2063,e84e5b6b76623c103308db9da20339cf679d4847,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Jul 9 12:00:37 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2064,e84e5b6b76623c103308db9da20339cf679d4847,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Jul 9 12:00:37 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2065,dfefd8fa18a1c254e115d35f1e1a020538500a58,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2066,dfefd8fa18a1c254e115d35f1e1a020538500a58,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2067,dfefd8fa18a1c254e115d35f1e1a020538500a58,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2068,dfefd8fa18a1c254e115d35f1e1a020538500a58,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2069,dfefd8fa18a1c254e115d35f1e1a020538500a58,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2070,50a73ae598ca266ee132f6348c712dc15fe9bde0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 18 09:06:04 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2071,50a73ae598ca266ee132f6348c712dc15fe9bde0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Dec 18 09:06:04 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2072,7a7c9f0f1d41534dd4afd66f7d8fa56e38ed94e1,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",Mon Oct 28 16:51:31 2013 -0700,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2073,7a7c9f0f1d41534dd4afd66f7d8fa56e38ed94e1,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",Mon Oct 28 16:51:31 2013 -0700,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2074,985dd23e4a327e403b2eb97d15bf8ea352beaa4c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2075,985dd23e4a327e403b2eb97d15bf8ea352beaa4c,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2076,985dd23e4a327e403b2eb97d15bf8ea352beaa4c,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2077,985dd23e4a327e403b2eb97d15bf8ea352beaa4c,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2078,985dd23e4a327e403b2eb97d15bf8ea352beaa4c,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2079,985dd23e4a327e403b2eb97d15bf8ea352beaa4c,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2080,3e55897594f52c9153ce01b90cccf61238ca4866,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:20:24 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
2081,fd73e8b011f60170e1117b0f590c15044c8680ca,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 18 15:07:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2082,fd73e8b011f60170e1117b0f590c15044c8680ca,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Feb 18 15:07:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2083,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2084,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2085,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2086,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2087,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2088,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2089,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2090,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2091,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2092,08356f8921ea64f7ecdc59b696ddce08229d87b9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2093,744b9aad657e5a10ab835dd3cbcefb0bf6e16185,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Aug 14 02:27:05 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2094,744b9aad657e5a10ab835dd3cbcefb0bf6e16185,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Aug 14 02:27:05 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2095,744b9aad657e5a10ab835dd3cbcefb0bf6e16185,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Aug 14 02:27:05 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2096,744b9aad657e5a10ab835dd3cbcefb0bf6e16185,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 14 02:27:05 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2097,744b9aad657e5a10ab835dd3cbcefb0bf6e16185,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Aug 14 02:27:05 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2098,744b9aad657e5a10ab835dd3cbcefb0bf6e16185,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Aug 14 02:27:05 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2099,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Oct 24 15:18:58 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
2100,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
2101,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 24 15:18:58 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2102,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2103,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 24 15:18:58 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2104,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2105,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 24 15:18:58 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2106,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2107,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Oct 24 15:18:58 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2108,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2109,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 24 15:18:58 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2110,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2111,d8549f0955dde1589f900b77ff1a36ec74d29114,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Oct 16 10:09:10 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2112,d8549f0955dde1589f900b77ff1a36ec74d29114,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Oct 16 10:09:10 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2113,63569a36d81ca48b4e6ea2d598e73ff2249db2f8,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Nov 5 12:11:49 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2114,63569a36d81ca48b4e6ea2d598e73ff2249db2f8,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Nov 5 12:11:49 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2115,63569a36d81ca48b4e6ea2d598e73ff2249db2f8,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Nov 5 12:11:49 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2116,57c35f0f444cc2b33315f915cc28486eba76929f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Mon Nov 4 15:39:16 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2117,71a3e53c36a746fb520efaa516229d9cb505e1a3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2118,71a3e53c36a746fb520efaa516229d9cb505e1a3,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2119,71a3e53c36a746fb520efaa516229d9cb505e1a3,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2120,71a3e53c36a746fb520efaa516229d9cb505e1a3,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2121,71a3e53c36a746fb520efaa516229d9cb505e1a3,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2122,71a3e53c36a746fb520efaa516229d9cb505e1a3,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2123,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2124,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2125,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2126,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2127,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Thu Feb 15 07:43:44 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2128,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2129,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2130,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2131,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Thu Feb 15 07:43:44 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2132,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2133,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Feb 15 07:43:44 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2134,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2135,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2136,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Thu Feb 15 07:43:44 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2137,7f3c9c3d211b23921585150170638569f09c6921,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Mar 6 22:39:06 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2138,7f3c9c3d211b23921585150170638569f09c6921,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Mar 6 22:39:06 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2139,7f3c9c3d211b23921585150170638569f09c6921,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Fri Mar 6 22:39:06 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2140,7f3c9c3d211b23921585150170638569f09c6921,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Mar 6 22:39:06 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2141,aac8048807a0ef48b53b106bd4f29f1e73704d5c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 21 14:42:58 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2142,aac8048807a0ef48b53b106bd4f29f1e73704d5c,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Dec 21 14:42:58 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2143,bd0f152278ef6dc330dab9cae74ad71a5346510e,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 16 23:01:51 2015 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2144,bd0f152278ef6dc330dab9cae74ad71a5346510e,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 16 23:01:51 2015 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2145,33403f2a862a7a3a5e3eb7033545abefe5d29611,components/cli/dockerfiles/Dockerfile.dev,components/cli/dockerfiles/Dockerfile.dev,"# FIXME(vdemeester) only used for e2e, could be in e2e special image in the future
",Wed Apr 4 13:54:37 2018 -0700,Tue Apr 18 19:12:24 2017 -0400,,1
2146,b03d2799c83d1ada6b7ce96e59dfc885d7995c40,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2147,b03d2799c83d1ada6b7ce96e59dfc885d7995c40,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2148,b03d2799c83d1ada6b7ce96e59dfc885d7995c40,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2149,b26c1ff28d59a07a2a84f4086cd54b4eed25bff4,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 20 16:36:40 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2150,b26c1ff28d59a07a2a84f4086cd54b4eed25bff4,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon May 20 16:36:40 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2151,b26c1ff28d59a07a2a84f4086cd54b4eed25bff4,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon May 20 16:36:40 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2152,1c00388b8a51103ea224beee5d4ce4c6070bab63,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Sun Oct 30 13:57:40 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
2153,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:56:00 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2154,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2155,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:56:00 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2156,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2157,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:56:00 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2158,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2159,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:56:00 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2160,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2161,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Jul 13 18:56:00 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
2162,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
2163,e2390724e7bb972dd8cac544d04de8d6405b9d59,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 7 12:06:34 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2164,e2390724e7bb972dd8cac544d04de8d6405b9d59,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 7 12:06:34 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2165,17e2946fdd71f55c326cf75053d4e030401adcfb,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 9 19:12:56 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2166,17e2946fdd71f55c326cf75053d4e030401adcfb,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO add linux/386 and linux/arm
",Thu Jan 9 19:12:56 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2167,17e2946fdd71f55c326cf75053d4e030401adcfb,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jan 9 19:12:56 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2168,95b25f51f9004943e4fcb968d3683b12abe0bfb6,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 18 18:49:59 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2169,95b25f51f9004943e4fcb968d3683b12abe0bfb6,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 18 18:49:59 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2170,95b25f51f9004943e4fcb968d3683b12abe0bfb6,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 18 18:49:59 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2171,da7258ee55c5e34667c7a589ef23a945b304a894,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 9 15:12:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2172,da7258ee55c5e34667c7a589ef23a945b304a894,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jul 9 15:12:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2173,da7258ee55c5e34667c7a589ef23a945b304a894,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 9 15:12:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2174,abb1fb2274610b8b42f1196e40bc851dbae7b283,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 14 13:35:54 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2175,abb1fb2274610b8b42f1196e40bc851dbae7b283,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 14 13:35:54 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2176,34f8b9c1af042a53f60c0f231fa1006a55938540,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 9 17:21:39 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2177,34f8b9c1af042a53f60c0f231fa1006a55938540,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jul 9 17:21:39 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2178,a29b07bf59eb5a62f5823d277cdea2d747f8d931,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 31 10:06:22 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2179,a29b07bf59eb5a62f5823d277cdea2d747f8d931,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Aug 31 10:06:22 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2180,b6370d00a53aad8a0ef655791dd87932dae4e13b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",Mon Sep 9 15:05:25 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2181,3d78b27c6b12272d52c57bcc479096ab756f230d,components/cli/dockerfiles/Dockerfile.dev,components/cli/dockerfiles/Dockerfile.dev,"# FIXME(vdemeester) only used for e2e, could be in e2e special image in the future
",Tue Mar 20 20:13:27 2018 -0400,Tue Apr 18 19:12:24 2017 -0400,,1
2182,6e6d76551ee01427a0a170f657e17606d6e3ac80,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 31 21:13:14 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2183,6e6d76551ee01427a0a170f657e17606d6e3ac80,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Mar 31 21:13:14 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2184,f4a7b443427875047af645e72059618ea9e14d9c,components/cli/dockerfiles/Dockerfile.e2e,components/cli/dockerfiles/Dockerfile.e2e,"# TODO - consider replacing with an official image and a multi-stage build to pluck the binaries out
#ARG CONTAINERD_VERSION=v1.1.2
#ARG CONTAINERD_VERSION=47a128d
#ARG CONTAINERD_VERSION=6c3e782f
",Mon Mar 19 15:56:51 2018 -0700,Thu May 17 13:11:59 2018 +0200,,1
2185,f4a7b443427875047af645e72059618ea9e14d9c,components/cli/dockerfiles/Dockerfile.e2e,components/cli/dockerfiles/Dockerfile.e2e,"# TODO - consider replacing with an official image and a multi-stage build to pluck the binaries out
",Mon Mar 19 15:56:51 2018 -0700,Thu May 17 13:11:59 2018 +0200,,1
2186,dce2644b2527cb130ae2e07cc6d7d4c3d690517e,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 22:56:32 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2187,dce2644b2527cb130ae2e07cc6d7d4c3d690517e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 22:56:32 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2188,e6221522159a5ee4ee709099072144b52d78f3ed,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 13 12:34:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2189,e6221522159a5ee4ee709099072144b52d78f3ed,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 13 12:34:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2190,2fbe877abc753de12a47e40dee5eb6ad55be6768,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Apr 1 12:20:59 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2191,2fbe877abc753de12a47e40dee5eb6ad55be6768,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Apr 1 12:20:59 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2192,11fbf94cfd39a7c904e1df174d455f44d238e0bf,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 24 16:27:35 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2193,11fbf94cfd39a7c904e1df174d455f44d238e0bf,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Mar 24 16:27:35 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2194,11fbf94cfd39a7c904e1df174d455f44d238e0bf,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Tue Mar 24 16:27:35 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2195,c051070508289acc23e693d394819eea9bc2c0fa,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 11 09:36:53 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2196,c051070508289acc23e693d394819eea9bc2c0fa,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Sep 11 09:36:53 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2197,c051070508289acc23e693d394819eea9bc2c0fa,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Sep 11 09:36:53 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2198,c051070508289acc23e693d394819eea9bc2c0fa,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Sep 11 09:36:53 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2199,c051070508289acc23e693d394819eea9bc2c0fa,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Sep 11 09:36:53 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2200,edfbbc6ec9f592a2393c776e6889ede71d8e9612,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 20 16:26:49 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2201,edfbbc6ec9f592a2393c776e6889ede71d8e9612,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Dec 20 16:26:49 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2202,029099778a7e3218319bbefacdaf59c510301cc3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 23 12:27:30 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2203,029099778a7e3218319bbefacdaf59c510301cc3,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Sep 23 12:27:30 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2204,029099778a7e3218319bbefacdaf59c510301cc3,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Sep 23 12:27:30 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2205,591e1794cd866909e7e8d4581702614d3bd165c0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Aug 11 00:52:01 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2206,591e1794cd866909e7e8d4581702614d3bd165c0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Aug 11 00:52:01 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2207,591e1794cd866909e7e8d4581702614d3bd165c0,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Sun Aug 11 00:52:01 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2208,1ecf6e230dd09c8fae02f18e8914d6ea9693d341,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 19 02:19:51 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2209,1ecf6e230dd09c8fae02f18e8914d6ea9693d341,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 19 02:19:51 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2210,d21e1c98a2a91b6d8589a00e8e234b3f44c6bd0b,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Nov 5 13:41:04 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2211,d21e1c98a2a91b6d8589a00e8e234b3f44c6bd0b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Nov 5 13:41:04 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2212,d21e1c98a2a91b6d8589a00e8e234b3f44c6bd0b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Nov 5 13:41:04 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2213,486396cfc4bb439ef4847184df25792eeaacc634,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jun 12 10:16:39 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2214,486396cfc4bb439ef4847184df25792eeaacc634,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jun 12 10:16:39 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2215,486396cfc4bb439ef4847184df25792eeaacc634,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jun 12 10:16:39 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
2216,486396cfc4bb439ef4847184df25792eeaacc634,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 12 10:16:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2217,486396cfc4bb439ef4847184df25792eeaacc634,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jun 12 10:16:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2218,486396cfc4bb439ef4847184df25792eeaacc634,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Jun 12 10:16:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2219,486396cfc4bb439ef4847184df25792eeaacc634,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jun 12 10:16:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2220,cd87e2bd110077c4531218b7d5974c29e6946c54,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Wed Aug 22 23:11:53 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2221,cd87e2bd110077c4531218b7d5974c29e6946c54,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Wed Aug 22 23:11:53 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2222,cd87e2bd110077c4531218b7d5974c29e6946c54,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Wed Aug 22 23:11:53 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2223,8ac66d6456e1dc70a23414aae93cbbfd8158e6e6,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Jul 17 15:17:15 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2224,8ac66d6456e1dc70a23414aae93cbbfd8158e6e6,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jul 17 15:17:15 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2225,8ac66d6456e1dc70a23414aae93cbbfd8158e6e6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jul 17 15:17:15 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2226,8ac66d6456e1dc70a23414aae93cbbfd8158e6e6,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Fri Jul 17 15:17:15 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2227,8ac66d6456e1dc70a23414aae93cbbfd8158e6e6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jul 17 15:17:15 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2228,8ac66d6456e1dc70a23414aae93cbbfd8158e6e6,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Jul 17 15:17:15 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2229,8ac66d6456e1dc70a23414aae93cbbfd8158e6e6,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Jul 17 15:17:15 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2230,f62791a8aaaa6e85239c6d3a60b54d74abc9df47,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Apr 21 11:33:52 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2231,f62791a8aaaa6e85239c6d3a60b54d74abc9df47,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Apr 21 11:33:52 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2232,f62791a8aaaa6e85239c6d3a60b54d74abc9df47,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Apr 21 11:33:52 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2233,2bc1fa895ff21e1c3d32ffef0f5b51ee49101563,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2234,2bc1fa895ff21e1c3d32ffef0f5b51ee49101563,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2235,2bc1fa895ff21e1c3d32ffef0f5b51ee49101563,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2236,2bc1fa895ff21e1c3d32ffef0f5b51ee49101563,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2237,2bc1fa895ff21e1c3d32ffef0f5b51ee49101563,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2238,2bc1fa895ff21e1c3d32ffef0f5b51ee49101563,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2239,0e8ffb200ceea9e020ed40374db0d25ed6195204,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2240,0e8ffb200ceea9e020ed40374db0d25ed6195204,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2241,0e8ffb200ceea9e020ed40374db0d25ed6195204,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2242,0e8ffb200ceea9e020ed40374db0d25ed6195204,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2243,0e8ffb200ceea9e020ed40374db0d25ed6195204,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2244,92d3a8ac6c883180ca65cc3329c6ac72d3911f72,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 1 22:34:22 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2245,92d3a8ac6c883180ca65cc3329c6ac72d3911f72,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO add linux/386 and linux/arm
",Wed Jan 1 22:34:22 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2246,92d3a8ac6c883180ca65cc3329c6ac72d3911f72,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jan 1 22:34:22 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2247,96de465e2a5ab8a2d154e2daf8e2581e39725871,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Feb 25 15:31:07 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2248,96de465e2a5ab8a2d154e2daf8e2581e39725871,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 25 15:31:07 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2249,96de465e2a5ab8a2d154e2daf8e2581e39725871,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Tue Feb 25 15:31:07 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2250,96de465e2a5ab8a2d154e2daf8e2581e39725871,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Feb 25 15:31:07 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2251,65d0d94a98d3aaa27fc789a20ff546edccade2bd,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 18 17:09:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2252,65d0d94a98d3aaa27fc789a20ff546edccade2bd,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jun 18 17:09:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2253,65d0d94a98d3aaa27fc789a20ff546edccade2bd,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 18 17:09:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2254,792e71d487c812512ef49ef046c3c0682f00875a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Apr 8 09:42:47 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2255,792e71d487c812512ef49ef046c3c0682f00875a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Apr 8 09:42:47 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2256,bbd6e1dedb484b23dad3e888ce2bbd6fccc4366b,components/cli/dockerfiles/Dockerfile.e2e,components/cli/dockerfiles/Dockerfile.e2e,"# TODO - consider replacing with an official image and a multi-stage build to pluck the binaries out
#ARG CONTAINERD_VERSION=v1.1.2
#ARG CONTAINERD_VERSION=47a128d
#ARG CONTAINERD_VERSION=6c3e782f
",Tue Aug 28 12:08:52 2018 +0200,Thu May 17 13:11:59 2018 +0200,,1
2257,bbd6e1dedb484b23dad3e888ce2bbd6fccc4366b,components/cli/dockerfiles/Dockerfile.e2e,components/cli/dockerfiles/Dockerfile.e2e,"# TODO - consider replacing with an official image and a multi-stage build to pluck the binaries out
",Tue Aug 28 12:08:52 2018 +0200,Thu May 17 13:11:59 2018 +0200,,1
2258,78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b,components/packaging/image/Dockerfile,components/packaging/image/Dockerfile.engine,"#COPY hack/dockerfile/binaries-commits /

",Tue Jul 10 17:04:55 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2259,78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b,components/packaging/image/Dockerfile,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Tue Jul 10 17:04:55 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2260,78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b,components/packaging/image/Dockerfile,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Tue Jul 10 17:04:55 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2261,78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b,components/packaging/image/Dockerfile,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Tue Jul 10 17:04:55 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2262,57c828b9a55aced5eb236b2b28873658a285f8f6,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Sep 6 02:57:58 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2263,e3392d80d8df9847faab20b2551dcfdd89ae7c73,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:02:22 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
2264,0064565ac48a38f084f45f4fb476b5c2bed4b1d9,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jan 15 15:22:41 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2265,0064565ac48a38f084f45f4fb476b5c2bed4b1d9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 15 15:22:41 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2266,0064565ac48a38f084f45f4fb476b5c2bed4b1d9,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Wed Jan 15 15:22:41 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2267,0064565ac48a38f084f45f4fb476b5c2bed4b1d9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jan 15 15:22:41 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2268,fe75864cf817ed77fe119af2db6f40e2c88141a0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2269,fe75864cf817ed77fe119af2db6f40e2c88141a0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2270,fe75864cf817ed77fe119af2db6f40e2c88141a0,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jul 17 14:37:56 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2271,fe75864cf817ed77fe119af2db6f40e2c88141a0,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jul 17 14:37:56 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2272,fe75864cf817ed77fe119af2db6f40e2c88141a0,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jul 17 14:37:56 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2273,5dc5f5a90b4c4b72d111fd68ec1616765f28878c,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 13 16:25:10 2014 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2274,5dc5f5a90b4c4b72d111fd68ec1616765f28878c,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Nov 13 16:25:10 2014 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2275,dd3dafec23dfb0482437d40493ef57313b2c2fca,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 17 23:57:44 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2276,dd3dafec23dfb0482437d40493ef57313b2c2fca,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Feb 17 23:57:44 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2277,c63bf0bec665749846af1bc7faf7428d5544d980,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 1 21:49:53 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2278,c63bf0bec665749846af1bc7faf7428d5544d980,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu May 1 21:49:53 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2279,ac38b50dbad9eadb62abca3e7f305e8542c7a752,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 30 16:59:02 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2280,ac38b50dbad9eadb62abca3e7f305e8542c7a752,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jul 30 16:59:02 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2281,ac38b50dbad9eadb62abca3e7f305e8542c7a752,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jul 30 16:59:02 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2282,f2f6aa148eae971e3feaf91f35d90bc90c4d8be2,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Dec 8 12:14:31 2017 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
2283,f2f6aa148eae971e3feaf91f35d90bc90c4d8be2,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Dec 8 12:14:31 2017 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
2284,fb3057cf69d4b3c5d9a033ea1e1ffe7559f9fb65,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jan 10 14:32:46 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2285,fb3057cf69d4b3c5d9a033ea1e1ffe7559f9fb65,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jan 10 14:32:46 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2286,fb3057cf69d4b3c5d9a033ea1e1ffe7559f9fb65,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jan 10 14:32:46 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2287,3c90b612fb98b0339b2a781cd731505dda19df3e,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Feb 18 18:43:56 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2288,3c90b612fb98b0339b2a781cd731505dda19df3e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 18 18:43:56 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2289,3c90b612fb98b0339b2a781cd731505dda19df3e,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Tue Feb 18 18:43:56 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2290,3c90b612fb98b0339b2a781cd731505dda19df3e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Feb 18 18:43:56 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2291,0aa2494eadf3ef807aa3fc27674c8c4d9925fb31,components/cli/dockerfiles/Dockerfile.dev,components/cli/dockerfiles/Dockerfile.dev,"# FIXME(vdemeester) only used for e2e, could be in e2e special image in the future
",Tue Mar 6 11:15:18 2018 +0100,Tue Apr 18 19:12:24 2017 -0400,,1
2292,f0da791a00289ca586ed5dd5b9242f14fab33952,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 22 13:23:15 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2293,f0da791a00289ca586ed5dd5b9242f14fab33952,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Aug 22 13:23:15 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2294,c18242482596dffcde931e1403ec0461bf160dd3,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Feb 26 17:25:57 2015 +0000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2295,c18242482596dffcde931e1403ec0461bf160dd3,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Feb 26 17:25:57 2015 +0000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2296,35f4af009dc1270a9b5b78044667acd499de7384,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 27 22:05:57 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2297,35f4af009dc1270a9b5b78044667acd499de7384,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Oct 27 22:05:57 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2298,69d970295871bdc364062a0cc6812071504e6d0e,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 6 16:48:51 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2299,69d970295871bdc364062a0cc6812071504e6d0e,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jul 6 16:48:51 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2300,1a2b70c103f9813bc6895fa858fdee46cc596f21,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 9 13:13:38 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2301,1a2b70c103f9813bc6895fa858fdee46cc596f21,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Feb 9 13:13:38 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2302,2672323db90ea8ea3479eeb6d6c981a96ab3eb62,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 8 17:59:09 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2303,2672323db90ea8ea3479eeb6d6c981a96ab3eb62,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Nov 8 17:59:09 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2304,ea57886ce213f6d7848187bb28b0905fc5b0d6a0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 24 00:12:27 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2305,ea57886ce213f6d7848187bb28b0905fc5b0d6a0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Dec 24 00:12:27 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2306,0fbaab526fa7cd020f5132cc02ce09883af21775,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 22 17:45:18 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2307,0fbaab526fa7cd020f5132cc02ce09883af21775,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Mar 22 17:45:18 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2308,2433f050d8fb63207de09376481301353e098f1f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 16 23:43:47 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2309,c071c815d3338d8357acfbdfeb95122cb8eaba2e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 6 18:12:41 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2310,c071c815d3338d8357acfbdfeb95122cb8eaba2e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Mar 6 18:12:41 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2311,c071c815d3338d8357acfbdfeb95122cb8eaba2e,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Fri Mar 6 18:12:41 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2312,643654c2f0a59f66e643d7372af9367d90dbb354,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun May 21 23:24:07 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2313,643654c2f0a59f66e643d7372af9367d90dbb354,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sun May 21 23:24:07 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2314,b40ee38416b78a658b4aef7ff952d4600252abc6,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat Apr 13 10:56:06 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
2315,b40ee38416b78a658b4aef7ff952d4600252abc6,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2316,b40ee38416b78a658b4aef7ff952d4600252abc6,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2317,b40ee38416b78a658b4aef7ff952d4600252abc6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2318,b40ee38416b78a658b4aef7ff952d4600252abc6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2319,b40ee38416b78a658b4aef7ff952d4600252abc6,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2320,b40ee38416b78a658b4aef7ff952d4600252abc6,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sat Apr 13 10:56:06 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2321,b40ee38416b78a658b4aef7ff952d4600252abc6,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat Apr 13 10:56:06 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2322,b40ee38416b78a658b4aef7ff952d4600252abc6,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat Apr 13 10:56:06 2019 +0800,Fri Sep 8 16:43:04 2017 +0200,,1
2323,519289ece2cf72a08a1e5bdf2131487f8e9c069b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 10 13:25:00 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2324,519289ece2cf72a08a1e5bdf2131487f8e9c069b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 10 13:25:00 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2325,30240e6ce6050199ecba5decdb86c4e1aa35c1b2,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jan 10 14:07:01 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2326,30240e6ce6050199ecba5decdb86c4e1aa35c1b2,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jan 10 14:07:01 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2327,30240e6ce6050199ecba5decdb86c4e1aa35c1b2,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jan 10 14:07:01 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2328,a0ff297783986646e7d03c13a431b5411d583269,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 17 16:00:59 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2329,a0ff297783986646e7d03c13a431b5411d583269,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 17 16:00:59 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2330,854f80f13ada6cec46a2e2edcc5d88273be09a2d,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Oct 2 17:57:42 2018 -0700,Fri Sep 8 16:43:04 2017 +0200,,1
2331,8846d6c44348681e2964d46b103d645e3fd6b8dc,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Wed Oct 16 00:31:34 2013 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2332,f68ba41d8bdca53b1e0c684bcc4dbdaff37e016d,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2333,f68ba41d8bdca53b1e0c684bcc4dbdaff37e016d,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2334,f68ba41d8bdca53b1e0c684bcc4dbdaff37e016d,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2335,f68ba41d8bdca53b1e0c684bcc4dbdaff37e016d,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2336,f68ba41d8bdca53b1e0c684bcc4dbdaff37e016d,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2337,f6f766084edf593caa9ca63ce69492ec2a350f74,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 27 15:34:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2338,f6f766084edf593caa9ca63ce69492ec2a350f74,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO add linux/386 and linux/arm
",Mon Jan 27 15:34:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2339,f6f766084edf593caa9ca63ce69492ec2a350f74,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jan 27 15:34:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2340,19aaa7241bdac65fa79bb71cc9d3d0963d7c89ad,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 23 14:29:31 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2341,19aaa7241bdac65fa79bb71cc9d3d0963d7c89ad,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 23 14:29:31 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2342,1e4478b6cf39f7a65ce65f596b1332a3887f63b8,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 16 22:00:44 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2343,1e4478b6cf39f7a65ce65f596b1332a3887f63b8,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 16 22:00:44 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2344,d6d379e87af6910ddb4ff9c1d24657412d85ca46,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 27 02:23:50 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2345,d6d379e87af6910ddb4ff9c1d24657412d85ca46,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Feb 27 02:23:50 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2346,d6d379e87af6910ddb4ff9c1d24657412d85ca46,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Fri Feb 27 02:23:50 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2347,c4fa112c811a147e0368c5ac87776293a85c51fb,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Apr 8 09:55:58 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2348,c4fa112c811a147e0368c5ac87776293a85c51fb,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Apr 8 09:55:58 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2349,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 9 15:45:11 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2350,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 9 15:45:11 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2351,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Nov 9 15:45:11 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2352,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 9 15:45:11 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2353,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 9 15:45:11 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2354,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Thu Nov 9 15:45:11 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2355,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 9 15:45:11 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2356,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 9 15:45:11 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2357,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Thu Nov 9 15:45:11 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2358,1c9031a8a06adcca56ce840424a8532fe2319e16,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 3 16:37:13 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2359,1c9031a8a06adcca56ce840424a8532fe2319e16,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Dec 3 16:37:13 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2360,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2361,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2362,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2363,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2364,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2365,3105d32a2385d3ad59af7d9f12096a7bd8e988ac,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 11 08:17:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2366,3105d32a2385d3ad59af7d9f12096a7bd8e988ac,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Mar 11 08:17:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2367,3105d32a2385d3ad59af7d9f12096a7bd8e988ac,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Wed Mar 11 08:17:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2368,4e4ba6f308d750e566c416a20bdccef92577ee63,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 19 22:42:05 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2369,4e4ba6f308d750e566c416a20bdccef92577ee63,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 19 22:42:05 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2370,da3465e5092d1ce7a2aedcd8d52256f5dbc7b7be,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 15 11:44:15 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2371,da3465e5092d1ce7a2aedcd8d52256f5dbc7b7be,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Dec 15 11:44:15 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2372,65759bd7118a747d3916ec994b724baf4699f28c,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:13:04 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
2373,77aff38faeccedf201a6a29f3138db9ebb9e31cc,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Fri Jan 20 15:09:28 2017 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
2374,6a19f653da1e6a1979c22e0939ca4ccab6f2c9be,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Dec 8 20:20:55 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2375,92526dc8b1bc227444833b57f0fb0f5ee093a02f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 23 14:28:32 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2376,92526dc8b1bc227444833b57f0fb0f5ee093a02f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 23 14:28:32 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2377,27be2339e6295e1021a2804b56c122d523412acb,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 2 08:32:49 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2378,27be2339e6295e1021a2804b56c122d523412acb,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Nov 2 08:32:49 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2379,27be2339e6295e1021a2804b56c122d523412acb,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Nov 2 08:32:49 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2380,1ea07a924a17b81b6bbafa7e05374d3a6581d700,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 31 00:07:30 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2381,1ea07a924a17b81b6bbafa7e05374d3a6581d700,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 31 00:07:30 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2382,1ea07a924a17b81b6bbafa7e05374d3a6581d700,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jul 31 00:07:30 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2383,8802449935b4e4d4be8e279e99348a99c4e13bc0,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",Fri Oct 18 22:33:16 2013 -0700,Fri Oct 18 22:33:16 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2384,4621ae86b14f66830d6d49af011b9b7a30d28945,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Feb 3 11:08:35 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2385,4621ae86b14f66830d6d49af011b9b7a30d28945,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Feb 3 11:08:35 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2386,4621ae86b14f66830d6d49af011b9b7a30d28945,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",Mon Feb 3 11:08:35 2014 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2387,530123a1c1b61551bfa59377d2ae122a474185bc,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Sep 12 15:22:56 2019 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2388,530123a1c1b61551bfa59377d2ae122a474185bc,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Sep 12 15:22:56 2019 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2389,db3cf4f54ce42a25a1d3e55963d4ffd391f03fa7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 12 13:44:41 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2390,db3cf4f54ce42a25a1d3e55963d4ffd391f03fa7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Dec 12 13:44:41 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2391,e6a7274d4cd6fecc517c05c0eba3562951573603,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 7 10:35:38 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2392,e6a7274d4cd6fecc517c05c0eba3562951573603,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 7 10:35:38 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2393,b2b61a70f2cf0fb712327831a705e34f28dc3851,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 31 16:45:42 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2394,b2b61a70f2cf0fb712327831a705e34f28dc3851,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 31 16:45:42 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2395,c6ebb9e13bece8d70b0afa9190fd4b76320e34b7,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Feb 20 19:24:24 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2396,c6ebb9e13bece8d70b0afa9190fd4b76320e34b7,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Feb 20 19:24:24 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2397,5805b4b79621d5bd24ab31eeab71dc3e97fb6bc9,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 19 12:43:28 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2398,5805b4b79621d5bd24ab31eeab71dc3e97fb6bc9,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 19 12:43:28 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2399,3d85a4f2409198283337355316bd24d838f4a308,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Tue Apr 5 16:25:43 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
2400,7503e89725195a698a26a6f080c33fb4709eb65b,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Feb 7 16:14:30 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2401,7503e89725195a698a26a6f080c33fb4709eb65b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Feb 7 16:14:30 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2402,7503e89725195a698a26a6f080c33fb4709eb65b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Feb 7 16:14:30 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2403,e950cfec0771620d272d13a19c5facd6092738e9,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Jun 30 11:06:03 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2404,e950cfec0771620d272d13a19c5facd6092738e9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jun 30 11:06:03 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2405,e950cfec0771620d272d13a19c5facd6092738e9,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Tue Jun 30 11:06:03 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2406,e950cfec0771620d272d13a19c5facd6092738e9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Jun 30 11:06:03 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2407,03cd854634442502f3622a901ba3fd2ad65462b3,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 2 13:46:11 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2408,03cd854634442502f3622a901ba3fd2ad65462b3,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 2 13:46:11 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2409,71b21cf3477f60bff6239ca1b63d82d0ddce3307,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 1 13:39:34 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2410,71b21cf3477f60bff6239ca1b63d82d0ddce3307,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Dec 1 13:39:34 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2411,5cb7befa00236864909394cddda1b272d675642b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 31 09:27:28 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2412,5cb7befa00236864909394cddda1b272d675642b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue May 31 09:27:28 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2413,5cb7befa00236864909394cddda1b272d675642b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 31 09:27:28 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2414,a9af568c3d9bcbe6bced3d93823f953ba6a23fb8,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Mon Sep 17 17:13:56 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2415,a9af568c3d9bcbe6bced3d93823f953ba6a23fb8,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Mon Sep 17 17:13:56 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2416,a9af568c3d9bcbe6bced3d93823f953ba6a23fb8,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Mon Sep 17 17:13:56 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2417,a90195f1c8a51945e1a230a2b6af7a1fb5ef1b55,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 20 19:37:21 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2418,a90195f1c8a51945e1a230a2b6af7a1fb5ef1b55,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 20 19:37:21 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2419,daea5c989f880a01adbf962667027f4b43171568,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 17 13:50:37 2013 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2420,7a2ded36af69d7c491f44b6a05fb4ec9ea1e4d66,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:48:42 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2421,7a2ded36af69d7c491f44b6a05fb4ec9ea1e4d66,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:48:42 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2422,36b081e8df55d1023fd7afd0a96d09f776551b7c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 14 14:21:44 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2423,36b081e8df55d1023fd7afd0a96d09f776551b7c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Mon Mar 14 14:21:44 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2424,36b081e8df55d1023fd7afd0a96d09f776551b7c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 14 14:21:44 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2425,5d70d92ff7b3c624c8fef4317e13e1eeaf5a81d7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 20 19:05:57 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2426,5d70d92ff7b3c624c8fef4317e13e1eeaf5a81d7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue May 20 19:05:57 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2427,952ac8a789e9be9ce4386ba3b14931a1c7d2e239,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Fri Oct 4 19:25:15 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2428,9b81483a890e6cbf6a6c694d7263dc2f506872fb,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jun 24 23:51:06 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2429,9b81483a890e6cbf6a6c694d7263dc2f506872fb,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Jun 24 23:51:06 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2430,13193b473d84289f3a96e9200a695628cdc06a6b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 10 15:16:11 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2431,13193b473d84289f3a96e9200a695628cdc06a6b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Jun 10 15:16:11 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2432,13193b473d84289f3a96e9200a695628cdc06a6b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 10 15:16:11 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2433,03266822c801b749adc7e9f30ce3eb20d31f5501,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 15 13:22:52 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2434,03266822c801b749adc7e9f30ce3eb20d31f5501,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon May 15 13:22:52 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2435,c6cec69587eb1b1eb94f4e2e610f9d2cb46da735,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2436,c6cec69587eb1b1eb94f4e2e610f9d2cb46da735,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2437,c6cec69587eb1b1eb94f4e2e610f9d2cb46da735,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2438,c6cec69587eb1b1eb94f4e2e610f9d2cb46da735,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2439,c6cec69587eb1b1eb94f4e2e610f9d2cb46da735,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2440,73614850c71951c80ab6f8492599b3f19ed446b8,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 22 00:08:18 2015 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2441,73614850c71951c80ab6f8492599b3f19ed446b8,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Dec 22 00:08:18 2015 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2442,a4ffd2d4e9c36108e059ee1deb495fa0809ff687,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 7 13:02:19 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2443,a4ffd2d4e9c36108e059ee1deb495fa0809ff687,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 7 13:02:19 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2444,9617a0025aafd11aa599c1f4a845b3eb75a24bb9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 6 17:24:50 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2445,9617a0025aafd11aa599c1f4a845b3eb75a24bb9,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 6 17:24:50 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2446,66c985e514c6984949a51261bdb6a3814a715948,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 27 22:53:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2447,66c985e514c6984949a51261bdb6a3814a715948,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Feb 27 22:53:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2448,4030bbc684dc21272124af1e2ee7686de85ea342,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 15 14:25:03 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2449,4030bbc684dc21272124af1e2ee7686de85ea342,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jan 15 14:25:03 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2450,a1794f8b7d07c2c5ebca145b7e4203c306e6d5a3,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Feb 25 22:46:55 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2451,a1794f8b7d07c2c5ebca145b7e4203c306e6d5a3,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Feb 25 22:46:55 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2452,dad87e11b2ba87402575b47400053192f68af597,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2453,dad87e11b2ba87402575b47400053192f68af597,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2454,dad87e11b2ba87402575b47400053192f68af597,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2455,dad87e11b2ba87402575b47400053192f68af597,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2456,dad87e11b2ba87402575b47400053192f68af597,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2457,e7265101a59d29c46ae9f1b279bf7df1c1dc6ab5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 19 22:16:20 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2458,e7265101a59d29c46ae9f1b279bf7df1c1dc6ab5,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Aug 19 22:16:20 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2459,e7265101a59d29c46ae9f1b279bf7df1c1dc6ab5,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Aug 19 22:16:20 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2460,68301c38288c1554119f272cd8e44b6342965cac,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 5 13:17:40 2014 -0700,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2461,68301c38288c1554119f272cd8e44b6342965cac,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Aug 5 13:17:40 2014 -0700,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2462,241c2f046523e2ed668e993b01b1449efe3f9fd1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 19 00:20:59 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2463,241c2f046523e2ed668e993b01b1449efe3f9fd1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Dec 19 00:20:59 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2464,9db4b04ff42b877275cfb114cfb36e5f72bfbfa6,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 5 10:12:57 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2465,9db4b04ff42b877275cfb114cfb36e5f72bfbfa6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 5 10:12:57 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2466,5e4f4153669d1dbd07f53a9267d5d8677c107b51,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 31 14:58:43 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2467,862065b3b27c1359ff361948ee9ea30c113c549f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 23 11:02:56 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2468,862065b3b27c1359ff361948ee9ea30c113c549f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jul 23 11:02:56 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2469,862065b3b27c1359ff361948ee9ea30c113c549f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 23 11:02:56 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2470,44958a29f2f2eb9a144b895146af552f1a3cd8d1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 22 15:42:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2471,44958a29f2f2eb9a144b895146af552f1a3cd8d1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",Thu Jan 22 15:42:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2472,44958a29f2f2eb9a144b895146af552f1a3cd8d1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jan 22 15:42:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2473,86091bac44fa66337925531f523b46ef24cbde31,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 12 20:10:42 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2474,86091bac44fa66337925531f523b46ef24cbde31,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Sep 12 20:10:42 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2475,f8d5f385a9411047d275230aefaf917f221fed23,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 28 14:31:34 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2476,f8d5f385a9411047d275230aefaf917f221fed23,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 28 14:31:34 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2477,df9fadfc2fed30790110cfdaedc973204cde3e96,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Tue May 5 14:33:31 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2478,df9fadfc2fed30790110cfdaedc973204cde3e96,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Tue May 5 14:33:31 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2479,2ee063b98ec171370da3ac0c59ebec23d5880d68,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 4 17:45:04 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2480,2ee063b98ec171370da3ac0c59ebec23d5880d68,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 4 17:45:04 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2481,2ee063b98ec171370da3ac0c59ebec23d5880d68,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Dec 4 17:45:04 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2482,1254188074bf46191d0c9b4193db9440f4d64c50,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2483,1254188074bf46191d0c9b4193db9440f4d64c50,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2484,1254188074bf46191d0c9b4193db9440f4d64c50,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2485,1254188074bf46191d0c9b4193db9440f4d64c50,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2486,1254188074bf46191d0c9b4193db9440f4d64c50,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2487,99bbdc28c087fbeabae4f5206d52c51fa082369e,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:22:53 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
2488,678dc675ed61a5c9dc39a8aeb56a1683e09f4655,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Sat Feb 4 23:28:34 2017 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
2489,bedb4dca10acc9ca74d227cdfec12a3c0e8d76f1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 27 14:26:12 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2490,bedb4dca10acc9ca74d227cdfec12a3c0e8d76f1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Sep 27 14:26:12 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2491,bedb4dca10acc9ca74d227cdfec12a3c0e8d76f1,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Sep 27 14:26:12 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2492,bedb4dca10acc9ca74d227cdfec12a3c0e8d76f1,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Sep 27 14:26:12 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2493,bedb4dca10acc9ca74d227cdfec12a3c0e8d76f1,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Sep 27 14:26:12 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2494,4b46db6f209232f8d30f8aa786aa495e201baa3a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2495,4b46db6f209232f8d30f8aa786aa495e201baa3a,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2496,4b46db6f209232f8d30f8aa786aa495e201baa3a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2497,4b46db6f209232f8d30f8aa786aa495e201baa3a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2498,4b46db6f209232f8d30f8aa786aa495e201baa3a,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2499,fcb3e5c2df9639027a77a603aad1a362439bdeb5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 14 09:50:58 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2500,fcb3e5c2df9639027a77a603aad1a362439bdeb5,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jan 14 09:50:58 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2501,b8b81760da3b98778a81316f7a11da75b00dc6f7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 21 10:42:02 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2502,b8b81760da3b98778a81316f7a11da75b00dc6f7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jul 21 10:42:02 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2503,b8b81760da3b98778a81316f7a11da75b00dc6f7,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jul 21 10:42:02 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2504,bdefe38d03c242dc3a095e5643a87f23703773b5,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 23 12:11:08 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2505,bdefe38d03c242dc3a095e5643a87f23703773b5,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Wed Mar 23 12:11:08 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2506,bdefe38d03c242dc3a095e5643a87f23703773b5,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 23 12:11:08 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2507,3274cd15bff7c6f175df0ce31f9d7aa4a4bf23c2,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 3 01:30:12 2015 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2508,3274cd15bff7c6f175df0ce31f9d7aa4a4bf23c2,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Apr 3 01:30:12 2015 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2509,3274cd15bff7c6f175df0ce31f9d7aa4a4bf23c2,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Fri Apr 3 01:30:12 2015 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2510,618fd96ae81a91bebf8bb17984f98de028bc4699,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Sep 26 12:03:38 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2511,618fd96ae81a91bebf8bb17984f98de028bc4699,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 26 12:03:38 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2512,742fb66041377fe472ebc29508c4ea7f2140cb11,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",Fri Sep 6 20:14:03 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2513,837c6b480c6859db6bf3f3fb044b070afb3f336d,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",Tue Oct 29 19:37:56 2013 -0700,Fri Oct 18 22:33:16 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2514,837c6b480c6859db6bf3f3fb044b070afb3f336d,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",Tue Oct 29 19:37:56 2013 -0700,Fri Oct 18 22:33:16 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2515,d81d63c977a7909528468dca8fcd7ddf6bbc8725,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 12 05:47:17 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2516,d81d63c977a7909528468dca8fcd7ddf6bbc8725,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Dec 12 05:47:17 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2517,d81d63c977a7909528468dca8fcd7ddf6bbc8725,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Dec 12 05:47:17 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2518,2b328bedc5fca0ed02aa342a787c98f841de34a0,components/cli/dockerfiles/Dockerfile.dev,components/cli/dockerfiles/Dockerfile.dev,"# FIXME(vdemeester) only used for e2e, could be in e2e special image in the future
",Thu May 24 09:39:22 2018 +0200,Tue Apr 18 19:12:24 2017 -0400,,1
2519,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2520,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2521,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2522,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2523,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2524,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jan 23 23:44:34 2019 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
2525,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jan 23 23:44:34 2019 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
2526,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jan 23 23:44:34 2019 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
2527,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jan 23 23:44:34 2019 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
2528,0e1a426ed812c90f57e2759661a8a0aca68fae97,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Apr 15 19:02:01 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2529,0e1a426ed812c90f57e2759661a8a0aca68fae97,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Apr 15 19:02:01 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2530,d2f6c7daeefbb55fb34a5db04388c9ebd98d9080,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 23 18:05:38 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2531,d2f6c7daeefbb55fb34a5db04388c9ebd98d9080,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 23 18:05:38 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2532,6732035ba0936c343c6b16dbe5130a786255ae82,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Feb 1 21:40:51 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2533,6732035ba0936c343c6b16dbe5130a786255ae82,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Feb 1 21:40:51 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2534,15165b99b621a27c0c50c372bc849f80e2c1aa89,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Jan 11 18:02:08 2018 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
2535,15165b99b621a27c0c50c372bc849f80e2c1aa89,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jan 11 18:02:08 2018 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
2536,f124a2d6cee305475f3c7da446711812e5c81d44,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Mar 5 22:36:54 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2537,f124a2d6cee305475f3c7da446711812e5c81d44,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Mar 5 22:36:54 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2538,f124a2d6cee305475f3c7da446711812e5c81d44,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Thu Mar 5 22:36:54 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2539,f124a2d6cee305475f3c7da446711812e5c81d44,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Thu Mar 5 22:36:54 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2540,56843d431965a86f92ba1869819c00f6c8eaca5b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2541,56843d431965a86f92ba1869819c00f6c8eaca5b,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2542,56843d431965a86f92ba1869819c00f6c8eaca5b,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2543,56843d431965a86f92ba1869819c00f6c8eaca5b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2544,56843d431965a86f92ba1869819c00f6c8eaca5b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2545,56843d431965a86f92ba1869819c00f6c8eaca5b,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2546,b82ed8bb954f71b88868eda2a0bda8fcb7b7ddcf,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 19 22:56:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2547,b82ed8bb954f71b88868eda2a0bda8fcb7b7ddcf,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sun Jul 19 22:56:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2548,b82ed8bb954f71b88868eda2a0bda8fcb7b7ddcf,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 19 22:56:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2549,d59617c5ea5eeb806584d50fefccb2cf96d55bd7,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",Sat Jan 30 20:50:11 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
2550,aa2e0abc3e11d7f252b3b316f84ed108c821f1fc,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 17:26:35 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2551,aa2e0abc3e11d7f252b3b316f84ed108c821f1fc,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 17:26:35 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2552,3c371660e786d4a02d5c24267b82fc66a42cc042,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 4 20:59:37 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2553,3c371660e786d4a02d5c24267b82fc66a42cc042,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Aug 4 20:59:37 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2554,60adea60dc85fa6fedc333a170955e27ca67c990,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Feb 11 02:55:16 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2555,60adea60dc85fa6fedc333a170955e27ca67c990,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 11 02:55:16 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2556,60adea60dc85fa6fedc333a170955e27ca67c990,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Tue Feb 11 02:55:16 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2557,60adea60dc85fa6fedc333a170955e27ca67c990,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Feb 11 02:55:16 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2558,6203a9d5da2daf6e765299ba764442f882aacc1f,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Wed Aug 22 23:24:42 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2559,6203a9d5da2daf6e765299ba764442f882aacc1f,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Wed Aug 22 23:24:42 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2560,6203a9d5da2daf6e765299ba764442f882aacc1f,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Wed Aug 22 23:24:42 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2561,92a488b33b8016f4223f2669d2912507c0d2c849,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 17 23:08:17 2015 -0600,Fri Feb 27 22:37:25 2015 -0700,,1
2562,f2c113ad8c070ca77966b12b014939ab035b8fe7,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 11:12:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2563,f2c113ad8c070ca77966b12b014939ab035b8fe7,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 25 11:12:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2564,f2c113ad8c070ca77966b12b014939ab035b8fe7,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 11:12:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2565,2027073c30b236b0575ed7116542ce8a171d92b1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 26 12:46:21 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2566,2027073c30b236b0575ed7116542ce8a171d92b1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Sep 26 12:46:21 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2567,88e70a98ec3f74592190ff3e3a007cf38ead3f2b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 11 20:53:16 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2568,88e70a98ec3f74592190ff3e3a007cf38ead3f2b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Dec 11 20:53:16 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2569,da6e134d1aed703534bc1c87a82a115fef29e8da,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Feb 15 15:41:10 2016 +0530,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2570,da6e134d1aed703534bc1c87a82a115fef29e8da,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Feb 15 15:41:10 2016 +0530,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2571,9298102f4681f71922d9213f253ae044e4b21955,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 9 12:48:33 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2572,9298102f4681f71922d9213f253ae044e4b21955,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 9 12:48:33 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2573,9298102f4681f71922d9213f253ae044e4b21955,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 9 12:48:33 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2574,9298102f4681f71922d9213f253ae044e4b21955,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 9 12:48:33 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2575,0a09f8ffe023c1306cf9436919ff2f330b49bc4b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 2 10:33:26 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2576,0a09f8ffe023c1306cf9436919ff2f330b49bc4b,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 2 10:33:26 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2577,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2578,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2579,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2580,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2581,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2582,21b1aa9f826d6b00f5806651aee7930e7b9e3960,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 22:59:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2583,21b1aa9f826d6b00f5806651aee7930e7b9e3960,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 22:59:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2584,8c4515f719d6519e9e03c9911dfaf50fead36f79,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Jan 30 15:31:44 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2585,8c4515f719d6519e9e03c9911dfaf50fead36f79,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Jan 30 15:31:44 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2586,8c4515f719d6519e9e03c9911dfaf50fead36f79,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Thu Jan 30 15:31:44 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2587,f475565e21eddfe4881c775db87bcf8a4786ebb5,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Tue May 19 05:10:06 2015 +0000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2588,f475565e21eddfe4881c775db87bcf8a4786ebb5,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Tue May 19 05:10:06 2015 +0000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2589,b778905c3e6e5b392e95dde430de0ce4044f03bb,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Thu Aug 23 15:08:24 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2590,b778905c3e6e5b392e95dde430de0ce4044f03bb,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Thu Aug 23 15:08:24 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2591,b778905c3e6e5b392e95dde430de0ce4044f03bb,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Thu Aug 23 15:08:24 2018 +0000,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2592,a7fc58e1eb11c1f9c94348203647b59eff438fdf,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 18 23:06:14 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2593,a7fc58e1eb11c1f9c94348203647b59eff438fdf,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO add linux/386 and linux/arm
",Wed Dec 18 23:06:14 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2594,e0af0724d095b41586d5910c97db2e8f7eea9203,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 14 03:34:24 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2595,e0af0724d095b41586d5910c97db2e8f7eea9203,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 14 03:34:24 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2596,87b7e2db815407d1f55fe8b929164c7ee4de73a6,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Thu Oct 20 17:02:26 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
2597,1269ee770f5b7b39a654dd622766296e4e7e8761,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2598,1269ee770f5b7b39a654dd622766296e4e7e8761,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2599,1269ee770f5b7b39a654dd622766296e4e7e8761,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2600,1269ee770f5b7b39a654dd622766296e4e7e8761,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2601,1269ee770f5b7b39a654dd622766296e4e7e8761,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2602,4d40f8afe3d3f7cdeee3f6ce2f4f8e725107508a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",Fri Sep 6 19:58:05 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2603,232bc92f3e9d9f898d6fddb72a81aee26a19e947,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 17 21:50:31 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2604,232bc92f3e9d9f898d6fddb72a81aee26a19e947,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Jun 17 21:50:31 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2605,232bc92f3e9d9f898d6fddb72a81aee26a19e947,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Jun 17 21:50:31 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2606,232bc92f3e9d9f898d6fddb72a81aee26a19e947,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",Mon Jun 17 21:50:31 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2607,6dc61813df4675fbc6e82566558c72e776161270,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 17:04:30 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2608,6dc61813df4675fbc6e82566558c72e776161270,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 17:04:30 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2609,bc5719520ad75a87797e8a66d5c5522396e713b6,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jan 15 15:38:51 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2610,bc5719520ad75a87797e8a66d5c5522396e713b6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 15 15:38:51 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2611,bc5719520ad75a87797e8a66d5c5522396e713b6,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Wed Jan 15 15:38:51 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2612,bc5719520ad75a87797e8a66d5c5522396e713b6,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jan 15 15:38:51 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2613,1ce594cbcd787a5c8c3548b4c310008672ed1343,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 7 18:43:01 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2614,1ce594cbcd787a5c8c3548b4c310008672ed1343,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 7 18:43:01 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2615,b821a0da6096cab8f1e807ec78cb162efcc0628d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 5 11:54:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2616,b821a0da6096cab8f1e807ec78cb162efcc0628d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jul 5 11:54:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2617,92fbf90d6ef31c368fe9dd7f3b4617cc953c65fe,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 26 19:20:32 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2618,92fbf90d6ef31c368fe9dd7f3b4617cc953c65fe,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Feb 26 19:20:32 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2619,92fbf90d6ef31c368fe9dd7f3b4617cc953c65fe,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Thu Feb 26 19:20:32 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2620,e69b047ff4573adb4e68f296566a6fecf7007e21,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Mar 29 05:42:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2621,e69b047ff4573adb4e68f296566a6fecf7007e21,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sun Mar 29 05:42:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2622,e69b047ff4573adb4e68f296566a6fecf7007e21,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Sun Mar 29 05:42:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2623,f4a4f24956d34593483e312332b7568bb83efcd7,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Fri Apr 17 12:53:30 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2624,f4a4f24956d34593483e312332b7568bb83efcd7,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Fri Apr 17 12:53:30 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2625,c3491d2f3bde1413a0c0c40e8b02d844f883c5e0,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Oct 30 18:14:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2626,c3491d2f3bde1413a0c0c40e8b02d844f883c5e0,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Oct 30 18:14:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2627,5b0bbe7633691368b6d2ce5e29101f85851f2b0a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Fri Oct 18 16:02:08 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2628,8735a147d2e005a7465074fbdfab2b171dc993f7,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 12:20:19 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2629,8735a147d2e005a7465074fbdfab2b171dc993f7,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 12:20:19 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2630,3aa25b2dbebec1413512facabb8cbb22c9d70323,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 29 13:13:32 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2631,3aa25b2dbebec1413512facabb8cbb22c9d70323,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO add linux/386 and linux/arm
",Wed Jan 29 13:13:32 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2632,3aa25b2dbebec1413512facabb8cbb22c9d70323,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jan 29 13:13:32 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2633,391556ba38c94b792431ee57d6c0bf7dc4d6ea4a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 21:18:13 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2634,391556ba38c94b792431ee57d6c0bf7dc4d6ea4a,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 21:18:13 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2635,b16d50a307a74f4304a362fb2f837d1523ed04d9,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 18 18:44:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2636,b16d50a307a74f4304a362fb2f837d1523ed04d9,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Mar 18 18:44:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2637,b16d50a307a74f4304a362fb2f837d1523ed04d9,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Wed Mar 18 18:44:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2638,f4511c75b999b9b51b8266886920e814b934a9cb,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 23 16:34:46 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2639,f4511c75b999b9b51b8266886920e814b934a9cb,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 23 16:34:46 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2640,24c5efffe22355f83b60c9f4fa3227ace3a1fe5e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 6 13:39:17 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2641,24c5efffe22355f83b60c9f4fa3227ace3a1fe5e,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Mar 6 13:39:17 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2642,1d551c443cbd014f7310d20396a5a81de5ad47ee,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat May 2 01:42:53 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2643,1d551c443cbd014f7310d20396a5a81de5ad47ee,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat May 2 01:42:53 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2644,1d551c443cbd014f7310d20396a5a81de5ad47ee,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat May 2 01:42:53 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2645,1c09d4604a96f730237d6c1c83b25eed5cea499a,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Oct 8 11:17:15 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2646,56750f8076cf3e0a5ead21c903e150861d6cb862,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 19 19:25:54 2013 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2647,24a81e1245fa2b4601c36e9634bfd28f7af016c7,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jan 17 11:55:42 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2648,24a81e1245fa2b4601c36e9634bfd28f7af016c7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jan 17 11:55:42 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2649,24a81e1245fa2b4601c36e9634bfd28f7af016c7,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Fri Jan 17 11:55:42 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2650,24a81e1245fa2b4601c36e9634bfd28f7af016c7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jan 17 11:55:42 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2651,eefab16f39d22d5a8727de04156b1a663b1aa175,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jun 24 21:50:49 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2652,17fe06fc30b82f739ad1b3366edfbdb99180e339,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Feb 25 10:37:36 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2653,17fe06fc30b82f739ad1b3366edfbdb99180e339,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Feb 25 10:37:36 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2654,8b297d72a88bbf8dc373fad5810cb808c24287a5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 3 17:04:01 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2655,8b297d72a88bbf8dc373fad5810cb808c24287a5,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Dec 3 17:04:01 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2656,1c3b8811eaf8c2bc3384402784f1a1fddfe8f4e4,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",Mon Jan 20 12:29:55 2014 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2657,1fe350f74d17e47ca43123ecb07f5b6403900983,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 8 13:03:53 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2658,1fe350f74d17e47ca43123ecb07f5b6403900983,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Apr 8 13:03:53 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2659,1fe350f74d17e47ca43123ecb07f5b6403900983,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 8 13:03:53 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2660,bc16e560f9fab3d15d703e964c2048b77e3d71d5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 26 10:46:00 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2661,bc16e560f9fab3d15d703e964c2048b77e3d71d5,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 26 10:46:00 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2662,06c4880d2c3c45789084188624fe7fb65e238d3a,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"#COPY hack/dockerfile/binaries-commits /

",Mon Aug 20 10:11:53 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2663,06c4880d2c3c45789084188624fe7fb65e238d3a,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",Mon Aug 20 10:11:53 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2664,06c4880d2c3c45789084188624fe7fb65e238d3a,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",Mon Aug 20 10:11:53 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2665,06c4880d2c3c45789084188624fe7fb65e238d3a,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",Mon Aug 20 10:11:53 2018 -0700,Tue Jul 10 17:04:55 2018 -0700,Thu Dec 5 14:55:10 2019 +0100,1
2666,bb9f4fa0e8724d6f70d4f2c8afb5cad50b87c02e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Nov 14 18:01:24 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2667,bb9f4fa0e8724d6f70d4f2c8afb5cad50b87c02e,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Nov 14 18:01:24 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2668,bb56a95461183e6713f49f70cee2a8babb42504a,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Dec 5 14:01:17 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
2669,18e1b423ee3c8b845feadbccb7f52c5a242d15a7,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Tue Apr 21 18:36:37 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2670,18e1b423ee3c8b845feadbccb7f52c5a242d15a7,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Tue Apr 21 18:36:37 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2671,f716752c81799255e4e53d6ab5801525304ab7bf,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jan 7 12:06:52 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2672,f716752c81799255e4e53d6ab5801525304ab7bf,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Jan 7 12:06:52 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2673,64dd08bc1d5cb3ddde563582be6f15cb7af8c45b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 15 10:40:33 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2674,64dd08bc1d5cb3ddde563582be6f15cb7af8c45b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 15 10:40:33 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2675,f0b2c345c00f5711d18de141ebd7e318ee6bd7d3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 7 13:29:24 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2676,f0b2c345c00f5711d18de141ebd7e318ee6bd7d3,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 7 13:29:24 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2677,36a2f2d0be0e7ffdade82e024a4895a21ef0d500,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 23 15:19:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2678,36a2f2d0be0e7ffdade82e024a4895a21ef0d500,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon May 23 15:19:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
