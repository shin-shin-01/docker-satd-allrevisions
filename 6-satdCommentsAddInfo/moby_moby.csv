,CommitID,Dockerfiles,LatestDockerfile,Comments,Date,FirstCommit Date,Deleted Date,isSATD
0,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Wed Aug 2 23:07:36 2017 +1000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
3,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
4,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
5,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Aug 2 23:07:36 2017 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
6,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
7,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
8,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Wed Aug 2 23:07:36 2017 +1000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
9,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
10,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
11,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 2 23:07:36 2017 +1000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
12,1f4e37cf4bd2f73dc5257d791cc4dba294ddd156,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Aug 2 23:07:36 2017 +1000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
13,a243f35cf8906dc6d541dc3dd779a0a2c90cfa12,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 1 16:35:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
14,a243f35cf8906dc6d541dc3dd779a0a2c90cfa12,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Sep 1 16:35:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
15,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Aug 28 10:08:30 2018 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
16,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Aug 28 10:08:30 2018 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
17,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Aug 28 10:08:30 2018 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
18,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Tue Aug 28 10:08:30 2018 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
19,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
20,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
21,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
22,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
23,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
24,fe1fb7417c360f185ce608e0bfda41c0ef9fe364,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Aug 28 10:08:30 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
25,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 12 10:38:55 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
26,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
27,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Sep 12 10:38:55 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
28,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
29,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 12 10:38:55 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
30,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
31,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 12 10:38:55 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
32,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
33,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 12 10:38:55 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
34,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 12 10:38:55 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
35,e4ddcb37c1326e8eef7abbcc84effb016c7a3336,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Sep 12 10:38:55 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
36,bc4f242e7958c83ed47a768b83a7c26864b6274e,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jul 15 14:21:41 2020 +0900,Tue Dec 1 09:47:19 2015 +0100,,1
37,bc4f242e7958c83ed47a768b83a7c26864b6274e,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jul 15 14:21:41 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
38,bc4f242e7958c83ed47a768b83a7c26864b6274e,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 15 14:21:41 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
39,bc4f242e7958c83ed47a768b83a7c26864b6274e,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Wed Jul 15 14:21:41 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
40,bc4f242e7958c83ed47a768b83a7c26864b6274e,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jul 15 14:21:41 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
41,bc4f242e7958c83ed47a768b83a7c26864b6274e,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jul 15 14:21:41 2020 +0900,Fri Feb 27 22:37:25 2015 -0700,,1
42,bc4f242e7958c83ed47a768b83a7c26864b6274e,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jul 15 14:21:41 2020 +0900,Fri Feb 27 22:37:25 2015 -0700,,1
43,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 00:30:47 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
44,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
45,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Oct 19 00:30:47 2016 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
46,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
47,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 00:30:47 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
48,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
49,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 00:30:47 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
50,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
51,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 00:30:47 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
52,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
53,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Wed Oct 19 00:30:47 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
54,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 00:30:47 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
55,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 5 02:58:14 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
56,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 5 02:58:14 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
57,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 5 02:58:14 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
58,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 5 02:58:14 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
59,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Fri Jan 5 02:58:14 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
60,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 5 02:58:14 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
61,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Fri Jan 5 02:58:14 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
62,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 5 02:58:14 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
63,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Jan 5 02:58:14 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
64,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 5 02:58:14 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
65,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 5 02:58:14 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
66,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
67,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
68,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
69,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
70,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
71,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
72,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
73,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
74,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
75,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
76,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
77,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
78,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
79,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
80,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
81,37fa75b3447007bb8ea311f02610bb383b0db77f,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 2 11:44:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
82,a2b0c9778feac970524b98ef7a91b5528fdeb9d5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 27 02:23:50 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
83,a2b0c9778feac970524b98ef7a91b5528fdeb9d5,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Feb 27 02:23:50 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
84,a2b0c9778feac970524b98ef7a91b5528fdeb9d5,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Fri Feb 27 02:23:50 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
85,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Sep 23 09:20:57 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
86,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
87,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 23 09:20:57 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
88,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
89,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Fri Sep 23 09:20:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
90,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
91,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 23 09:20:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
92,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
93,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 23 09:20:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
94,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
95,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 23 09:20:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
96,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Sep 23 09:20:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
97,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Apr 17 18:18:46 2017 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
98,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
99,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
100,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
101,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
102,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
103,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
104,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
105,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
106,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
107,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 18:18:46 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
108,32915b1d0a315598edb737785d0357b5a1b8aa11,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 18:18:46 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
109,47769994e5cba81a96529b418052afce7a6d51a3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 22 15:42:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
110,47769994e5cba81a96529b418052afce7a6d51a3,Dockerfile,Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",Thu Jan 22 15:42:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
111,47769994e5cba81a96529b418052afce7a6d51a3,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jan 22 15:42:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
112,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
113,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
114,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
115,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
116,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Sep 29 17:09:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
117,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 11:52:27 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
118,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 11:52:27 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
119,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 11:52:27 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
120,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 11:52:27 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
121,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Jul 18 11:52:27 2016 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
122,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 11:52:27 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
123,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 11:52:27 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
124,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Mon Jul 18 11:52:27 2016 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
125,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 11:52:27 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
126,589bafddf391cbf6aff8b22044266dc819cdcaeb,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 11:52:27 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
127,bbe6df128802b22605f9eb079f105460ec78ac6f,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Sat Apr 18 12:59:20 2015 +0200,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
128,bbe6df128802b22605f9eb079f105460ec78ac6f,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Sat Apr 18 12:59:20 2015 +0200,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
129,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
130,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
131,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
132,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Apr 11 14:51:19 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
133,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
134,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
135,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
136,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
137,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
138,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
139,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 11 14:51:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
140,c3fe4226f3aec1c59f581e636aece9cefaa9a515,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 11 14:51:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
141,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
142,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
143,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
144,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
145,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
146,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Wed May 4 13:09:53 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
147,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
148,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
149,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Wed May 4 13:09:53 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
150,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
151,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
152,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
153,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 4 13:09:53 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
154,cfb976438677b15ec023b2ad4822bf1b2f63cc8f,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed May 4 13:09:53 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
155,0365e8c20422f96d14c6448218b02e59734e59ea,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Feb 25 22:46:55 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
156,0365e8c20422f96d14c6448218b02e59734e59ea,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Feb 25 22:46:55 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
157,9c66a2f4e15d1f6671c9de9b841dd4f0bc8fc0ce,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jul 17 15:17:15 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
158,9c66a2f4e15d1f6671c9de9b841dd4f0bc8fc0ce,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jul 17 15:17:15 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
159,9c66a2f4e15d1f6671c9de9b841dd4f0bc8fc0ce,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Fri Jul 17 15:17:15 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
160,9c66a2f4e15d1f6671c9de9b841dd4f0bc8fc0ce,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jul 17 15:17:15 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
161,9c66a2f4e15d1f6671c9de9b841dd4f0bc8fc0ce,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Jul 17 15:17:15 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
162,9c66a2f4e15d1f6671c9de9b841dd4f0bc8fc0ce,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Jul 17 15:17:15 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
163,9c66a2f4e15d1f6671c9de9b841dd4f0bc8fc0ce,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Jul 17 15:17:15 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
164,2b766a455cc01f3fd51be886c9e61c0b6a5fdeb1,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Nov 11 14:29:02 2015 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
165,2b766a455cc01f3fd51be886c9e61c0b6a5fdeb1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 11 14:29:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
166,2b766a455cc01f3fd51be886c9e61c0b6a5fdeb1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 11 14:29:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
167,2b766a455cc01f3fd51be886c9e61c0b6a5fdeb1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Nov 11 14:29:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
168,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
169,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
170,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
171,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 17 12:09:50 2017 +0000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
172,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
173,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
174,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
175,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
176,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Jan 17 12:09:50 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
177,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
178,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
179,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
180,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 17 12:09:50 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
181,f8119bb7a76b5c42defb6e0a2dc67bd77ad29a5e,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 17 12:09:50 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
182,095ca77f4810b4e074ee47894f68434fece612c5,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Sep 12 15:22:56 2019 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
183,095ca77f4810b4e074ee47894f68434fece612c5,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Sep 12 15:22:56 2019 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
184,2ff9ac4de5fbd4c6afc215373362ea65f4a44fbc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Aug 11 17:08:33 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
185,2ff9ac4de5fbd4c6afc215373362ea65f4a44fbc,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Aug 11 17:08:33 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
186,2ff9ac4de5fbd4c6afc215373362ea65f4a44fbc,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Sun Aug 11 17:08:33 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
187,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
188,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
189,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
190,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
191,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
192,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
193,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
194,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
195,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
196,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 13:35:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
197,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 13:35:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
198,752b31d3fe6fcbea9e14247c3896334734eba7f2,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 29 13:35:19 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
199,44fe8cbbd174b5d85d4a063ed270f6b9d2279b70,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 13 11:46:02 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
200,44fe8cbbd174b5d85d4a063ed270f6b9d2279b70,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Mar 13 11:46:02 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
201,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
202,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
203,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
204,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
205,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
206,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
207,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
208,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
209,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
210,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 15 14:57:34 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
211,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jun 15 14:57:34 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
212,b675124cf5fc96a6c329b5580ef60304089270c6,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Jun 15 14:57:34 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
213,59dc2876a7d2ac0e231d7d97511e572a1d739136,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Dec 8 20:20:55 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
214,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Dec 7 17:10:04 2017 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
215,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 7 17:10:04 2017 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
216,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 7 17:10:04 2017 -0800,Fri Sep 8 16:43:04 2017 +0200,,1
217,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
218,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
219,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
220,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
221,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
222,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Dec 7 17:10:04 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
223,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Thu Dec 7 17:10:04 2017 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
224,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
225,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
226,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
227,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
228,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
229,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
230,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
231,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
232,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
233,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 9 14:56:14 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
234,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 9 14:56:14 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
235,2e9ea5c194e5fbb83f59e30f8bda5467086598fe,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Jun 9 14:56:14 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
236,961119db21b95504f819a31dfadd7115757fffb3,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Sep 11 09:36:53 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
237,961119db21b95504f819a31dfadd7115757fffb3,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Sep 11 09:36:53 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
238,961119db21b95504f819a31dfadd7115757fffb3,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Sep 11 09:36:53 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
239,961119db21b95504f819a31dfadd7115757fffb3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 11 09:36:53 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
240,961119db21b95504f819a31dfadd7115757fffb3,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Sep 11 09:36:53 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
241,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 5 11:57:59 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
242,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
243,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 5 11:57:59 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
244,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
245,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Dec 5 11:57:59 2016 -0500,Tue Dec 1 09:47:19 2015 +0100,,1
246,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Dec 5 11:57:59 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
247,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
248,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 5 11:57:59 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
249,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
250,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Dec 5 11:57:59 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
251,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
252,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 5 11:57:59 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
253,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 5 11:57:59 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
254,934328d8ea650bf8a9c3c719999ce2a1f5dd5df6,Dockerfile.solaris,Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",Tue Jun 7 00:45:21 2016 -0700,Tue Jun 7 00:45:21 2016 -0700,Tue Oct 24 14:32:52 2017 -0400,1
255,934328d8ea650bf8a9c3c719999ce2a1f5dd5df6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 00:45:21 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
256,934328d8ea650bf8a9c3c719999ce2a1f5dd5df6,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 7 00:45:21 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
257,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Sep 13 09:28:01 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
258,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
259,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Sep 13 09:28:01 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
260,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Sep 13 09:28:01 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
261,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
262,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Sep 13 09:28:01 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
263,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
264,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Tue Sep 13 09:28:01 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
265,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
266,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Sep 13 09:28:01 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
267,eeceb0ccc8318ecbf577147363666b959959450e,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Sep 13 09:28:01 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
268,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 31 11:22:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
269,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
270,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 31 11:22:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
271,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
272,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 31 11:22:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
273,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
274,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Mon Oct 31 11:22:28 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
275,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 31 11:22:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
276,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
277,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Oct 31 11:22:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
278,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
279,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Oct 31 11:22:28 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
280,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 31 11:22:28 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
281,6b7c093b0de21d574ce120aee891e60187749174,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Fri Dec 14 00:42:34 2018 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
282,6b7c093b0de21d574ce120aee891e60187749174,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Dec 14 00:42:34 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
283,6b7c093b0de21d574ce120aee891e60187749174,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Dec 14 00:42:34 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
284,6b7c093b0de21d574ce120aee891e60187749174,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Dec 14 00:42:34 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
285,6b7c093b0de21d574ce120aee891e60187749174,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
286,6b7c093b0de21d574ce120aee891e60187749174,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
287,6b7c093b0de21d574ce120aee891e60187749174,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
288,6b7c093b0de21d574ce120aee891e60187749174,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
289,6b7c093b0de21d574ce120aee891e60187749174,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Dec 14 00:42:34 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
290,7289c7218e2101eb94fb90f2cb22e1412d016984,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 5 14:17:42 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
291,7289c7218e2101eb94fb90f2cb22e1412d016984,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 5 14:17:42 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
292,060196ee4cdf2d60800faef67662989d74f5c03a,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Sun Nov 20 14:14:51 2016 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
293,060196ee4cdf2d60800faef67662989d74f5c03a,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sun Nov 20 14:14:51 2016 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
294,060196ee4cdf2d60800faef67662989d74f5c03a,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 20 14:14:51 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
295,060196ee4cdf2d60800faef67662989d74f5c03a,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sun Nov 20 14:14:51 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
296,060196ee4cdf2d60800faef67662989d74f5c03a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 20 14:14:51 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
297,060196ee4cdf2d60800faef67662989d74f5c03a,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sun Nov 20 14:14:51 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
298,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
299,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
300,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
301,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
302,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
303,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
304,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
305,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
306,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 18 12:48:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
307,84f1c054e66d3999aaf2751062cda8a77925b7ae,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Aug 18 12:48:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
308,ad23745456f9bb9c1c3da3796a2ab769f192bf36,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 25 17:12:18 2013 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
309,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
310,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
311,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
312,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 11 18:39:13 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
313,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 11 18:39:13 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
314,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
315,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
316,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
317,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 11 18:39:13 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
318,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
319,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
320,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
321,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
322,db41c5f5a5fe78aaf851f1c652661ab32e77c788,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 11 18:39:13 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
323,f32b267d1c09b0cc330bf42c8859a0eb00faf8b9,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Fri Jan 20 15:09:28 2017 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
324,fc3040a4c41d3916739639b70fc3efd92888a0f5,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 6 15:13:24 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
325,fc3040a4c41d3916739639b70fc3efd92888a0f5,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 6 15:13:24 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
326,fc3040a4c41d3916739639b70fc3efd92888a0f5,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 6 15:13:24 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
327,fc3040a4c41d3916739639b70fc3efd92888a0f5,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 6 15:13:24 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
328,fc3040a4c41d3916739639b70fc3efd92888a0f5,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 6 15:13:24 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
329,fc3040a4c41d3916739639b70fc3efd92888a0f5,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 6 15:13:24 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
330,fc3040a4c41d3916739639b70fc3efd92888a0f5,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 6 15:13:24 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
331,fc3040a4c41d3916739639b70fc3efd92888a0f5,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 6 15:13:24 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
332,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
333,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
334,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
335,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
336,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
337,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
338,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
339,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
340,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Jun 16 17:18:44 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
341,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
342,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 16 17:18:44 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
343,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 16 17:18:44 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
344,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
345,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
346,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
347,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
348,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",Thu Mar 24 18:41:34 2016 -0400,Tue Dec 1 09:47:19 2015 +0100,,1
349,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
350,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
351,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
352,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
353,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
354,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
355,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
356,3e0bd74a3d2647fa8c7783f4a053ad225746e6eb,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 18:41:34 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
357,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 11:02:38 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
358,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
359,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 11:02:38 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
360,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
361,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Sep 29 11:02:38 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
362,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
363,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 29 11:02:38 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
364,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
365,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 11:02:38 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
366,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
367,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 11:02:38 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
368,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 29 11:02:38 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
369,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
370,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
371,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
372,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
373,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
374,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Sun Jun 10 17:41:22 2018 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
375,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Sun Jun 10 17:41:22 2018 +0300,Tue Dec 1 09:47:19 2015 +0100,,1
376,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sun Jun 10 17:41:22 2018 +0300,Fri Sep 8 16:43:04 2017 +0200,,1
377,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sun Jun 10 17:41:22 2018 +0300,Fri Feb 27 22:37:25 2015 -0700,,1
378,599a3b888cc96ba7bfac7f81a29d4e0688451805,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sun Jun 10 17:41:22 2018 +0300,Fri Feb 27 22:37:25 2015 -0700,,1
379,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Jul 13 18:56:00 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
380,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
381,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:56:00 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
382,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
383,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:56:00 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
384,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
385,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:56:00 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
386,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
387,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:56:00 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
388,4a3cfda45e37b81211fbfbf0c45dbe64860a3ad0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:56:00 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
389,7fd54a7a48f9f1bb2b28144e38c886d1fe813a04,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
390,7fd54a7a48f9f1bb2b28144e38c886d1fe813a04,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
391,7fd54a7a48f9f1bb2b28144e38c886d1fe813a04,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
392,7fd54a7a48f9f1bb2b28144e38c886d1fe813a04,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
393,7fd54a7a48f9f1bb2b28144e38c886d1fe813a04,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
394,7fd54a7a48f9f1bb2b28144e38c886d1fe813a04,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Mar 13 03:18:09 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
395,58a1de9b59594948df152f0003e759b77bcaa56a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 19 22:56:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
396,58a1de9b59594948df152f0003e759b77bcaa56a,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sun Jul 19 22:56:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
397,58a1de9b59594948df152f0003e759b77bcaa56a,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 19 22:56:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
398,6ca5a2c476f548b55d68daa4264b4ef9e6c2696d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 16:27:53 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
399,6ca5a2c476f548b55d68daa4264b4ef9e6c2696d,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 16:27:53 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
400,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue May 1 13:40:27 2018 -0400,Fri Sep 8 16:43:04 2017 +0200,,1
401,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue May 1 13:40:27 2018 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
402,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue May 1 13:40:27 2018 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
403,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
404,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
405,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
406,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
407,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
408,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue May 1 13:40:27 2018 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
409,9e5bebb1f58d4085d1b5fc1edb0ece1edd418c15,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Tue May 1 13:40:27 2018 -0400,Tue Dec 1 09:47:19 2015 +0100,,1
410,49a45d80f26ceb963a00428522ff485fd9f9afdc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 20:05:37 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
411,49a45d80f26ceb963a00428522ff485fd9f9afdc,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 20:05:37 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
412,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
413,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
414,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
415,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
416,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
417,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
418,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
419,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
420,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 17:29:29 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
421,c4fde49a5c0198890078e4c5f7566b387884fe0f,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 17:29:29 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
422,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
423,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
424,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
425,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
426,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
427,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
428,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
429,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
430,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 22 15:10:55 2017 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
431,ce2a0120c1925492a9bb7f6339cdbf716a4c50e0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 22 15:10:55 2017 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
432,b7b707af2e617d62343391c6c82b984ff41b08e2,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 3 16:37:13 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
433,b7b707af2e617d62343391c6c82b984ff41b08e2,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Dec 3 16:37:13 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
434,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Oct 24 15:18:58 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
435,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
436,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 24 15:18:58 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
437,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
438,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Oct 24 15:18:58 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
439,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
440,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 24 15:18:58 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
441,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
442,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 24 15:18:58 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
443,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
444,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 24 15:18:58 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
445,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Oct 24 15:18:58 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
446,79f704490c64c74746eefbddb642b2071203fcbc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 15 13:19:32 2015 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
447,79f704490c64c74746eefbddb642b2071203fcbc,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 15 13:19:32 2015 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
448,79f704490c64c74746eefbddb642b2071203fcbc,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 15 13:19:32 2015 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
449,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
450,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
451,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
452,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
453,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
454,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
455,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
456,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
457,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
458,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
459,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 22 20:55:47 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
460,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
461,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
462,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
463,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:55:47 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
464,009399dc8ed8a4b635b0e229bf07b685e286d8d9,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:55:47 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
465,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 14:33:06 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
466,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 14:33:06 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
467,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Jan 16 14:33:06 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
468,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 14:33:06 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
469,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Tue Jan 16 14:33:06 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
470,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 14:33:06 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
471,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jan 16 14:33:06 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
472,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 14:33:06 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
473,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 14:33:06 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
474,c11508a5f405084da13c35ee7ab62f1670e4da39,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Jan 16 14:33:06 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
475,8eb23cde95496c65efacdb6f854bfd819ecb31bc,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Sep 27 14:26:12 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
476,8eb23cde95496c65efacdb6f854bfd819ecb31bc,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Sep 27 14:26:12 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
477,8eb23cde95496c65efacdb6f854bfd819ecb31bc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 27 14:26:12 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
478,8eb23cde95496c65efacdb6f854bfd819ecb31bc,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Sep 27 14:26:12 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
479,8eb23cde95496c65efacdb6f854bfd819ecb31bc,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Sep 27 14:26:12 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
480,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
481,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
482,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
483,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
484,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
485,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
486,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Wed Oct 4 23:22:23 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
487,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Oct 4 23:22:23 2017 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
488,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
489,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
490,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Oct 4 23:22:23 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
491,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Oct 4 23:22:23 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
492,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
493,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 4 23:22:23 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
494,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 4 23:22:23 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
495,33e8141f63ccc1a660529cd0d3581bd908bc8c1b,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Wed Oct 4 23:22:23 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
496,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
497,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
498,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
499,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
500,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Oct 26 21:29:29 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
501,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Oct 26 21:29:29 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
502,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
503,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
504,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
505,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
506,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
507,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Thu Oct 26 21:29:29 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
508,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Thu Oct 26 21:29:29 2017 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
509,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 26 21:29:29 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
510,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Oct 26 21:29:29 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
511,503fe408da376a046c37c4940f7f3af0cfa81c38,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Thu Oct 26 21:29:29 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
512,d9e12cba5a9a2291f56eb3921b06ac1b5f85dfc7,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 5 11:54:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
513,d9e12cba5a9a2291f56eb3921b06ac1b5f85dfc7,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jul 5 11:54:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
514,4e3ab9e9fbca682f75eb350c8ad4312282869a03,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
515,4e3ab9e9fbca682f75eb350c8ad4312282869a03,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
516,4e3ab9e9fbca682f75eb350c8ad4312282869a03,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
517,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
518,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Fri Apr 22 09:30:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
519,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
520,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
521,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Fri Apr 22 09:30:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
522,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
523,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
524,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
525,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Apr 22 09:30:57 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
526,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
527,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
528,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
529,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
530,199472c75a8e0c60108399de2da0247af1a0bdab,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 22 09:30:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
531,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
532,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
533,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
534,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
535,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Mar 30 22:03:10 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
536,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
537,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
538,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
539,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
540,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
541,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
542,8a4225cd5ad3ad56a7e896f675080c0ed38982a3,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 30 22:03:10 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
543,93edf327dc6597ee1a763bc105ba7e341415edd8,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 23:10:32 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
544,93edf327dc6597ee1a763bc105ba7e341415edd8,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 23:10:32 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
545,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
546,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
547,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
548,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
549,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
550,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
551,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
552,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
553,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
554,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
555,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 21:08:03 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
556,dd33d18045e50a198d3d75db8fba12f126e93937,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 21:08:03 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
557,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
558,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
559,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
560,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
561,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
562,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
563,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
564,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
565,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 13 14:32:18 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
566,a436d8a634392f9e82b6930a560d56900d887ce7,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 13 14:32:18 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
567,5eef0a28cb70881d8f1e34519e9c0df6cb1da071,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 20 23:34:48 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
568,5eef0a28cb70881d8f1e34519e9c0df6cb1da071,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue May 20 23:34:48 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
569,8fd0db70ce18324be9c8409faa1d266f32fcae7b,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Apr 8 18:45:52 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
570,8fd0db70ce18324be9c8409faa1d266f32fcae7b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Apr 8 18:45:52 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
571,8fd0db70ce18324be9c8409faa1d266f32fcae7b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
572,8fd0db70ce18324be9c8409faa1d266f32fcae7b,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
573,8fd0db70ce18324be9c8409faa1d266f32fcae7b,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
574,8fd0db70ce18324be9c8409faa1d266f32fcae7b,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
575,8fd0db70ce18324be9c8409faa1d266f32fcae7b,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Apr 8 18:45:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
576,8fd0db70ce18324be9c8409faa1d266f32fcae7b,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Apr 8 18:45:52 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
577,8fd0db70ce18324be9c8409faa1d266f32fcae7b,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Apr 8 18:45:52 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
578,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
579,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Fri Apr 15 12:45:35 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
580,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
581,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
582,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
583,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
584,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
585,e67c758ec373745300317786a27d639082a3d18d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
586,e67c758ec373745300317786a27d639082a3d18d,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
587,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
588,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
589,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 12:45:35 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
590,e67c758ec373745300317786a27d639082a3d18d,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Apr 15 12:45:35 2016 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
591,85b89c9e5072733c09699acc5342e25e79e12f6b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 5 12:32:43 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
592,85b89c9e5072733c09699acc5342e25e79e12f6b,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Aug 5 12:32:43 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
593,5c5f6709017575b0b090cb5f76b75e7e733ffa2b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Dec 1 15:11:10 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
594,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
595,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
596,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
597,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
598,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
599,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Jul 1 11:45:19 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
600,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
601,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
602,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
603,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
604,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 1 11:45:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
605,2685c82c2e1e75c1f7b39e8cb6e3d5acf258654d,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 1 11:45:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
606,3c01c971cdec8822086d03f509e119cb8a8c719c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 13 12:34:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
607,3c01c971cdec8822086d03f509e119cb8a8c719c,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 13 12:34:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
608,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 7 11:02:51 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
609,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
610,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 7 11:02:51 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
611,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
612,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 7 11:02:51 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
613,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
614,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Wed Sep 7 11:02:51 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
615,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
616,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 7 11:02:51 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
617,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Wed Sep 7 11:02:51 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
618,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
619,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
620,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
621,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
622,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 4 21:50:15 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
623,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 4 21:50:15 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
624,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 4 21:50:15 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
625,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
626,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
627,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
628,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
629,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
630,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
631,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jan 4 21:50:15 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
632,29d77acaf8bfb234ee4f0b3db9e28d7410b99d4e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 8 14:02:32 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
633,29d77acaf8bfb234ee4f0b3db9e28d7410b99d4e,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Dec 8 14:02:32 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
634,29d77acaf8bfb234ee4f0b3db9e28d7410b99d4e,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Dec 8 14:02:32 2017 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
635,29d77acaf8bfb234ee4f0b3db9e28d7410b99d4e,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 8 14:02:32 2017 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
636,29d77acaf8bfb234ee4f0b3db9e28d7410b99d4e,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Dec 8 14:02:32 2017 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
637,29d77acaf8bfb234ee4f0b3db9e28d7410b99d4e,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Fri Dec 8 14:02:32 2017 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
638,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
639,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
640,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
641,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
642,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Tue Mar 15 11:12:09 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
643,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
644,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
645,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
646,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
647,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Tue Mar 15 11:12:09 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
648,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
649,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 15 11:12:09 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
650,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 15 11:12:09 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
651,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 23 15:11:08 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
652,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Sat Apr 23 15:11:08 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
653,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Apr 23 15:11:08 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
654,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 23 15:11:08 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
655,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Sat Apr 23 15:11:08 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
656,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Apr 23 15:11:08 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
657,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Sat Apr 23 15:11:08 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
658,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
659,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
660,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
661,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
662,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Apr 23 15:11:08 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
663,19e5c0123060129c2529221ed5a6e7c41de22b5b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 3 17:04:01 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
664,19e5c0123060129c2529221ed5a6e7c41de22b5b,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Dec 3 17:04:01 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
665,20b34412dc8a3099f658545e8504e1fc1326b3cb,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
666,20b34412dc8a3099f658545e8504e1fc1326b3cb,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
667,20b34412dc8a3099f658545e8504e1fc1326b3cb,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
668,20b34412dc8a3099f658545e8504e1fc1326b3cb,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
669,20b34412dc8a3099f658545e8504e1fc1326b3cb,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jan 23 23:44:34 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
670,20b34412dc8a3099f658545e8504e1fc1326b3cb,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jan 23 23:44:34 2019 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
671,20b34412dc8a3099f658545e8504e1fc1326b3cb,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jan 23 23:44:34 2019 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
672,20b34412dc8a3099f658545e8504e1fc1326b3cb,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jan 23 23:44:34 2019 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
673,20b34412dc8a3099f658545e8504e1fc1326b3cb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jan 23 23:44:34 2019 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
674,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 21 16:18:22 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
675,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
676,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 21 16:18:22 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
677,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
678,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Wed Sep 21 16:18:22 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
679,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
680,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 21 16:18:22 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
681,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
682,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 21 16:18:22 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
683,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Sep 21 16:18:22 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
684,5d6eca6642c5749099513f1f66bb44e004aa0938,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 15 11:44:15 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
685,5d6eca6642c5749099513f1f66bb44e004aa0938,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Dec 15 11:44:15 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
686,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
687,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
688,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
689,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
690,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Nov 14 14:17:44 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
691,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
692,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
693,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Nov 14 14:17:44 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
694,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
695,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
696,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Nov 14 14:17:44 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
697,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 14 14:17:44 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
698,d1a0773d3a834a4bfa98deb07ae3f87dd6438da6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 14 14:17:44 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
699,4c4356692580afb3971094e322aea64abe0e2500,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 18 16:49:16 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
700,4c4356692580afb3971094e322aea64abe0e2500,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Mar 18 16:49:16 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
701,90758fb028148eb2565417d6ce96e454e07284b7,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat May 16 15:03:55 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
702,90758fb028148eb2565417d6ce96e454e07284b7,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat May 16 15:03:55 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
703,90758fb028148eb2565417d6ce96e454e07284b7,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sat May 16 15:03:55 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
704,90758fb028148eb2565417d6ce96e454e07284b7,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sat May 16 15:03:55 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
705,90758fb028148eb2565417d6ce96e454e07284b7,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat May 16 15:03:55 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
706,90758fb028148eb2565417d6ce96e454e07284b7,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sat May 16 15:03:55 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
707,90758fb028148eb2565417d6ce96e454e07284b7,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat May 16 15:03:55 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
708,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 22 10:15:18 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
709,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
710,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 22 10:15:18 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
711,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
712,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 22 10:15:18 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
713,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
714,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 22 10:15:18 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
715,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
716,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Sep 22 10:15:18 2016 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
717,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 22 10:15:18 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
718,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 22 10:15:18 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
719,7cb13d4d85990555be1317ae32b394e98a779379,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Apr 9 21:58:09 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
720,7cb13d4d85990555be1317ae32b394e98a779379,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Apr 9 21:58:09 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
721,7cb13d4d85990555be1317ae32b394e98a779379,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Thu Apr 9 21:58:09 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
722,7cb13d4d85990555be1317ae32b394e98a779379,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Apr 9 21:58:09 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
723,7cb13d4d85990555be1317ae32b394e98a779379,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Apr 9 21:58:09 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
724,7cb13d4d85990555be1317ae32b394e98a779379,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Thu Apr 9 21:58:09 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
725,7cb13d4d85990555be1317ae32b394e98a779379,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Thu Apr 9 21:58:09 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
726,5e19064462ebb23b36170c1bd68d44c03a40e564,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Sat Feb 4 23:28:34 2017 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
727,457166295c57e982c470110cde653135385cbca5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 9 17:05:51 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
728,457166295c57e982c470110cde653135385cbca5,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jul 9 17:05:51 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
729,514be385f7451df8bbf9e1a7bb015e3baec406f1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 11 08:17:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
730,514be385f7451df8bbf9e1a7bb015e3baec406f1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Mar 11 08:17:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
731,514be385f7451df8bbf9e1a7bb015e3baec406f1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Wed Mar 11 08:17:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
732,359d0c247fe523ef82676f9ae4046b79e6854fe1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 31 10:06:22 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
733,359d0c247fe523ef82676f9ae4046b79e6854fe1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Aug 31 10:06:22 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
734,b96093fa56a9c085cb3123010be2430753c40cbc,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 11:59:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
735,b96093fa56a9c085cb3123010be2430753c40cbc,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 11:59:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
736,b96093fa56a9c085cb3123010be2430753c40cbc,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Thu Sep 7 11:59:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
737,b96093fa56a9c085cb3123010be2430753c40cbc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 11:59:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
738,b96093fa56a9c085cb3123010be2430753c40cbc,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 11:59:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
739,b96093fa56a9c085cb3123010be2430753c40cbc,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Sep 7 11:59:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
740,b96093fa56a9c085cb3123010be2430753c40cbc,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 11:59:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
741,b96093fa56a9c085cb3123010be2430753c40cbc,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 11:59:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
742,b96093fa56a9c085cb3123010be2430753c40cbc,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Thu Sep 7 11:59:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
743,cf655ca98d9c230d02454a39e815fc6b11ac5aed,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Apr 8 09:42:47 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
744,cf655ca98d9c230d02454a39e815fc6b11ac5aed,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Apr 8 09:42:47 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
745,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
746,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
747,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
748,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
749,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Dec 1 08:33:30 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
750,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
751,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
752,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
753,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Thu Dec 1 08:33:30 2016 -0500,Tue Dec 1 09:47:19 2015 +0100,,1
754,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
755,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
756,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 1 08:33:30 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
757,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 1 08:33:30 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
758,e55ed741c24fe9e974d08f4893c79752fb279dc4,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 16 14:15:57 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
759,e55ed741c24fe9e974d08f4893c79752fb279dc4,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Apr 16 14:15:57 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
760,4bc4587f05a754f52e40928c32c84ea48cc3522f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Feb 9 15:19:08 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
761,4bc4587f05a754f52e40928c32c84ea48cc3522f,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Feb 9 15:19:08 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
762,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
763,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
764,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
765,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
766,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
767,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
768,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
769,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
770,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 7 22:19:46 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
771,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
772,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 7 22:19:46 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
773,9067ef0e32c6a85384dad2a30ac3a49e2f9fe393,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Mar 7 22:19:46 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
774,276e234ca0ec0fa20497b22f9a6d193e999d73cb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 6 16:48:51 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
775,276e234ca0ec0fa20497b22f9a6d193e999d73cb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jul 6 16:48:51 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
776,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed May 22 16:49:55 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
777,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,Dockerfile.buildkit,Dockerfile.buildkit,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed May 22 16:49:55 2019 -0700,Wed May 22 16:49:55 2019 -0700,Fri Jun 7 10:10:31 2019 -0700,1
778,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,Dockerfile.buildkit,Dockerfile.buildkit,"# Options for hack/validate/gometalinter
",Wed May 22 16:49:55 2019 -0700,Wed May 22 16:49:55 2019 -0700,Fri Jun 7 10:10:31 2019 -0700,1
779,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Jun 27 14:38:47 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
780,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 14:38:47 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
781,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
782,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 14:38:47 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
783,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
784,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 14:38:47 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
785,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
786,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 14:38:47 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
787,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
788,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Jun 27 14:38:47 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
789,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Jun 27 14:38:47 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
790,f731b01483ed7010824c5951cc4a27db907c2d47,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Apr 21 11:33:52 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
791,f731b01483ed7010824c5951cc4a27db907c2d47,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Apr 21 11:33:52 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
792,f731b01483ed7010824c5951cc4a27db907c2d47,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Apr 21 11:33:52 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
793,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Feb 7 14:45:41 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
794,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
795,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
796,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
797,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
798,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
799,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Wed Feb 7 14:45:41 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
800,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Feb 7 14:45:41 2018 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
801,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
802,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
803,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
804,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
805,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Wed Feb 7 14:45:41 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
806,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 7 14:45:41 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
807,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Wed Feb 7 14:45:41 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
808,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 7 14:45:41 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
809,caeab268430a033fedd27c53be16758ac1a0f71e,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Feb 7 14:45:41 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
810,6ee9a1ad2933c48031c51c9f9a3bc9d7ba0c5fb9,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat Apr 4 00:44:25 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
811,6ee9a1ad2933c48031c51c9f9a3bc9d7ba0c5fb9,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sat Apr 4 00:44:25 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
812,6ee9a1ad2933c48031c51c9f9a3bc9d7ba0c5fb9,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat Apr 4 00:44:25 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
813,6ee9a1ad2933c48031c51c9f9a3bc9d7ba0c5fb9,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Apr 4 00:44:25 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
814,6ee9a1ad2933c48031c51c9f9a3bc9d7ba0c5fb9,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Apr 4 00:44:25 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
815,6ee9a1ad2933c48031c51c9f9a3bc9d7ba0c5fb9,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sat Apr 4 00:44:25 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
816,6ee9a1ad2933c48031c51c9f9a3bc9d7ba0c5fb9,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sat Apr 4 00:44:25 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
817,36e060299f2c3d73b26f556f73ba58a9738fd23e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 17 13:50:37 2013 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
818,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
819,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
820,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
821,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
822,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
823,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
824,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.solaris,Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",Tue Jun 20 16:39:52 2017 -0400,Tue Jun 7 00:45:21 2016 -0700,Tue Oct 24 14:32:52 2017 -0400,1
825,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
826,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
827,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 16:39:52 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
828,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 16:39:52 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
829,d616a097638bc73a652bcf5f7b25465c25bfaa83,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Nov 14 18:01:24 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
830,d616a097638bc73a652bcf5f7b25465c25bfaa83,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Nov 14 18:01:24 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
831,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
832,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
833,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
834,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
835,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
836,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
837,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
838,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
839,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
840,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
841,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
842,8d18e6b30f0a33463c749079d87cad8fa9c19d52,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 11:36:20 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
843,01d6a566997784e44c34eb4b06bd9bc022237d4e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 16 10:02:22 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
844,01d6a566997784e44c34eb4b06bd9bc022237d4e,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Aug 16 10:02:22 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
845,01d6a566997784e44c34eb4b06bd9bc022237d4e,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Aug 16 10:02:22 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
846,01d6a566997784e44c34eb4b06bd9bc022237d4e,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Aug 16 10:02:22 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
847,01d6a566997784e44c34eb4b06bd9bc022237d4e,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Aug 16 10:02:22 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
848,01d6a566997784e44c34eb4b06bd9bc022237d4e,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Aug 16 10:02:22 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
849,10fd0516b9f9f04d0f0e2c0755e704303f1a487f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
850,10fd0516b9f9f04d0f0e2c0755e704303f1a487f,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
851,10fd0516b9f9f04d0f0e2c0755e704303f1a487f,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
852,10fd0516b9f9f04d0f0e2c0755e704303f1a487f,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
853,10fd0516b9f9f04d0f0e2c0755e704303f1a487f,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jun 27 15:03:22 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
854,10fd0516b9f9f04d0f0e2c0755e704303f1a487f,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jun 27 15:03:22 2018 -0700,Fri Sep 8 16:43:04 2017 +0200,,1
855,10fd0516b9f9f04d0f0e2c0755e704303f1a487f,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jun 27 15:03:22 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
856,10fd0516b9f9f04d0f0e2c0755e704303f1a487f,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jun 27 15:03:22 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
857,10fd0516b9f9f04d0f0e2c0755e704303f1a487f,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Jun 27 15:03:22 2018 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
858,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue May 24 16:39:52 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
859,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
860,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
861,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
862,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
863,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
864,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
865,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
866,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
867,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
868,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 24 16:39:52 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
869,d864a1462037a2746b7633fb0212218d017a5532,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 24 16:39:52 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
870,635584280ba2c669542b0357b186070032a1d34a,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Oct 18 10:23:09 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
871,635584280ba2c669542b0357b186070032a1d34a,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Oct 18 10:23:09 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
872,635584280ba2c669542b0357b186070032a1d34a,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Oct 18 10:23:09 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
873,635584280ba2c669542b0357b186070032a1d34a,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Oct 18 10:23:09 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
874,635584280ba2c669542b0357b186070032a1d34a,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Oct 18 10:23:09 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
875,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
876,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
877,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
878,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
879,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
880,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
881,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Thu Feb 15 07:43:44 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
882,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
883,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Thu Feb 15 07:43:44 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
884,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
885,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Feb 15 07:43:44 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
886,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 15 07:43:44 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
887,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 15 07:43:44 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
888,9d9af83b0fd70ff6a7faa15cf8746669f0f3b588,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Thu Feb 15 07:43:44 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
889,e611a189cb3147cd79ccabfe8ba61ae3e3e28459,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 23 11:02:56 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
890,e611a189cb3147cd79ccabfe8ba61ae3e3e28459,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jul 23 11:02:56 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
891,e611a189cb3147cd79ccabfe8ba61ae3e3e28459,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 23 11:02:56 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
892,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
893,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
894,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Jan 22 13:40:19 2018 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
895,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
896,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
897,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Mon Jan 22 13:40:19 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
898,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
899,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
900,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
901,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Mon Jan 22 13:40:19 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
902,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
903,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Jan 22 13:40:19 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
904,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Jan 22 13:40:19 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
905,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
906,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 22 13:40:19 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
907,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 22 13:40:19 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
908,3cc13511f0c8d7f3aeb382f0444e37592a8b5e69,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Mon Jan 22 13:40:19 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
909,3b5fac462d21ca164b3778647420016315289034,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 4 14:39:12 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
910,3b5fac462d21ca164b3778647420016315289034,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 4 14:39:12 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
911,3b5fac462d21ca164b3778647420016315289034,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Nov 4 14:39:12 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
912,3b5fac462d21ca164b3778647420016315289034,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 4 14:39:12 2015 -0500,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
913,3b5fac462d21ca164b3778647420016315289034,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 4 14:39:12 2015 -0500,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
914,3b5fac462d21ca164b3778647420016315289034,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Nov 4 14:39:12 2015 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
915,cdc14c7cbf3ad912588e8cc51f798183f369c9cc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 9 18:22:19 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
916,cdc14c7cbf3ad912588e8cc51f798183f369c9cc,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 9 18:22:19 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
917,708b068d3095c6a6be939eb2da78c921d2e945e2,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
918,708b068d3095c6a6be939eb2da78c921d2e945e2,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
919,708b068d3095c6a6be939eb2da78c921d2e945e2,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
920,708b068d3095c6a6be939eb2da78c921d2e945e2,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
921,708b068d3095c6a6be939eb2da78c921d2e945e2,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
922,708b068d3095c6a6be939eb2da78c921d2e945e2,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Mar 29 16:43:31 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
923,e80ee5206e6e62521c8149381d06bbb0bea88169,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Nov 5 16:48:09 2018 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
924,e80ee5206e6e62521c8149381d06bbb0bea88169,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Nov 5 16:48:09 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
925,e80ee5206e6e62521c8149381d06bbb0bea88169,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Nov 5 16:48:09 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
926,e80ee5206e6e62521c8149381d06bbb0bea88169,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Nov 5 16:48:09 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
927,e80ee5206e6e62521c8149381d06bbb0bea88169,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
928,e80ee5206e6e62521c8149381d06bbb0bea88169,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
929,e80ee5206e6e62521c8149381d06bbb0bea88169,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
930,e80ee5206e6e62521c8149381d06bbb0bea88169,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
931,e80ee5206e6e62521c8149381d06bbb0bea88169,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Nov 5 16:48:09 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
932,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 29 04:59:19 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
933,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 29 04:59:19 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
934,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 29 04:59:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
935,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Fri Apr 29 04:59:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
936,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 29 04:59:19 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
937,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 29 04:59:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
938,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Apr 29 04:59:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
939,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 29 04:59:19 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
940,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 29 04:59:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
941,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Fri Apr 29 04:59:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
942,6e4c87c06e95f8c1aea0fa6d6575ff8c9faf8e03,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 29 04:59:19 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
943,cd44018856be421497a35d96f88dd0eec42fae43,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jun 13 09:21:50 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
944,cd44018856be421497a35d96f88dd0eec42fae43,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Jun 13 09:21:50 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
945,cd44018856be421497a35d96f88dd0eec42fae43,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Jun 13 09:21:50 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
946,cd44018856be421497a35d96f88dd0eec42fae43,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jun 13 09:21:50 2015 -0700,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
947,cd44018856be421497a35d96f88dd0eec42fae43,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Jun 13 09:21:50 2015 -0700,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
948,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
949,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
950,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
951,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
952,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
953,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
954,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
955,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
956,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
957,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Apr 4 14:27:44 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
958,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 4 14:27:44 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
959,3f81b4935292d5daedea9de4e2db0895986115da,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 4 14:27:44 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
960,c8f43b5f6f7c83cfb5570f7f013c7efaa430d285,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 16 12:16:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
961,c8f43b5f6f7c83cfb5570f7f013c7efaa430d285,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jul 16 12:16:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
962,c8f43b5f6f7c83cfb5570f7f013c7efaa430d285,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Jul 16 12:16:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
963,c8f43b5f6f7c83cfb5570f7f013c7efaa430d285,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jul 16 12:16:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
964,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Mar 18 11:50:19 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
965,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
966,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
967,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
968,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
969,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
970,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
971,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
972,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
973,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
974,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
975,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
976,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
977,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
978,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
979,9c4570a958df42d1ad19364b1a8da55b891d850a,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 18 11:50:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
980,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
981,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
982,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
983,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
984,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
985,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
986,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Aug 26 13:52:10 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
987,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
988,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
989,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 26 13:52:10 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
990,e0123adafdc1e6a14a1dac10c5371da11b6fc063,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 26 13:52:10 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
991,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Nov 3 09:47:50 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
992,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
993,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 09:47:50 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
994,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
995,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 09:47:50 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
996,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
997,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Nov 3 09:47:50 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
998,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
999,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 09:47:50 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1000,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1001,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 09:47:50 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1002,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 09:47:50 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1003,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1004,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1005,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1006,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1007,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Fri Feb 23 22:24:47 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1008,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1009,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1010,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Fri Feb 23 22:24:47 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1011,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1012,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1013,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 23 22:24:47 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1014,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 23 22:24:47 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1015,66935a0f64f0a72162fb3919c759f4f500b6c372,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Feb 23 22:24:47 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1016,f067a0acaa98824b5efa3b6e2c370f6e81013a35,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Apr 16 16:31:49 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1017,f067a0acaa98824b5efa3b6e2c370f6e81013a35,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Apr 16 16:31:49 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1018,f067a0acaa98824b5efa3b6e2c370f6e81013a35,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Apr 16 16:31:49 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1019,f067a0acaa98824b5efa3b6e2c370f6e81013a35,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Apr 16 16:31:49 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1020,8d2e1ee5467b7b0d8c917260adf7b08bd09ff476,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Tue Oct 8 01:14:51 2019 +0000,Tue Dec 1 09:47:19 2015 +0100,,1
1021,06685a53c16468a5fd3dfcc247a7a8dd5aaf85c1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 17 23:57:44 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1022,06685a53c16468a5fd3dfcc247a7a8dd5aaf85c1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Feb 17 23:57:44 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1023,f1701a741d77a92d28138944193e23aabfc74abe,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1024,f1701a741d77a92d28138944193e23aabfc74abe,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1025,f1701a741d77a92d28138944193e23aabfc74abe,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1026,f1701a741d77a92d28138944193e23aabfc74abe,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1027,f1701a741d77a92d28138944193e23aabfc74abe,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1028,f1701a741d77a92d28138944193e23aabfc74abe,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Mar 9 06:09:59 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1029,4710ed6304b8456060f4cb4401b2ed47343991e4,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 11:12:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1030,4710ed6304b8456060f4cb4401b2ed47343991e4,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 25 11:12:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1031,4710ed6304b8456060f4cb4401b2ed47343991e4,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 11:12:57 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1032,ed345fb18ee9d003f30884b696628b75380a426a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Feb 14 03:27:31 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1033,ed345fb18ee9d003f30884b696628b75380a426a,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Feb 14 03:27:31 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1034,7d1a72a2866aedbc7492a0cfc5cd4e13646322fe,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 17 16:00:59 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1035,7d1a72a2866aedbc7492a0cfc5cd4e13646322fe,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 17 16:00:59 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1036,cf86eeaf96c3641d231273208559736f7f816d88,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Nov 1 10:42:19 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1037,cf86eeaf96c3641d231273208559736f7f816d88,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Nov 1 10:42:19 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1038,cf86eeaf96c3641d231273208559736f7f816d88,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Nov 1 10:42:19 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
1039,cf86eeaf96c3641d231273208559736f7f816d88,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Nov 1 10:42:19 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1040,cf86eeaf96c3641d231273208559736f7f816d88,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Nov 1 10:42:19 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1041,2677f1add48961115f08016da422d74cafbf4c8b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 8 23:07:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1042,2677f1add48961115f08016da422d74cafbf4c8b,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jan 8 23:07:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1043,c7089b4b469e0a536a260c136ef71bc95591fa51,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",Sat Jan 30 20:50:11 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
1044,ba49e8c49830b69c833edff3c393716da20f897a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 14 22:03:52 2018 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1045,ba49e8c49830b69c833edff3c393716da20f897a,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Wed Feb 14 22:03:52 2018 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1046,ba49e8c49830b69c833edff3c393716da20f897a,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Feb 14 22:03:52 2018 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1047,ba49e8c49830b69c833edff3c393716da20f897a,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Feb 14 22:03:52 2018 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1048,fcc0ac61093d0cd0b49b11bb5f7f7501e070bd63,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 4 21:12:18 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1049,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Jun 13 19:33:00 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1050,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1051,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1052,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1053,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1054,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1055,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1056,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1057,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1058,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1059,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 13 19:33:00 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1060,1aec3bacfd754e1ed72ec5a59dfd20d653f794a3,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 13 19:33:00 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1061,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1062,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1063,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1064,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1065,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1066,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1067,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Mon Sep 25 10:03:37 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1068,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Sep 25 10:03:37 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1069,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1070,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1071,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1072,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Mon Sep 25 10:03:37 2017 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1073,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Sep 25 10:03:37 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1074,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Sep 25 10:03:37 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1075,1b51a05375b48c5f655fbbedc5a1e7cba044122c,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Sep 25 10:03:37 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1076,62e8a93c3496791e8bfb2204f68b2a1cdf61fec9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 11 20:53:16 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1077,62e8a93c3496791e8bfb2204f68b2a1cdf61fec9,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Dec 11 20:53:16 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1078,05ec12b082d779959a8ea07ff89c3de1f53c2f6b,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Mar 5 22:36:54 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1079,05ec12b082d779959a8ea07ff89c3de1f53c2f6b,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Mar 5 22:36:54 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1080,05ec12b082d779959a8ea07ff89c3de1f53c2f6b,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Thu Mar 5 22:36:54 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1081,05ec12b082d779959a8ea07ff89c3de1f53c2f6b,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Thu Mar 5 22:36:54 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1082,b4336803f35591c8e4d94b023c9d5e9525795520,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 14 06:16:41 2014 +0100,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1083,b4336803f35591c8e4d94b023c9d5e9525795520,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Nov 14 06:16:41 2014 +0100,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1084,b4336803f35591c8e4d94b023c9d5e9525795520,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 14 06:16:41 2014 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1085,b4336803f35591c8e4d94b023c9d5e9525795520,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Nov 14 06:16:41 2014 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1086,28b99648aea000b01eb9634743110900d025238c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 22 17:45:18 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1087,28b99648aea000b01eb9634743110900d025238c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Mar 22 17:45:18 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1088,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1089,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1090,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Feb 13 04:52:10 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1091,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1092,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1093,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1094,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1095,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Feb 13 04:52:10 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1096,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1097,3a971009763387856bb7f162accdf6714100e39b,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1098,3a971009763387856bb7f162accdf6714100e39b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 13 04:52:10 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1099,3a971009763387856bb7f162accdf6714100e39b,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Feb 13 04:52:10 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1100,3a971009763387856bb7f162accdf6714100e39b,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 13 04:52:10 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1101,9db1d16053b9c94586d4233a1f4067eede24947e,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 30 17:44:33 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1102,9db1d16053b9c94586d4233a1f4067eede24947e,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 30 17:44:33 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1103,9db1d16053b9c94586d4233a1f4067eede24947e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 30 17:44:33 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1104,9db1d16053b9c94586d4233a1f4067eede24947e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Jan 30 17:44:33 2017 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1105,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1106,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1107,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1108,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1109,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1110,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1111,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1112,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1113,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 31 20:11:30 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1114,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Dec 31 20:11:30 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1115,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1116,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1117,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1118,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1119,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1120,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1121,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1122,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1123,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1124,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1125,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1126,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1127,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1128,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1129,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1130,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1131,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:56:11 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1132,5dffe74df211447d7f342474f7641edadc6ee69c,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Jan 30 15:31:44 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1133,5dffe74df211447d7f342474f7641edadc6ee69c,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Jan 30 15:31:44 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1134,5dffe74df211447d7f342474f7641edadc6ee69c,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Thu Jan 30 15:31:44 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1135,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Fri Nov 4 09:03:41 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1136,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1137,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 4 09:03:41 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1138,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1139,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 4 09:03:41 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1140,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1141,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Nov 4 09:03:41 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
1142,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
1143,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 4 09:03:41 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1144,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1145,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 4 09:03:41 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1146,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Nov 4 09:03:41 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1147,0ec8f56a3d7f1413cdb3ae7711d518e99f9282e9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 9 12:48:33 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1148,0ec8f56a3d7f1413cdb3ae7711d518e99f9282e9,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 9 12:48:33 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1149,0ec8f56a3d7f1413cdb3ae7711d518e99f9282e9,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 9 12:48:33 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1150,0ec8f56a3d7f1413cdb3ae7711d518e99f9282e9,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Feb 9 12:48:33 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1151,c7c92359460f7fde1c3d42df437cd8a37d9f73d2,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 16 13:59:10 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1152,c7c92359460f7fde1c3d42df437cd8a37d9f73d2,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 16 13:59:10 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1153,c7c92359460f7fde1c3d42df437cd8a37d9f73d2,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 16 13:59:10 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1154,c7c92359460f7fde1c3d42df437cd8a37d9f73d2,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 16 13:59:10 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1155,9177ac322afe2371376591094116be59f3fef054,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Dec 30 13:20:11 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1156,9177ac322afe2371376591094116be59f3fef054,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Dec 30 13:20:11 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1157,9177ac322afe2371376591094116be59f3fef054,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Dec 30 13:20:11 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1158,d757bd0904b71346b6c83622ae5685bc0c0d4349,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",Fri Sep 6 20:16:13 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1159,11280665b45d0ac9920d17abaf6a7328f2bc77d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1160,11280665b45d0ac9920d17abaf6a7328f2bc77d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 4 22:43:53 2016 +0800,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1161,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1162,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1163,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1164,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1165,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1166,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1167,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1168,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1169,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1170,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1171,11280665b45d0ac9920d17abaf6a7328f2bc77d9,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 4 22:43:53 2016 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1172,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1173,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1174,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1175,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1176,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1177,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1178,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1179,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1180,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1181,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1182,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1183,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1184,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1185,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1186,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1187,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 25 13:40:00 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1188,0347751117513312be72e8b0d03f32319027f145,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Oct 2 22:41:31 2018 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1189,0347751117513312be72e8b0d03f32319027f145,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Oct 2 22:41:31 2018 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1190,0347751117513312be72e8b0d03f32319027f145,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Tue Oct 2 22:41:31 2018 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1191,0347751117513312be72e8b0d03f32319027f145,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Oct 2 22:41:31 2018 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
1192,0347751117513312be72e8b0d03f32319027f145,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1193,0347751117513312be72e8b0d03f32319027f145,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1194,0347751117513312be72e8b0d03f32319027f145,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1195,0347751117513312be72e8b0d03f32319027f145,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1196,0347751117513312be72e8b0d03f32319027f145,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Oct 2 22:41:31 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1197,aafdb63f21b3a90b0aeae171663039fa18a1c385,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Tue Jul 9 12:00:37 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
1198,aafdb63f21b3a90b0aeae171663039fa18a1c385,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Jul 9 12:00:37 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1199,aafdb63f21b3a90b0aeae171663039fa18a1c385,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Jul 9 12:00:37 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1200,aafdb63f21b3a90b0aeae171663039fa18a1c385,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 9 12:00:37 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1201,aafdb63f21b3a90b0aeae171663039fa18a1c385,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jul 9 12:00:37 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1202,aafdb63f21b3a90b0aeae171663039fa18a1c385,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Jul 9 12:00:37 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1203,aafdb63f21b3a90b0aeae171663039fa18a1c385,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jul 9 12:00:37 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1204,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1205,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1206,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1207,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1208,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Sun Jul 10 11:11:27 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1209,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1210,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1211,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1212,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1213,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1214,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1215,29b2714580d085533c29807fa337c2b7a302abb6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 10 11:11:27 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1216,b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1217,b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1218,b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1219,b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1220,b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Feb 9 11:24:38 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1221,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1222,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1223,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1224,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1225,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1226,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1227,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1228,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1229,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 17 13:52:14 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1230,d7e2c4ce773b3a54f47e84a5a1ef22eb72c978b5,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Aug 17 13:52:14 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1231,ccefe47897bdcef8b56bf54d4bd324989855f3b5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Mon Sep 30 13:57:30 2013 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
1232,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1233,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1234,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1235,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1236,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile,Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Tue Jan 26 14:21:07 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1237,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1238,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1239,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1240,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1241,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1242,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1243,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1244,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1245,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1246,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1247,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1248,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1249,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 14:21:07 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1250,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 14:21:07 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1251,3770f386477e5eea4e6ba02516393a1edd5cd28b,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Dec 19 09:45:10 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1252,3770f386477e5eea4e6ba02516393a1edd5cd28b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Dec 19 09:45:10 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1253,3770f386477e5eea4e6ba02516393a1edd5cd28b,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Dec 19 09:45:10 2018 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1254,3770f386477e5eea4e6ba02516393a1edd5cd28b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1255,3770f386477e5eea4e6ba02516393a1edd5cd28b,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1256,3770f386477e5eea4e6ba02516393a1edd5cd28b,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1257,3770f386477e5eea4e6ba02516393a1edd5cd28b,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1258,3770f386477e5eea4e6ba02516393a1edd5cd28b,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Dec 19 09:45:10 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1259,3770f386477e5eea4e6ba02516393a1edd5cd28b,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Dec 19 09:45:10 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
1260,5bf33adba2f55678f571392765733e1ead33b756,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Feb 18 18:43:56 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1261,5bf33adba2f55678f571392765733e1ead33b756,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 18 18:43:56 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1262,5bf33adba2f55678f571392765733e1ead33b756,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Tue Feb 18 18:43:56 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1263,5bf33adba2f55678f571392765733e1ead33b756,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Feb 18 18:43:56 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1264,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1265,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1266,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1267,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1268,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1269,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1270,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1271,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1272,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1273,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1274,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1275,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 24 09:18:03 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1276,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Mar 24 09:18:03 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1277,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1278,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1279,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1280,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1281,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1282,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1283,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1284,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1285,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1286,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1287,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 29 09:35:42 2016 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1288,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 09:35:42 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1289,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 09:35:42 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1290,5add621331d2790d04437cff0d936649f5fb4767,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Sun Oct 30 13:57:40 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
1291,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1292,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1293,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1294,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1295,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1296,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1297,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1298,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1299,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1300,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1301,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1302,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1303,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1304,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1305,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile,Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 27 09:46:26 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1306,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1307,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1308,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1309,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 27 09:46:26 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1310,b5aba426d4bb903825ec4b3b4912f521daac4c2a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 13 21:35:21 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1311,b5aba426d4bb903825ec4b3b4912f521daac4c2a,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 13 21:35:21 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1312,933f957e773d5b9da13e32649d0f987b30e87eb5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 16 09:45:37 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1313,933f957e773d5b9da13e32649d0f987b30e87eb5,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 16 09:45:37 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1314,c1c5d760a6dabdc73017402eee5109b81465d438,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 28 16:43:36 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1315,c1c5d760a6dabdc73017402eee5109b81465d438,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu May 28 16:43:36 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1316,c1c5d760a6dabdc73017402eee5109b81465d438,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 28 16:43:36 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1317,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1318,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1319,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1320,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1321,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1322,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 11:51:22 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1323,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1324,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1325,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1326,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1327,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1328,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 11:51:22 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1329,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 11:51:22 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1330,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1331,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1332,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 26 11:51:22 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1333,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1334,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1335,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1336,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Jul 21 10:21:52 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1337,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 21 10:21:52 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1338,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 21 10:21:52 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1339,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1340,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 21 10:21:52 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1341,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 21 10:21:52 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1342,d5cbc57eff0df651bfbfb455608da45747651d0c,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 21 10:21:52 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1343,d185ca78ec53a448d8be0aaa4ade4824f9e4f928,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 17 14:35:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1344,d185ca78ec53a448d8be0aaa4ade4824f9e4f928,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 17 14:35:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1345,d185ca78ec53a448d8be0aaa4ade4824f9e4f928,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jul 17 14:35:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1346,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 18:31:33 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1347,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1348,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 18:31:33 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1349,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1350,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 18:31:33 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1351,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1352,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Sep 8 18:31:33 2016 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
1353,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 18:31:33 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1354,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1355,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 8 18:31:33 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1356,6bc9a2d563ace9fa604de15731e263b353e83120,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 18:31:33 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1357,9e1da3ec9ce8e608c17d999446882ae096b8394f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 17 22:36:26 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1358,73b0e4c58995927ab31e0e42351de7cdefe96e55,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Aug 14 02:27:05 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1359,73b0e4c58995927ab31e0e42351de7cdefe96e55,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Aug 14 02:27:05 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1360,73b0e4c58995927ab31e0e42351de7cdefe96e55,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 14 02:27:05 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1361,73b0e4c58995927ab31e0e42351de7cdefe96e55,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Aug 14 02:27:05 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1362,73b0e4c58995927ab31e0e42351de7cdefe96e55,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Aug 14 02:27:05 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1363,73b0e4c58995927ab31e0e42351de7cdefe96e55,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Aug 14 02:27:05 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1364,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1365,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1366,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1367,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1368,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1369,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Jun 7 14:30:43 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1370,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1371,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1372,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1373,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1374,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 7 14:30:43 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1375,d17b9f3da064f4c7e70867be5e64d06b127df301,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 7 14:30:43 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1376,dd7436c832a5dd777d0276c3e3b1819062b86ebc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 12:21:55 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1377,dd7436c832a5dd777d0276c3e3b1819062b86ebc,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 12:21:55 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1378,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1379,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1380,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1381,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1382,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Wed Nov 1 21:28:37 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1383,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1384,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1385,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1386,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1387,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Nov 1 21:28:37 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1388,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 1 21:28:37 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1389,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Nov 1 21:28:37 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1390,16d83571f5f8f833aca123874cbb34ff023df995,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Wed Nov 1 21:28:37 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1391,bf2a577c131d8998eb6ecac986d80e1289e6c801,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 31 09:27:28 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1392,bf2a577c131d8998eb6ecac986d80e1289e6c801,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue May 31 09:27:28 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1393,bf2a577c131d8998eb6ecac986d80e1289e6c801,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 31 09:27:28 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1394,503b03a3f090550052af960ece2e71d54c1fdf0e,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 9 15:45:11 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1395,503b03a3f090550052af960ece2e71d54c1fdf0e,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 9 15:45:11 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1396,503b03a3f090550052af960ece2e71d54c1fdf0e,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Thu Nov 9 15:45:11 2017 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1397,503b03a3f090550052af960ece2e71d54c1fdf0e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 9 15:45:11 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1398,503b03a3f090550052af960ece2e71d54c1fdf0e,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 9 15:45:11 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1399,503b03a3f090550052af960ece2e71d54c1fdf0e,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Nov 9 15:45:11 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1400,503b03a3f090550052af960ece2e71d54c1fdf0e,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 9 15:45:11 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1401,503b03a3f090550052af960ece2e71d54c1fdf0e,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 9 15:45:11 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1402,503b03a3f090550052af960ece2e71d54c1fdf0e,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Thu Nov 9 15:45:11 2017 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1403,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1404,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",Tue Jan 16 10:49:18 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1405,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1406,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jan 16 10:49:18 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1407,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1408,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1409,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Jan 16 10:49:18 2018 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1410,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1411,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1412,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Jan 16 10:49:18 2018 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1413,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Jan 16 10:49:18 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
1414,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
1415,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1416,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1417,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 16 10:49:18 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1418,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jan 16 10:49:18 2018 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1419,cec5ca75e1ba2e05095a5ff072c3738684575d86,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jun 24 23:51:06 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1420,cec5ca75e1ba2e05095a5ff072c3738684575d86,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Jun 24 23:51:06 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1421,8900ae2928cea8f4b5d52ff68253cad2504edd6c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 24 16:27:35 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1422,8900ae2928cea8f4b5d52ff68253cad2504edd6c,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Mar 24 16:27:35 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1423,8900ae2928cea8f4b5d52ff68253cad2504edd6c,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Tue Mar 24 16:27:35 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1424,7c9e9afeb78ad3265c2ec5d4c6969c0d6182af2b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 9 13:13:38 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1425,7c9e9afeb78ad3265c2ec5d4c6969c0d6182af2b,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Feb 9 13:13:38 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1426,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1427,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1428,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1429,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1430,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1431,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1432,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1433,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1434,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1435,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 23 01:57:00 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1436,cfe16e0d5b4bb7d1d194553f2a82cc1879d60e6b,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 23 01:57:00 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1437,d7c37b5a28de6e7c0a9270815c092a45d8d7fef7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 13 16:25:10 2014 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1438,d7c37b5a28de6e7c0a9270815c092a45d8d7fef7,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Nov 13 16:25:10 2014 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1439,414cfe946719a0ba811c95486d523e003d44fcc1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 13 12:39:05 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1440,414cfe946719a0ba811c95486d523e003d44fcc1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 13 12:39:05 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1441,414cfe946719a0ba811c95486d523e003d44fcc1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Oct 13 12:39:05 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1442,2bcf50bdd41174b2519cab66b1fef0eb8bc78f9b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 14 14:21:44 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1443,2bcf50bdd41174b2519cab66b1fef0eb8bc78f9b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Mon Mar 14 14:21:44 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1444,2bcf50bdd41174b2519cab66b1fef0eb8bc78f9b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 14 14:21:44 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1445,3bcf58236619f4c2902157ce4deaaaf44ca6f128,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Jan 4 11:58:11 2019 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
1446,ab3772f72fcb189c742510326069474ea625042f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1447,ab3772f72fcb189c742510326069474ea625042f,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1448,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1449,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1450,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1451,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1452,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1453,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1454,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1455,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1456,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1457,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1458,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1459,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1460,ab3772f72fcb189c742510326069474ea625042f,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 17 10:23:18 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1461,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 00:42:35 2016 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1462,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1463,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 00:42:35 2016 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1464,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1465,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 00:42:35 2016 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1466,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1467,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu Sep 8 00:42:35 2016 +0300,Fri Feb 27 22:37:25 2015 -0700,,1
1468,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Thu Sep 8 00:42:35 2016 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1469,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1470,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 00:42:35 2016 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1471,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 00:42:35 2016 +0300,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1472,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Thu Sep 8 00:42:35 2016 +0300,Tue Dec 1 09:47:19 2015 +0100,,1
1473,2f35f60348663b3775f038eadea4fccbd0591725,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 18 15:07:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1474,2f35f60348663b3775f038eadea4fccbd0591725,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Feb 18 15:07:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1475,eb484fcb67fc436c6535d750104471343d7fb676,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sun Mar 1 00:31:43 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1476,eb484fcb67fc436c6535d750104471343d7fb676,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Mar 1 00:31:43 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1477,eb484fcb67fc436c6535d750104471343d7fb676,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sun Mar 1 00:31:43 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1478,eb484fcb67fc436c6535d750104471343d7fb676,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sun Mar 1 00:31:43 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1479,8edbe5dec254d19e378a5a7cb1abf202f7b20eef,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 22:59:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1480,8edbe5dec254d19e378a5a7cb1abf202f7b20eef,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 22:59:51 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1481,5a076d7589d7a30cc0a1e45eff6674a2c8fa1cb0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 17 21:18:13 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1482,5a076d7589d7a30cc0a1e45eff6674a2c8fa1cb0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Apr 17 21:18:13 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1483,51977a230715be285f8b8076f43bd1e5803d051c,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Apr 30 15:21:05 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1484,51977a230715be285f8b8076f43bd1e5803d051c,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Apr 30 15:21:05 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1485,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1486,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1487,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1488,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1489,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1490,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1491,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1492,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1493,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 20:05:11 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1494,d183d6fa7d91307eb6ea68582697f3e1e5e5dfcd,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 20:05:11 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1495,ee59f25c2d503cd68262679250387e140171c685,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 22 13:23:15 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1496,ee59f25c2d503cd68262679250387e140171c685,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Aug 22 13:23:15 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1497,66d24c2b44a076a6dda17dabe028da9acaa55deb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 15 14:25:03 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1498,66d24c2b44a076a6dda17dabe028da9acaa55deb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jan 15 14:25:03 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1499,7268eb97bc208f4cdf7c9119da0cfa2c9ed558a4,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 13 14:22:48 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1500,7268eb97bc208f4cdf7c9119da0cfa2c9ed558a4,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Apr 13 14:22:48 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1501,7268eb97bc208f4cdf7c9119da0cfa2c9ed558a4,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 13 14:22:48 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1502,7268eb97bc208f4cdf7c9119da0cfa2c9ed558a4,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Apr 13 14:22:48 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1503,7268eb97bc208f4cdf7c9119da0cfa2c9ed558a4,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 13 14:22:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1504,7268eb97bc208f4cdf7c9119da0cfa2c9ed558a4,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Apr 13 14:22:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1505,7268eb97bc208f4cdf7c9119da0cfa2c9ed558a4,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 13 14:22:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1506,7268eb97bc208f4cdf7c9119da0cfa2c9ed558a4,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Wed Apr 13 14:22:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1507,7268eb97bc208f4cdf7c9119da0cfa2c9ed558a4,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Apr 13 14:22:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1508,100267de81985bbf3b976bfde850def89487dc11,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 19 00:20:59 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1509,100267de81985bbf3b976bfde850def89487dc11,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Dec 19 00:20:59 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1510,1c32a66877f2ddc3f1cce66d78c69e032d6cf795,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 7 18:43:01 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1511,1c32a66877f2ddc3f1cce66d78c69e032d6cf795,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 7 18:43:01 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1512,2cccbbdadd8ee7e28824c244e48acebfca96d78a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 19 19:25:54 2013 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1513,e5bfaf19b1ca48203c75b38e5454a05a6bcff4f5,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Oct 8 10:54:39 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1514,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed Apr 4 06:57:53 2018 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
1515,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1516,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1517,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1518,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1519,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1520,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Apr 4 06:57:53 2018 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1521,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Apr 4 06:57:53 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1522,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Apr 4 06:57:53 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1523,0b6f8a7eff325a683b10d64db363da2145aa1c36,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Apr 4 06:57:53 2018 -0700,Fri Sep 8 16:43:04 2017 +0200,,1
1524,d0a0e91f1f8c3a43f04e7a58e37498124b283594,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 19 05:04:08 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1525,d0a0e91f1f8c3a43f04e7a58e37498124b283594,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jun 19 05:04:08 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1526,ecf91f0d7f90b2bd9fa048f2a800beaf613ac507,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Sep 9 23:19:03 2019 +0000,Tue Dec 1 09:47:19 2015 +0100,,1
1527,94c5f51c4a38422489f0f629d43958b282600111,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 29 13:13:32 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1528,94c5f51c4a38422489f0f629d43958b282600111,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",Wed Jan 29 13:13:32 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1529,94c5f51c4a38422489f0f629d43958b282600111,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jan 29 13:13:32 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1530,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1531,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1532,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1533,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1534,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1535,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1536,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1537,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1538,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Wed May 11 15:25:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1539,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1540,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 11 15:25:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1541,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Wed May 11 15:25:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1542,6094be63ac3d29c23024daa2152719b653c78092,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 11 15:25:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1543,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1544,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1545,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Jun 30 01:29:56 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1546,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1547,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Fri Jun 30 01:29:56 2017 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
1548,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1549,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1550,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Fri Jun 30 01:29:56 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1551,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1552,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1553,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Fri Jun 30 01:29:56 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1554,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1555,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1556,d6e1cc32d309ee237342975388e729570343a974,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 30 01:29:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1557,d6e1cc32d309ee237342975388e729570343a974,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 30 01:29:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1558,d6e1cc32d309ee237342975388e729570343a974,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Jun 30 01:29:56 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1559,63aefbfbca8f8f304eaeff90ebb33c47f2b922d3,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:20:24 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
1560,1997081096b9713bf2b79f7b5d8077daddf6e04e,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 28 14:31:34 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1561,1997081096b9713bf2b79f7b5d8077daddf6e04e,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jun 28 14:31:34 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1562,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 12:58:44 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1563,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1564,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed Oct 19 12:58:44 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1565,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1566,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 12:58:44 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1567,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1568,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 12:58:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1569,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1570,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Wed Oct 19 12:58:44 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
1571,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 19 12:58:44 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1572,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1573,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Wed Oct 19 12:58:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1574,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Oct 19 12:58:44 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1575,8523d5518c500903c19a53f73c653318e4db38f9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Nov 12 21:51:12 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1576,d68385b86197a47e8cae6e0bcd0eba7578eecf74,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Jan 17 15:18:44 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1577,d68385b86197a47e8cae6e0bcd0eba7578eecf74,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Jan 17 15:18:44 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1578,d68385b86197a47e8cae6e0bcd0eba7578eecf74,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Jan 17 15:18:44 2020 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1579,d68385b86197a47e8cae6e0bcd0eba7578eecf74,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jan 17 15:18:44 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1580,d68385b86197a47e8cae6e0bcd0eba7578eecf74,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jan 17 15:18:44 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1581,d68385b86197a47e8cae6e0bcd0eba7578eecf74,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jan 17 15:18:44 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1582,588e27f9a57cc2e2cdd84f49cf8cb5a7caed467b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 19 13:28:51 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1583,588e27f9a57cc2e2cdd84f49cf8cb5a7caed467b,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 19 13:28:51 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1584,b7703a992e14255a5972bf157d0c2cfc0da3d53f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 27 22:05:57 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1585,b7703a992e14255a5972bf157d0c2cfc0da3d53f,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Oct 27 22:05:57 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1586,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 28 10:29:17 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1587,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1588,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Nov 28 10:29:17 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1589,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1590,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 28 10:29:17 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1591,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1592,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 28 10:29:17 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1593,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1594,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 28 10:29:17 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1595,175792a65563b6ee14d049631d46749cd4165a3c,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Nov 28 10:29:17 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1596,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 13:51:30 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1597,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 13:51:30 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1598,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1599,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1600,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1601,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1602,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1603,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1604,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1605,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1606,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 13:51:30 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1607,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1608,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1609,9b2aab3fc85ab1d8cf7479b153e54d5dcceb7886,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 13:51:30 2016 -0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1610,3280ce651b13866f93440b60a9182f9a4f9f14b9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 31 21:48:03 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1611,3280ce651b13866f93440b60a9182f9a4f9f14b9,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Mar 31 21:48:03 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1612,3280ce651b13866f93440b60a9182f9a4f9f14b9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Tue Mar 31 21:48:03 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1613,b4b21ff0a6c45c1565c74e6f923b2c7e8ca565d6,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Apr 16 11:39:54 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1614,b4b21ff0a6c45c1565c74e6f923b2c7e8ca565d6,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Apr 16 11:39:54 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1615,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1616,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1617,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Jun 27 11:45:05 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1618,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1619,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1620,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1621,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1622,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1623,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1624,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1625,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1626,7db7e046315eed5ccfb3a913b965be4b1a595601,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 27 11:45:05 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1627,814ce44d5ad442b940e44b41eff00bac0e579fc6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 22 00:08:18 2015 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1628,814ce44d5ad442b940e44b41eff00bac0e579fc6,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Dec 22 00:08:18 2015 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1629,232d59baeb13778abc242a602ca434d83e1eb6e8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 16 22:00:44 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1630,232d59baeb13778abc242a602ca434d83e1eb6e8,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 16 22:00:44 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1631,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Apr 25 12:55:28 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1632,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1633,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1634,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1635,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1636,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Mon Apr 25 12:55:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1637,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1638,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1639,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Mon Apr 25 12:55:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1640,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1641,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1642,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1643,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1644,e0f98c698b49e3790fe63bff611eeda6f5b46055,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 12:55:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1645,8c9d67921a44e4f189373d8dc10fc8946039918d,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Tue May 5 14:33:31 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1646,8c9d67921a44e4f189373d8dc10fc8946039918d,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Tue May 5 14:33:31 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1647,23c1f16ac3b60720a9a89168806165444f2085b3,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat Apr 13 10:56:06 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
1648,23c1f16ac3b60720a9a89168806165444f2085b3,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sat Apr 13 10:56:06 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1649,23c1f16ac3b60720a9a89168806165444f2085b3,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat Apr 13 10:56:06 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1650,23c1f16ac3b60720a9a89168806165444f2085b3,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat Apr 13 10:56:06 2019 +0800,Fri Sep 8 16:43:04 2017 +0200,,1
1651,23c1f16ac3b60720a9a89168806165444f2085b3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1652,23c1f16ac3b60720a9a89168806165444f2085b3,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1653,23c1f16ac3b60720a9a89168806165444f2085b3,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1654,23c1f16ac3b60720a9a89168806165444f2085b3,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1655,23c1f16ac3b60720a9a89168806165444f2085b3,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Sat Apr 13 10:56:06 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1656,d37a7394acd7842f588ef423fb076b05fccd1da2,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 7 13:02:19 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1657,d37a7394acd7842f588ef423fb076b05fccd1da2,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 7 13:02:19 2016 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1658,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Wed May 24 21:11:16 2017 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
1659,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Fri Feb 27 22:37:25 2015 -0700,,1
1660,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1661,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1662,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1663,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1664,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1665,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1666,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Wed May 24 21:11:16 2017 -0400,Tue Dec 1 09:47:19 2015 +0100,,1
1667,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1668,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1669,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 24 21:11:16 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1670,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed May 24 21:11:16 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1671,6cce8d18384a5ae1212e7b0f7b7ac9662a89c8c1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 20 18:32:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1672,6cce8d18384a5ae1212e7b0f7b7ac9662a89c8c1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 20 18:32:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1673,6cce8d18384a5ae1212e7b0f7b7ac9662a89c8c1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 20 18:32:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1674,4602241f11b626d40bf67cfe3a13d3c146adf335,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Mar 11 10:08:51 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1675,4602241f11b626d40bf67cfe3a13d3c146adf335,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Mar 11 10:08:51 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1676,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1677,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1678,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1679,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1680,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1681,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1682,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1683,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1684,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1685,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 16 14:48:48 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1686,9ff0ab71a076d9147d2973c1425044f7c5c9b426,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 16 14:48:48 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1687,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1688,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1689,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Fri Feb 16 13:51:30 2018 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1690,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1691,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1692,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Feb 16 13:51:30 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
1693,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Feb 16 13:51:30 2018 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
1694,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Fri Feb 27 22:37:25 2015 -0700,,1
1695,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1696,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1697,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1698,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1699,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 16 13:51:30 2018 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1700,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Feb 16 13:51:30 2018 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1701,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Fri Feb 16 13:51:30 2018 -0500,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1702,b6eed3dca2e57705cb75895cad0b5337c79686d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 27 18:21:47 2017 -0800,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1703,b6eed3dca2e57705cb75895cad0b5337c79686d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Nov 27 18:21:47 2017 -0800,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
1704,3a883672417fcb2b3ac0d57d992285849840bfb2,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Fri Apr 17 12:53:30 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1705,3a883672417fcb2b3ac0d57d992285849840bfb2,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Fri Apr 17 12:53:30 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1706,004fd7be9250f87b584845f51dc9167c7f11eaa6,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sun Jun 7 20:04:59 2020 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1707,004fd7be9250f87b584845f51dc9167c7f11eaa6,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sun Jun 7 20:04:59 2020 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1708,004fd7be9250f87b584845f51dc9167c7f11eaa6,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sun Jun 7 20:04:59 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1709,004fd7be9250f87b584845f51dc9167c7f11eaa6,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Jun 7 20:04:59 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1710,004fd7be9250f87b584845f51dc9167c7f11eaa6,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sun Jun 7 20:04:59 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1711,004fd7be9250f87b584845f51dc9167c7f11eaa6,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sun Jun 7 20:04:59 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1712,004fd7be9250f87b584845f51dc9167c7f11eaa6,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sun Jun 7 20:04:59 2020 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
1713,c696b952693fa6174068e2bd26459a206308c95f,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon May 11 22:12:50 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1714,c696b952693fa6174068e2bd26459a206308c95f,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon May 11 22:12:50 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1715,c696b952693fa6174068e2bd26459a206308c95f,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Mon May 11 22:12:50 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1716,c696b952693fa6174068e2bd26459a206308c95f,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon May 11 22:12:50 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
1717,6c818f3e5f1bb4966c8fb54aa0c412360c9094fe,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 8 17:59:09 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1718,6c818f3e5f1bb4966c8fb54aa0c412360c9094fe,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Nov 8 17:59:09 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1719,1cbdaebaa1c2326e57945333420d25d6f77011d5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Fri Oct 4 19:25:15 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1720,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1721,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1722,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1723,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1724,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1725,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1726,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1727,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1728,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1729,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1730,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1731,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 19:55:25 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1732,22d997b3745e278d5a2b0b85d56c0d2b166e3a74,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 22 19:55:25 2016 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
1733,3e84b9e56abdff7230e84a1830085c79c73aa3b7,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Feb 18 14:20:46 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1734,3e84b9e56abdff7230e84a1830085c79c73aa3b7,docs/Dockerfile,docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",Wed Feb 18 14:20:46 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1735,da34672de6b84fce801d8ffaf03b52bf66458a61,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 1 17:14:48 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1736,da34672de6b84fce801d8ffaf03b52bf66458a61,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Oct 1 17:14:48 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
1737,a1c5e276f4cfe4ab498b6e013e61bfc957ce6852,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 16 23:43:47 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1738,e7cfb1c28b2a52f34c8e48ede2e24645991d1104,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 14 09:50:58 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1739,e7cfb1c28b2a52f34c8e48ede2e24645991d1104,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jan 14 09:50:58 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1740,fd935ee63db31e73b5ee5594644e04b959ead374,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed May 6 08:41:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1741,fd935ee63db31e73b5ee5594644e04b959ead374,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed May 6 08:41:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1742,fd935ee63db31e73b5ee5594644e04b959ead374,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed May 6 08:41:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1743,d1a3a17c671b9f89a90e59b58a92f04da0a4e3d9,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jan 15 15:22:41 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1744,d1a3a17c671b9f89a90e59b58a92f04da0a4e3d9,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 15 15:22:41 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1745,d1a3a17c671b9f89a90e59b58a92f04da0a4e3d9,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Wed Jan 15 15:22:41 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1746,d1a3a17c671b9f89a90e59b58a92f04da0a4e3d9,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jan 15 15:22:41 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1747,ccb0b0a7cc4f00c0fe79af5e5f5d0a5fa71e7fcb,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Nov 5 12:11:49 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1748,ccb0b0a7cc4f00c0fe79af5e5f5d0a5fa71e7fcb,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Nov 5 12:11:49 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1749,ccb0b0a7cc4f00c0fe79af5e5f5d0a5fa71e7fcb,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Nov 5 12:11:49 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1750,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 19 21:13:35 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1751,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 19 21:13:35 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1752,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 19 21:13:35 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1753,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 19 21:13:35 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1754,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Thu May 19 21:13:35 2016 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1755,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 19 21:13:35 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1756,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 19 21:13:35 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1757,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Thu May 19 21:13:35 2016 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1758,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 19 21:13:35 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1759,40b21745cc14628fc5336fbacddf092667a70c65,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 19 21:13:35 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1760,3b44dd66a4b316049df86521c491b50466d9b55d,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Oct 2 17:57:42 2018 -0700,Fri Sep 8 16:43:04 2017 +0200,,1
1761,f6ecfd620a48751124d3d1e590e9e83a437996ca,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Thu Nov 10 12:45:56 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
1762,30498c7c5f2e63a48fa285d117b4388d2a4961e6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1763,30498c7c5f2e63a48fa285d117b4388d2a4961e6,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1764,30498c7c5f2e63a48fa285d117b4388d2a4961e6,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1765,30498c7c5f2e63a48fa285d117b4388d2a4961e6,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1766,30498c7c5f2e63a48fa285d117b4388d2a4961e6,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 27 09:16:13 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1767,6ccfb7fb9af207a9999c60e57d1c9486ca949a5e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 10 13:25:00 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1768,6ccfb7fb9af207a9999c60e57d1c9486ca949a5e,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 10 13:25:00 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1769,d8fef66b03c1ea8715470690efbd950033f7f628,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 12 10:52:00 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1770,d8fef66b03c1ea8715470690efbd950033f7f628,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu May 12 10:52:00 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1771,1fa2e3115105f6b2334f452bd08415e8f00633d7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 18 15:06:23 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1772,1fa2e3115105f6b2334f452bd08415e8f00633d7,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Dec 18 15:06:23 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1773,1c82d1190888f05836c550c85e4e8daedae2a813,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Oct 8 11:17:15 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1774,bd4fff38cc7eef5b9ea4051217f6221790f48018,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1775,bd4fff38cc7eef5b9ea4051217f6221790f48018,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1776,bd4fff38cc7eef5b9ea4051217f6221790f48018,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1777,bd4fff38cc7eef5b9ea4051217f6221790f48018,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1778,bd4fff38cc7eef5b9ea4051217f6221790f48018,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Sat Dec 29 02:33:34 2018 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1779,3b3e58b639729e0fb3227e21367fea3ff9c5ff03,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 15 17:34:24 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1780,3b3e58b639729e0fb3227e21367fea3ff9c5ff03,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Fri Apr 15 17:34:24 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1781,3b3e58b639729e0fb3227e21367fea3ff9c5ff03,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 15 17:34:24 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1782,81e78db507c7523696b4115b5675170925a417e9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 9 17:21:39 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1783,81e78db507c7523696b4115b5675170925a417e9,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jul 9 17:21:39 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1784,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1785,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1786,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1787,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1788,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1789,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1790,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Feb 27 06:28:29 2018 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1791,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1792,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1793,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",Tue Feb 27 06:28:29 2018 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1794,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1795,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1796,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1797,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1798,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 27 06:28:29 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1799,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Feb 27 06:28:29 2018 +0000,Fri Sep 8 16:43:04 2017 +0200,,1
1800,d8d47f428d3a37dd758e3bd714024f6be4df3707,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 3 12:09:52 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1801,d8d47f428d3a37dd758e3bd714024f6be4df3707,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Feb 3 12:09:52 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1802,62ab6809bd0a654dde9c076f5a197253c66877e8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 7 16:49:46 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1803,62ab6809bd0a654dde9c076f5a197253c66877e8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Wed Dec 7 16:49:46 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1804,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 23 09:01:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1805,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 23 09:01:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1806,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 23 09:01:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1807,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 23 09:01:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1808,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 23 09:01:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1809,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 23 09:01:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1810,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 23 09:01:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1811,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Aug 23 09:01:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1812,aadc55c605540c49b030c4dd1b8de73a944abfc1,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat May 16 18:41:46 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1813,20d24a450cbf22b6d5268bc1fe76022fa554d6be,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",Mon Aug 26 15:51:22 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1814,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1815,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1816,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1817,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1818,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1819,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 22:53:54 2016 +1100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1820,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 22:53:54 2016 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1821,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile,Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 20 22:53:54 2016 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1822,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 22:53:54 2016 +1100,Fri Jun 21 19:42:17 2013 -0700,,1
1823,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.gccgo,Dockerfile.gccgo,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",Wed Jan 20 22:53:54 2016 +1100,Mon Aug 17 09:20:45 2015 +0000,Wed Aug 24 11:09:35 2016 +0100,1
1824,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1825,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1826,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1827,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1828,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",Mon Apr 25 10:21:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1829,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1830,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1831,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1832,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1833,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1834,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 25 10:21:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1835,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",Mon Apr 25 10:21:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1836,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 25 10:21:28 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1837,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1838,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1839,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1840,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1841,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1842,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1843,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1844,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1845,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 7 18:32:49 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1846,7439d360fd567e063b8e9c4174a5c21b9fbc06aa,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Sep 7 18:32:49 2017 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1847,bb0472bd23806327a1ff1ea87343a6a0cadc21e9,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Jul 22 17:22:13 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1848,bb0472bd23806327a1ff1ea87343a6a0cadc21e9,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Jul 22 17:22:13 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1849,bb0472bd23806327a1ff1ea87343a6a0cadc21e9,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Jul 22 17:22:13 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1850,878db479be5ae9388f481b9b6c28266519a1583c,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jan 29 18:13:13 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1851,878db479be5ae9388f481b9b6c28266519a1583c,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jan 29 18:13:13 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1852,878db479be5ae9388f481b9b6c28266519a1583c,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jan 29 18:13:13 2020 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1853,878db479be5ae9388f481b9b6c28266519a1583c,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jan 29 18:13:13 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1854,878db479be5ae9388f481b9b6c28266519a1583c,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 29 18:13:13 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1855,878db479be5ae9388f481b9b6c28266519a1583c,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jan 29 18:13:13 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1856,3f136dc0e0feb826eb67c2c2d600ee681a16bb02,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 4 20:59:37 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1857,3f136dc0e0feb826eb67c2c2d600ee681a16bb02,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Aug 4 20:59:37 2014 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1858,ee7d9b0bdec40d02ba5ef25f557cca9444a19669,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Wed Oct 16 00:31:34 2013 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1859,6a014a0d33e1618642403b47ead8017626d07fe2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Mon Sep 26 12:03:38 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1860,6a014a0d33e1618642403b47ead8017626d07fe2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Mon Sep 26 12:03:38 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1861,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Jun 3 15:09:53 2016 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1862,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 3 15:09:53 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1863,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 3 15:09:53 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1864,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 3 15:09:53 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1865,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 3 15:09:53 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1866,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Fri Jun 3 15:09:53 2016 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1867,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 3 15:09:53 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1868,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 3 15:09:53 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1869,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 3 15:09:53 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1870,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 3 15:09:53 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1871,0ce3ab679cb4ad94c81cf426d4942637a61afb85,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Feb 25 15:31:07 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1872,0ce3ab679cb4ad94c81cf426d4942637a61afb85,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 25 15:31:07 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1873,0ce3ab679cb4ad94c81cf426d4942637a61afb85,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Tue Feb 25 15:31:07 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1874,0ce3ab679cb4ad94c81cf426d4942637a61afb85,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Feb 25 15:31:07 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
1875,6f446d041bfd690856e63e1515d0d9514f9b684a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jun 12 10:16:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1876,6f446d041bfd690856e63e1515d0d9514f9b684a,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jun 12 10:16:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1877,6f446d041bfd690856e63e1515d0d9514f9b684a,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Jun 12 10:16:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1878,6f446d041bfd690856e63e1515d0d9514f9b684a,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jun 12 10:16:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
1879,6f446d041bfd690856e63e1515d0d9514f9b684a,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jun 12 10:16:39 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
1880,6f446d041bfd690856e63e1515d0d9514f9b684a,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jun 12 10:16:39 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1881,6f446d041bfd690856e63e1515d0d9514f9b684a,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jun 12 10:16:39 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
1882,38d746462c7a883f4b56f0e68cda200e8d30024e,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:19:39 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1883,38d746462c7a883f4b56f0e68cda200e8d30024e,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:19:39 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1884,38d746462c7a883f4b56f0e68cda200e8d30024e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 22 20:19:39 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1885,38d746462c7a883f4b56f0e68cda200e8d30024e,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 22 20:19:39 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1886,17172276366fc3114ae52eb6c83aafbec004d5f3,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",Sun Oct 27 12:13:03 2013 -0700,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
1887,46a47f0dcbce1a4240bc970388dd09d029f82f61,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 9 20:36:58 2014 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
1888,46a47f0dcbce1a4240bc970388dd09d029f82f61,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 9 20:36:58 2014 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
1889,e37dcd726fe415193eaed18729251d293a018909,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",Mon Sep 9 15:05:25 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1890,f23a51a8603a92b124e5037106958baf8c70c5e1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 17 21:50:31 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1891,f23a51a8603a92b124e5037106958baf8c70c5e1,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Jun 17 21:50:31 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1892,f23a51a8603a92b124e5037106958baf8c70c5e1,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Jun 17 21:50:31 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1893,f23a51a8603a92b124e5037106958baf8c70c5e1,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Jun 17 21:50:31 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1894,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1895,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1896,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Fri Jan 27 02:14:36 2017 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1897,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1898,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1899,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1900,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1901,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1902,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1903,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 27 02:14:36 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1904,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1905,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Jan 27 02:14:36 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1906,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jan 27 02:14:36 2017 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1907,62a81370fffb3cfdb15ef19702f0ea07ab2f4c36,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 18 23:06:14 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1908,62a81370fffb3cfdb15ef19702f0ea07ab2f4c36,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",Wed Dec 18 23:06:14 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1909,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.6
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",Wed Nov 6 20:05:26 2013 -0800,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
1910,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.4
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",Wed Nov 6 20:05:26 2013 -0800,Fri Oct 18 22:33:16 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
1911,c62230a879e0461c43a4fc7d2e2e2efdd466fedd,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 2 10:33:26 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1912,c62230a879e0461c43a4fc7d2e2e2efdd466fedd,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 2 10:33:26 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1913,0306a41909175b467d08ebc97d4c5136ca9e7ebd,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 18 18:44:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1914,0306a41909175b467d08ebc97d4c5136ca9e7ebd,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Mar 18 18:44:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1915,0306a41909175b467d08ebc97d4c5136ca9e7ebd,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Wed Mar 18 18:44:15 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1916,38e4ae3bca76b9558eb44993c4208b41114c4597,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jul 17 14:37:56 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
1917,38e4ae3bca76b9558eb44993c4208b41114c4597,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1918,38e4ae3bca76b9558eb44993c4208b41114c4597,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 17 14:37:56 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1919,38e4ae3bca76b9558eb44993c4208b41114c4597,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jul 17 14:37:56 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1920,38e4ae3bca76b9558eb44993c4208b41114c4597,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jul 17 14:37:56 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
1921,996138bf8e6acde9a937755ef81459f7d7566fc9,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 25 10:54:36 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1922,996138bf8e6acde9a937755ef81459f7d7566fc9,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 25 10:54:36 2016 -0400,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1923,996138bf8e6acde9a937755ef81459f7d7566fc9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 25 10:54:36 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1924,996138bf8e6acde9a937755ef81459f7d7566fc9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 25 10:54:36 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
1925,a6824ea7f2b22f7c3da11307c55acd04dac6505a,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Feb 26 17:25:57 2015 +0000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1926,a6824ea7f2b22f7c3da11307c55acd04dac6505a,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Feb 26 17:25:57 2015 +0000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1927,b1e98e06dc62b0d25f98ea9a2fd94e41cc1d20e2,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 7 13:29:24 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1928,b1e98e06dc62b0d25f98ea9a2fd94e41cc1d20e2,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 7 13:29:24 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1929,8d4459fffb5c1885b65506093538e059f0b51d90,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Feb 25 10:37:36 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1930,8d4459fffb5c1885b65506093538e059f0b51d90,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Feb 25 10:37:36 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1931,5d5adcd898f0b29a3ffe2820001288dd3a324374,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1932,5d5adcd898f0b29a3ffe2820001288dd3a324374,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1933,5d5adcd898f0b29a3ffe2820001288dd3a324374,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1934,5d5adcd898f0b29a3ffe2820001288dd3a324374,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1935,5d5adcd898f0b29a3ffe2820001288dd3a324374,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Dec 24 17:42:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1936,aaf018017c88a707b35115a9411e4069d9356748,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 7 14:09:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1937,aaf018017c88a707b35115a9411e4069d9356748,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 7 14:09:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1938,5c4abd107a4e50b9f2d29f98275a5b5b86c5f50f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 3 10:15:27 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1939,5c4abd107a4e50b9f2d29f98275a5b5b86c5f50f,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Nov 3 10:15:27 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1940,f508db483395059344d972b18559317fd9b2636f,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Feb 26 14:17:25 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1941,f508db483395059344d972b18559317fd9b2636f,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Feb 26 14:17:25 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1942,f508db483395059344d972b18559317fd9b2636f,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Feb 26 14:17:25 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1943,b4708e275446aa85b6b37924dc9d3318cf69efd4,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 27 18:15:01 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1944,b4708e275446aa85b6b37924dc9d3318cf69efd4,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 27 18:15:01 2016 +0200,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1945,b4708e275446aa85b6b37924dc9d3318cf69efd4,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 27 18:15:01 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1946,b4708e275446aa85b6b37924dc9d3318cf69efd4,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 27 18:15:01 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1947,b4708e275446aa85b6b37924dc9d3318cf69efd4,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 27 18:15:01 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1948,b4708e275446aa85b6b37924dc9d3318cf69efd4,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 27 18:15:01 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1949,878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30,Dockerfile.centos,Dockerfile.centos,"# Wrap all commands in the ""docker-in-docker"" script to allow nested containers
#ENTRYPOINT [""hack/dind""]
",Tue Mar 31 13:58:17 2015 -0700,Tue Mar 31 13:58:17 2015 -0700,Thu Apr 30 15:30:42 2015 -0700,1
1950,878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 31 13:58:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1951,878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Mar 31 13:58:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1952,878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 31 13:58:17 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1953,a018046ad0462c78601863784d3b882e77a7281b,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Jan 11 18:02:08 2018 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1954,a018046ad0462c78601863784d3b882e77a7281b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jan 11 18:02:08 2018 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1955,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1956,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1957,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1958,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1959,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1960,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1961,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1962,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1963,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Aug 1 14:26:13 2017 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1964,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1965,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 1 14:26:13 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1966,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Aug 1 14:26:13 2017 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1967,3f7503f98a9e0752d3df7fc53fc920e539b4fffe,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Feb 17 11:52:43 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1968,3f7503f98a9e0752d3df7fc53fc920e539b4fffe,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Feb 17 11:52:43 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1969,3f7503f98a9e0752d3df7fc53fc920e539b4fffe,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Feb 17 11:52:43 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
1970,3f7503f98a9e0752d3df7fc53fc920e539b4fffe,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Feb 17 11:52:43 2020 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
1971,3f7503f98a9e0752d3df7fc53fc920e539b4fffe,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Feb 17 11:52:43 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1972,3f7503f98a9e0752d3df7fc53fc920e539b4fffe,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Feb 17 11:52:43 2020 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
1973,b5bb9eb3dd86a4a6593a8a59912ea06d4ebebf55,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1974,b5bb9eb3dd86a4a6593a8a59912ea06d4ebebf55,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1975,b5bb9eb3dd86a4a6593a8a59912ea06d4ebebf55,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1976,b5bb9eb3dd86a4a6593a8a59912ea06d4ebebf55,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1977,b5bb9eb3dd86a4a6593a8a59912ea06d4ebebf55,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Apr 8 23:24:43 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
1978,b5bb9eb3dd86a4a6593a8a59912ea06d4ebebf55,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Apr 8 23:24:43 2019 +0000,Fri Sep 8 16:43:04 2017 +0200,,1
1979,b5bb9eb3dd86a4a6593a8a59912ea06d4ebebf55,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Apr 8 23:24:43 2019 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1980,b5bb9eb3dd86a4a6593a8a59912ea06d4ebebf55,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Apr 8 23:24:43 2019 +0000,Fri Feb 27 22:37:25 2015 -0700,,1
1981,b5bb9eb3dd86a4a6593a8a59912ea06d4ebebf55,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Apr 8 23:24:43 2019 +0000,Tue Dec 1 09:47:19 2015 +0100,,1
1982,09ca4dd32232cdbbe04628e5647922002d9df175,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Apr 21 09:22:26 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1983,09ca4dd32232cdbbe04628e5647922002d9df175,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Apr 21 09:22:26 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1984,f44aa3b1fbe5e042fee0fb78507ebac35eca3d04,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Apr 16 11:33:49 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1985,f44aa3b1fbe5e042fee0fb78507ebac35eca3d04,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Apr 16 11:33:49 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1986,6ed9b06e072888d1e7bd60106f17371a89b668a4,docs/Dockerfile,docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",Mon Jan 20 12:29:55 2014 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
1987,351074edcd22e4ca587713feda541268a66cdb86,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 27 22:53:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1988,351074edcd22e4ca587713feda541268a66cdb86,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Feb 27 22:53:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
1989,f8d970169a7ae6dcf46beb69c0367d35d019294e,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 16 23:21:08 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1990,f8d970169a7ae6dcf46beb69c0367d35d019294e,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Jun 16 23:21:08 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1991,f8d970169a7ae6dcf46beb69c0367d35d019294e,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 16 23:21:08 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
1992,92756bdcdddc75bcf5aa7dab2c8238abdb18ab75,Dockerfile.arm,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 22 12:32:10 2015 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1993,92756bdcdddc75bcf5aa7dab2c8238abdb18ab75,Dockerfile.arm,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Nov 22 12:32:10 2015 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
1994,92756bdcdddc75bcf5aa7dab2c8238abdb18ab75,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Nov 22 12:32:10 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1995,92756bdcdddc75bcf5aa7dab2c8238abdb18ab75,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Nov 22 12:32:10 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1996,00ad0222cef8024f19394e2e9d5dc0e05f0ec982,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 14 20:43:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1997,00ad0222cef8024f19394e2e9d5dc0e05f0ec982,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Aug 14 20:43:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1998,00ad0222cef8024f19394e2e9d5dc0e05f0ec982,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Aug 14 20:43:52 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
1999,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2000,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2001,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2002,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2003,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2004,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2005,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2006,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2007,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 23 23:28:45 2017 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2008,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 23 23:28:45 2017 +0800,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2009,0e2c424a7f32945a47e271cb804b091c83429912,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 23 18:05:38 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2010,0e2c424a7f32945a47e271cb804b091c83429912,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Jun 23 18:05:38 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2011,929fa9ff8075d91624a90ecaae9c1fd31e50c294,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Fri Oct 21 19:56:16 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
2012,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Thu Dec 20 15:47:24 2018 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
2013,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 20 15:47:24 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
2014,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2015,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2016,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2017,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2018,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Dec 20 15:47:24 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2019,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Thu Dec 20 15:47:24 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
2020,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 20 15:47:24 2018 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
2021,b3ee9ac74e171e00f14027e39278013629e681b8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 24 22:19:50 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2022,b3ee9ac74e171e00f14027e39278013629e681b8,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jul 24 22:19:50 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2023,c38cba3b8c769d39a1e42e0b79fa2eeb77fd6f04,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 19 22:42:05 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2024,c38cba3b8c769d39a1e42e0b79fa2eeb77fd6f04,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jan 19 22:42:05 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2025,47d887b33d7725ef64222f457369e4363ac7bb2d,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 2 13:46:11 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2026,47d887b33d7725ef64222f457369e4363ac7bb2d,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Mar 2 13:46:11 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2027,4a688d6864e0a42b5300754a077f7c0fd45a0929,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 3 15:09:54 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2028,4a688d6864e0a42b5300754a077f7c0fd45a0929,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 3 15:09:54 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2029,c057825cf56850ffb97cae532d0bfa261b4b9a53,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Oct 16 10:09:10 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2030,c057825cf56850ffb97cae532d0bfa261b4b9a53,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Oct 16 10:09:10 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2031,6f75dd85c5adbced787a2e15aa7e9ccd71289749,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 4 13:20:01 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2032,6f75dd85c5adbced787a2e15aa7e9ccd71289749,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon May 4 13:20:01 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2033,6f75dd85c5adbced787a2e15aa7e9ccd71289749,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon May 4 13:20:01 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2034,13b7d11be1a97ebe82b3a0f0b5db9b873a481637,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2035,13b7d11be1a97ebe82b3a0f0b5db9b873a481637,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2036,13b7d11be1a97ebe82b3a0f0b5db9b873a481637,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2037,13b7d11be1a97ebe82b3a0f0b5db9b873a481637,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2038,13b7d11be1a97ebe82b3a0f0b5db9b873a481637,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Feb 28 16:07:10 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2039,e62745922feb580b3687571bb4c52db3de5157f7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Aug 10 12:51:54 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2040,e62745922feb580b3687571bb4c52db3de5157f7,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Aug 10 12:51:54 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2041,e62745922feb580b3687571bb4c52db3de5157f7,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Aug 10 12:51:54 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2042,a342010823d36536499aafed527e8d203b9e2059,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sun May 3 02:03:01 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2043,a342010823d36536499aafed527e8d203b9e2059,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun May 3 02:03:01 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2044,a342010823d36536499aafed527e8d203b9e2059,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Sun May 3 02:03:01 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2045,a342010823d36536499aafed527e8d203b9e2059,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Sun May 3 02:03:01 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2046,2b0b0c4b97596314b4b1d3960158cc4bcad4067b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 22 16:45:25 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2047,2b0b0c4b97596314b4b1d3960158cc4bcad4067b,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 22 16:45:25 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2048,2b0b0c4b97596314b4b1d3960158cc4bcad4067b,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 22 16:45:25 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2049,61450a651ba8fe4ef3cac284482a9495fc0b761d,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Fri Sep 6 02:57:58 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2050,c6595b3ee83d5cf8348739949e74720e62f7dd50,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 13 10:41:24 2014 +0400,Fri Jun 21 19:42:17 2013 -0700,,1
2051,c6595b3ee83d5cf8348739949e74720e62f7dd50,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Aug 13 10:41:24 2014 +0400,Fri Jun 21 19:42:17 2013 -0700,,1
2052,f32ccb080ac382a386cbe33ed1d11048474206c5,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat May 21 17:42:31 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2053,f32ccb080ac382a386cbe33ed1d11048474206c5,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat May 21 17:42:31 2016 +0200,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2054,6ed610fb8014d500e001bb0677f0e1af0dc9312d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 21 15:59:23 2014 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
2055,6ed610fb8014d500e001bb0677f0e1af0dc9312d,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 21 15:59:23 2014 +1000,Fri Jun 21 19:42:17 2013 -0700,,1
2056,6ed610fb8014d500e001bb0677f0e1af0dc9312d,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 21 15:59:23 2014 +1000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2057,6ed610fb8014d500e001bb0677f0e1af0dc9312d,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 21 15:59:23 2014 +1000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2058,db3351ae379bdaba0b863d52b9d9280836fd75c7,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Wed Jun 1 21:41:19 2016 -0300,Tue Dec 1 09:47:19 2015 +0100,,1
2059,9f61e233c6da72f692190f1f5eb672341253f3e7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 7 10:35:38 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2060,9f61e233c6da72f692190f1f5eb672341253f3e7,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 7 10:35:38 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2061,b1723b37212570128b1b403f878cf0064d857f4a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 30 16:59:02 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2062,b1723b37212570128b1b403f878cf0064d857f4a,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jul 30 16:59:02 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2063,b1723b37212570128b1b403f878cf0064d857f4a,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jul 30 16:59:02 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2064,5433ceb12ead305d8c85e8e27c4b4d842ef88ae0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2065,5433ceb12ead305d8c85e8e27c4b4d842ef88ae0,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2066,5433ceb12ead305d8c85e8e27c4b4d842ef88ae0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2067,5433ceb12ead305d8c85e8e27c4b4d842ef88ae0,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2068,5433ceb12ead305d8c85e8e27c4b4d842ef88ae0,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2069,5433ceb12ead305d8c85e8e27c4b4d842ef88ae0,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Mar 6 11:01:26 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2070,82879e9a9cd60c5cd814d9b079455a91663fc9af,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Feb 5 23:23:00 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2071,82879e9a9cd60c5cd814d9b079455a91663fc9af,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Feb 5 23:23:00 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2072,82879e9a9cd60c5cd814d9b079455a91663fc9af,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Feb 5 23:23:00 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2073,ae686c0486cf6e2c0c394c5eb7a26e7d59cf1472,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 1 21:49:53 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2074,ae686c0486cf6e2c0c394c5eb7a26e7d59cf1472,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu May 1 21:49:53 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2075,addc0c809f26c1fb45bac69abb67738c5c632bb3,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Feb 7 16:14:30 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2076,addc0c809f26c1fb45bac69abb67738c5c632bb3,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Feb 7 16:14:30 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2077,addc0c809f26c1fb45bac69abb67738c5c632bb3,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Feb 7 16:14:30 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2078,dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 30 00:50:10 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2079,dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 30 00:50:10 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2080,636037c3637eb1d09cc469cebe39ffb915bb0aa9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 16 12:22:00 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2081,636037c3637eb1d09cc469cebe39ffb915bb0aa9,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 16 12:22:00 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2082,636037c3637eb1d09cc469cebe39ffb915bb0aa9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Mon Mar 16 12:22:00 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2083,c7bec92891180ccffd1536839ba3bcc85d9c96a4,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Feb 14 03:27:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2084,c7bec92891180ccffd1536839ba3bcc85d9c96a4,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Feb 14 03:27:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2085,31cc7dc135b606410471a553247ef75b42c3f181,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 6 17:24:50 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2086,31cc7dc135b606410471a553247ef75b42c3f181,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri May 6 17:24:50 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2087,48fd0e921c53c1c195dad1e33e6be3bac4ec5cbd,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:02:22 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
2088,5554bd1a7b1841f06ef1a5630dda2e19d1d72c72,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:15:03 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
2089,6e3068700fb32299cf733acd74785e29609b1974,testing/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",Sat Sep 21 12:14:40 2013 -0700,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2090,94566b748e69a57cf88ef4acbe18ecbe76bb2f54,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 27 15:34:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2091,94566b748e69a57cf88ef4acbe18ecbe76bb2f54,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",Mon Jan 27 15:34:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2092,94566b748e69a57cf88ef4acbe18ecbe76bb2f54,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jan 27 15:34:46 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2093,c0c05affc79b199248b457af16fff61c305b7623,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2094,c0c05affc79b199248b457af16fff61c305b7623,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2095,c0c05affc79b199248b457af16fff61c305b7623,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2096,c0c05affc79b199248b457af16fff61c305b7623,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2097,c0c05affc79b199248b457af16fff61c305b7623,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jan 9 22:47:33 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2098,ca56b35e5334d9f6a6741830951eb1535ca6f9b2,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Tue Oct 15 11:44:56 2013 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2099,572cb664621ca08e912a006c5c9cf2fb568ce757,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2100,572cb664621ca08e912a006c5c9cf2fb568ce757,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2101,572cb664621ca08e912a006c5c9cf2fb568ce757,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2102,572cb664621ca08e912a006c5c9cf2fb568ce757,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2103,572cb664621ca08e912a006c5c9cf2fb568ce757,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2104,572cb664621ca08e912a006c5c9cf2fb568ce757,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 27 09:20:55 2018 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2105,94f01184beb731b8c28dd43cf259621ba14f76ff,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 20 19:05:57 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2106,94f01184beb731b8c28dd43cf259621ba14f76ff,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue May 20 19:05:57 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2107,c2a59dfe48e55bc93e3bed5ecde021f372151b09,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 9 19:12:56 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2108,c2a59dfe48e55bc93e3bed5ecde021f372151b09,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",Thu Jan 9 19:12:56 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2109,c2a59dfe48e55bc93e3bed5ecde021f372151b09,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jan 9 19:12:56 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2110,8b2f4aab232880cb0d7faa18ae12adb33f483b2c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Wed Oct 2 20:18:15 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2111,4bf770a4c6940df9c538d3dac2b014fbc9ca9ac2,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Mar 25 13:19:13 2016 +0900,Fri Feb 27 22:37:25 2015 -0700,,1
2112,c6281bc4383b7f9eab617fd73601e8594c93365b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 17 13:59:16 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2113,c6281bc4383b7f9eab617fd73601e8594c93365b,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 17 13:59:16 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2114,c6281bc4383b7f9eab617fd73601e8594c93365b,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jul 17 13:59:16 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2115,c6281bc4383b7f9eab617fd73601e8594c93365b,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jul 17 13:59:16 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2116,c6281bc4383b7f9eab617fd73601e8594c93365b,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jul 17 13:59:16 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2117,c6281bc4383b7f9eab617fd73601e8594c93365b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jul 17 13:59:16 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2118,6c863b49ef9de8f203c84f7e2e55f33deeb10bdb,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Fri Oct 18 16:02:08 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2119,f61d595b55b48428b7268b85a23b6e61b649f6d9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 5 15:20:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2120,f61d595b55b48428b7268b85a23b6e61b649f6d9,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jun 5 15:20:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2121,f61d595b55b48428b7268b85a23b6e61b649f6d9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 5 15:20:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2122,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,Dockerfile.arm,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 5 15:38:41 2015 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2123,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,Dockerfile.arm,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Nov 5 15:38:41 2015 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2124,8159b5ca98eaeabe4e3f3038418a47a3c49c114d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 7 18:40:40 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2125,8159b5ca98eaeabe4e3f3038418a47a3c49c114d,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 7 18:40:40 2016 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2126,b20363c4c056bebe256f0d53283ca1e537ed5cf6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 8 23:09:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2127,b20363c4c056bebe256f0d53283ca1e537ed5cf6,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jan 8 23:09:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2128,14d5c91d87fac962bbb36c12b05f3b1603aa28a8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 17 19:05:52 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2129,14d5c91d87fac962bbb36c12b05f3b1603aa28a8,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Feb 17 19:05:52 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2130,dbec45fa7a97ff62be279d67f52d734da3fae55f,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 4 16:22:59 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2131,dbec45fa7a97ff62be279d67f52d734da3fae55f,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Tue Oct 4 16:22:59 2016 -0700,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2132,9bcbb39fa8b91ceb54c3da7b245e79b56de1cb6b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 27 12:56:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2133,9bcbb39fa8b91ceb54c3da7b245e79b56de1cb6b,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 27 12:56:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2134,9bcbb39fa8b91ceb54c3da7b245e79b56de1cb6b,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Oct 27 12:56:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2135,2140650b56342898f7efb700bf4a681073b64ee5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Feb 27 12:00:12 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2136,2140650b56342898f7efb700bf4a681073b64ee5,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat Feb 27 12:00:12 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2137,20570d91c84c75daa16a3d7899b070776d148140,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Wed Jun 24 21:50:49 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2138,950a1aa3170cedabd904cdcfcfa70c7d551a5e16,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Fri Dec 8 12:14:31 2017 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
2139,950a1aa3170cedabd904cdcfcfa70c7d551a5e16,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Dec 8 12:14:31 2017 -0800,Fri Feb 27 22:37:25 2015 -0700,,1
2140,54229fad933c91f5d890e14be389651e98f62e02,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 12 13:44:41 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2141,54229fad933c91f5d890e14be389651e98f62e02,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Dec 12 13:44:41 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2142,8022c5fdd12ae6dc5aac3c9e59f5524954b55730,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 15 13:22:52 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2143,8022c5fdd12ae6dc5aac3c9e59f5524954b55730,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon May 15 13:22:52 2017 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2144,83809de7d45d3465977b2f7a7cf585863cec445c,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",Tue Apr 5 16:25:43 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
2145,c850e97c84abffc71509692ab1accd38408fa51b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jun 1 17:21:09 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2146,c850e97c84abffc71509692ab1accd38408fa51b,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jun 1 17:21:09 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2147,c850e97c84abffc71509692ab1accd38408fa51b,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jun 1 17:21:09 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2148,de7f0120fde34b5dfdb2d29af7d599ecaaa2012a,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Jan 15 15:38:51 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2149,de7f0120fde34b5dfdb2d29af7d599ecaaa2012a,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jan 15 15:38:51 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2150,de7f0120fde34b5dfdb2d29af7d599ecaaa2012a,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Wed Jan 15 15:38:51 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2151,de7f0120fde34b5dfdb2d29af7d599ecaaa2012a,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Jan 15 15:38:51 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2152,1c125f50cfce422b19a15e84c5a3940890fb2e23,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Dec 18 18:47:35 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2153,1c125f50cfce422b19a15e84c5a3940890fb2e23,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Dec 18 18:47:35 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2154,f46923be8eba81dd9e261554128b26a1c83ce398,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 20 19:37:21 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2155,f46923be8eba81dd9e261554128b26a1c83ce398,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 20 19:37:21 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2156,96e61f3173c21a94f06db2bf1f8a6041da3e4e21,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 17:04:30 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2157,96e61f3173c21a94f06db2bf1f8a6041da3e4e21,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 17:04:30 2017 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2158,f4a7c437769b5cf25d852d1aee6a6c50ee42fc85,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Feb 3 11:08:35 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2159,f4a7c437769b5cf25d852d1aee6a6c50ee42fc85,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Feb 3 11:08:35 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2160,f4a7c437769b5cf25d852d1aee6a6c50ee42fc85,docs/Dockerfile,docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",Mon Feb 3 11:08:35 2014 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2161,61a3285864d3f1b489f48f765b61b2c7bd300372,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2162,61a3285864d3f1b489f48f765b61b2c7bd300372,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2163,61a3285864d3f1b489f48f765b61b2c7bd300372,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2164,61a3285864d3f1b489f48f765b61b2c7bd300372,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2165,61a3285864d3f1b489f48f765b61b2c7bd300372,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Apr 5 17:20:06 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2166,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 11 13:01:30 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2167,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 11 13:01:30 2016 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2168,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2169,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2170,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2171,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2172,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 11 13:01:30 2016 +0000,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2173,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 11 13:01:30 2016 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2174,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Mar 11 13:01:30 2016 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2175,9c46b587eec84f6d9b525ecca1d8b66a51055c12,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Feb 22 10:51:50 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
2176,2a6325e310f7ac4f8a5547dbd42d11a688dac90f,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Aug 10 12:13:38 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2177,2a6325e310f7ac4f8a5547dbd42d11a688dac90f,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Aug 10 12:13:38 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2178,2a6325e310f7ac4f8a5547dbd42d11a688dac90f,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Mon Aug 10 12:13:38 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2179,2a6325e310f7ac4f8a5547dbd42d11a688dac90f,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Aug 10 12:13:38 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2180,2a6325e310f7ac4f8a5547dbd42d11a688dac90f,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Aug 10 12:13:38 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2181,2a6325e310f7ac4f8a5547dbd42d11a688dac90f,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Aug 10 12:13:38 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2182,2a6325e310f7ac4f8a5547dbd42d11a688dac90f,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Aug 10 12:13:38 2020 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2183,7bfe48cc00318f9d4cf388237855012aafac56b0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 20 16:36:40 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2184,7bfe48cc00318f9d4cf388237855012aafac56b0,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon May 20 16:36:40 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2185,7bfe48cc00318f9d4cf388237855012aafac56b0,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon May 20 16:36:40 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2186,91b42cf8428ec20c3d6775019ed04d89330c1dcd,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jan 7 12:06:52 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2187,91b42cf8428ec20c3d6775019ed04d89330c1dcd,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sat Jan 7 12:06:52 2017 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2188,95a47029433d21031e77f1546d4a7352f7f92a1f,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jan 10 14:32:46 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2189,95a47029433d21031e77f1546d4a7352f7f92a1f,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jan 10 14:32:46 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2190,95a47029433d21031e77f1546d4a7352f7f92a1f,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jan 10 14:32:46 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2191,6b09413f6bf309ad8103a0161dc826fc36af2a56,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 29 19:42:28 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2192,6b09413f6bf309ad8103a0161dc826fc36af2a56,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Jan 29 19:42:28 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2193,6b09413f6bf309ad8103a0161dc826fc36af2a56,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jan 29 19:42:28 2016 +0000,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2194,ac47a877403a894ac02724aaa111870edc7c2f8b,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Feb 25 22:35:08 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2195,ac47a877403a894ac02724aaa111870edc7c2f8b,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Feb 25 22:35:08 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2196,c8f919a425caf9bc86513f5e2108087ad64d3927,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 19 02:19:51 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2197,c8f919a425caf9bc86513f5e2108087ad64d3927,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 19 02:19:51 2016 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2198,ad70bf6866ac40753d0f629269169b4be74e2ad0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Aug 11 00:52:01 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2199,ad70bf6866ac40753d0f629269169b4be74e2ad0,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sun Aug 11 00:52:01 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2200,ad70bf6866ac40753d0f629269169b4be74e2ad0,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Sun Aug 11 00:52:01 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2201,5d70a97b1fff8286220d2bef9ceb248401f046d1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 26 19:20:32 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2202,5d70a97b1fff8286220d2bef9ceb248401f046d1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Feb 26 19:20:32 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2203,5d70a97b1fff8286220d2bef9ceb248401f046d1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Thu Feb 26 19:20:32 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2204,045beed6c8906763b020dfae75682bef80337739,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:22:53 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
2205,1d945a9743748373cd5c5bfface3209d241007d7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 18 17:26:35 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2206,1d945a9743748373cd5c5bfface3209d241007d7,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 18 17:26:35 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2207,599cb12bb8aa13aa2f1be940dd8de4c9d3a06959,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 19 23:55:28 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2208,599cb12bb8aa13aa2f1be940dd8de4c9d3a06959,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon May 19 23:55:28 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2209,91cdadf37eb99610378a5808b8438f0c4be463c8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Feb 12 11:48:42 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2210,91cdadf37eb99610378a5808b8438f0c4be463c8,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Feb 12 11:48:42 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2211,dffa5d6df2e51556edfbcebc4695fdbc0bcc1a90,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Sat Aug 19 21:23:38 2017 +0700,Tue Dec 1 09:47:19 2015 +0100,,1
2212,8a45eea2ddac40c907feb38859eb056a4d0024cc,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Dec 5 18:40:31 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
2213,57f0e0c61982269093eb6d9934656ea70b573938,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jun 20 13:06:37 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2214,57f0e0c61982269093eb6d9934656ea70b573938,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Jun 20 13:06:37 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2215,5f314c24fcbb3f6fc5b9244686e624ca8f13d024,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Nov 5 13:41:04 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2216,5f314c24fcbb3f6fc5b9244686e624ca8f13d024,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Nov 5 13:41:04 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2217,5f314c24fcbb3f6fc5b9244686e624ca8f13d024,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Nov 5 13:41:04 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2218,496c2748cfef82fea3f5e1be5fbf845b478420aa,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 14 06:16:41 2014 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2219,496c2748cfef82fea3f5e1be5fbf845b478420aa,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Nov 14 06:16:41 2014 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2220,496c2748cfef82fea3f5e1be5fbf845b478420aa,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Nov 14 06:16:41 2014 +0100,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2221,496c2748cfef82fea3f5e1be5fbf845b478420aa,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Nov 14 06:16:41 2014 +0100,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2222,228d74842fd1ac97b5c8d11fd6a3c313eae5c051,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Jun 30 11:06:03 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2223,228d74842fd1ac97b5c8d11fd6a3c313eae5c051,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jun 30 11:06:03 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2224,228d74842fd1ac97b5c8d11fd6a3c313eae5c051,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Tue Jun 30 11:06:03 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2225,228d74842fd1ac97b5c8d11fd6a3c313eae5c051,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Jun 30 11:06:03 2020 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2226,d11f75b5050944e373125008be1c9683797c72a9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Mon Nov 4 16:11:33 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2227,97f45bd629fa3e5921c5a70f3e8087c1afbb07a6,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 8 13:03:53 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2228,97f45bd629fa3e5921c5a70f3e8087c1afbb07a6,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Apr 8 13:03:53 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2229,97f45bd629fa3e5921c5a70f3e8087c1afbb07a6,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Apr 8 13:03:53 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2230,2caf09d37b5865882dfa8c60d5362fd6d2ba54fd,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Mar 23 12:11:08 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2231,2caf09d37b5865882dfa8c60d5362fd6d2ba54fd,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Wed Mar 23 12:11:08 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2232,2caf09d37b5865882dfa8c60d5362fd6d2ba54fd,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Mar 23 12:11:08 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2233,9560d941142b0bd17b0aa51e4d9bfe22354732ec,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 16:04:36 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2234,9560d941142b0bd17b0aa51e4d9bfe22354732ec,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 16:04:36 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2235,9560d941142b0bd17b0aa51e4d9bfe22354732ec,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2236,9560d941142b0bd17b0aa51e4d9bfe22354732ec,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2237,9560d941142b0bd17b0aa51e4d9bfe22354732ec,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2238,9560d941142b0bd17b0aa51e4d9bfe22354732ec,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2239,9560d941142b0bd17b0aa51e4d9bfe22354732ec,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 16:04:36 2016 -0500,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2240,c70d1bde63a1370d86ea8af17cda17920fdc9fb7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Nov 2 08:32:49 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2241,c70d1bde63a1370d86ea8af17cda17920fdc9fb7,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Nov 2 08:32:49 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2242,c70d1bde63a1370d86ea8af17cda17920fdc9fb7,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Nov 2 08:32:49 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2243,7465a3149f9f0f5c996e95198c46960a4b92c9c2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2244,7465a3149f9f0f5c996e95198c46960a4b92c9c2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2245,7465a3149f9f0f5c996e95198c46960a4b92c9c2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2246,7465a3149f9f0f5c996e95198c46960a4b92c9c2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2247,7465a3149f9f0f5c996e95198c46960a4b92c9c2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 13:37:08 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2248,18beb5561140aaa950f00391a87bb332fb2b6aea,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Apr 30 15:30:42 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2249,18beb5561140aaa950f00391a87bb332fb2b6aea,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Apr 30 15:30:42 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2250,18beb5561140aaa950f00391a87bb332fb2b6aea,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Apr 30 15:30:42 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2251,f01d2029bbee7327b324ee501a97100ad5506fbf,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 4 18:51:08 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2252,f01d2029bbee7327b324ee501a97100ad5506fbf,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 4 18:51:08 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2253,f01d2029bbee7327b324ee501a97100ad5506fbf,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Dec 4 18:51:08 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2254,93f9b902af89f82367d750aa871d40f25ccd99ca,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Thu Oct 3 18:57:29 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2255,93f9b902af89f82367d750aa871d40f25ccd99ca,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Oct 3 18:57:29 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2256,9ddd6e47a90ac056d242969ff72bf75a43cc0004,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2257,9ddd6e47a90ac056d242969ff72bf75a43cc0004,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2258,9ddd6e47a90ac056d242969ff72bf75a43cc0004,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2259,9ddd6e47a90ac056d242969ff72bf75a43cc0004,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2260,9ddd6e47a90ac056d242969ff72bf75a43cc0004,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Nov 29 16:14:35 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2261,ef8b917fac0b3d98146cadd890234d9179ae2021,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Apr 8 09:55:58 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2262,ef8b917fac0b3d98146cadd890234d9179ae2021,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Apr 8 09:55:58 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2263,fe8fb24b530016e56ab584526c093daccacf6040,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Apr 15 19:02:01 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2264,fe8fb24b530016e56ab584526c093daccacf6040,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Apr 15 19:02:01 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2265,a3292263a3cb29c972b41511aeb0a3e36c8468c7,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Tue Feb 11 02:55:16 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2266,a3292263a3cb29c972b41511aeb0a3e36c8468c7,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 11 02:55:16 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2267,a3292263a3cb29c972b41511aeb0a3e36c8468c7,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Tue Feb 11 02:55:16 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2268,a3292263a3cb29c972b41511aeb0a3e36c8468c7,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Tue Feb 11 02:55:16 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2269,6c1382e151676ada408d89d6e197dbcf47dc4ebd,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 12:20:19 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2270,6c1382e151676ada408d89d6e197dbcf47dc4ebd,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 12:20:19 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2271,32a23311033dc5bfdfbc80c54a159cc92990efd2,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Aug 28 12:43:35 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
2272,32a23311033dc5bfdfbc80c54a159cc92990efd2,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Aug 28 12:43:35 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
2273,750dc335a983fcd2c1410bffe5e23d1b0b3c3e3c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 26 10:46:00 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2274,750dc335a983fcd2c1410bffe5e23d1b0b3c3e3c,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 26 10:46:00 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2275,ed672bb523cb255d0b2b79837d9c45a7c3255000,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Sat Jul 20 10:32:08 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2276,ed672bb523cb255d0b2b79837d9c45a7c3255000,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Sat Jul 20 10:32:08 2019 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2277,ed672bb523cb255d0b2b79837d9c45a7c3255000,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Jul 20 10:32:08 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2278,ed672bb523cb255d0b2b79837d9c45a7c3255000,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Jul 20 10:32:08 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2279,ed672bb523cb255d0b2b79837d9c45a7c3255000,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Sat Jul 20 10:32:08 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2280,93f3532f649968f6c3d15736bd28c5e9b47ad2ec,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Mar 6 22:39:06 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2281,93f3532f649968f6c3d15736bd28c5e9b47ad2ec,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Mar 6 22:39:06 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2282,93f3532f649968f6c3d15736bd28c5e9b47ad2ec,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Fri Mar 6 22:39:06 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2283,93f3532f649968f6c3d15736bd28c5e9b47ad2ec,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Mar 6 22:39:06 2020 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2284,7d80d64ca5a185db8b498eecadfed215bdc3bffb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Feb 15 15:41:10 2016 +0530,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2285,7d80d64ca5a185db8b498eecadfed215bdc3bffb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Feb 15 15:41:10 2016 +0530,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2286,42dcc4f3b5e0ddd2042a75c5d3f3c610d7e839c1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Aug 19 22:16:20 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2287,42dcc4f3b5e0ddd2042a75c5d3f3c610d7e839c1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Aug 19 22:16:20 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2288,42dcc4f3b5e0ddd2042a75c5d3f3c610d7e839c1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Aug 19 22:16:20 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2289,d594c6fcd8fbe295a87cfc2af70456be4e58c24d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jul 31 14:54:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2290,d594c6fcd8fbe295a87cfc2af70456be4e58c24d,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jul 31 14:54:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2291,d594c6fcd8fbe295a87cfc2af70456be4e58c24d,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jul 31 14:54:55 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2292,3a4c5b6a0dc82f139292ae565f66244470a41615,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 7 11:19:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2293,3a4c5b6a0dc82f139292ae565f66244470a41615,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue May 7 11:19:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2294,3a4c5b6a0dc82f139292ae565f66244470a41615,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue May 7 11:19:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2295,3a4c5b6a0dc82f139292ae565f66244470a41615,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue May 7 11:19:39 2019 +0800,Fri Jun 21 19:42:17 2013 -0700,,1
2296,3a4c5b6a0dc82f139292ae565f66244470a41615,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue May 7 11:19:39 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2297,3a4c5b6a0dc82f139292ae565f66244470a41615,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue May 7 11:19:39 2019 +0800,Fri Feb 27 22:37:25 2015 -0700,,1
2298,3a4c5b6a0dc82f139292ae565f66244470a41615,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Tue May 7 11:19:39 2019 +0800,Tue Dec 1 09:47:19 2015 +0100,,1
2299,79e8ca04f5764c150b61b1b05785fb3926613fa1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 27 09:33:42 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2300,79e8ca04f5764c150b61b1b05785fb3926613fa1,Dockerfile,Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",Tue Jan 27 09:33:42 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2301,79e8ca04f5764c150b61b1b05785fb3926613fa1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 27 09:33:42 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2302,e6d7df2e5d313800414b955e10a26d6687e7a1bf,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2303,e6d7df2e5d313800414b955e10a26d6687e7a1bf,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2304,e6d7df2e5d313800414b955e10a26d6687e7a1bf,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2305,e6d7df2e5d313800414b955e10a26d6687e7a1bf,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2306,e6d7df2e5d313800414b955e10a26d6687e7a1bf,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Dec 13 20:26:10 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2307,a464a3d51f89566b3e480d66903056004576cc85,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 11 08:51:06 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2308,a464a3d51f89566b3e480d66903056004576cc85,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Sep 11 08:51:06 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2309,7646e3f9574aabe7ebbd6eb8dc2ef0f4fcc4e3a9,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Fri Feb 27 01:10:50 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2310,7646e3f9574aabe7ebbd6eb8dc2ef0f4fcc4e3a9,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Fri Feb 27 01:10:50 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2311,a42b4144bce728590d7c01aa2401589e71850518,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 22:41:27 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2312,a42b4144bce728590d7c01aa2401589e71850518,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 22:41:27 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2313,0f15221240b078c53e86c653c4098bf66e9e30ac,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 26 12:46:21 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2314,0f15221240b078c53e86c653c4098bf66e9e30ac,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Sep 26 12:46:21 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2315,155435b6ceeb05b2927ecc726216666b898b6459,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Thu Nov 17 13:54:56 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
2316,ef96c28754706da921644e5cf9202f9cc78d4c7e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 12 11:47:40 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2317,ef96c28754706da921644e5cf9202f9cc78d4c7e,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jan 12 11:47:40 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2318,9b8d328666a6cd5313208cdf5f116825f06dccdc,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2319,9b8d328666a6cd5313208cdf5f116825f06dccdc,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2320,9b8d328666a6cd5313208cdf5f116825f06dccdc,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2321,9b8d328666a6cd5313208cdf5f116825f06dccdc,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2322,9b8d328666a6cd5313208cdf5f116825f06dccdc,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Feb 2 09:56:29 2016 -0800,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2323,9b8d328666a6cd5313208cdf5f116825f06dccdc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 2 09:56:29 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2324,9b8d328666a6cd5313208cdf5f116825f06dccdc,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Feb 2 09:56:29 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2325,00555f7b261111084b966920da607a504b068953,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2326,00555f7b261111084b966920da607a504b068953,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2327,00555f7b261111084b966920da607a504b068953,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2328,00555f7b261111084b966920da607a504b068953,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2329,00555f7b261111084b966920da607a504b068953,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2330,00555f7b261111084b966920da607a504b068953,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Apr 13 13:45:57 2018 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2331,d245a8a706558c4a66498cb8d1a1d8fe38dd67ee,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 30 11:45:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2332,d245a8a706558c4a66498cb8d1a1d8fe38dd67ee,Dockerfile,Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",Fri Jan 30 11:45:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2333,d245a8a706558c4a66498cb8d1a1d8fe38dd67ee,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 30 11:45:02 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2334,886d3c939687672c6589120229c05435273b7d59,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 23 14:29:31 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2335,886d3c939687672c6589120229c05435273b7d59,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 23 14:29:31 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2336,1e49fdcafc6601cd9dd5c46551ee283baa0272ef,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2337,1e49fdcafc6601cd9dd5c46551ee283baa0272ef,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2338,1e49fdcafc6601cd9dd5c46551ee283baa0272ef,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2339,1e49fdcafc6601cd9dd5c46551ee283baa0272ef,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2340,1e49fdcafc6601cd9dd5c46551ee283baa0272ef,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2341,1e49fdcafc6601cd9dd5c46551ee283baa0272ef,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Thu Aug 9 00:45:00 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2342,671459a989e6e135aeceddb874536ed7bdfdb7c9,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Wed Jun 24 14:31:04 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2343,671459a989e6e135aeceddb874536ed7bdfdb7c9,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Wed Jun 24 14:31:04 2020 +0200,Fri Feb 27 22:37:25 2015 -0700,,1
2344,03f67aa46a07024a98dd9677a3b3e73ea5da80c3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 5 10:12:57 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2345,03f67aa46a07024a98dd9677a3b3e73ea5da80c3,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 5 10:12:57 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2346,efa79a09a92b41b07d0aee3c728d98eec5120730,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 23 14:28:32 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2347,efa79a09a92b41b07d0aee3c728d98eec5120730,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 23 14:28:32 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2348,f2c5857612309330a559500181ce454309ae3c1c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2349,f2c5857612309330a559500181ce454309ae3c1c,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2350,f2c5857612309330a559500181ce454309ae3c1c,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2351,f2c5857612309330a559500181ce454309ae3c1c,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2352,f2c5857612309330a559500181ce454309ae3c1c,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2353,f2c5857612309330a559500181ce454309ae3c1c,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Jun 29 12:39:36 2018 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2354,6ac802ecd8e097f49c4b026fd7b5febfc683866c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 18 09:06:04 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2355,6ac802ecd8e097f49c4b026fd7b5febfc683866c,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Dec 18 09:06:04 2014 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2356,a218e9b7b0ba5422288e79c7703e71f7ea41f85b,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Mon Dec 23 17:32:32 2019 +0100,Tue Dec 1 09:47:19 2015 +0100,,1
2357,a218e9b7b0ba5422288e79c7703e71f7ea41f85b,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Mon Dec 23 17:32:32 2019 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
2358,a218e9b7b0ba5422288e79c7703e71f7ea41f85b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Mon Dec 23 17:32:32 2019 +0100,Fri Feb 27 22:37:25 2015 -0700,,1
2359,a218e9b7b0ba5422288e79c7703e71f7ea41f85b,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Dec 23 17:32:32 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2360,a218e9b7b0ba5422288e79c7703e71f7ea41f85b,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Dec 23 17:32:32 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2361,a218e9b7b0ba5422288e79c7703e71f7ea41f85b,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Dec 23 17:32:32 2019 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2362,50f1e205e48dc6ef646c0d0035ae18080dc8adf3,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jan 10 14:07:01 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2363,50f1e205e48dc6ef646c0d0035ae18080dc8adf3,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jan 10 14:07:01 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2364,50f1e205e48dc6ef646c0d0035ae18080dc8adf3,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jan 10 14:07:01 2020 +0100,Fri Jun 21 19:42:17 2013 -0700,,1
2365,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2366,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2367,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2368,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2369,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2370,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri May 18 18:28:43 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2371,80bc8b4766cc808186af91930152d78afb22aef8,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri May 18 18:28:43 2018 +0000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2372,80bc8b4766cc808186af91930152d78afb22aef8,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri May 18 18:28:43 2018 +0000,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2373,43ee5643261f9b8741ab23a1749b3d55e13171c5,Dockerfile.arm,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 16 23:01:51 2015 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2374,43ee5643261f9b8741ab23a1749b3d55e13171c5,Dockerfile.arm,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 16 23:01:51 2015 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2375,6922f1be08111d889b0585b763b08f92d7a55e05,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat Feb 1 21:40:51 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2376,6922f1be08111d889b0585b763b08f92d7a55e05,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat Feb 1 21:40:51 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2377,a48fe6238494547f392b06adf9d48944b4dd8ac3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 21 14:42:58 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2378,a48fe6238494547f392b06adf9d48944b4dd8ac3,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Dec 21 14:42:58 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2379,24dd838aeefcf4ea1f5a950a9fe0af075f00e2bf,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Mon Nov 4 15:39:16 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2380,3761955e8c1e7534026c469186c3f66c18e77cbc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Apr 3 01:30:12 2015 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2381,3761955e8c1e7534026c469186c3f66c18e77cbc,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Apr 3 01:30:12 2015 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2382,3761955e8c1e7534026c469186c3f66c18e77cbc,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Fri Apr 3 01:30:12 2015 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2383,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",Mon Oct 28 16:51:31 2013 -0700,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2384,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",Mon Oct 28 16:51:31 2013 -0700,Sat Sep 7 10:30:29 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2385,7b2b7df3866d0c0101e9367b7f4f63bfed5faac4,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Sat Apr 18 17:42:24 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2386,7b2b7df3866d0c0101e9367b7f4f63bfed5faac4,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Sat Apr 18 17:42:24 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2387,e6e51d37f7b6509f6422ad97533e9bb581042461,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jun 10 15:16:11 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2388,e6e51d37f7b6509f6422ad97533e9bb581042461,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Fri Jun 10 15:16:11 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2389,e6e51d37f7b6509f6422ad97533e9bb581042461,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jun 10 15:16:11 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2390,7fd6dcc831d28cc1ca1a5d56c9043354228f087d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 1 22:34:22 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2391,7fd6dcc831d28cc1ca1a5d56c9043354228f087d,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",Wed Jan 1 22:34:22 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2392,7fd6dcc831d28cc1ca1a5d56c9043354228f087d,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Jan 1 22:34:22 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2393,065dd231dd7d7858df982a8decfade9df936cf63,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 31 03:16:42 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2394,065dd231dd7d7858df982a8decfade9df936cf63,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Jan 31 03:16:42 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2395,20e8572a4c6b078c6199d6ac2010b8a0d381ef5c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2396,20e8572a4c6b078c6199d6ac2010b8a0d381ef5c,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2397,20e8572a4c6b078c6199d6ac2010b8a0d381ef5c,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2398,20e8572a4c6b078c6199d6ac2010b8a0d381ef5c,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2399,20e8572a4c6b078c6199d6ac2010b8a0d381ef5c,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Feb 5 18:11:18 2019 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2400,72df48d1ad417401a5ce0a7ee82a3c8ba33e091c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 13 18:17:16 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2401,72df48d1ad417401a5ce0a7ee82a3c8ba33e091c,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Jul 13 18:17:16 2017 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2402,d1a0afacc25ad25600ea6851d3b002734725df7e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 31 21:13:14 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2403,d1a0afacc25ad25600ea6851d3b002734725df7e,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Mar 31 21:13:14 2017 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2404,9e5592d6a10ce02fb77244c7de3fff38958e0b89,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Sep 12 20:10:42 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2405,9e5592d6a10ce02fb77244c7de3fff38958e0b89,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Sep 12 20:10:42 2014 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2406,736824ccc134a90740c2ae95034b4c5c506594c7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 13 19:26:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2407,736824ccc134a90740c2ae95034b4c5c506594c7,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 13 19:26:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2408,736824ccc134a90740c2ae95034b4c5c506594c7,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Mon Apr 13 19:26:04 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2409,42f0a0db75a921145c7f519f7b550e1392890da2,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 31 00:07:30 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2410,42f0a0db75a921145c7f519f7b550e1392890da2,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Jul 31 00:07:30 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2411,42f0a0db75a921145c7f519f7b550e1392890da2,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Wed Jul 31 00:07:30 2019 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2412,47838051be695a4e74c80690ceef811dcd3ef62c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",Fri Sep 6 20:14:03 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2413,f7b4d6544506f882f3168ab6a2ccb75f0ad0794e,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",Mon Dec 5 14:01:17 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
2414,626c933730cffb6ca9112271dc4df5a1e462cac1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 30 09:49:10 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2415,626c933730cffb6ca9112271dc4df5a1e462cac1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 30 09:49:10 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2416,81dc97902264fe77877d32e42fdb8a57f123c2b3,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jul 20 09:35:41 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2417,81dc97902264fe77877d32e42fdb8a57f123c2b3,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jul 20 09:35:41 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2418,81dc97902264fe77877d32e42fdb8a57f123c2b3,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jul 20 09:35:41 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2419,141369457ffaeee79154f4b649525f5c8b3d5f2e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Oct 30 18:14:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2420,141369457ffaeee79154f4b649525f5c8b3d5f2e,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Oct 30 18:14:10 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2421,179e9deb1abcd1aa8e536aa314f46ea403fb89ba,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 24 00:12:27 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2422,179e9deb1abcd1aa8e536aa314f46ea403fb89ba,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Dec 24 00:12:27 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2423,31638ab2ad2a5380d447780f05f7aa078c9421f5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Oct 31 14:58:43 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2424,ae7d7db985ea11a5613261e2450cd6fbc3ad108f,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2425,ae7d7db985ea11a5613261e2450cd6fbc3ad108f,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2426,ae7d7db985ea11a5613261e2450cd6fbc3ad108f,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2427,ae7d7db985ea11a5613261e2450cd6fbc3ad108f,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2428,ae7d7db985ea11a5613261e2450cd6fbc3ad108f,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jan 14 01:46:35 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2429,fda99a7e1653e045ec5901955a59ff1123016d93,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 31 12:27:50 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2430,fda99a7e1653e045ec5901955a59ff1123016d93,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Mar 31 12:27:50 2016 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2431,b5490d48979c3afa29d50dc8527aa6579cd1e634,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 30 15:47:54 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2432,b5490d48979c3afa29d50dc8527aa6579cd1e634,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon May 30 15:47:54 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2433,b5490d48979c3afa29d50dc8527aa6579cd1e634,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon May 30 15:47:54 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2434,e3b3719f16cbae506d15474c122276e21f59d3a5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 6 23:10:05 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2435,e3b3719f16cbae506d15474c122276e21f59d3a5,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 6 23:10:05 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2436,39bcaee47b8a284a46b761afe218ba7deda0d482,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun May 21 23:24:07 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2437,39bcaee47b8a284a46b761afe218ba7deda0d482,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Sun May 21 23:24:07 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2438,92849fdcce257dfd61a5c95f57cde085ff22b431,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 20 22:06:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2439,92849fdcce257dfd61a5c95f57cde085ff22b431,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 20 22:06:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2440,92849fdcce257dfd61a5c95f57cde085ff22b431,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Mon Apr 20 22:06:17 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2441,7f1a91121c3f77ca833f43693018f6cce32b96bf,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Dec 1 21:31:28 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2442,65fb04228eba7c6d8640bc8de8800ade05efe2f1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 14 11:54:37 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2443,65fb04228eba7c6d8640bc8de8800ade05efe2f1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jul 14 11:54:37 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2444,65fb04228eba7c6d8640bc8de8800ade05efe2f1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jul 14 11:54:37 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2445,e8edcf47b4b495070a3a3db7b2faeef91adf83f9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Mar 29 05:42:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2446,e8edcf47b4b495070a3a3db7b2faeef91adf83f9,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sun Mar 29 05:42:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2447,e8edcf47b4b495070a3a3db7b2faeef91adf83f9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Sun Mar 29 05:42:48 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2448,eaa9c85511620aa82f1876e1503604f591f00d23,docs/Dockerfile,docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",Tue Jan 14 19:23:30 2014 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2449,f8dacaf0ab7ca533cc3a33c6d06f7dca3e347955,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue May 31 16:45:42 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2450,f8dacaf0ab7ca533cc3a33c6d06f7dca3e347955,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue May 31 16:45:42 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2451,82bd3886d54da4fcbcd29cde957568a75ecd186e,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Tue May 19 05:10:06 2015 +0000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2452,82bd3886d54da4fcbcd29cde957568a75ecd186e,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Tue May 19 05:10:06 2015 +0000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2453,b1c1f42bccccef5fc407c3bec7d25a60f91af035,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Aug 28 14:35:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2454,b1c1f42bccccef5fc407c3bec7d25a60f91af035,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Aug 28 14:35:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2455,b1c1f42bccccef5fc407c3bec7d25a60f91af035,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Aug 28 14:35:06 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2456,e0a1df8e683879bb999623a9521b272aafcc4208,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Oct 14 03:34:24 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2457,e0a1df8e683879bb999623a9521b272aafcc4208,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Oct 14 03:34:24 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2458,b3e527dfd242ad30c0297c8b257862116cf2c50e,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 1 13:39:34 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2459,b3e527dfd242ad30c0297c8b257862116cf2c50e,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Dec 1 13:39:34 2015 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2460,0b23393ba1901df3d08916fa977707db58699eca,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Mar 6 13:39:17 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2461,0b23393ba1901df3d08916fa977707db58699eca,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Mar 6 13:39:17 2014 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2462,f6ed590596cbf73764b40ff4f32f90b1cdb8b213,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jul 9 15:12:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2463,f6ed590596cbf73764b40ff4f32f90b1cdb8b213,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jul 9 15:12:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2464,f6ed590596cbf73764b40ff4f32f90b1cdb8b213,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jul 9 15:12:36 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2465,d5151ca8ab5d90300839c8572cb96577de4d6233,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 3 16:26:19 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2466,d5151ca8ab5d90300839c8572cb96577de4d6233,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Sep 3 16:26:19 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2467,d5151ca8ab5d90300839c8572cb96577de4d6233,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Sep 3 16:26:19 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2468,47f13d3b84fb0ee867c6b6c2a213d78b471754bf,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 8 19:47:09 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2469,47f13d3b84fb0ee867c6b6c2a213d78b471754bf,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 8 19:47:09 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2470,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2471,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2472,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2473,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2474,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2475,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Fri Mar 23 06:01:48 2018 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2476,6d4b0f53342f4b56ad0770bd0e1bce6fcd898a41,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Thu Feb 26 09:46:55 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2477,6d4b0f53342f4b56ad0770bd0e1bce6fcd898a41,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Thu Feb 26 09:46:55 2015 +1000,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2478,eacd2fd4daa03b1161d879e835705f7d35b871e3,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",Wed Jan 20 18:51:34 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
2479,241898d136e41f80ab2dda95078f971a8248675d,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 18 18:49:59 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2480,241898d136e41f80ab2dda95078f971a8248675d,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Mon Apr 18 18:49:59 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2481,241898d136e41f80ab2dda95078f971a8248675d,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Apr 18 18:49:59 2016 +0200,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2482,7edbdd9c5cdbdaa7c7fe810468b63eab2a565e71,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Sep 29 23:28:24 2016 +0530,Fri Jun 21 19:42:17 2013 -0700,,1
2483,7edbdd9c5cdbdaa7c7fe810468b63eab2a565e71,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",Thu Sep 29 23:28:24 2016 +0530,Fri Jun 21 19:42:17 2013 -0700,,1
2484,1db0c7bb01863f859a193246a0474f9d1b4d6027,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 23 16:34:46 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2485,1db0c7bb01863f859a193246a0474f9d1b4d6027,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 23 16:34:46 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2486,8ec8564691dc1ebf757c93fe51f6b64a8fcb49af,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 13:47:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2487,8ec8564691dc1ebf757c93fe51f6b64a8fcb49af,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 13:47:28 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2488,34e41580f9d91aa529ae41021a10450cf749863b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Sep 23 12:27:30 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2489,34e41580f9d91aa529ae41021a10450cf749863b,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Sep 23 12:27:30 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2490,34e41580f9d91aa529ae41021a10450cf749863b,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Sep 23 12:27:30 2015 +0300,Fri Jun 21 19:42:17 2013 -0700,,1
2491,3e75c5b68e8d311f4a29cca285560d2e49eae769,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Sat Nov 5 21:05:06 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
2492,63099477189ea14f3122f6aa37fa7c60d33562c7,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 13 19:34:27 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2493,63099477189ea14f3122f6aa37fa7c60d33562c7,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 13 19:34:27 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2494,caaae78247d9ceecba07da381401c2376b478c2b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Feb 25 04:19:49 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2495,caaae78247d9ceecba07da381401c2376b478c2b,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Feb 25 04:19:49 2015 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2496,ad06e3fba368041e57c419894752621f840c9715,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Oct 28 08:32:33 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2497,ad06e3fba368041e57c419894752621f840c9715,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Fri Oct 28 08:32:33 2016 +0800,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2498,d34bbb66d5d5f2f07b8f0c1b63df5f058f20b436,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Dec 23 13:11:45 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2499,d34bbb66d5d5f2f07b8f0c1b63df5f058f20b436,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Dec 23 13:11:45 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2500,3873b19c31a882a3240fc04b63e23e8a557028c0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jan 12 15:01:09 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2501,3873b19c31a882a3240fc04b63e23e8a557028c0,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jan 12 15:01:09 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2502,efb4c800a7c8167cf2202466a720c0fad7001a5d,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",Tue Oct 29 19:37:56 2013 -0700,Fri Oct 18 22:33:16 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2503,efb4c800a7c8167cf2202466a720c0fad7001a5d,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",Tue Oct 29 19:37:56 2013 -0700,Fri Oct 18 22:33:16 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2504,7ffae3d51a452a63c49f8544953a8b0f9781a5e0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Dec 4 17:45:04 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2505,7ffae3d51a452a63c49f8544953a8b0f9781a5e0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Dec 4 17:45:04 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2506,7ffae3d51a452a63c49f8544953a8b0f9781a5e0,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Dec 4 17:45:04 2017 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2507,b0835dd0889b00e231edf78b25fc929a6b148b05,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 30 16:49:57 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2508,b0835dd0889b00e231edf78b25fc929a6b148b05,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Tue Jul 30 16:49:57 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2509,b0835dd0889b00e231edf78b25fc929a6b148b05,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Tue Jul 30 16:49:57 2019 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2510,22c46af4b358cf3ec4f7af47c701064c00cf7de4,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Aug 5 13:17:40 2014 -0700,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2511,22c46af4b358cf3ec4f7af47c701064c00cf7de4,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Aug 5 13:17:40 2014 -0700,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2512,7f0ca59ec2696c960b7c7d2fa9e24f7ded694881,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2513,7f0ca59ec2696c960b7c7d2fa9e24f7ded694881,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2514,7f0ca59ec2696c960b7c7d2fa9e24f7ded694881,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2515,7f0ca59ec2696c960b7c7d2fa9e24f7ded694881,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2516,7f0ca59ec2696c960b7c7d2fa9e24f7ded694881,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Feb 18 11:57:43 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2517,d0a4b216a68d0ea27b4604330ed779fa5ed96c35,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sun Jul 19 12:43:28 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2518,d0a4b216a68d0ea27b4604330ed779fa5ed96c35,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sun Jul 19 12:43:28 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2519,ece4b5bde8ff6ea21b51275a69787191d12a5d65,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Mon Mar 9 18:24:49 2015 -0600,Fri Feb 27 22:37:25 2015 -0700,,1
2520,150a519a0b267cccaacb4b8038787e2b512fe17e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",Tue Nov 29 11:06:45 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2521,150a519a0b267cccaacb4b8038787e2b512fe17e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Nov 29 11:06:45 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2522,484a75f3549239d0489cb0ad518d79ed6783584a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 24 20:40:41 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2523,484a75f3549239d0489cb0ad518d79ed6783584a,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",Tue Dec 24 20:40:41 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2524,484a75f3549239d0489cb0ad518d79ed6783584a,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Dec 24 20:40:41 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2525,95f3f77fc417bbc55f03e869136deec27e26bc51,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",Fri Oct 18 22:33:16 2013 -0700,Fri Oct 18 22:33:16 2013 -0700,Fri Feb 14 20:50:16 2014 -0800,1
2526,3dd0262773b60a611434bad03692d5b2ab01d17b,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Mon Mar 30 10:27:59 2020 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2527,3dd0262773b60a611434bad03692d5b2ab01d17b,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Mar 30 10:27:59 2020 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2528,3dd0262773b60a611434bad03692d5b2ab01d17b,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Mon Mar 30 10:27:59 2020 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2529,3dd0262773b60a611434bad03692d5b2ab01d17b,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Mon Mar 30 10:27:59 2020 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2530,dd7d4d1101102eb1d958bb948369a25ec08ab01d,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jul 21 10:42:02 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2531,dd7d4d1101102eb1d958bb948369a25ec08ab01d,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jul 21 10:42:02 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2532,dd7d4d1101102eb1d958bb948369a25ec08ab01d,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Jul 21 10:42:02 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2533,09c38a8d43cb7fcb128861d0a7f32acaee92115c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Nov 5 10:12:57 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2534,09c38a8d43cb7fcb128861d0a7f32acaee92115c,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Nov 5 10:12:57 2014 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2535,6089e679a2fb2494fd3e599a9eab9327e6a509fc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Sat May 2 01:42:53 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2536,6089e679a2fb2494fd3e599a9eab9327e6a509fc,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Sat May 2 01:42:53 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2537,6089e679a2fb2494fd3e599a9eab9327e6a509fc,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Sat May 2 01:42:53 2015 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2538,7c8dcebd300262c9f98d92777dd9aab6d4e26f10,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Thu Dec 20 15:43:06 2018 +0100,Fri Sep 8 16:43:04 2017 +0200,,1
2539,09b4c2585284d1125d4d299a7d58b36c1d0baf17,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Mar 6 18:12:41 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2540,09b4c2585284d1125d4d299a7d58b36c1d0baf17,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Fri Mar 6 18:12:41 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2541,09b4c2585284d1125d4d299a7d58b36c1d0baf17,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Fri Mar 6 18:12:41 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2542,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2543,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2544,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2545,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2546,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 23:25:06 2016 +0100,Thu Nov 5 15:38:41 2015 +0100,Fri Mar 9 06:17:37 2018 +0000,1
2547,fa806f26aff927eb0d98b41e79786ae98987da5b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",Fri Sep 6 19:58:05 2013 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2548,84d7b57eb7de6d6ae7640c396c420b20cdeff632,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Wed Apr 29 14:30:23 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2549,84d7b57eb7de6d6ae7640c396c420b20cdeff632,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Wed Apr 29 14:30:23 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2550,84d7b57eb7de6d6ae7640c396c420b20cdeff632,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Wed Apr 29 14:30:23 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2551,84d7b57eb7de6d6ae7640c396c420b20cdeff632,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Wed Apr 29 14:30:23 2020 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2552,7260adfff98ff46230ede3c2b3fbad1b607ebf5c,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Fri Jan 17 11:55:42 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2553,7260adfff98ff46230ede3c2b3fbad1b607ebf5c,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Fri Jan 17 11:55:42 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2554,7260adfff98ff46230ede3c2b3fbad1b607ebf5c,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",Fri Jan 17 11:55:42 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2555,7260adfff98ff46230ede3c2b3fbad1b607ebf5c,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",Fri Jan 17 11:55:42 2020 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2556,745820fec0faba80b1e0df9c236c6181930647db,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 13 21:13:28 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2557,745820fec0faba80b1e0df9c236c6181930647db,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 13 21:13:28 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2558,745820fec0faba80b1e0df9c236c6181930647db,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Jul 13 21:13:28 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2559,54ff1dcb829e67d62dd4686bdc19522d63c3e0d3,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Tue Apr 21 18:36:37 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2560,54ff1dcb829e67d62dd4686bdc19522d63c3e0d3,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Tue Apr 21 18:36:37 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2561,b5763f8fa7309f95e21271fca99d0a71c05d0fef,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Tue Mar 17 23:08:17 2015 -0600,Fri Feb 27 22:37:25 2015 -0700,,1
2562,ee0ef6c535dc8a3ab62266d7da7801dd7c5b4ea8,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 22:56:32 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2563,ee0ef6c535dc8a3ab62266d7da7801dd7c5b4ea8,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 22:56:32 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2564,cdf17e6943b15103b37fd57da7c2729a26ecb674,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Feb 20 19:24:24 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2565,cdf17e6943b15103b37fd57da7c2729a26ecb674,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Mon Feb 20 19:24:24 2017 +0100,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2566,7bb72fa080d13c3b90d624cb77530632c7705c56,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Apr 14 13:35:54 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2567,7bb72fa080d13c3b90d624cb77530632c7705c56,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Apr 14 13:35:54 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2568,4d171281bf88b07a9dc2096a86091cf5d3b11270,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Jun 18 17:09:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2569,4d171281bf88b07a9dc2096a86091cf5d3b11270,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu Jun 18 17:09:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2570,4d171281bf88b07a9dc2096a86091cf5d3b11270,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu Jun 18 17:09:57 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2571,9a19bd1b450a4f514d194d8a5571ab5be921464a,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",Thu Oct 20 17:02:26 2016 -0700,Tue Dec 1 09:47:19 2015 +0100,,1
2572,fa1e390cad4fd36683e9667795967c711a4867e3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 1 20:51:16 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2573,fa1e390cad4fd36683e9667795967c711a4867e3,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Thu May 1 20:51:16 2014 +0000,Fri Jun 21 19:42:17 2013 -0700,,1
2574,20262688df290f1196c5620112488f6445b7eb26,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Fri Apr 19 16:13:04 2019 +0200,Fri Sep 8 16:43:04 2017 +0200,,1
2575,6842c906c44fefeb3ca78aae550e64341e040391,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 1 15:23:33 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2576,6842c906c44fefeb3ca78aae550e64341e040391,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Dec 1 15:23:33 2015 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2577,c5bd6e3dc7680d6c683496f63dafb1f30f87eaa7,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Sat Jul 20 12:46:07 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
2578,3e3ac8abeaf892bbb985e7b70b37f6eee1731338,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 28 14:02:06 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2579,3e3ac8abeaf892bbb985e7b70b37f6eee1731338,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon Mar 28 14:02:06 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2580,fa362e47e03e7b9b50e3642f50a4478d8b8f1243,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",Tue Mar 1 09:05:12 2016 -0800,Tue Dec 1 09:47:19 2015 +0100,,1
2581,f5af9b9738892b5988f987ce5fbce6e31a10e768,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 20 16:26:49 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2582,f5af9b9738892b5988f987ce5fbce6e31a10e768,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Dec 20 16:26:49 2016 -0500,Fri Jun 21 19:42:17 2013 -0700,,1
2583,1cfcce5e210ad7a0296fe341b3dda40a0af06c12,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",Sat Oct 5 22:46:49 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2584,1cfcce5e210ad7a0296fe341b3dda40a0af06c12,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Sat Oct 5 22:46:49 2019 +0200,Fri Jun 21 19:42:17 2013 -0700,,1
2585,66720189e04d50ef06c12d1ffbbfebf41caa2ae3,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",Tue Apr 10 15:46:21 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
2586,66720189e04d50ef06c12d1ffbbfebf41caa2ae3,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",Tue Apr 10 15:46:21 2018 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
2587,7fc697eb0b62557b4abaa3b9fc0cd44b5c1652ac,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Dec 12 05:47:17 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2588,7fc697eb0b62557b4abaa3b9fc0cd44b5c1652ac,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Tue Dec 12 05:47:17 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2589,7fc697eb0b62557b4abaa3b9fc0cd44b5c1652ac,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",Tue Dec 12 05:47:17 2017 +0000,Fri Jan 15 14:25:03 2016 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2590,73672c5bd8ad170224957734bd1eaf20b11680ba,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Mar 29 08:37:13 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2591,73672c5bd8ad170224957734bd1eaf20b11680ba,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Tue Mar 29 08:37:13 2016 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2592,681f4d84ae05a98b7096d52a168222bae362d9e1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Jan 20 20:40:19 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2593,681f4d84ae05a98b7096d52a168222bae362d9e1,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Jan 20 20:40:19 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2594,fc637b5275c2fe23c9857a34316a783042d906b8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Jul 7 12:06:34 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2595,fc637b5275c2fe23c9857a34316a783042d906b8,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Jul 7 12:06:34 2014 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2596,5719b136dec7b2c3e76059cf9226a1b388a772f6,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Fri Jan 8 16:44:10 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2597,5719b136dec7b2c3e76059cf9226a1b388a772f6,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Fri Jan 8 16:44:10 2016 -0800,Fri Jun 21 19:42:17 2013 -0700,,1
2598,107db89b6e7a465779bc3f89008fa15a4ef2d708,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu May 5 12:26:23 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2599,107db89b6e7a465779bc3f89008fa15a4ef2d708,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Thu May 5 12:26:23 2016 -0400,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2600,06d0843a61843e6b16a56d518e21032a5652098b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",Mon Sep 30 21:14:54 2013 -0600,Fri Jun 21 19:42:17 2013 -0700,,1
2601,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2602,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2603,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2604,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2605,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",Mon Oct 15 16:52:53 2018 +0900,Fri Jun 21 19:42:17 2013 -0700,,1
2606,5118f1431c9cae757d5e7c193ed85fc8fca3ae85,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",Fri Feb 27 22:37:25 2015 -0700,Fri Feb 27 22:37:25 2015 -0700,,1
2607,8db141049f5323d754584f265b267e52ee5d9e17,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Oct 28 12:56:50 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2608,8db141049f5323d754584f265b267e52ee5d9e17,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Wed Oct 28 12:56:50 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2609,8db141049f5323d754584f265b267e52ee5d9e17,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Oct 28 12:56:50 2015 -0400,Fri Jun 21 19:42:17 2013 -0700,,1
2610,1bd6836a4249210090ed99c4e281374e9e16e138,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Thu Dec 15 10:40:33 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2611,1bd6836a4249210090ed99c4e281374e9e16e138,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",Thu Dec 15 10:40:33 2016 +0100,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2612,645f8a32df3b5b22e5e194664a9f0733709714c9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon Mar 9 14:44:14 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2613,645f8a32df3b5b22e5e194664a9f0733709714c9,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Mon Mar 9 14:44:14 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2614,645f8a32df3b5b22e5e194664a9f0733709714c9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",Mon Mar 9 14:44:14 2015 -0700,Fri Jun 21 19:42:17 2013 -0700,,1
2615,2c435ab8beba93509b957e4ac5e5801b86b5e8f1,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Tue Apr 18 16:44:33 2017 -0500,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2616,2c435ab8beba93509b957e4ac5e5801b86b5e8f1,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",Tue Apr 18 16:44:33 2017 -0500,Tue Aug 5 13:17:40 2014 -0700,Sat Jun 2 09:46:53 2018 -0700,1
2617,a83cedddc6d3e0fe1df352ec54245090df641ab8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Mon May 23 15:19:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2618,a83cedddc6d3e0fe1df352ec54245090df641ab8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Mon May 23 15:19:19 2016 -0700,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2619,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2620,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2621,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2622,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2623,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",Wed Jan 20 16:57:18 2016 -0500,Tue Feb 24 18:33:18 2015 +0000,Fri Mar 9 06:17:37 2018 +0000,1
2624,b6d55ebcbc93ce66aa9906aa87e1081f21ba1650,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",Wed Apr 1 12:20:59 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2625,b6d55ebcbc93ce66aa9906aa87e1081f21ba1650,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",Wed Apr 1 12:20:59 2015 -0700,Thu Aug 29 23:49:41 2013 +0000,Tue Oct 11 12:14:15 2016 -0700,1
2626,83fd212f2cb71aae2f4a5a60c893c2bd01e59b72,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",Thu Sep 26 11:59:51 2019 +0200,Tue Dec 1 09:47:19 2015 +0100,,1
