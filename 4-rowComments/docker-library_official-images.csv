,CommitID,Dockerfile,Comment
0,ca4013a5dff95c4aa9a1ba5383e4bc26401c1a8f,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
1,ca4013a5dff95c4aa9a1ba5383e4bc26401c1a8f,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
2,ca4013a5dff95c4aa9a1ba5383e4bc26401c1a8f,/Dockerfile,"# git for cloning source code
"
3,3650bd89ae92c9655888df7037917a3ef3f42040,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
4,3650bd89ae92c9655888df7037917a3ef3f42040,/Dockerfile,"# git for cloning source code
"
5,3650bd89ae92c9655888df7037917a3ef3f42040,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
6,3650bd89ae92c9655888df7037917a3ef3f42040,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
7,3650bd89ae92c9655888df7037917a3ef3f42040,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
8,2e6963e86389a49d011d1b65b7310fc382faea65,/Dockerfile,"# bash for running scripts
"
9,2e6963e86389a49d011d1b65b7310fc382faea65,/Dockerfile,"# go for compiling bashbrew
"
10,2e6963e86389a49d011d1b65b7310fc382faea65,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
11,2e6963e86389a49d011d1b65b7310fc382faea65,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
12,07a27576863e1868775d08ef07f046e83d4da6e1,/Dockerfile,"# bash for running scripts
"
13,07a27576863e1868775d08ef07f046e83d4da6e1,/Dockerfile,"# go for compiling bashbrew
"
14,07a27576863e1868775d08ef07f046e83d4da6e1,/Dockerfile,"# ssl for downloading files
"
15,07a27576863e1868775d08ef07f046e83d4da6e1,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
16,07a27576863e1868775d08ef07f046e83d4da6e1,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
17,be144e0d6eedd99385040cdc4184ead18c7bfb86,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
18,be144e0d6eedd99385040cdc4184ead18c7bfb86,/Dockerfile,"# git for cloning source code
"
19,be144e0d6eedd99385040cdc4184ead18c7bfb86,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
20,be144e0d6eedd99385040cdc4184ead18c7bfb86,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
21,be144e0d6eedd99385040cdc4184ead18c7bfb86,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
22,64b3ac9f17f2cc3a8b5d2bfdabc2a2605ceb898a,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
23,64b3ac9f17f2cc3a8b5d2bfdabc2a2605ceb898a,/Dockerfile,"# git for cloning source code
"
24,64b3ac9f17f2cc3a8b5d2bfdabc2a2605ceb898a,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
25,64b3ac9f17f2cc3a8b5d2bfdabc2a2605ceb898a,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
26,64b3ac9f17f2cc3a8b5d2bfdabc2a2605ceb898a,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
27,5b871aed231937fb2683984217b93fac31014f46,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
28,5b871aed231937fb2683984217b93fac31014f46,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
29,5b871aed231937fb2683984217b93fac31014f46,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
30,5b871aed231937fb2683984217b93fac31014f46,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
31,5b871aed231937fb2683984217b93fac31014f46,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
32,7cee0649e15c21ecbcd37413325db34133ef3f34,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
33,7cee0649e15c21ecbcd37413325db34133ef3f34,/Dockerfile,"# git for cloning source code
"
34,7cee0649e15c21ecbcd37413325db34133ef3f34,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
35,7cee0649e15c21ecbcd37413325db34133ef3f34,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
36,7cee0649e15c21ecbcd37413325db34133ef3f34,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
37,15a1fe04f6409849e9d7bdf0ff8ba259d0e6bee0,/Dockerfile,"# bash for running scripts
"
38,15a1fe04f6409849e9d7bdf0ff8ba259d0e6bee0,/Dockerfile,"# go for compiling bashbrew
"
39,15a1fe04f6409849e9d7bdf0ff8ba259d0e6bee0,/Dockerfile,"# ssl for downloading files
"
40,15a1fe04f6409849e9d7bdf0ff8ba259d0e6bee0,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
41,15a1fe04f6409849e9d7bdf0ff8ba259d0e6bee0,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
42,15a1fe04f6409849e9d7bdf0ff8ba259d0e6bee0,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
43,14970bb30dc6ccfb2b6bc959c1a57f5bc7c5b931,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
44,14970bb30dc6ccfb2b6bc959c1a57f5bc7c5b931,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
45,14970bb30dc6ccfb2b6bc959c1a57f5bc7c5b931,/Dockerfile,"# git for cloning source code
"
46,9cd42902bad827828f7d89ea6ed5bff37464278f,/Dockerfile,"# bash for running scripts
"
47,9cd42902bad827828f7d89ea6ed5bff37464278f,/Dockerfile,"# go for compiling bashbrew
"
48,9cd42902bad827828f7d89ea6ed5bff37464278f,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
49,9cd42902bad827828f7d89ea6ed5bff37464278f,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
50,de09e0b6efb3119589b4df027b191ac4ec07d3a1,/Dockerfile,"# bash for running scripts
"
51,de09e0b6efb3119589b4df027b191ac4ec07d3a1,/Dockerfile,"# go for compiling bashbrew
"
52,de09e0b6efb3119589b4df027b191ac4ec07d3a1,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
53,de09e0b6efb3119589b4df027b191ac4ec07d3a1,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
54,cffd4a67959c6d79cdcac824f00ce38cf7a8fad8,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
55,cffd4a67959c6d79cdcac824f00ce38cf7a8fad8,/Dockerfile,"# git for cloning source code
"
56,cffd4a67959c6d79cdcac824f00ce38cf7a8fad8,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
57,cffd4a67959c6d79cdcac824f00ce38cf7a8fad8,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
58,cffd4a67959c6d79cdcac824f00ce38cf7a8fad8,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
59,fea7c6838344638afec59005fce12cc568f94069,/Dockerfile,"# bash for running scripts
"
60,fea7c6838344638afec59005fce12cc568f94069,/Dockerfile,"# go for compiling bashbrew
"
61,fea7c6838344638afec59005fce12cc568f94069,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
62,fea7c6838344638afec59005fce12cc568f94069,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
63,68a175ff8f1b5a3d184ed42e6736d9782e0cea3e,/Dockerfile,"# bash for running scripts
"
64,68a175ff8f1b5a3d184ed42e6736d9782e0cea3e,/Dockerfile,"# go for compiling bashbrew
"
65,68a175ff8f1b5a3d184ed42e6736d9782e0cea3e,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
66,68a175ff8f1b5a3d184ed42e6736d9782e0cea3e,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
67,21cdbdbb884c42790034d31cd7477c6ce5367f88,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
68,21cdbdbb884c42790034d31cd7477c6ce5367f88,/Dockerfile,"# git for cloning source code
"
69,21cdbdbb884c42790034d31cd7477c6ce5367f88,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
70,21cdbdbb884c42790034d31cd7477c6ce5367f88,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
71,21cdbdbb884c42790034d31cd7477c6ce5367f88,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
72,0a9844158485af6a248441267a94452da2d69ffc,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
73,0a9844158485af6a248441267a94452da2d69ffc,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
74,0a9844158485af6a248441267a94452da2d69ffc,/Dockerfile,"# git for cloning source code
"
75,114e657a41a9911c5ca608d53bce8f3c2fe7e7e4,/Dockerfile,"# bash for running scripts
"
76,114e657a41a9911c5ca608d53bce8f3c2fe7e7e4,/Dockerfile,"# go for compiling bashbrew
"
77,114e657a41a9911c5ca608d53bce8f3c2fe7e7e4,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
78,114e657a41a9911c5ca608d53bce8f3c2fe7e7e4,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
79,b31c720cf9e9da63c840ce18559629771f73e96e,/Dockerfile,"# bash for running scripts
"
80,b31c720cf9e9da63c840ce18559629771f73e96e,/Dockerfile,"# go for compiling bashbrew
"
81,b31c720cf9e9da63c840ce18559629771f73e96e,/Dockerfile,"# ssl for downloading files
"
82,b31c720cf9e9da63c840ce18559629771f73e96e,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
83,b31c720cf9e9da63c840ce18559629771f73e96e,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
84,b31c720cf9e9da63c840ce18559629771f73e96e,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
85,2f93e9bfc3e64fcd78628612ed6b6fb908af8d6b,/Dockerfile,"# bash for running scripts
"
86,2f93e9bfc3e64fcd78628612ed6b6fb908af8d6b,/Dockerfile,"# go for compiling bashbrew
"
87,2f93e9bfc3e64fcd78628612ed6b6fb908af8d6b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
88,2f93e9bfc3e64fcd78628612ed6b6fb908af8d6b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
89,1be33ddfd36585277797ac577b5f8c75d5c82417,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
90,1be33ddfd36585277797ac577b5f8c75d5c82417,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
91,1be33ddfd36585277797ac577b5f8c75d5c82417,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
92,1be33ddfd36585277797ac577b5f8c75d5c82417,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
93,1be33ddfd36585277797ac577b5f8c75d5c82417,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
94,f289a9cc9bed94963d1502bb4d8ae5ce8b8830cb,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
95,f289a9cc9bed94963d1502bb4d8ae5ce8b8830cb,/Dockerfile,"# git for cloning source code
"
96,f289a9cc9bed94963d1502bb4d8ae5ce8b8830cb,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
97,f289a9cc9bed94963d1502bb4d8ae5ce8b8830cb,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
98,f289a9cc9bed94963d1502bb4d8ae5ce8b8830cb,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
99,d4642c389bf2e2d4c049cbd9182069b556cad3a1,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
100,d4642c389bf2e2d4c049cbd9182069b556cad3a1,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
101,d4642c389bf2e2d4c049cbd9182069b556cad3a1,/Dockerfile,"# git for cloning source code
"
102,7c53048add4a14868eb7d0b99ca14f244b5e5229,/Dockerfile,"# bash for running scripts
"
103,7c53048add4a14868eb7d0b99ca14f244b5e5229,/Dockerfile,"# go for compiling bashbrew
"
104,7c53048add4a14868eb7d0b99ca14f244b5e5229,/Dockerfile,"# ssl for downloading files
"
105,7c53048add4a14868eb7d0b99ca14f244b5e5229,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
106,7c53048add4a14868eb7d0b99ca14f244b5e5229,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
107,8d861c699efa145251441afea0d08a750a0cedba,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
108,8d861c699efa145251441afea0d08a750a0cedba,/Dockerfile,"# git for cloning source code
"
109,8d861c699efa145251441afea0d08a750a0cedba,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
110,8d861c699efa145251441afea0d08a750a0cedba,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
111,8d861c699efa145251441afea0d08a750a0cedba,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
112,4b4177edf558abc0bff0b5a718e0b078f99f2d4e,/Dockerfile,"# bash for running scripts
"
113,4b4177edf558abc0bff0b5a718e0b078f99f2d4e,/Dockerfile,"# go for compiling bashbrew
"
114,4b4177edf558abc0bff0b5a718e0b078f99f2d4e,/Dockerfile,"# ssl for downloading files
"
115,4b4177edf558abc0bff0b5a718e0b078f99f2d4e,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
116,4b4177edf558abc0bff0b5a718e0b078f99f2d4e,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
117,7ae3c26ad9a11566b6dde4df447fe3ca83e1f12b,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
118,7ae3c26ad9a11566b6dde4df447fe3ca83e1f12b,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
119,7ae3c26ad9a11566b6dde4df447fe3ca83e1f12b,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
120,7ae3c26ad9a11566b6dde4df447fe3ca83e1f12b,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
121,7ae3c26ad9a11566b6dde4df447fe3ca83e1f12b,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
122,ebe2c478119fd8e4c124f512c59fd7f7ea0697a7,/Dockerfile,"# bash for running scripts
"
123,ebe2c478119fd8e4c124f512c59fd7f7ea0697a7,/Dockerfile,"# go for compiling bashbrew
"
124,ebe2c478119fd8e4c124f512c59fd7f7ea0697a7,/Dockerfile,"# ssl for downloading files
"
125,ebe2c478119fd8e4c124f512c59fd7f7ea0697a7,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
126,ebe2c478119fd8e4c124f512c59fd7f7ea0697a7,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
127,ebe2c478119fd8e4c124f512c59fd7f7ea0697a7,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
128,3045e68dc6139f85d49aed221c5f3c52074217bf,/Dockerfile,"# bash for running scripts
"
129,3045e68dc6139f85d49aed221c5f3c52074217bf,/Dockerfile,"# go for compiling bashbrew
"
130,3045e68dc6139f85d49aed221c5f3c52074217bf,/Dockerfile,"# ssl for downloading files
"
131,3045e68dc6139f85d49aed221c5f3c52074217bf,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
132,3045e68dc6139f85d49aed221c5f3c52074217bf,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
133,3045e68dc6139f85d49aed221c5f3c52074217bf,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
134,0bb463ec5b4783a7eba507a9c22f0642858ddd95,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
135,0bb463ec5b4783a7eba507a9c22f0642858ddd95,/Dockerfile,"# git for cloning source code
"
136,0bb463ec5b4783a7eba507a9c22f0642858ddd95,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
137,0bb463ec5b4783a7eba507a9c22f0642858ddd95,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
138,0bb463ec5b4783a7eba507a9c22f0642858ddd95,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
139,2cbe9e023f5a02354267690ab91afedac9dd52fd,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
140,2cbe9e023f5a02354267690ab91afedac9dd52fd,/Dockerfile,"# bash for running scripts
"
141,2cbe9e023f5a02354267690ab91afedac9dd52fd,/Dockerfile,"# go for compiling bashbrew
"
142,2cbe9e023f5a02354267690ab91afedac9dd52fd,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
143,2cbe9e023f5a02354267690ab91afedac9dd52fd,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
144,bb4910554273b4061c0408bde64600e3e0995aa2,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
145,bb4910554273b4061c0408bde64600e3e0995aa2,/Dockerfile,"# git for cloning source code
"
146,bb4910554273b4061c0408bde64600e3e0995aa2,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
147,bb4910554273b4061c0408bde64600e3e0995aa2,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
148,bb4910554273b4061c0408bde64600e3e0995aa2,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
149,a9877bccaae99513ce8d685245e2e51dd8b1f085,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
150,a9877bccaae99513ce8d685245e2e51dd8b1f085,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
151,a9877bccaae99513ce8d685245e2e51dd8b1f085,/Dockerfile,"# git for cloning source code
"
152,71bfbebbc45ace49ec52987b48e97878d558f7b7,/Dockerfile,"# bash for running scripts
"
153,71bfbebbc45ace49ec52987b48e97878d558f7b7,/Dockerfile,"# go for compiling bashbrew
"
154,71bfbebbc45ace49ec52987b48e97878d558f7b7,/Dockerfile,"# ssl for downloading files
"
155,71bfbebbc45ace49ec52987b48e97878d558f7b7,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
156,71bfbebbc45ace49ec52987b48e97878d558f7b7,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
157,71bfbebbc45ace49ec52987b48e97878d558f7b7,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
158,1806604405924b505d0b2c58ba5cf8a7b02a2705,/Dockerfile,"# bash for running scripts
"
159,1806604405924b505d0b2c58ba5cf8a7b02a2705,/Dockerfile,"# go for compiling bashbrew
"
160,1806604405924b505d0b2c58ba5cf8a7b02a2705,/Dockerfile,"# ssl for downloading files
"
161,1806604405924b505d0b2c58ba5cf8a7b02a2705,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
162,1806604405924b505d0b2c58ba5cf8a7b02a2705,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
163,1806604405924b505d0b2c58ba5cf8a7b02a2705,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
164,aaac922e92e103ced13b7bf087e0f7dea546af48,/Dockerfile,"# bash for running scripts
"
165,aaac922e92e103ced13b7bf087e0f7dea546af48,/Dockerfile,"# go for compiling bashbrew
"
166,aaac922e92e103ced13b7bf087e0f7dea546af48,/Dockerfile,"# ssl for downloading files
"
167,aaac922e92e103ced13b7bf087e0f7dea546af48,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
168,aaac922e92e103ced13b7bf087e0f7dea546af48,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
169,aaac922e92e103ced13b7bf087e0f7dea546af48,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
170,de37719287bb5abf1d37eeebc9d3598cf9805316,/Dockerfile,"# bash for running scripts
"
171,de37719287bb5abf1d37eeebc9d3598cf9805316,/Dockerfile,"# go for compiling bashbrew
"
172,de37719287bb5abf1d37eeebc9d3598cf9805316,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
173,de37719287bb5abf1d37eeebc9d3598cf9805316,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
174,ee282fe6fbcf2981a153f8cdfba2633f1a9ded0a,/Dockerfile,"# bash for running scripts
"
175,ee282fe6fbcf2981a153f8cdfba2633f1a9ded0a,/Dockerfile,"# go for compiling bashbrew
"
176,ee282fe6fbcf2981a153f8cdfba2633f1a9ded0a,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
177,ee282fe6fbcf2981a153f8cdfba2633f1a9ded0a,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
178,6541e1ad7a8c755a42dc63efc1831487647b7f9e,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
179,6541e1ad7a8c755a42dc63efc1831487647b7f9e,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
180,6541e1ad7a8c755a42dc63efc1831487647b7f9e,/Dockerfile,"# git for cloning source code
"
181,c676f91ad8cedf83062417a1d609abaea5e236c0,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
182,c676f91ad8cedf83062417a1d609abaea5e236c0,/Dockerfile,"# bash for running scripts
"
183,c676f91ad8cedf83062417a1d609abaea5e236c0,/Dockerfile,"# go for compiling bashbrew
"
184,c676f91ad8cedf83062417a1d609abaea5e236c0,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
185,c676f91ad8cedf83062417a1d609abaea5e236c0,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
186,84aa9ed158196e09a9e68f34d6a2a02ce43a0f7e,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
187,84aa9ed158196e09a9e68f34d6a2a02ce43a0f7e,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
188,84aa9ed158196e09a9e68f34d6a2a02ce43a0f7e,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
189,84aa9ed158196e09a9e68f34d6a2a02ce43a0f7e,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
190,84aa9ed158196e09a9e68f34d6a2a02ce43a0f7e,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
191,18b84c17e4bf8e02f867866c5e4e0cbfb3e3432d,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
192,18b84c17e4bf8e02f867866c5e4e0cbfb3e3432d,/Dockerfile,"# bash for running scripts
"
193,18b84c17e4bf8e02f867866c5e4e0cbfb3e3432d,/Dockerfile,"# go for compiling bashbrew
"
194,18b84c17e4bf8e02f867866c5e4e0cbfb3e3432d,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
195,18b84c17e4bf8e02f867866c5e4e0cbfb3e3432d,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
196,bd2751bb7c2fe76faa313b17d9e447e897423369,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
197,bd2751bb7c2fe76faa313b17d9e447e897423369,/Dockerfile,"# git for cloning source code
"
198,bd2751bb7c2fe76faa313b17d9e447e897423369,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
199,bd2751bb7c2fe76faa313b17d9e447e897423369,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
200,bd2751bb7c2fe76faa313b17d9e447e897423369,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
201,6abdb4661be57d681d780babd6b518fb08d2bf4c,/Dockerfile,"# bash for running scripts
"
202,6abdb4661be57d681d780babd6b518fb08d2bf4c,/Dockerfile,"# go for compiling bashbrew
"
203,6abdb4661be57d681d780babd6b518fb08d2bf4c,/Dockerfile,"# ssl for downloading files
"
204,6abdb4661be57d681d780babd6b518fb08d2bf4c,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
205,6abdb4661be57d681d780babd6b518fb08d2bf4c,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
206,29876ea85b0c8801f91487834243c43be8b89011,/Dockerfile,"# bash for running scripts
"
207,29876ea85b0c8801f91487834243c43be8b89011,/Dockerfile,"# go for compiling bashbrew
"
208,29876ea85b0c8801f91487834243c43be8b89011,/Dockerfile,"# ssl for downloading files
"
209,29876ea85b0c8801f91487834243c43be8b89011,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
210,29876ea85b0c8801f91487834243c43be8b89011,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
211,5b2244296d6c9ac57aa578fe70f41ea2e43229f4,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
212,5b2244296d6c9ac57aa578fe70f41ea2e43229f4,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
213,5b2244296d6c9ac57aa578fe70f41ea2e43229f4,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
214,5b2244296d6c9ac57aa578fe70f41ea2e43229f4,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
215,5b2244296d6c9ac57aa578fe70f41ea2e43229f4,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
216,a92af5b121b78400c287bd086925b6b09ee0c7e2,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
217,a92af5b121b78400c287bd086925b6b09ee0c7e2,/Dockerfile,"# bash for running scripts
"
218,a92af5b121b78400c287bd086925b6b09ee0c7e2,/Dockerfile,"# go for compiling bashbrew
"
219,a92af5b121b78400c287bd086925b6b09ee0c7e2,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
220,a92af5b121b78400c287bd086925b6b09ee0c7e2,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
221,991468ce05efacdbb1f8e4db963870273f51f945,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
222,991468ce05efacdbb1f8e4db963870273f51f945,/Dockerfile,"# git for cloning source code
"
223,991468ce05efacdbb1f8e4db963870273f51f945,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
224,991468ce05efacdbb1f8e4db963870273f51f945,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
225,991468ce05efacdbb1f8e4db963870273f51f945,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
226,c7f2287a24f0a890cee6eebb9d59130f1af2baf6,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
227,c7f2287a24f0a890cee6eebb9d59130f1af2baf6,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
228,c7f2287a24f0a890cee6eebb9d59130f1af2baf6,/Dockerfile,"# git for cloning source code
"
229,f90d965f9b20e487f540758a8bfef163e18342a5,/Dockerfile,"# bash for running scripts
"
230,f90d965f9b20e487f540758a8bfef163e18342a5,/Dockerfile,"# go for compiling bashbrew
"
231,f90d965f9b20e487f540758a8bfef163e18342a5,/Dockerfile,"# ssl for downloading files
"
232,f90d965f9b20e487f540758a8bfef163e18342a5,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
233,f90d965f9b20e487f540758a8bfef163e18342a5,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
234,2403c493abddcaadc49fd44f6d856baac76062f5,/Dockerfile,"# bash for running scripts
"
235,2403c493abddcaadc49fd44f6d856baac76062f5,/Dockerfile,"# go for compiling bashbrew
"
236,2403c493abddcaadc49fd44f6d856baac76062f5,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
237,2403c493abddcaadc49fd44f6d856baac76062f5,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
238,8a4216d21bb1adcc1b5bb6b4512d6a1ad2551a57,/Dockerfile,"# bash for running scripts
"
239,8a4216d21bb1adcc1b5bb6b4512d6a1ad2551a57,/Dockerfile,"# go for compiling bashbrew
"
240,8a4216d21bb1adcc1b5bb6b4512d6a1ad2551a57,/Dockerfile,"# ssl for downloading files
"
241,8a4216d21bb1adcc1b5bb6b4512d6a1ad2551a57,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
242,8a4216d21bb1adcc1b5bb6b4512d6a1ad2551a57,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
243,24e5537ead1ee359199d2c443cff5478b55b9867,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
244,24e5537ead1ee359199d2c443cff5478b55b9867,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
245,24e5537ead1ee359199d2c443cff5478b55b9867,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
246,24e5537ead1ee359199d2c443cff5478b55b9867,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
247,24e5537ead1ee359199d2c443cff5478b55b9867,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
248,26851a5944a2a699b9dfde69f064bf1c6c5ac9d3,/Dockerfile,"# bash for running scripts
"
249,26851a5944a2a699b9dfde69f064bf1c6c5ac9d3,/Dockerfile,"# go for compiling bashbrew
"
250,26851a5944a2a699b9dfde69f064bf1c6c5ac9d3,/Dockerfile,"# ssl for downloading files
"
251,26851a5944a2a699b9dfde69f064bf1c6c5ac9d3,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
252,26851a5944a2a699b9dfde69f064bf1c6c5ac9d3,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
253,26851a5944a2a699b9dfde69f064bf1c6c5ac9d3,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
254,6218706d40f14facdc67f4638d6758921c0e75a6,/Dockerfile,"# bash for running scripts
"
255,6218706d40f14facdc67f4638d6758921c0e75a6,/Dockerfile,"# go for compiling bashbrew
"
256,6218706d40f14facdc67f4638d6758921c0e75a6,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
257,6218706d40f14facdc67f4638d6758921c0e75a6,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
258,0ed93af8aba95c626b93fc6eb0482e71f43bd9c9,/Dockerfile,"# bash for running scripts
"
259,0ed93af8aba95c626b93fc6eb0482e71f43bd9c9,/Dockerfile,"# go for compiling bashbrew
"
260,0ed93af8aba95c626b93fc6eb0482e71f43bd9c9,/Dockerfile,"# ssl for downloading files
"
261,0ed93af8aba95c626b93fc6eb0482e71f43bd9c9,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
262,0ed93af8aba95c626b93fc6eb0482e71f43bd9c9,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
263,0ed93af8aba95c626b93fc6eb0482e71f43bd9c9,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
264,847f8cc19face7d44b3a8166fca85862abb6cf94,/Dockerfile,"# bash for running scripts
"
265,847f8cc19face7d44b3a8166fca85862abb6cf94,/Dockerfile,"# go for compiling bashbrew
"
266,847f8cc19face7d44b3a8166fca85862abb6cf94,/Dockerfile,"# ssl for downloading files
"
267,847f8cc19face7d44b3a8166fca85862abb6cf94,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
268,847f8cc19face7d44b3a8166fca85862abb6cf94,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
269,847f8cc19face7d44b3a8166fca85862abb6cf94,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
270,5ea61be02a8018550ce5895365d8bc7531b0fa8c,/Dockerfile,"# ssl for downloading files
"
271,5ea61be02a8018550ce5895365d8bc7531b0fa8c,/Dockerfile,"# git for cloning source code
"
272,5ea61be02a8018550ce5895365d8bc7531b0fa8c,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
273,5ea61be02a8018550ce5895365d8bc7531b0fa8c,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
274,5ea61be02a8018550ce5895365d8bc7531b0fa8c,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
275,f14066a95ec4842c9fbe95576aa78dab892a43d4,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
276,f14066a95ec4842c9fbe95576aa78dab892a43d4,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
277,f14066a95ec4842c9fbe95576aa78dab892a43d4,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
278,f14066a95ec4842c9fbe95576aa78dab892a43d4,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
279,f14066a95ec4842c9fbe95576aa78dab892a43d4,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
280,a74281499b773f827f415b7b6567669438e8c14f,/Dockerfile,"# bash for running scripts
"
281,a74281499b773f827f415b7b6567669438e8c14f,/Dockerfile,"# go for compiling bashbrew
"
282,a74281499b773f827f415b7b6567669438e8c14f,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
283,a74281499b773f827f415b7b6567669438e8c14f,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
284,7ed224bfffc04ce89a44c06907ebc50e2eb8d733,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
285,7ed224bfffc04ce89a44c06907ebc50e2eb8d733,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
286,7ed224bfffc04ce89a44c06907ebc50e2eb8d733,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
287,7ed224bfffc04ce89a44c06907ebc50e2eb8d733,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
288,7ed224bfffc04ce89a44c06907ebc50e2eb8d733,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
289,05ab00823819c3dd5f0ef520d841d84ad5023893,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
290,05ab00823819c3dd5f0ef520d841d84ad5023893,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
291,05ab00823819c3dd5f0ef520d841d84ad5023893,/Dockerfile,"# git for cloning source code
"
292,be02a6a45ab4bd2239b62e3d9c4df2535e342b94,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
293,be02a6a45ab4bd2239b62e3d9c4df2535e342b94,/Dockerfile,"# bash for running scripts
"
294,be02a6a45ab4bd2239b62e3d9c4df2535e342b94,/Dockerfile,"# go for compiling bashbrew
"
295,be02a6a45ab4bd2239b62e3d9c4df2535e342b94,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
296,be02a6a45ab4bd2239b62e3d9c4df2535e342b94,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
297,4bb10490c60bf8758465df23b2611573c2fc0925,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
298,4bb10490c60bf8758465df23b2611573c2fc0925,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
299,4bb10490c60bf8758465df23b2611573c2fc0925,/Dockerfile,"# git for cloning source code
"
300,ea3a2be458884e57ad896247169e8d12a767b8a4,/Dockerfile,"# bash for running scripts
"
301,ea3a2be458884e57ad896247169e8d12a767b8a4,/Dockerfile,"# go for compiling bashbrew
"
302,ea3a2be458884e57ad896247169e8d12a767b8a4,/Dockerfile,"# ssl for downloading files
"
303,ea3a2be458884e57ad896247169e8d12a767b8a4,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
304,ea3a2be458884e57ad896247169e8d12a767b8a4,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
305,ea3a2be458884e57ad896247169e8d12a767b8a4,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
306,e2f8dca186e4305b2208a182b8a059bf2eaf4ee7,/Dockerfile,"# bash for running scripts
"
307,e2f8dca186e4305b2208a182b8a059bf2eaf4ee7,/Dockerfile,"# go for compiling bashbrew
"
308,e2f8dca186e4305b2208a182b8a059bf2eaf4ee7,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
309,e2f8dca186e4305b2208a182b8a059bf2eaf4ee7,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
310,47b75a3bc1d3b5c04b8b02ddae76a613f1b19927,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
311,47b75a3bc1d3b5c04b8b02ddae76a613f1b19927,/Dockerfile,"# git for cloning source code
"
312,47b75a3bc1d3b5c04b8b02ddae76a613f1b19927,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
313,47b75a3bc1d3b5c04b8b02ddae76a613f1b19927,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
314,47b75a3bc1d3b5c04b8b02ddae76a613f1b19927,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
315,a3510f47ec3eb7bd5b7d1e289188cc116cd68846,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
316,a3510f47ec3eb7bd5b7d1e289188cc116cd68846,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
317,a3510f47ec3eb7bd5b7d1e289188cc116cd68846,/Dockerfile,"# git for cloning source code
"
318,46f5a674efb35904348a9a2b79d839880dd81642,/Dockerfile,"# bash for running scripts
"
319,46f5a674efb35904348a9a2b79d839880dd81642,/Dockerfile,"# go for compiling bashbrew
"
320,46f5a674efb35904348a9a2b79d839880dd81642,/Dockerfile,"# ssl for downloading files
"
321,46f5a674efb35904348a9a2b79d839880dd81642,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
322,46f5a674efb35904348a9a2b79d839880dd81642,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
323,31d62561065a096c0062ee0a460929805f2da900,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
324,31d62561065a096c0062ee0a460929805f2da900,/Dockerfile,"# bash for running scripts
"
325,31d62561065a096c0062ee0a460929805f2da900,/Dockerfile,"# go for compiling bashbrew
"
326,5ff294f05bcc4a9e331f226697edb3c2e4249dde,/Dockerfile,"# bash for running scripts
"
327,5ff294f05bcc4a9e331f226697edb3c2e4249dde,/Dockerfile,"# go for compiling bashbrew
"
328,5ff294f05bcc4a9e331f226697edb3c2e4249dde,/Dockerfile,"# ssl for downloading files
"
329,5ff294f05bcc4a9e331f226697edb3c2e4249dde,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
330,5ff294f05bcc4a9e331f226697edb3c2e4249dde,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
331,5ff294f05bcc4a9e331f226697edb3c2e4249dde,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
332,4132946bff988833ad4972649b43d0e595138dbf,/Dockerfile,"# bash for running scripts
"
333,4132946bff988833ad4972649b43d0e595138dbf,/Dockerfile,"# go for compiling bashbrew
"
334,4132946bff988833ad4972649b43d0e595138dbf,/Dockerfile,"# ssl for downloading files
"
335,4132946bff988833ad4972649b43d0e595138dbf,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
336,4132946bff988833ad4972649b43d0e595138dbf,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
337,5c4b300526cee89b052f9df2a7b5459c76e2bb60,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
338,5c4b300526cee89b052f9df2a7b5459c76e2bb60,/Dockerfile,"# git for cloning source code
"
339,5c4b300526cee89b052f9df2a7b5459c76e2bb60,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
340,5c4b300526cee89b052f9df2a7b5459c76e2bb60,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
341,5c4b300526cee89b052f9df2a7b5459c76e2bb60,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
342,fe68da8fa57b7f9d518b6a4d58cb24496ce7d4e0,/Dockerfile,"# bash for running scripts
"
343,fe68da8fa57b7f9d518b6a4d58cb24496ce7d4e0,/Dockerfile,"# go for compiling bashbrew
"
344,fe68da8fa57b7f9d518b6a4d58cb24496ce7d4e0,/Dockerfile,"# ssl for downloading files
"
345,fe68da8fa57b7f9d518b6a4d58cb24496ce7d4e0,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
346,fe68da8fa57b7f9d518b6a4d58cb24496ce7d4e0,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
347,fe68da8fa57b7f9d518b6a4d58cb24496ce7d4e0,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
348,c4448b4b264605c5f116029d004659a9b1b3d482,/Dockerfile,"# bash for running scripts
"
349,c4448b4b264605c5f116029d004659a9b1b3d482,/Dockerfile,"# go for compiling bashbrew
"
350,c4448b4b264605c5f116029d004659a9b1b3d482,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
351,c4448b4b264605c5f116029d004659a9b1b3d482,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
352,3b661c2c61964667e6c8f4ea243e5e832d1fc2c7,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
353,3b661c2c61964667e6c8f4ea243e5e832d1fc2c7,/Dockerfile,"# bash for running scripts
"
354,3b661c2c61964667e6c8f4ea243e5e832d1fc2c7,/Dockerfile,"# go for compiling bashbrew
"
355,37c376fe37fa47a8635cd2fcd5b93c2dc891b374,/Dockerfile,"# bash for running scripts
"
356,37c376fe37fa47a8635cd2fcd5b93c2dc891b374,/Dockerfile,"# go for compiling bashbrew
"
357,37c376fe37fa47a8635cd2fcd5b93c2dc891b374,/Dockerfile,"# ssl for downloading files
"
358,37c376fe37fa47a8635cd2fcd5b93c2dc891b374,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
359,37c376fe37fa47a8635cd2fcd5b93c2dc891b374,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
360,37c376fe37fa47a8635cd2fcd5b93c2dc891b374,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
361,960b1e5d559424fb3c5012956a646749caabd890,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
362,960b1e5d559424fb3c5012956a646749caabd890,/Dockerfile,"# git for cloning source code
"
363,960b1e5d559424fb3c5012956a646749caabd890,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
364,960b1e5d559424fb3c5012956a646749caabd890,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
365,960b1e5d559424fb3c5012956a646749caabd890,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
366,869f76becc9e1115098aecefcf349d256963cbc6,/Dockerfile,"# bash for running scripts
"
367,869f76becc9e1115098aecefcf349d256963cbc6,/Dockerfile,"# go for compiling bashbrew
"
368,869f76becc9e1115098aecefcf349d256963cbc6,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
369,869f76becc9e1115098aecefcf349d256963cbc6,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
370,52496cce1db37c05921b72cb95dbff469000af71,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
371,52496cce1db37c05921b72cb95dbff469000af71,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
372,52496cce1db37c05921b72cb95dbff469000af71,/Dockerfile,"# git for cloning source code
"
373,277f4afd964c9af839b18124b6705dec5b4d44d7,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
374,277f4afd964c9af839b18124b6705dec5b4d44d7,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
375,277f4afd964c9af839b18124b6705dec5b4d44d7,/Dockerfile,"# git for cloning source code
"
376,e62606d7aad6bbd63af6b6b9039bd8432c5233c4,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
377,e62606d7aad6bbd63af6b6b9039bd8432c5233c4,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
378,e62606d7aad6bbd63af6b6b9039bd8432c5233c4,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
379,e62606d7aad6bbd63af6b6b9039bd8432c5233c4,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
380,e62606d7aad6bbd63af6b6b9039bd8432c5233c4,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
381,7e525b84084103e348ee1597a6ac5087070bbfbb,/Dockerfile,"# bash for running scripts
"
382,7e525b84084103e348ee1597a6ac5087070bbfbb,/Dockerfile,"# go for compiling bashbrew
"
383,7e525b84084103e348ee1597a6ac5087070bbfbb,/Dockerfile,"# ssl for downloading files
"
384,7e525b84084103e348ee1597a6ac5087070bbfbb,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
385,7e525b84084103e348ee1597a6ac5087070bbfbb,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
386,7e525b84084103e348ee1597a6ac5087070bbfbb,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
387,9c3495a370917a077de3e942697c3984effe43c4,/Dockerfile,"# bash for running scripts
"
388,9c3495a370917a077de3e942697c3984effe43c4,/Dockerfile,"# go for compiling bashbrew
"
389,9c3495a370917a077de3e942697c3984effe43c4,/Dockerfile,"# ssl for downloading files
"
390,9c3495a370917a077de3e942697c3984effe43c4,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
391,9c3495a370917a077de3e942697c3984effe43c4,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
392,9c3495a370917a077de3e942697c3984effe43c4,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
393,af4bbe8220c881ff580a1a901769897d929eb8e3,/Dockerfile,"# bash for running scripts
"
394,af4bbe8220c881ff580a1a901769897d929eb8e3,/Dockerfile,"# go for compiling bashbrew
"
395,af4bbe8220c881ff580a1a901769897d929eb8e3,/Dockerfile,"# ssl for downloading files
"
396,af4bbe8220c881ff580a1a901769897d929eb8e3,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
397,af4bbe8220c881ff580a1a901769897d929eb8e3,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
398,a36656216b59db7d48e50798e8c7fbf45146a6e4,/Dockerfile,"# bash for running scripts
"
399,a36656216b59db7d48e50798e8c7fbf45146a6e4,/Dockerfile,"# go for compiling bashbrew
"
400,a36656216b59db7d48e50798e8c7fbf45146a6e4,/Dockerfile,"# ssl for downloading files
"
401,a36656216b59db7d48e50798e8c7fbf45146a6e4,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
402,a36656216b59db7d48e50798e8c7fbf45146a6e4,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
403,a36656216b59db7d48e50798e8c7fbf45146a6e4,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
404,d112ff985f5a8a174b42e4d309ab0731529b7779,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
405,d112ff985f5a8a174b42e4d309ab0731529b7779,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
406,d112ff985f5a8a174b42e4d309ab0731529b7779,/Dockerfile,"# git for cloning source code
"
407,2dae4b705e93f18d68349197033fc5f12530132b,/Dockerfile,"# bash for running scripts
"
408,2dae4b705e93f18d68349197033fc5f12530132b,/Dockerfile,"# go for compiling bashbrew
"
409,2dae4b705e93f18d68349197033fc5f12530132b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
410,2dae4b705e93f18d68349197033fc5f12530132b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
411,4f570c39942c28513edb0b9157c937bca9509056,/Dockerfile,"# bash for running scripts
"
412,4f570c39942c28513edb0b9157c937bca9509056,/Dockerfile,"# go for compiling bashbrew
"
413,4f570c39942c28513edb0b9157c937bca9509056,/Dockerfile,"# ssl for downloading files
"
414,4f570c39942c28513edb0b9157c937bca9509056,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
415,4f570c39942c28513edb0b9157c937bca9509056,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
416,0896154b8b1389888d1c2f416d3fbbea4c002272,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
417,0896154b8b1389888d1c2f416d3fbbea4c002272,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
418,0896154b8b1389888d1c2f416d3fbbea4c002272,/Dockerfile,"# git for cloning source code
"
419,15a67f42cd7322f0b1f8faf8f9c94ff6faef3f4e,/Dockerfile,"# bash for running scripts
"
420,15a67f42cd7322f0b1f8faf8f9c94ff6faef3f4e,/Dockerfile,"# go for compiling bashbrew
"
421,15a67f42cd7322f0b1f8faf8f9c94ff6faef3f4e,/Dockerfile,"# ssl for downloading files
"
422,15a67f42cd7322f0b1f8faf8f9c94ff6faef3f4e,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
423,15a67f42cd7322f0b1f8faf8f9c94ff6faef3f4e,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
424,15a67f42cd7322f0b1f8faf8f9c94ff6faef3f4e,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
425,4e22bdf4104ee406d12fc8036dcacb5c596a090b,/Dockerfile,"# bash for running scripts
"
426,4e22bdf4104ee406d12fc8036dcacb5c596a090b,/Dockerfile,"# go for compiling bashbrew
"
427,4e22bdf4104ee406d12fc8036dcacb5c596a090b,/Dockerfile,"# ssl for downloading files
"
428,4e22bdf4104ee406d12fc8036dcacb5c596a090b,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
429,4e22bdf4104ee406d12fc8036dcacb5c596a090b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
430,4e22bdf4104ee406d12fc8036dcacb5c596a090b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
431,ec6fafb6b3db45f112babe34fade06be17e2a7cd,/Dockerfile,"# bash for running scripts
"
432,ec6fafb6b3db45f112babe34fade06be17e2a7cd,/Dockerfile,"# go for compiling bashbrew
"
433,ec6fafb6b3db45f112babe34fade06be17e2a7cd,/Dockerfile,"# ssl for downloading files
"
434,ec6fafb6b3db45f112babe34fade06be17e2a7cd,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
435,ec6fafb6b3db45f112babe34fade06be17e2a7cd,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
436,ec6fafb6b3db45f112babe34fade06be17e2a7cd,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
437,a14aad8054aa1c5e41fbd367211c2a9b7c95a910,/Dockerfile,"# bash for running scripts
"
438,a14aad8054aa1c5e41fbd367211c2a9b7c95a910,/Dockerfile,"# go for compiling bashbrew
"
439,a14aad8054aa1c5e41fbd367211c2a9b7c95a910,/Dockerfile,"# ssl for downloading files
"
440,a14aad8054aa1c5e41fbd367211c2a9b7c95a910,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
441,a14aad8054aa1c5e41fbd367211c2a9b7c95a910,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
442,a14aad8054aa1c5e41fbd367211c2a9b7c95a910,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
443,3d2dc0f05796d9046cc06cd0e5f3398d16549909,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
444,3d2dc0f05796d9046cc06cd0e5f3398d16549909,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
445,3d2dc0f05796d9046cc06cd0e5f3398d16549909,/Dockerfile,"# git for cloning source code
"
446,70e5264cc822a279a8c79fc73e9cc7aac4f43979,/Dockerfile,"# bash for running scripts
"
447,70e5264cc822a279a8c79fc73e9cc7aac4f43979,/Dockerfile,"# go for compiling bashbrew
"
448,70e5264cc822a279a8c79fc73e9cc7aac4f43979,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
449,70e5264cc822a279a8c79fc73e9cc7aac4f43979,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
450,99d23932e2fea0605f2e509729f2284af32285c4,/Dockerfile,"# bash for running scripts
"
451,99d23932e2fea0605f2e509729f2284af32285c4,/Dockerfile,"# go for compiling bashbrew
"
452,99d23932e2fea0605f2e509729f2284af32285c4,/Dockerfile,"# ssl for downloading files
"
453,99d23932e2fea0605f2e509729f2284af32285c4,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
454,99d23932e2fea0605f2e509729f2284af32285c4,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
455,99d23932e2fea0605f2e509729f2284af32285c4,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
456,f84b6122fb04d17ca4f9373147c25abe563e183a,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
457,f84b6122fb04d17ca4f9373147c25abe563e183a,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
458,f84b6122fb04d17ca4f9373147c25abe563e183a,/Dockerfile,"# git for cloning source code
"
459,4f6af8252b5ffcea2e6d93b2b67968f667241380,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
460,4f6af8252b5ffcea2e6d93b2b67968f667241380,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
461,4f6af8252b5ffcea2e6d93b2b67968f667241380,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
462,4f6af8252b5ffcea2e6d93b2b67968f667241380,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
463,4f6af8252b5ffcea2e6d93b2b67968f667241380,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
464,3818af091af51923ccc0a276de74519d4f04faeb,/Dockerfile,"# bash for running scripts
"
465,3818af091af51923ccc0a276de74519d4f04faeb,/Dockerfile,"# go for compiling bashbrew
"
466,3818af091af51923ccc0a276de74519d4f04faeb,/Dockerfile,"# ssl for downloading files
"
467,3818af091af51923ccc0a276de74519d4f04faeb,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
468,3818af091af51923ccc0a276de74519d4f04faeb,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
469,ac4c700468020f72df5d1178a64d792b58cedf05,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
470,ac4c700468020f72df5d1178a64d792b58cedf05,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
471,ac4c700468020f72df5d1178a64d792b58cedf05,/Dockerfile,"# git for cloning source code
"
472,cdbe153c9c7f89bc50d0cba81e75b050baa0e879,/Dockerfile,"# bash for running scripts
"
473,cdbe153c9c7f89bc50d0cba81e75b050baa0e879,/Dockerfile,"# go for compiling bashbrew
"
474,cdbe153c9c7f89bc50d0cba81e75b050baa0e879,/Dockerfile,"# ssl for downloading files
"
475,cdbe153c9c7f89bc50d0cba81e75b050baa0e879,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
476,cdbe153c9c7f89bc50d0cba81e75b050baa0e879,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
477,1e0268b04ba3a226a355c6aff4354ae6a7897dcb,/Dockerfile,"# bash for running scripts
"
478,1e0268b04ba3a226a355c6aff4354ae6a7897dcb,/Dockerfile,"# go for compiling bashbrew
"
479,1e0268b04ba3a226a355c6aff4354ae6a7897dcb,/Dockerfile,"# ssl for downloading files
"
480,1e0268b04ba3a226a355c6aff4354ae6a7897dcb,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
481,1e0268b04ba3a226a355c6aff4354ae6a7897dcb,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
482,1e0268b04ba3a226a355c6aff4354ae6a7897dcb,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
483,d0152cbc44c0c5ee82aceb378c4f7ee497385f05,/Dockerfile,"# bash for running scripts
"
484,d0152cbc44c0c5ee82aceb378c4f7ee497385f05,/Dockerfile,"# go for compiling bashbrew
"
485,d0152cbc44c0c5ee82aceb378c4f7ee497385f05,/Dockerfile,"# ssl for downloading files
"
486,d0152cbc44c0c5ee82aceb378c4f7ee497385f05,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
487,d0152cbc44c0c5ee82aceb378c4f7ee497385f05,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
488,d0152cbc44c0c5ee82aceb378c4f7ee497385f05,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
489,7593b2001472ef2c27d44fbb871d8335453ec68b,/Dockerfile,"# bash for running scripts
"
490,7593b2001472ef2c27d44fbb871d8335453ec68b,/Dockerfile,"# go for compiling bashbrew
"
491,7593b2001472ef2c27d44fbb871d8335453ec68b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
492,7593b2001472ef2c27d44fbb871d8335453ec68b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
493,d441c7811f565870e461fea4ceefd1a8db79f960,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
494,d441c7811f565870e461fea4ceefd1a8db79f960,/Dockerfile,"# bash for running scripts
"
495,d441c7811f565870e461fea4ceefd1a8db79f960,/Dockerfile,"# go for compiling bashbrew
"
496,d441c7811f565870e461fea4ceefd1a8db79f960,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
497,d441c7811f565870e461fea4ceefd1a8db79f960,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
498,e9a3c6d607573ef4a8eaa938cdb4b20ab907d16f,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
499,e9a3c6d607573ef4a8eaa938cdb4b20ab907d16f,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
500,e9a3c6d607573ef4a8eaa938cdb4b20ab907d16f,/Dockerfile,"# git for cloning source code
"
501,e2656b4923ce5cafbb743bf70c1df39ad182df21,/Dockerfile,"# bash for running scripts
"
502,e2656b4923ce5cafbb743bf70c1df39ad182df21,/Dockerfile,"# go for compiling bashbrew
"
503,e2656b4923ce5cafbb743bf70c1df39ad182df21,/Dockerfile,"# ssl for downloading files
"
504,e2656b4923ce5cafbb743bf70c1df39ad182df21,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
505,e2656b4923ce5cafbb743bf70c1df39ad182df21,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
506,e2656b4923ce5cafbb743bf70c1df39ad182df21,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
507,4cee763acf93ac0a0d5d2004a70f39264b8f8f29,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
508,4cee763acf93ac0a0d5d2004a70f39264b8f8f29,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
509,4cee763acf93ac0a0d5d2004a70f39264b8f8f29,/Dockerfile,"# git for cloning source code
"
510,8127fc48edab905a6216b4f16fbd646e61037465,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
511,8127fc48edab905a6216b4f16fbd646e61037465,/Dockerfile,"# git for cloning source code
"
512,8127fc48edab905a6216b4f16fbd646e61037465,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
513,8127fc48edab905a6216b4f16fbd646e61037465,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
514,8127fc48edab905a6216b4f16fbd646e61037465,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
515,b7c2f530858bfa7669883ca71fc92947157b52d5,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
516,b7c2f530858bfa7669883ca71fc92947157b52d5,/Dockerfile,"# git for cloning source code
"
517,b7c2f530858bfa7669883ca71fc92947157b52d5,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
518,b7c2f530858bfa7669883ca71fc92947157b52d5,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
519,b7c2f530858bfa7669883ca71fc92947157b52d5,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
520,884322089815e97f8bc124e64183a766fa97fbeb,/Dockerfile,"# bash for running scripts
"
521,884322089815e97f8bc124e64183a766fa97fbeb,/Dockerfile,"# go for compiling bashbrew
"
522,884322089815e97f8bc124e64183a766fa97fbeb,/Dockerfile,"# ssl for downloading files
"
523,884322089815e97f8bc124e64183a766fa97fbeb,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
524,884322089815e97f8bc124e64183a766fa97fbeb,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
525,884322089815e97f8bc124e64183a766fa97fbeb,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
526,76a3585e9f1bbddbd0cc956fb1b4ecbd662d34f3,/Dockerfile,"# bash for running scripts
"
527,76a3585e9f1bbddbd0cc956fb1b4ecbd662d34f3,/Dockerfile,"# go for compiling bashbrew
"
528,76a3585e9f1bbddbd0cc956fb1b4ecbd662d34f3,/Dockerfile,"# ssl for downloading files
"
529,76a3585e9f1bbddbd0cc956fb1b4ecbd662d34f3,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
530,76a3585e9f1bbddbd0cc956fb1b4ecbd662d34f3,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
531,a230ff4d6fdca5f9ba22d6e7c4ab509e0ec399f6,/Dockerfile,"# bash for running scripts
"
532,a230ff4d6fdca5f9ba22d6e7c4ab509e0ec399f6,/Dockerfile,"# go for compiling bashbrew
"
533,a230ff4d6fdca5f9ba22d6e7c4ab509e0ec399f6,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
534,a230ff4d6fdca5f9ba22d6e7c4ab509e0ec399f6,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
535,dcb73c8ddfda2950e2a7b6b840efb361c70719e7,/Dockerfile,"# bash for running scripts
"
536,dcb73c8ddfda2950e2a7b6b840efb361c70719e7,/Dockerfile,"# go for compiling bashbrew
"
537,dcb73c8ddfda2950e2a7b6b840efb361c70719e7,/Dockerfile,"# ssl for downloading files
"
538,dcb73c8ddfda2950e2a7b6b840efb361c70719e7,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
539,dcb73c8ddfda2950e2a7b6b840efb361c70719e7,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
540,dcb73c8ddfda2950e2a7b6b840efb361c70719e7,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
541,47f4539aa7d32766558203c1230c4ffdf7d824e5,/Dockerfile,"# bash for running scripts
"
542,47f4539aa7d32766558203c1230c4ffdf7d824e5,/Dockerfile,"# go for compiling bashbrew
"
543,47f4539aa7d32766558203c1230c4ffdf7d824e5,/Dockerfile,"# ssl for downloading files
"
544,47f4539aa7d32766558203c1230c4ffdf7d824e5,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
545,47f4539aa7d32766558203c1230c4ffdf7d824e5,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
546,47f4539aa7d32766558203c1230c4ffdf7d824e5,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
547,366c6692efdfaa1b1a095998f264494c6fe4367e,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
548,366c6692efdfaa1b1a095998f264494c6fe4367e,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
549,366c6692efdfaa1b1a095998f264494c6fe4367e,/Dockerfile,"# git for cloning source code
"
550,c90bab0d2128cd0cefc7dfd083cc27ca10ea4de8,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
551,c90bab0d2128cd0cefc7dfd083cc27ca10ea4de8,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
552,c90bab0d2128cd0cefc7dfd083cc27ca10ea4de8,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
553,c90bab0d2128cd0cefc7dfd083cc27ca10ea4de8,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
554,c90bab0d2128cd0cefc7dfd083cc27ca10ea4de8,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
555,f41864dc698eadbfa17e5cf12e318eb3e939dac2,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
556,f41864dc698eadbfa17e5cf12e318eb3e939dac2,/Dockerfile,"# git for cloning source code
"
557,f41864dc698eadbfa17e5cf12e318eb3e939dac2,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
558,f41864dc698eadbfa17e5cf12e318eb3e939dac2,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
559,f41864dc698eadbfa17e5cf12e318eb3e939dac2,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
560,bc08fadb023d6d7d207de52d301080a2e0513d4b,/Dockerfile,"# bash for running scripts
"
561,bc08fadb023d6d7d207de52d301080a2e0513d4b,/Dockerfile,"# go for compiling bashbrew
"
562,bc08fadb023d6d7d207de52d301080a2e0513d4b,/Dockerfile,"# ssl for downloading files
"
563,bc08fadb023d6d7d207de52d301080a2e0513d4b,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
564,bc08fadb023d6d7d207de52d301080a2e0513d4b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
565,bc08fadb023d6d7d207de52d301080a2e0513d4b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
566,dcb8ba956c193dc3396c27abfc5ad2bf3fc3760b,/Dockerfile,"# bash for running scripts
"
567,dcb8ba956c193dc3396c27abfc5ad2bf3fc3760b,/Dockerfile,"# go for compiling bashbrew
"
568,dcb8ba956c193dc3396c27abfc5ad2bf3fc3760b,/Dockerfile,"# ssl for downloading files
"
569,dcb8ba956c193dc3396c27abfc5ad2bf3fc3760b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
570,dcb8ba956c193dc3396c27abfc5ad2bf3fc3760b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
571,46232742675883c57c74ad0c428802651e34f47b,/Dockerfile,"# bash for running scripts
"
572,46232742675883c57c74ad0c428802651e34f47b,/Dockerfile,"# go for compiling bashbrew
"
573,46232742675883c57c74ad0c428802651e34f47b,/Dockerfile,"# ssl for downloading files
"
574,46232742675883c57c74ad0c428802651e34f47b,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
575,46232742675883c57c74ad0c428802651e34f47b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
576,46232742675883c57c74ad0c428802651e34f47b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
577,b5a0d7dcf6e1fb3987ac5337b22ca2f9f7af1ead,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
578,b5a0d7dcf6e1fb3987ac5337b22ca2f9f7af1ead,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
579,b5a0d7dcf6e1fb3987ac5337b22ca2f9f7af1ead,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
580,b5a0d7dcf6e1fb3987ac5337b22ca2f9f7af1ead,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
581,b5a0d7dcf6e1fb3987ac5337b22ca2f9f7af1ead,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
582,e3557197e85f650c75fc42ccacd1bf61a752dd67,/Dockerfile,"# bash for running scripts
"
583,e3557197e85f650c75fc42ccacd1bf61a752dd67,/Dockerfile,"# go for compiling bashbrew
"
584,e3557197e85f650c75fc42ccacd1bf61a752dd67,/Dockerfile,"# ssl for downloading files
"
585,e3557197e85f650c75fc42ccacd1bf61a752dd67,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
586,e3557197e85f650c75fc42ccacd1bf61a752dd67,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
587,e8bc2ce280fbaa45bd4c3aac9ce34aad81d9af9c,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
588,e8bc2ce280fbaa45bd4c3aac9ce34aad81d9af9c,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
589,e8bc2ce280fbaa45bd4c3aac9ce34aad81d9af9c,/Dockerfile,"# git for cloning source code
"
590,95fa3a8011f942c024942abe2a78a03e43f87c5b,/Dockerfile,"# bash for running scripts
"
591,95fa3a8011f942c024942abe2a78a03e43f87c5b,/Dockerfile,"# go for compiling bashbrew
"
592,95fa3a8011f942c024942abe2a78a03e43f87c5b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
593,95fa3a8011f942c024942abe2a78a03e43f87c5b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
594,c8983a4b154380e2d9756531cf33bd66c8a9c82d,/Dockerfile,"# bash for running scripts
"
595,c8983a4b154380e2d9756531cf33bd66c8a9c82d,/Dockerfile,"# go for compiling bashbrew
"
596,c8983a4b154380e2d9756531cf33bd66c8a9c82d,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
597,c8983a4b154380e2d9756531cf33bd66c8a9c82d,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
598,0c69eaa52ede5cd5a88c9367f39a30e8dda3de9e,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
599,0c69eaa52ede5cd5a88c9367f39a30e8dda3de9e,/Dockerfile,"# bash for running scripts
"
600,0c69eaa52ede5cd5a88c9367f39a30e8dda3de9e,/Dockerfile,"# go for compiling bashbrew
"
601,0c69eaa52ede5cd5a88c9367f39a30e8dda3de9e,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
602,0c69eaa52ede5cd5a88c9367f39a30e8dda3de9e,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
603,c2163904e11b34018f0789f10da6f20a1d342f69,/Dockerfile,"# bash for running scripts
"
604,c2163904e11b34018f0789f10da6f20a1d342f69,/Dockerfile,"# go for compiling bashbrew
"
605,c2163904e11b34018f0789f10da6f20a1d342f69,/Dockerfile,"# ssl for downloading files
"
606,c2163904e11b34018f0789f10da6f20a1d342f69,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
607,c2163904e11b34018f0789f10da6f20a1d342f69,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
608,59a6d46728d7e2e3cf0f0028255ec19aca06b941,/Dockerfile,"# bash for running scripts
"
609,59a6d46728d7e2e3cf0f0028255ec19aca06b941,/Dockerfile,"# go for compiling bashbrew
"
610,59a6d46728d7e2e3cf0f0028255ec19aca06b941,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
611,59a6d46728d7e2e3cf0f0028255ec19aca06b941,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
612,971a89f9a71fe6d2aa1027dbb47379993abf3aea,/Dockerfile,"# bash for running scripts
"
613,971a89f9a71fe6d2aa1027dbb47379993abf3aea,/Dockerfile,"# go for compiling bashbrew
"
614,971a89f9a71fe6d2aa1027dbb47379993abf3aea,/Dockerfile,"# ssl for downloading files
"
615,971a89f9a71fe6d2aa1027dbb47379993abf3aea,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
616,971a89f9a71fe6d2aa1027dbb47379993abf3aea,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
617,971a89f9a71fe6d2aa1027dbb47379993abf3aea,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
618,adef26d02bd969c9198e7859dc7f5a0aa2e83679,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
619,adef26d02bd969c9198e7859dc7f5a0aa2e83679,/Dockerfile,"# git for cloning source code
"
620,adef26d02bd969c9198e7859dc7f5a0aa2e83679,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
621,adef26d02bd969c9198e7859dc7f5a0aa2e83679,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
622,adef26d02bd969c9198e7859dc7f5a0aa2e83679,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
623,dfc5512318d1a5359e554e7b98ca14219c647c27,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
624,9ab1fa3f4bb311a2ea490f63906e19146990e808,/Dockerfile,"# bash for running scripts
"
625,9ab1fa3f4bb311a2ea490f63906e19146990e808,/Dockerfile,"# go for compiling bashbrew
"
626,9ab1fa3f4bb311a2ea490f63906e19146990e808,/Dockerfile,"# ssl for downloading files
"
627,9ab1fa3f4bb311a2ea490f63906e19146990e808,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
628,9ab1fa3f4bb311a2ea490f63906e19146990e808,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
629,86269f8022ec558ba552ceb4c37669775535aafc,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
630,86269f8022ec558ba552ceb4c37669775535aafc,/Dockerfile,"# git for cloning source code
"
631,86269f8022ec558ba552ceb4c37669775535aafc,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
632,86269f8022ec558ba552ceb4c37669775535aafc,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
633,86269f8022ec558ba552ceb4c37669775535aafc,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
634,058fbda764e8273f2bfbeda928e2be84450c04a2,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
635,058fbda764e8273f2bfbeda928e2be84450c04a2,/Dockerfile,"# git for cloning source code
"
636,058fbda764e8273f2bfbeda928e2be84450c04a2,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
637,058fbda764e8273f2bfbeda928e2be84450c04a2,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
638,058fbda764e8273f2bfbeda928e2be84450c04a2,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
639,a271d1ee928d802fbd3247a868c4e684b26db7f7,/Dockerfile,"# bash for running scripts
"
640,a271d1ee928d802fbd3247a868c4e684b26db7f7,/Dockerfile,"# go for compiling bashbrew
"
641,a271d1ee928d802fbd3247a868c4e684b26db7f7,/Dockerfile,"# ssl for downloading files
"
642,a271d1ee928d802fbd3247a868c4e684b26db7f7,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
643,a271d1ee928d802fbd3247a868c4e684b26db7f7,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
644,a271d1ee928d802fbd3247a868c4e684b26db7f7,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
645,d6abc873d6070c8d98340d1764f1f4f8f2086a32,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
646,d6abc873d6070c8d98340d1764f1f4f8f2086a32,/Dockerfile,"# git for cloning source code
"
647,d6abc873d6070c8d98340d1764f1f4f8f2086a32,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
648,d6abc873d6070c8d98340d1764f1f4f8f2086a32,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
649,d6abc873d6070c8d98340d1764f1f4f8f2086a32,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
650,9a8746dd4dd9aad26d16e1ae072d036e7c44ac27,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
651,9a8746dd4dd9aad26d16e1ae072d036e7c44ac27,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
652,9a8746dd4dd9aad26d16e1ae072d036e7c44ac27,/Dockerfile,"# git for cloning source code
"
653,5ee11ec33bd142a5a0bef7e3c96d2981f1fb7973,/Dockerfile,"# bash for running scripts
"
654,5ee11ec33bd142a5a0bef7e3c96d2981f1fb7973,/Dockerfile,"# go for compiling bashbrew
"
655,5ee11ec33bd142a5a0bef7e3c96d2981f1fb7973,/Dockerfile,"# ssl for downloading files
"
656,5ee11ec33bd142a5a0bef7e3c96d2981f1fb7973,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
657,5ee11ec33bd142a5a0bef7e3c96d2981f1fb7973,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
658,f75494d766d7907ca221c0bec33842d5544b2894,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
659,f75494d766d7907ca221c0bec33842d5544b2894,/Dockerfile,"# bash for running scripts
"
660,f75494d766d7907ca221c0bec33842d5544b2894,/Dockerfile,"# go for compiling bashbrew
"
661,f75494d766d7907ca221c0bec33842d5544b2894,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
662,f75494d766d7907ca221c0bec33842d5544b2894,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
663,2fc2529ddcd0c682fae7cde509864c5408b0adbf,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
664,2fc2529ddcd0c682fae7cde509864c5408b0adbf,/Dockerfile,"# git for cloning source code
"
665,2fc2529ddcd0c682fae7cde509864c5408b0adbf,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
666,2fc2529ddcd0c682fae7cde509864c5408b0adbf,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
667,2fc2529ddcd0c682fae7cde509864c5408b0adbf,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
668,47d50af6e2cd2128b4f1c2ddcc1228d8d7724db6,/Dockerfile,"# bash for running scripts
"
669,47d50af6e2cd2128b4f1c2ddcc1228d8d7724db6,/Dockerfile,"# go for compiling bashbrew
"
670,47d50af6e2cd2128b4f1c2ddcc1228d8d7724db6,/Dockerfile,"# ssl for downloading files
"
671,47d50af6e2cd2128b4f1c2ddcc1228d8d7724db6,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
672,47d50af6e2cd2128b4f1c2ddcc1228d8d7724db6,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
673,47d50af6e2cd2128b4f1c2ddcc1228d8d7724db6,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
674,be5de4049e3b8c06d024b55a65ab666e07cf1768,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
675,be5de4049e3b8c06d024b55a65ab666e07cf1768,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
676,be5de4049e3b8c06d024b55a65ab666e07cf1768,/Dockerfile,"# git for cloning source code
"
677,c06200ac9d9db1a72f7e631ad17998a1f2d31b66,/Dockerfile,"# bash for running scripts
"
678,c06200ac9d9db1a72f7e631ad17998a1f2d31b66,/Dockerfile,"# go for compiling bashbrew
"
679,c06200ac9d9db1a72f7e631ad17998a1f2d31b66,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
680,c06200ac9d9db1a72f7e631ad17998a1f2d31b66,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
681,38a906242d522b7bae3c04e4790336eb3dffa1d8,/Dockerfile,"# bash for running scripts
"
682,38a906242d522b7bae3c04e4790336eb3dffa1d8,/Dockerfile,"# go for compiling bashbrew
"
683,38a906242d522b7bae3c04e4790336eb3dffa1d8,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
684,38a906242d522b7bae3c04e4790336eb3dffa1d8,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
685,7131e86fe2079b660830c0bde13dbfe849227624,/Dockerfile,"# bash for running scripts
"
686,7131e86fe2079b660830c0bde13dbfe849227624,/Dockerfile,"# go for compiling bashbrew
"
687,7131e86fe2079b660830c0bde13dbfe849227624,/Dockerfile,"# ssl for downloading files
"
688,7131e86fe2079b660830c0bde13dbfe849227624,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
689,7131e86fe2079b660830c0bde13dbfe849227624,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
690,06ae9865ffc41958d28241b42bf2882f4477b7c3,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
691,06ae9865ffc41958d28241b42bf2882f4477b7c3,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
692,06ae9865ffc41958d28241b42bf2882f4477b7c3,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
693,06ae9865ffc41958d28241b42bf2882f4477b7c3,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
694,06ae9865ffc41958d28241b42bf2882f4477b7c3,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
695,e169536311bd522d5ce5602e8da714d8ea3ad18a,/Dockerfile,"# bash for running scripts
"
696,e169536311bd522d5ce5602e8da714d8ea3ad18a,/Dockerfile,"# go for compiling bashbrew
"
697,e169536311bd522d5ce5602e8da714d8ea3ad18a,/Dockerfile,"# ssl for downloading files
"
698,e169536311bd522d5ce5602e8da714d8ea3ad18a,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
699,e169536311bd522d5ce5602e8da714d8ea3ad18a,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
700,e169536311bd522d5ce5602e8da714d8ea3ad18a,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
701,b7b79d5793921f54f4346064c06439f55ec82c30,/Dockerfile,"# ssl for downloading files
"
702,b7b79d5793921f54f4346064c06439f55ec82c30,/Dockerfile,"# git for cloning source code
"
703,b7b79d5793921f54f4346064c06439f55ec82c30,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
704,b7b79d5793921f54f4346064c06439f55ec82c30,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
705,b7b79d5793921f54f4346064c06439f55ec82c30,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
706,3c47b4446ba44230c6bf13f7ee11dcb5ffec19bb,/Dockerfile,"# bash for running scripts
"
707,3c47b4446ba44230c6bf13f7ee11dcb5ffec19bb,/Dockerfile,"# go for compiling bashbrew
"
708,3c47b4446ba44230c6bf13f7ee11dcb5ffec19bb,/Dockerfile,"# ssl for downloading files
"
709,3c47b4446ba44230c6bf13f7ee11dcb5ffec19bb,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
710,3c47b4446ba44230c6bf13f7ee11dcb5ffec19bb,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
711,3c47b4446ba44230c6bf13f7ee11dcb5ffec19bb,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
712,bf1469d26ac71471891428e6fe6fbeae41d99386,/Dockerfile,"# bash for running scripts
"
713,bf1469d26ac71471891428e6fe6fbeae41d99386,/Dockerfile,"# go for compiling bashbrew
"
714,bf1469d26ac71471891428e6fe6fbeae41d99386,/Dockerfile,"# ssl for downloading files
"
715,bf1469d26ac71471891428e6fe6fbeae41d99386,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
716,bf1469d26ac71471891428e6fe6fbeae41d99386,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
717,bf1469d26ac71471891428e6fe6fbeae41d99386,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
718,796e92d83d114ce1e06a259e28dbe5abd5ca91b3,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
719,796e92d83d114ce1e06a259e28dbe5abd5ca91b3,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
720,796e92d83d114ce1e06a259e28dbe5abd5ca91b3,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
721,796e92d83d114ce1e06a259e28dbe5abd5ca91b3,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
722,796e92d83d114ce1e06a259e28dbe5abd5ca91b3,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
723,cf9e55c51bface2b503389c8ec0556d3711c7028,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
724,cf9e55c51bface2b503389c8ec0556d3711c7028,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
725,cf9e55c51bface2b503389c8ec0556d3711c7028,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
726,cf9e55c51bface2b503389c8ec0556d3711c7028,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
727,cf9e55c51bface2b503389c8ec0556d3711c7028,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
728,993a2274c3da7e07c65c4eec63c133a70720b258,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
729,993a2274c3da7e07c65c4eec63c133a70720b258,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
730,993a2274c3da7e07c65c4eec63c133a70720b258,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
731,993a2274c3da7e07c65c4eec63c133a70720b258,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
732,993a2274c3da7e07c65c4eec63c133a70720b258,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
733,913735abfd10128d42182449b477afcae6f2c7f7,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
734,913735abfd10128d42182449b477afcae6f2c7f7,/Dockerfile,"# bash for running scripts
"
735,913735abfd10128d42182449b477afcae6f2c7f7,/Dockerfile,"# go for compiling bashbrew
"
736,8ae896e5b861ea34fb0f4455bfecbc5bbc1cf8a4,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
737,8ae896e5b861ea34fb0f4455bfecbc5bbc1cf8a4,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
738,8ae896e5b861ea34fb0f4455bfecbc5bbc1cf8a4,/Dockerfile,"# git for cloning source code
"
739,bc1a0ca4ffbf126aa823dc86d4bb4cd02477e940,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
740,bc1a0ca4ffbf126aa823dc86d4bb4cd02477e940,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
741,bc1a0ca4ffbf126aa823dc86d4bb4cd02477e940,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
742,bc1a0ca4ffbf126aa823dc86d4bb4cd02477e940,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
743,bc1a0ca4ffbf126aa823dc86d4bb4cd02477e940,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
744,e1851bdaf299f4fee95242476a5a9cbdec7e0c7c,/Dockerfile,"# bash for running scripts
"
745,e1851bdaf299f4fee95242476a5a9cbdec7e0c7c,/Dockerfile,"# go for compiling bashbrew
"
746,e1851bdaf299f4fee95242476a5a9cbdec7e0c7c,/Dockerfile,"# ssl for downloading files
"
747,e1851bdaf299f4fee95242476a5a9cbdec7e0c7c,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
748,e1851bdaf299f4fee95242476a5a9cbdec7e0c7c,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
749,49b7b8ef428bfc1de4aaff7985b93bd301d67e60,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
750,49b7b8ef428bfc1de4aaff7985b93bd301d67e60,/Dockerfile,"# git for cloning source code
"
751,49b7b8ef428bfc1de4aaff7985b93bd301d67e60,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
752,49b7b8ef428bfc1de4aaff7985b93bd301d67e60,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
753,49b7b8ef428bfc1de4aaff7985b93bd301d67e60,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
754,783209a23ee1376243adce91be93f09662daf57c,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
755,783209a23ee1376243adce91be93f09662daf57c,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
756,783209a23ee1376243adce91be93f09662daf57c,/Dockerfile,"# git for cloning source code
"
757,fc7f5ff17986df5842d16ba1c615277ece7ff2f4,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
758,fc7f5ff17986df5842d16ba1c615277ece7ff2f4,/Dockerfile,"# git for cloning source code
"
759,fc7f5ff17986df5842d16ba1c615277ece7ff2f4,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
760,fc7f5ff17986df5842d16ba1c615277ece7ff2f4,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
761,fc7f5ff17986df5842d16ba1c615277ece7ff2f4,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
762,f7f75a068597101a468024120242854532055639,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
763,f7f75a068597101a468024120242854532055639,/Dockerfile,"# git for cloning source code
"
764,f7f75a068597101a468024120242854532055639,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
765,f7f75a068597101a468024120242854532055639,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
766,f7f75a068597101a468024120242854532055639,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
767,9c312b6827cb96e1110b4caf7133a4755ad43c69,/Dockerfile,"# bash for running scripts
"
768,9c312b6827cb96e1110b4caf7133a4755ad43c69,/Dockerfile,"# go for compiling bashbrew
"
769,9c312b6827cb96e1110b4caf7133a4755ad43c69,/Dockerfile,"# ssl for downloading files
"
770,9c312b6827cb96e1110b4caf7133a4755ad43c69,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
771,9c312b6827cb96e1110b4caf7133a4755ad43c69,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
772,9c312b6827cb96e1110b4caf7133a4755ad43c69,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
773,f058fa714659faedd5199bb3b236e74e39e379cf,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
774,f058fa714659faedd5199bb3b236e74e39e379cf,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
775,f058fa714659faedd5199bb3b236e74e39e379cf,/Dockerfile,"# git for cloning source code
"
776,fdcd929b96e524f55148a91b74148f56b8f78d6b,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
777,fdcd929b96e524f55148a91b74148f56b8f78d6b,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
778,fdcd929b96e524f55148a91b74148f56b8f78d6b,/Dockerfile,"# git for cloning source code
"
779,9a971e780df783afc59c1917f7f2171518fbdcff,/Dockerfile,"# bash for running scripts
"
780,9a971e780df783afc59c1917f7f2171518fbdcff,/Dockerfile,"# go for compiling bashbrew
"
781,9a971e780df783afc59c1917f7f2171518fbdcff,/Dockerfile,"# ssl for downloading files
"
782,9a971e780df783afc59c1917f7f2171518fbdcff,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
783,9a971e780df783afc59c1917f7f2171518fbdcff,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
784,9a971e780df783afc59c1917f7f2171518fbdcff,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
785,a02dbf6e093e5e55b1b234e350032230eacc1b85,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
786,a02dbf6e093e5e55b1b234e350032230eacc1b85,/Dockerfile,"# git for cloning source code
"
787,a02dbf6e093e5e55b1b234e350032230eacc1b85,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
788,a02dbf6e093e5e55b1b234e350032230eacc1b85,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
789,a02dbf6e093e5e55b1b234e350032230eacc1b85,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
790,365ddab17da911947d154bc1a81fe8c3d3177e94,/Dockerfile,"# bash for running scripts
"
791,365ddab17da911947d154bc1a81fe8c3d3177e94,/Dockerfile,"# go for compiling bashbrew
"
792,365ddab17da911947d154bc1a81fe8c3d3177e94,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
793,365ddab17da911947d154bc1a81fe8c3d3177e94,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
794,2040c37689c040286b0a957d4d22e04577e8ba55,/Dockerfile,"# bash for running scripts
"
795,2040c37689c040286b0a957d4d22e04577e8ba55,/Dockerfile,"# go for compiling bashbrew
"
796,2040c37689c040286b0a957d4d22e04577e8ba55,/Dockerfile,"# ssl for downloading files
"
797,2040c37689c040286b0a957d4d22e04577e8ba55,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
798,2040c37689c040286b0a957d4d22e04577e8ba55,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
799,2040c37689c040286b0a957d4d22e04577e8ba55,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
800,db02fc39966004cb5396678cc83d84717e87dd0d,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
801,db02fc39966004cb5396678cc83d84717e87dd0d,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
802,db02fc39966004cb5396678cc83d84717e87dd0d,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
803,db02fc39966004cb5396678cc83d84717e87dd0d,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
804,db02fc39966004cb5396678cc83d84717e87dd0d,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
805,e2d01f188733681b164a5242669927a36957e67a,/Dockerfile,"# bash for running scripts
"
806,e2d01f188733681b164a5242669927a36957e67a,/Dockerfile,"# go for compiling bashbrew
"
807,e2d01f188733681b164a5242669927a36957e67a,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
808,e2d01f188733681b164a5242669927a36957e67a,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
809,d781031efacb54704e3d0eac95ad845bde594da9,/Dockerfile,"# bash for running scripts
"
810,d781031efacb54704e3d0eac95ad845bde594da9,/Dockerfile,"# go for compiling bashbrew
"
811,d781031efacb54704e3d0eac95ad845bde594da9,/Dockerfile,"# ssl for downloading files
"
812,d781031efacb54704e3d0eac95ad845bde594da9,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
813,d781031efacb54704e3d0eac95ad845bde594da9,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
814,ceb1c5fb9de5f3955473479745e5b8a8a3a7afea,/Dockerfile,"# bash for running scripts
"
815,ceb1c5fb9de5f3955473479745e5b8a8a3a7afea,/Dockerfile,"# go for compiling bashbrew
"
816,ceb1c5fb9de5f3955473479745e5b8a8a3a7afea,/Dockerfile,"# ssl for downloading files
"
817,ceb1c5fb9de5f3955473479745e5b8a8a3a7afea,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
818,ceb1c5fb9de5f3955473479745e5b8a8a3a7afea,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
819,ceb1c5fb9de5f3955473479745e5b8a8a3a7afea,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
820,c7c9c1d12bfadf10b62119bab2103940fa185757,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
821,c7c9c1d12bfadf10b62119bab2103940fa185757,/Dockerfile,"# bash for running scripts
"
822,c7c9c1d12bfadf10b62119bab2103940fa185757,/Dockerfile,"# go for compiling bashbrew
"
823,c7c9c1d12bfadf10b62119bab2103940fa185757,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
824,c7c9c1d12bfadf10b62119bab2103940fa185757,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
825,872b4f8597f6f9b3cc16401b82d0722af2fd8472,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
826,872b4f8597f6f9b3cc16401b82d0722af2fd8472,/Dockerfile,"# git for cloning source code
"
827,872b4f8597f6f9b3cc16401b82d0722af2fd8472,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
828,872b4f8597f6f9b3cc16401b82d0722af2fd8472,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
829,872b4f8597f6f9b3cc16401b82d0722af2fd8472,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
830,ce89f4b215069c57ad83e128f117b6499f381d2e,/Dockerfile,"# bash for running scripts
"
831,ce89f4b215069c57ad83e128f117b6499f381d2e,/Dockerfile,"# go for compiling bashbrew
"
832,ce89f4b215069c57ad83e128f117b6499f381d2e,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
833,ce89f4b215069c57ad83e128f117b6499f381d2e,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
834,caa77d44ae0eb21b0963821d6ea0999d5e61bd32,/Dockerfile,"# bash for running scripts
"
835,caa77d44ae0eb21b0963821d6ea0999d5e61bd32,/Dockerfile,"# go for compiling bashbrew
"
836,caa77d44ae0eb21b0963821d6ea0999d5e61bd32,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
837,caa77d44ae0eb21b0963821d6ea0999d5e61bd32,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
838,94be5e56728badee4ffa2d5a0aa75b19ae7389bd,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
839,94be5e56728badee4ffa2d5a0aa75b19ae7389bd,/Dockerfile,"# git for cloning source code
"
840,94be5e56728badee4ffa2d5a0aa75b19ae7389bd,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
841,94be5e56728badee4ffa2d5a0aa75b19ae7389bd,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
842,94be5e56728badee4ffa2d5a0aa75b19ae7389bd,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
843,3b512a89a9719efa190d5938ea3ca4ca5291d68c,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
844,3b512a89a9719efa190d5938ea3ca4ca5291d68c,/Dockerfile,"# git for cloning source code
"
845,3b512a89a9719efa190d5938ea3ca4ca5291d68c,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
846,3b512a89a9719efa190d5938ea3ca4ca5291d68c,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
847,3b512a89a9719efa190d5938ea3ca4ca5291d68c,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
848,9d40942ab5c3c85aa7c92ef5200119feb583f6ea,/Dockerfile,"# bash for running scripts
"
849,9d40942ab5c3c85aa7c92ef5200119feb583f6ea,/Dockerfile,"# go for compiling bashbrew
"
850,9d40942ab5c3c85aa7c92ef5200119feb583f6ea,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
851,9d40942ab5c3c85aa7c92ef5200119feb583f6ea,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
852,75ac01833126621780bd8d4195913bce01aa7f90,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
853,75ac01833126621780bd8d4195913bce01aa7f90,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
854,75ac01833126621780bd8d4195913bce01aa7f90,/Dockerfile,"# git for cloning source code
"
855,b7f908fb2be9402977c2ccda096babb57a8d7f3b,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
856,b7f908fb2be9402977c2ccda096babb57a8d7f3b,/Dockerfile,"# bash for running scripts
"
857,b7f908fb2be9402977c2ccda096babb57a8d7f3b,/Dockerfile,"# go for compiling bashbrew
"
858,b7f908fb2be9402977c2ccda096babb57a8d7f3b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
859,b7f908fb2be9402977c2ccda096babb57a8d7f3b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
860,600ce63a49e621beb6a2ea603980017084af0fa6,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
861,600ce63a49e621beb6a2ea603980017084af0fa6,/Dockerfile,"# bash for running scripts
"
862,600ce63a49e621beb6a2ea603980017084af0fa6,/Dockerfile,"# go for compiling bashbrew
"
863,600ce63a49e621beb6a2ea603980017084af0fa6,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
864,600ce63a49e621beb6a2ea603980017084af0fa6,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
865,0c84df3d5f2184eef242bcdff5160bc18298678f,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
866,0c84df3d5f2184eef242bcdff5160bc18298678f,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
867,0c84df3d5f2184eef242bcdff5160bc18298678f,/Dockerfile,"# git for cloning source code
"
868,31ed46ad49ca6d9cf354973c53c1419bafa2e139,/Dockerfile,"# bash for running scripts
"
869,31ed46ad49ca6d9cf354973c53c1419bafa2e139,/Dockerfile,"# go for compiling bashbrew
"
870,31ed46ad49ca6d9cf354973c53c1419bafa2e139,/Dockerfile,"# ssl for downloading files
"
871,31ed46ad49ca6d9cf354973c53c1419bafa2e139,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
872,31ed46ad49ca6d9cf354973c53c1419bafa2e139,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
873,2777316102324dec09dee0fe4dbb2a0488b113fa,/Dockerfile,"# bash for running scripts
"
874,2777316102324dec09dee0fe4dbb2a0488b113fa,/Dockerfile,"# go for compiling bashbrew
"
875,2777316102324dec09dee0fe4dbb2a0488b113fa,/Dockerfile,"# ssl for downloading files
"
876,2777316102324dec09dee0fe4dbb2a0488b113fa,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
877,2777316102324dec09dee0fe4dbb2a0488b113fa,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
878,2777316102324dec09dee0fe4dbb2a0488b113fa,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
879,1c5a8dc01ba07a8a5c1a869cd58652cdd56b6770,/Dockerfile,"# bash for running scripts
"
880,1c5a8dc01ba07a8a5c1a869cd58652cdd56b6770,/Dockerfile,"# go for compiling bashbrew
"
881,1c5a8dc01ba07a8a5c1a869cd58652cdd56b6770,/Dockerfile,"# ssl for downloading files
"
882,1c5a8dc01ba07a8a5c1a869cd58652cdd56b6770,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
883,1c5a8dc01ba07a8a5c1a869cd58652cdd56b6770,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
884,1c5a8dc01ba07a8a5c1a869cd58652cdd56b6770,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
885,09dfca3beb327878c9247b088aa64e9504cc590a,/Dockerfile,"# bash for running scripts
"
886,09dfca3beb327878c9247b088aa64e9504cc590a,/Dockerfile,"# go for compiling bashbrew
"
887,09dfca3beb327878c9247b088aa64e9504cc590a,/Dockerfile,"# ssl for downloading files
"
888,09dfca3beb327878c9247b088aa64e9504cc590a,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
889,09dfca3beb327878c9247b088aa64e9504cc590a,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
890,09dfca3beb327878c9247b088aa64e9504cc590a,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
891,4191ce6b8cfb7349027295991f937c5732ec3e72,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
892,4191ce6b8cfb7349027295991f937c5732ec3e72,/Dockerfile,"# bash for running scripts
"
893,4191ce6b8cfb7349027295991f937c5732ec3e72,/Dockerfile,"# go for compiling bashbrew
"
894,4191ce6b8cfb7349027295991f937c5732ec3e72,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
895,4191ce6b8cfb7349027295991f937c5732ec3e72,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
896,3c73200e90e86e2ad5d1d61f8704b0a227f24fbc,/Dockerfile,"# bash for running scripts
"
897,3c73200e90e86e2ad5d1d61f8704b0a227f24fbc,/Dockerfile,"# go for compiling bashbrew
"
898,3c73200e90e86e2ad5d1d61f8704b0a227f24fbc,/Dockerfile,"# ssl for downloading files
"
899,3c73200e90e86e2ad5d1d61f8704b0a227f24fbc,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
900,3c73200e90e86e2ad5d1d61f8704b0a227f24fbc,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
901,3c73200e90e86e2ad5d1d61f8704b0a227f24fbc,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
902,bdc498cd7a143a34b3ac6c788e2e43af8ef90179,/Dockerfile,"# bash for running scripts
"
903,bdc498cd7a143a34b3ac6c788e2e43af8ef90179,/Dockerfile,"# go for compiling bashbrew
"
904,bdc498cd7a143a34b3ac6c788e2e43af8ef90179,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
905,bdc498cd7a143a34b3ac6c788e2e43af8ef90179,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
906,33cad77216029f801b4f3eeafdd217300fae14c7,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
907,33cad77216029f801b4f3eeafdd217300fae14c7,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
908,33cad77216029f801b4f3eeafdd217300fae14c7,/Dockerfile,"# git for cloning source code
"
909,8c089e5dc062a20ead1d101d890b2352e0537bae,/Dockerfile,"# bash for running scripts
"
910,8c089e5dc062a20ead1d101d890b2352e0537bae,/Dockerfile,"# go for compiling bashbrew
"
911,8c089e5dc062a20ead1d101d890b2352e0537bae,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
912,8c089e5dc062a20ead1d101d890b2352e0537bae,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
913,ec4fc262806bd96a3b419f47e8b97fd802284a28,/Dockerfile,"# bash for running scripts
"
914,ec4fc262806bd96a3b419f47e8b97fd802284a28,/Dockerfile,"# go for compiling bashbrew
"
915,ec4fc262806bd96a3b419f47e8b97fd802284a28,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
916,ec4fc262806bd96a3b419f47e8b97fd802284a28,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
917,ab4396f527eb0e1f9646c85de908c7431345065e,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
918,ab4396f527eb0e1f9646c85de908c7431345065e,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
919,ab4396f527eb0e1f9646c85de908c7431345065e,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
920,ab4396f527eb0e1f9646c85de908c7431345065e,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
921,ab4396f527eb0e1f9646c85de908c7431345065e,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
922,b91175c1f239af521c60f724a7ae799ceff9ab18,/Dockerfile,"# bash for running scripts
"
923,b91175c1f239af521c60f724a7ae799ceff9ab18,/Dockerfile,"# go for compiling bashbrew
"
924,b91175c1f239af521c60f724a7ae799ceff9ab18,/Dockerfile,"# ssl for downloading files
"
925,b91175c1f239af521c60f724a7ae799ceff9ab18,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
926,b91175c1f239af521c60f724a7ae799ceff9ab18,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
927,9674242c7dcd4de8cfdf48b9ec22c5aaeac049b0,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
928,9674242c7dcd4de8cfdf48b9ec22c5aaeac049b0,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
929,9674242c7dcd4de8cfdf48b9ec22c5aaeac049b0,/Dockerfile,"# git for cloning source code
"
930,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
931,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
932,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
933,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
934,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
935,cc7a2a4feae21d3e49afad94f9b2ddcfa98ae5b9,/Dockerfile,"# bash for running scripts
"
936,cc7a2a4feae21d3e49afad94f9b2ddcfa98ae5b9,/Dockerfile,"# go for compiling bashbrew
"
937,cc7a2a4feae21d3e49afad94f9b2ddcfa98ae5b9,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
938,cc7a2a4feae21d3e49afad94f9b2ddcfa98ae5b9,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
939,b0e81c734ff31013f07785774a2af8b9cc9fac3f,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
940,b0e81c734ff31013f07785774a2af8b9cc9fac3f,/Dockerfile,"# git for cloning source code
"
941,b0e81c734ff31013f07785774a2af8b9cc9fac3f,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
942,b0e81c734ff31013f07785774a2af8b9cc9fac3f,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
943,b0e81c734ff31013f07785774a2af8b9cc9fac3f,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
944,351cbd088ae7b0fdd843893469294a29bbec851d,/Dockerfile,"# bash for running scripts
"
945,351cbd088ae7b0fdd843893469294a29bbec851d,/Dockerfile,"# go for compiling bashbrew
"
946,351cbd088ae7b0fdd843893469294a29bbec851d,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
947,351cbd088ae7b0fdd843893469294a29bbec851d,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
948,f9047bed7005a09ac579783948548260317d1e80,/Dockerfile,"# bash for running scripts
"
949,f9047bed7005a09ac579783948548260317d1e80,/Dockerfile,"# go for compiling bashbrew
"
950,f9047bed7005a09ac579783948548260317d1e80,/Dockerfile,"# ssl for downloading files
"
951,f9047bed7005a09ac579783948548260317d1e80,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
952,f9047bed7005a09ac579783948548260317d1e80,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
953,f9047bed7005a09ac579783948548260317d1e80,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
954,f46246ee72fdea11cd9c632d368a448f4b5ccf5b,/Dockerfile,"# bash for running scripts
"
955,f46246ee72fdea11cd9c632d368a448f4b5ccf5b,/Dockerfile,"# go for compiling bashbrew
"
956,f46246ee72fdea11cd9c632d368a448f4b5ccf5b,/Dockerfile,"# ssl for downloading files
"
957,f46246ee72fdea11cd9c632d368a448f4b5ccf5b,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
958,f46246ee72fdea11cd9c632d368a448f4b5ccf5b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
959,f46246ee72fdea11cd9c632d368a448f4b5ccf5b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
960,d0791691ddf0062621205f561641c810b82fdc0e,/Dockerfile,"# bash for running scripts
"
961,d0791691ddf0062621205f561641c810b82fdc0e,/Dockerfile,"# go for compiling bashbrew
"
962,d0791691ddf0062621205f561641c810b82fdc0e,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
963,d0791691ddf0062621205f561641c810b82fdc0e,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
964,b3768acff5c01c6680d253965fc79e3d0f901aba,/Dockerfile,"# bash for running scripts
"
965,b3768acff5c01c6680d253965fc79e3d0f901aba,/Dockerfile,"# go for compiling bashbrew
"
966,b3768acff5c01c6680d253965fc79e3d0f901aba,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
967,b3768acff5c01c6680d253965fc79e3d0f901aba,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
968,a5e126ebfbfd85d9872226fd5bf9fc04f97c4fdf,/Dockerfile,"# bash for running scripts
"
969,a5e126ebfbfd85d9872226fd5bf9fc04f97c4fdf,/Dockerfile,"# go for compiling bashbrew
"
970,a5e126ebfbfd85d9872226fd5bf9fc04f97c4fdf,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
971,a5e126ebfbfd85d9872226fd5bf9fc04f97c4fdf,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
972,6542167d925145d8b49a4ed9477465f99b95861d,/Dockerfile,"# bash for running scripts
"
973,6542167d925145d8b49a4ed9477465f99b95861d,/Dockerfile,"# go for compiling bashbrew
"
974,6542167d925145d8b49a4ed9477465f99b95861d,/Dockerfile,"# ssl for downloading files
"
975,6542167d925145d8b49a4ed9477465f99b95861d,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
976,6542167d925145d8b49a4ed9477465f99b95861d,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
977,6542167d925145d8b49a4ed9477465f99b95861d,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
978,1c08f4f4f3542f265701be3ca36b45fbc824e9ff,/Dockerfile,"# bash for running scripts
"
979,1c08f4f4f3542f265701be3ca36b45fbc824e9ff,/Dockerfile,"# go for compiling bashbrew
"
980,1c08f4f4f3542f265701be3ca36b45fbc824e9ff,/Dockerfile,"# ssl for downloading files
"
981,1c08f4f4f3542f265701be3ca36b45fbc824e9ff,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
982,1c08f4f4f3542f265701be3ca36b45fbc824e9ff,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
983,1c08f4f4f3542f265701be3ca36b45fbc824e9ff,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
984,10a016b4c60e575622801d3fb5ec01b88e60060c,/Dockerfile,"# bash for running scripts
"
985,10a016b4c60e575622801d3fb5ec01b88e60060c,/Dockerfile,"# go for compiling bashbrew
"
986,10a016b4c60e575622801d3fb5ec01b88e60060c,/Dockerfile,"# ssl for downloading files
"
987,10a016b4c60e575622801d3fb5ec01b88e60060c,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
988,10a016b4c60e575622801d3fb5ec01b88e60060c,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
989,a992beb20f463850df6809b1a7f7296b7270d877,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
990,a992beb20f463850df6809b1a7f7296b7270d877,/Dockerfile,"# git for cloning source code
"
991,a992beb20f463850df6809b1a7f7296b7270d877,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
992,a992beb20f463850df6809b1a7f7296b7270d877,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
993,a992beb20f463850df6809b1a7f7296b7270d877,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
994,afb7dd7f5782a9d127cbd4ef871bfdd16f545998,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
995,afb7dd7f5782a9d127cbd4ef871bfdd16f545998,/Dockerfile,"# git for cloning source code
"
996,afb7dd7f5782a9d127cbd4ef871bfdd16f545998,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
997,afb7dd7f5782a9d127cbd4ef871bfdd16f545998,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
998,afb7dd7f5782a9d127cbd4ef871bfdd16f545998,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
999,7e4e9d9f0e4351b5beeb4b6a5fe0760bf62794ea,/Dockerfile,"# bash for running scripts
"
1000,7e4e9d9f0e4351b5beeb4b6a5fe0760bf62794ea,/Dockerfile,"# go for compiling bashbrew
"
1001,7e4e9d9f0e4351b5beeb4b6a5fe0760bf62794ea,/Dockerfile,"# ssl for downloading files
"
1002,7e4e9d9f0e4351b5beeb4b6a5fe0760bf62794ea,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1003,7e4e9d9f0e4351b5beeb4b6a5fe0760bf62794ea,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1004,436fc6fa7d66f40f3adff7da5aaf7f1d8e7e252e,/Dockerfile,"# bash for running scripts
"
1005,436fc6fa7d66f40f3adff7da5aaf7f1d8e7e252e,/Dockerfile,"# go for compiling bashbrew
"
1006,436fc6fa7d66f40f3adff7da5aaf7f1d8e7e252e,/Dockerfile,"# ssl for downloading files
"
1007,436fc6fa7d66f40f3adff7da5aaf7f1d8e7e252e,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1008,436fc6fa7d66f40f3adff7da5aaf7f1d8e7e252e,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1009,436fc6fa7d66f40f3adff7da5aaf7f1d8e7e252e,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1010,01342e45187a88b5ef94e77c89aa73ca01b8bc69,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1011,01342e45187a88b5ef94e77c89aa73ca01b8bc69,/Dockerfile,"# git for cloning source code
"
1012,01342e45187a88b5ef94e77c89aa73ca01b8bc69,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1013,01342e45187a88b5ef94e77c89aa73ca01b8bc69,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1014,01342e45187a88b5ef94e77c89aa73ca01b8bc69,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1015,744bc3e0da0e8304842ce85303922918301cdc04,/Dockerfile,"# bash for running scripts
"
1016,744bc3e0da0e8304842ce85303922918301cdc04,/Dockerfile,"# go for compiling bashbrew
"
1017,744bc3e0da0e8304842ce85303922918301cdc04,/Dockerfile,"# ssl for downloading files
"
1018,744bc3e0da0e8304842ce85303922918301cdc04,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1019,744bc3e0da0e8304842ce85303922918301cdc04,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1020,744bc3e0da0e8304842ce85303922918301cdc04,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1021,092096a63f590cb598cac09d5130ec6816fa3651,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1022,092096a63f590cb598cac09d5130ec6816fa3651,/Dockerfile,"# git for cloning source code
"
1023,092096a63f590cb598cac09d5130ec6816fa3651,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1024,092096a63f590cb598cac09d5130ec6816fa3651,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1025,092096a63f590cb598cac09d5130ec6816fa3651,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1026,7ed29c5671bfa8ba938f63edfe9d3fa816e6632b,/Dockerfile,"# bash for running scripts
"
1027,7ed29c5671bfa8ba938f63edfe9d3fa816e6632b,/Dockerfile,"# go for compiling bashbrew
"
1028,7ed29c5671bfa8ba938f63edfe9d3fa816e6632b,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1029,7ed29c5671bfa8ba938f63edfe9d3fa816e6632b,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1030,23486bdf38f2b6fd232e8786b2bcc567a1d01bf0,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
1031,23486bdf38f2b6fd232e8786b2bcc567a1d01bf0,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
1032,23486bdf38f2b6fd232e8786b2bcc567a1d01bf0,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
1033,23486bdf38f2b6fd232e8786b2bcc567a1d01bf0,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
1034,23486bdf38f2b6fd232e8786b2bcc567a1d01bf0,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
1035,1e8f81ef241b13ed54325341f9d1f005c6100526,/Dockerfile,"# bash for running scripts
"
1036,1e8f81ef241b13ed54325341f9d1f005c6100526,/Dockerfile,"# go for compiling bashbrew
"
1037,1e8f81ef241b13ed54325341f9d1f005c6100526,/Dockerfile,"# ssl for downloading files
"
1038,1e8f81ef241b13ed54325341f9d1f005c6100526,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1039,1e8f81ef241b13ed54325341f9d1f005c6100526,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1040,1e8f81ef241b13ed54325341f9d1f005c6100526,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1041,b60da4b6bce00e29ef731f5ce0add6253950104d,/Dockerfile,"# bash for running scripts
"
1042,b60da4b6bce00e29ef731f5ce0add6253950104d,/Dockerfile,"# go for compiling bashbrew
"
1043,b60da4b6bce00e29ef731f5ce0add6253950104d,/Dockerfile,"# ssl for downloading files
"
1044,b60da4b6bce00e29ef731f5ce0add6253950104d,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1045,b60da4b6bce00e29ef731f5ce0add6253950104d,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1046,b60da4b6bce00e29ef731f5ce0add6253950104d,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1047,82f3a60c55c9e2331289f666224558b3bc9c9858,/Dockerfile,"# bash for running scripts
"
1048,82f3a60c55c9e2331289f666224558b3bc9c9858,/Dockerfile,"# go for compiling bashbrew
"
1049,82f3a60c55c9e2331289f666224558b3bc9c9858,/Dockerfile,"# ssl for downloading files
"
1050,82f3a60c55c9e2331289f666224558b3bc9c9858,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1051,82f3a60c55c9e2331289f666224558b3bc9c9858,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1052,82f3a60c55c9e2331289f666224558b3bc9c9858,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1053,500612e2ad611beece5a6256c73af8f6140b661f,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1054,500612e2ad611beece5a6256c73af8f6140b661f,/Dockerfile,"# git for cloning source code
"
1055,500612e2ad611beece5a6256c73af8f6140b661f,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1056,500612e2ad611beece5a6256c73af8f6140b661f,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1057,500612e2ad611beece5a6256c73af8f6140b661f,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1058,d796d91307abe74684f38206763b380ce6d6f94c,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1059,d796d91307abe74684f38206763b380ce6d6f94c,/Dockerfile,"# git for cloning source code
"
1060,d796d91307abe74684f38206763b380ce6d6f94c,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1061,d796d91307abe74684f38206763b380ce6d6f94c,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1062,d796d91307abe74684f38206763b380ce6d6f94c,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1063,4b77cc543543e5216696547065042f6a85cdb2e9,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1064,4b77cc543543e5216696547065042f6a85cdb2e9,/Dockerfile,"# git for cloning source code
"
1065,4b77cc543543e5216696547065042f6a85cdb2e9,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1066,4b77cc543543e5216696547065042f6a85cdb2e9,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1067,4b77cc543543e5216696547065042f6a85cdb2e9,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1068,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
1069,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
1070,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
1071,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
1072,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
1073,c21ec66e1d610d681ffbb1fa3acb3a62b46f6f0c,/Dockerfile,"# bash for running scripts
"
1074,c21ec66e1d610d681ffbb1fa3acb3a62b46f6f0c,/Dockerfile,"# go for compiling bashbrew
"
1075,c21ec66e1d610d681ffbb1fa3acb3a62b46f6f0c,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1076,c21ec66e1d610d681ffbb1fa3acb3a62b46f6f0c,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1077,99d6385896db653be9a20b13f53bd572519cbfbc,/Dockerfile,"# bash for running scripts
"
1078,99d6385896db653be9a20b13f53bd572519cbfbc,/Dockerfile,"# go for compiling bashbrew
"
1079,99d6385896db653be9a20b13f53bd572519cbfbc,/Dockerfile,"# ssl for downloading files
"
1080,99d6385896db653be9a20b13f53bd572519cbfbc,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1081,99d6385896db653be9a20b13f53bd572519cbfbc,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1082,99d6385896db653be9a20b13f53bd572519cbfbc,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1083,aa60dae350c74a6d33da8dc49b3cfcf01a54fba6,/Dockerfile,"# bash for running scripts
"
1084,aa60dae350c74a6d33da8dc49b3cfcf01a54fba6,/Dockerfile,"# go for compiling bashbrew
"
1085,aa60dae350c74a6d33da8dc49b3cfcf01a54fba6,/Dockerfile,"# ssl for downloading files
"
1086,aa60dae350c74a6d33da8dc49b3cfcf01a54fba6,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1087,aa60dae350c74a6d33da8dc49b3cfcf01a54fba6,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1088,aa60dae350c74a6d33da8dc49b3cfcf01a54fba6,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1089,c9b50a595880bd9967c7a981fe7fed31323d208f,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
1090,c9b50a595880bd9967c7a981fe7fed31323d208f,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1091,c9b50a595880bd9967c7a981fe7fed31323d208f,/Dockerfile,"# git for cloning source code
"
1092,00bb816b645622547e6a47f1acc88a807651a891,/Dockerfile,"# bash for running scripts
"
1093,00bb816b645622547e6a47f1acc88a807651a891,/Dockerfile,"# go for compiling bashbrew
"
1094,00bb816b645622547e6a47f1acc88a807651a891,/Dockerfile,"# ssl for downloading files
"
1095,00bb816b645622547e6a47f1acc88a807651a891,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1096,00bb816b645622547e6a47f1acc88a807651a891,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1097,00bb816b645622547e6a47f1acc88a807651a891,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1098,dc0cef28f15316181184f950c0cc67e2b4abe350,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
1099,dc0cef28f15316181184f950c0cc67e2b4abe350,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1100,dc0cef28f15316181184f950c0cc67e2b4abe350,/Dockerfile,"# git for cloning source code
"
1101,cf9e55c51bface2b503389c8ec0556d3711c7028,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1102,cf9e55c51bface2b503389c8ec0556d3711c7028,/Dockerfile,"# git for cloning source code
"
1103,cf9e55c51bface2b503389c8ec0556d3711c7028,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1104,cf9e55c51bface2b503389c8ec0556d3711c7028,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1105,cf9e55c51bface2b503389c8ec0556d3711c7028,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1106,3e348cfe10f5451704da8806885d88feb8c972a8,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1107,3e348cfe10f5451704da8806885d88feb8c972a8,/Dockerfile,"# git for cloning source code
"
1108,3e348cfe10f5451704da8806885d88feb8c972a8,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1109,3e348cfe10f5451704da8806885d88feb8c972a8,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1110,3e348cfe10f5451704da8806885d88feb8c972a8,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1111,4c787e86ca7dba93a8faaf9590c9f62a836a246a,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
1112,4c787e86ca7dba93a8faaf9590c9f62a836a246a,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1113,4c787e86ca7dba93a8faaf9590c9f62a836a246a,/Dockerfile,"# git for cloning source code
"
1114,ad33d39b3cbe5372937a61be226fe45ed770dfca,/Dockerfile,"# bash for running scripts
"
1115,ad33d39b3cbe5372937a61be226fe45ed770dfca,/Dockerfile,"# go for compiling bashbrew
"
1116,ad33d39b3cbe5372937a61be226fe45ed770dfca,/Dockerfile,"# ssl for downloading files
"
1117,ad33d39b3cbe5372937a61be226fe45ed770dfca,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1118,ad33d39b3cbe5372937a61be226fe45ed770dfca,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1119,ad33d39b3cbe5372937a61be226fe45ed770dfca,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1120,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1121,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/Dockerfile,"# git for cloning source code
"
1122,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1123,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1124,a443f4dad7ad1e85f8e53f236134f14efa16c3de,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1125,033c708751cc389f4661ae4f4a16474f3c8e33e2,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
1126,033c708751cc389f4661ae4f4a16474f3c8e33e2,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
1127,033c708751cc389f4661ae4f4a16474f3c8e33e2,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
1128,033c708751cc389f4661ae4f4a16474f3c8e33e2,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
1129,033c708751cc389f4661ae4f4a16474f3c8e33e2,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
1130,feee857f79da8bb02e6a1220831c9de248e91604,/Dockerfile,"# add ""edge"" since Alpine 3.3 only has Go 1.5 and we need 1.6+
"
1131,2ed75e04af57ae8444d0eb360e69130afe1d032c,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
1132,2ed75e04af57ae8444d0eb360e69130afe1d032c,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1133,2ed75e04af57ae8444d0eb360e69130afe1d032c,/Dockerfile,"# git for cloning source code
"
1134,e1c20e08e1693577ec7a9c85767e50765d39b01a,/Dockerfile,"# ssl for downloading files
"
1135,e1c20e08e1693577ec7a9c85767e50765d39b01a,/Dockerfile,"# git for cloning source code
"
1136,e1c20e08e1693577ec7a9c85767e50765d39b01a,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1137,e1c20e08e1693577ec7a9c85767e50765d39b01a,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1138,e1c20e08e1693577ec7a9c85767e50765d39b01a,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1139,e7a0e9b866a114d4f6387587a97d95edad02f7f5,/bashbrew/put-multiarch/Dockerfile,"# secure by default â™¥ (thanks to sri!)
"
1140,e7a0e9b866a114d4f6387587a97d95edad02f7f5,/bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
"
1141,e7a0e9b866a114d4f6387587a97d95edad02f7f5,/bashbrew/put-multiarch/Dockerfile,"# the tests for IO::Socket::SSL like to hang... :(
"
1142,e7a0e9b866a114d4f6387587a97d95edad02f7f5,/bashbrew/put-multiarch/Dockerfile,"# https://metacpan.org/pod/release/SRI/Mojolicious-7.94/lib/Mojo/IOLoop.pm#DESCRIPTION
"
1143,e7a0e9b866a114d4f6387587a97d95edad02f7f5,/bashbrew/put-multiarch/Dockerfile,"# epoll (Linux)

"
1144,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1145,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/Dockerfile,"# git for cloning source code
"
1146,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1147,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1148,3f4cfb7805f2a2b3ba1d53b674a51b99dab8e1a9,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1149,aec7a9284397a03a553236bfcd4df900beb30c9a,/Dockerfile,"# bash for running scripts
"
1150,aec7a9284397a03a553236bfcd4df900beb30c9a,/Dockerfile,"# go for compiling bashbrew
"
1151,aec7a9284397a03a553236bfcd4df900beb30c9a,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1152,aec7a9284397a03a553236bfcd4df900beb30c9a,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1153,1fedec2869e560fdb21faf034fe85f0be103d8ef,/Dockerfile,"# ssl for downloading files
"
1154,1fedec2869e560fdb21faf034fe85f0be103d8ef,/Dockerfile,"# git for cloning source code
"
1155,1fedec2869e560fdb21faf034fe85f0be103d8ef,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1156,1fedec2869e560fdb21faf034fe85f0be103d8ef,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1157,1fedec2869e560fdb21faf034fe85f0be103d8ef,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1158,7ced84155f4b3fe8ded372093598a0d27e8198f6,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
1159,7ced84155f4b3fe8ded372093598a0d27e8198f6,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1160,7ced84155f4b3fe8ded372093598a0d27e8198f6,/Dockerfile,"# git for cloning source code
"
1161,9ef864b99aaa51dae6f1eed2a323de08c65735a3,/Dockerfile,"# bash for running scripts
"
1162,9ef864b99aaa51dae6f1eed2a323de08c65735a3,/Dockerfile,"# go for compiling bashbrew
"
1163,9ef864b99aaa51dae6f1eed2a323de08c65735a3,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1164,9ef864b99aaa51dae6f1eed2a323de08c65735a3,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1165,62a1d1e802084dc7c46770cf553476e815254082,/Dockerfile,"# bash for running scripts
"
1166,62a1d1e802084dc7c46770cf553476e815254082,/Dockerfile,"# go for compiling bashbrew
"
1167,62a1d1e802084dc7c46770cf553476e815254082,/Dockerfile,"# ssl for downloading files
"
1168,62a1d1e802084dc7c46770cf553476e815254082,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1169,62a1d1e802084dc7c46770cf553476e815254082,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1170,62a1d1e802084dc7c46770cf553476e815254082,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1171,1c0a2dc7ea86fccfaf37717e62f0dc695c9c8f14,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1172,1c0a2dc7ea86fccfaf37717e62f0dc695c9c8f14,/Dockerfile,"# git for cloning source code
"
1173,1c0a2dc7ea86fccfaf37717e62f0dc695c9c8f14,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1174,1c0a2dc7ea86fccfaf37717e62f0dc695c9c8f14,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1175,1c0a2dc7ea86fccfaf37717e62f0dc695c9c8f14,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1176,6863d6328d215e1144fb6a360c87437ddc5947b8,/Dockerfile,"# bash for running scripts
"
1177,6863d6328d215e1144fb6a360c87437ddc5947b8,/Dockerfile,"# go for compiling bashbrew
"
1178,6863d6328d215e1144fb6a360c87437ddc5947b8,/Dockerfile,"# ssl for downloading files
"
1179,6863d6328d215e1144fb6a360c87437ddc5947b8,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1180,6863d6328d215e1144fb6a360c87437ddc5947b8,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1181,68105ffa6cebf1c58fc2d4c4a7bf2843c5d28819,/Dockerfile,"# bash for running scripts
"
1182,68105ffa6cebf1c58fc2d4c4a7bf2843c5d28819,/Dockerfile,"# go for compiling bashbrew
"
1183,68105ffa6cebf1c58fc2d4c4a7bf2843c5d28819,/Dockerfile,"# ssl for downloading files
"
1184,68105ffa6cebf1c58fc2d4c4a7bf2843c5d28819,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1185,68105ffa6cebf1c58fc2d4c4a7bf2843c5d28819,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1186,68105ffa6cebf1c58fc2d4c4a7bf2843c5d28819,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1187,abf4059523d47f815095837103554f6ab4cb67d8,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1188,abf4059523d47f815095837103554f6ab4cb67d8,/Dockerfile,"# git for cloning source code
"
1189,abf4059523d47f815095837103554f6ab4cb67d8,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1190,abf4059523d47f815095837103554f6ab4cb67d8,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1191,abf4059523d47f815095837103554f6ab4cb67d8,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1192,7c35f1dfe1a425d39e78b2af80279d069853a544,/Dockerfile,"# bash for running scripts
"
1193,7c35f1dfe1a425d39e78b2af80279d069853a544,/Dockerfile,"# go for compiling bashbrew
"
1194,7c35f1dfe1a425d39e78b2af80279d069853a544,/Dockerfile,"# ssl for downloading files
"
1195,7c35f1dfe1a425d39e78b2af80279d069853a544,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1196,7c35f1dfe1a425d39e78b2af80279d069853a544,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1197,19302f2c0aa485d6687cba3e838f638fbcdae944,/Dockerfile,"# bash for running scripts
"
1198,19302f2c0aa485d6687cba3e838f638fbcdae944,/Dockerfile,"# go for compiling bashbrew
"
1199,19302f2c0aa485d6687cba3e838f638fbcdae944,/Dockerfile,"# ssl for downloading files
"
1200,19302f2c0aa485d6687cba3e838f638fbcdae944,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1201,19302f2c0aa485d6687cba3e838f638fbcdae944,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1202,19302f2c0aa485d6687cba3e838f638fbcdae944,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1203,6fa8c3fc59ada19af3e2d6312aac61148444d99d,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1204,6fa8c3fc59ada19af3e2d6312aac61148444d99d,/Dockerfile,"# git for cloning source code
"
1205,6fa8c3fc59ada19af3e2d6312aac61148444d99d,/Dockerfile,"# go for compiling bashbrew (backports to get new enough version and to make it work on s390x)
"
1206,6fa8c3fc59ada19af3e2d6312aac61148444d99d,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1207,6fa8c3fc59ada19af3e2d6312aac61148444d99d,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1208,5073f79b1357dcb1152f150aeb002db805f44fe3,/Dockerfile,"# bash for running scripts
"
1209,5073f79b1357dcb1152f150aeb002db805f44fe3,/Dockerfile,"# go for compiling bashbrew
"
1210,5073f79b1357dcb1152f150aeb002db805f44fe3,/Dockerfile,"# ssl for downloading files
"
1211,5073f79b1357dcb1152f150aeb002db805f44fe3,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1212,5073f79b1357dcb1152f150aeb002db805f44fe3,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1213,5073f79b1357dcb1152f150aeb002db805f44fe3,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1214,5b5029bdadd56ae9bf184a05032d16fd7ab14691,/Dockerfile,"# bash for running scripts
"
1215,5b5029bdadd56ae9bf184a05032d16fd7ab14691,/Dockerfile,"# go for compiling bashbrew
"
1216,5b5029bdadd56ae9bf184a05032d16fd7ab14691,/Dockerfile,"# ssl for downloading files
"
1217,5b5029bdadd56ae9bf184a05032d16fd7ab14691,/Dockerfile,"# coreutils for real ""tac"" so it isn't busybox-buggy (where it seems to fail if the pipe is closed prematurely, which defeats the whole purpose of the ""tac|tac"" idiom)
"
1218,5b5029bdadd56ae9bf184a05032d16fd7ab14691,/Dockerfile,"# make sure our default cache dir exists and is writable by anyone (similar to /tmp)
"
1219,5b5029bdadd56ae9bf184a05032d16fd7ab14691,/Dockerfile,"# (this allows us to decide at runtime the exact uid/gid we'd like to run as)

"
1220,17af4888ceffc8c59abba2d2d7e5f5238f9569f4,/Dockerfile,"# FYI, this base image is built via test-pr.sh (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)
"
1221,17af4888ceffc8c59abba2d2d7e5f5238f9569f4,/Dockerfile,"# wget for downloading files (especially in tests, which run in this environment)
"
1222,17af4888ceffc8c59abba2d2d7e5f5238f9569f4,/Dockerfile,"# git for cloning source code
"
