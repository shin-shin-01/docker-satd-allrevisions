,project,gitPath,CommitID,Dockerfiles,LatestDockerfile,Comments,CommitDate,DeleteComment,(File) FirstCommit,(File) Deleted,isSATD,firstCommitからコメント追加までの日数,コメント追加からコメント削除までの日数
7,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,1d70488e3336bd3f92226133b5077c48f5702c4b,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO
# Start with new FROM
# Copy necessary artefacts from openssl-otp
# Install RabbitMQ
# Ensure RabbitMQ starts & rabbitmqctl works correctly
",2019/01/09 22:14,2019/01/10 02:21,2019/01/09 22:14,2020/08/15 06:21,1,0 days 00:00:00.000000000,4:07:00
8,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,57831db8b9aaaaeb781f9ad8ea771940297bd6cc,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO
# Install RabbitMQ
# Ensure RabbitMQ starts & rabbitmqctl works correctly
",2019/01/10 02:21,2019/01/14 20:48,2019/01/09 22:14,2020/08/15 06:21,1,0 days 04:07:00.000000000,"4 days, 18:27:00"
9,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,f1e3be6aecba6db3cea294215d838c79b937943f,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# Delete all src dirs to keep the final image size down, they add an extra 19MB
# TODO Could this be done better?
",2019/01/14 20:48,2019/01/15 20:13,2019/01/09 22:14,2020/08/15 06:21,1,4 days 22:34:00.000000000,23:25:00
11,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,21c07a969ba2bef48658cd05daca2d913d6549ce,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO @tianon why is this necessary?
# RUN ln -sf ""/usr/lib/rabbitmq/lib/rabbitmq_server-$RABBITMQ_VERSION/plugins"" /plugins

# Hint that the config, log & data (a.k.a. home dir) dirs should be separate volumes
",2019/01/14 21:50,2019/01/15 19:12,2019/01/09 22:14,2020/08/15 06:21,1,4 days 23:36:00.000000000,21:22:00
12,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,21c07a969ba2bef48658cd05daca2d913d6549ce,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# Add RabbitMQ to PATH, send all logs to TTY
# TODO @tianon is sbin a problem? Notice that I'm installing generic-unix, not the Debian package
",2019/01/14 21:50,2019/01/15 19:14,2019/01/09 22:14,2020/08/15 06:21,1,4 days 23:36:00.000000000,21:24:00
13,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,2f0a2a96fef956df0c6f30986cef7fdf79294599,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# Delete all src dirs to keep the final image size down, they add an extra 19MB
# TODO @dumbbell could this be done better, in the build/install phases?
",2019/01/15 20:13,2019/01/25 07:35,2019/01/09 22:14,2020/08/15 06:21,1,5 days 21:59:00.000000000,"9 days, 11:22:00"
62,"moby
moby",https://github.com/moby/moby,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,Dockerfile.arm,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/11/05 23:38,2016/01/05 14:50,2015/11/05 23:38,2018/03/09 15:17,1,0 days 00:00:00.000000000,"60 days, 15:12:00"
63,"moby
moby",https://github.com/moby/moby,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,Dockerfile.arm,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/11/05 23:38,2016/09/08 00:02,2015/11/05 23:38,2018/03/09 15:17,1,0 days 00:00:00.000000000,"307 days, 0:24:00"
64,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/23 11:55,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"77 days, 21:05:00"
65,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/05 14:50,2016/01/15 06:51,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"9 days, 16:01:00"
66,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/13 01:56,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"38 days, 11:06:00"
67,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/23 11:55,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"77 days, 21:05:00"
68,"moby
moby",https://github.com/moby/moby,9560d941142b0bd17b0aa51e4d9bfe22354732ec,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/14 06:04,2016/03/23 11:55,2015/11/05 23:38,2018/03/09 15:17,1,69 days 06:26:00.000000000,"69 days, 5:51:00"
69,"moby
moby",https://github.com/moby/moby,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 02:56,2015/11/05 23:38,2018/03/09 15:17,1,75 days 21:15:00.000000000,"13 days, 6:03:00"
70,"moby
moby",https://github.com/moby/moby,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/24 01:01,2015/11/05 23:38,2018/03/09 15:17,1,99 days 02:18:00.000000000,"192 days, 23:05:00"
71,"moby
moby",https://github.com/moby/moby,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",2016/03/15 12:12,2016/05/20 04:13,2015/11/05 23:38,2018/03/09 15:17,1,130 days 12:34:00.000000000,"65 days, 16:01:00"
72,"moby
moby",https://github.com/moby/moby,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/02 22:07,2015/11/05 23:38,2018/03/09 15:17,1,210 days 22:31:00.000000000,"424 days, 23:58:00"
73,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2015/11/05 23:38,2018/03/09 15:17,1,235 days 07:00:00.000000000,"86 days, 1:40:00"
74,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2015/11/05 23:38,2018/03/09 15:17,1,321 days 08:40:00.000000000,"32 days, 23:00:00"
75,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/19 08:30,2015/11/05 23:38,2018/03/09 15:17,1,321 days 11:37:00.000000000,"26 days, 21:15:00"
76,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2015/11/05 23:38,2018/03/09 15:17,1,323 days 01:42:00.000000000,"6 days, 1:42:00"
77,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/11/05 23:38,2018/03/09 15:17,1,348 days 08:52:00.000000000,20:28:00
78,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2015/11/05 23:38,2018/03/09 15:17,1,354 days 07:40:00.000000000,"149 days, 17:10:00"
79,"moby
moby",https://github.com/moby/moby,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/21 07:14,2015/11/05 23:38,2018/03/09 15:17,1,361 days 03:44:00.000000000,"20 days, 3:52:00"
80,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2015/11/05 23:38,2018/03/09 15:17,1,391 days 22:55:00.000000000,"442 days, 5:18:00"
84,"moby
moby",https://github.com/moby/moby,20d24a450cbf22b6d5268bc1fe76022fa554d6be,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/08/27 07:51,2013/10/01 04:57,2013/06/22 11:42,,1,65 days 20:09:00.000000000,"34 days, 21:06:00"
85,"moby
moby",https://github.com/moby/moby,fa806f26aff927eb0d98b41e79786ae98987da5b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",2013/09/07 11:58,2013/09/07 12:14,2013/06/22 11:42,,1,77 days 00:16:00.000000000,0:16:00
86,"moby
moby",https://github.com/moby/moby,47838051be695a4e74c80690ceef811dcd3ef62c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/07 12:14,2013/09/07 12:16,2013/06/22 11:42,,1,77 days 00:32:00.000000000,0:02:00
87,"moby
moby",https://github.com/moby/moby,ccefe47897bdcef8b56bf54d4bd324989855f3b5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/01 04:57,2013/10/16 09:31,2013/06/22 11:42,,1,100 days 17:15:00.000000000,"15 days, 4:34:00"
88,"moby
moby",https://github.com/moby/moby,1cbdaebaa1c2326e57945333420d25d6f77011d5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/05 11:25,2013/11/05 13:12,2013/06/22 11:42,,1,104 days 23:43:00.000000000,"31 days, 1:47:00"
89,"moby
moby",https://github.com/moby/moby,31638ab2ad2a5380d447780f05f7aa078c9421f5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2013/11/01 06:58,2014/03/14 02:46,2013/06/22 11:42,,1,131 days 19:16:00.000000000,"132 days, 19:48:00"
90,"moby
moby",https://github.com/moby/moby,62a81370fffb3cfdb15ef19702f0ea07ab2f4c36,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",2013/12/19 15:06,2014/01/31 19:16,2013/06/22 11:42,,1,180 days 03:24:00.000000000,"43 days, 4:10:00"
91,"moby
moby",https://github.com/moby/moby,484a75f3549239d0489cb0ad518d79ed6783584a,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2013/12/25 12:40,2015/11/15 11:01,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"689 days, 22:21:00"
92,"moby
moby",https://github.com/moby/moby,44fe8cbbd174b5d85d4a063ed270f6b9d2279b70,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/03/14 02:46,2014/07/10 06:21,2013/06/22 11:42,,1,264 days 15:04:00.000000000,"118 days, 3:35:00"
93,"moby
moby",https://github.com/moby/moby,d0a0e91f1f8c3a43f04e7a58e37498124b283594,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/06/19 11:04,2015/06/14 01:21,2013/06/22 11:42,,1,361 days 23:22:00.000000000,"359 days, 14:17:00"
94,"moby
moby",https://github.com/moby/moby,d5151ca8ab5d90300839c8572cb96577de4d6233,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2014/09/03 23:26,2016/09/08 00:02,2013/06/22 11:42,,1,438 days 11:44:00.000000000,"735 days, 0:36:00"
95,"moby
moby",https://github.com/moby/moby,47769994e5cba81a96529b418052afce7a6d51a3,Dockerfile,Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",2015/01/23 07:42,2015/02/10 07:19,2013/06/22 11:42,,1,579 days 20:00:00.000000000,"17 days, 23:37:00"
96,"moby
moby",https://github.com/moby/moby,5d70a97b1fff8286220d2bef9ceb248401f046d1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",2015/02/27 04:20,2015/04/21 18:33,2013/06/22 11:42,,1,614 days 16:38:00.000000000,"53 days, 14:13:00"
97,"moby
moby",https://github.com/moby/moby,6089e679a2fb2494fd3e599a9eab9327e6a509fc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/05/02 08:42,2016/08/24 01:01,2013/06/22 11:42,,1,678 days 21:00:00.000000000,"479 days, 16:19:00"
98,"moby
moby",https://github.com/moby/moby,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile,Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 02:56,2013/06/22 11:42,,1,942 days 09:11:00.000000000,"13 days, 6:03:00"
99,"moby
moby",https://github.com/moby/moby,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",2016/03/15 12:12,2016/05/12 23:52,2013/06/22 11:42,,1,997 days 00:30:00.000000000,"58 days, 11:40:00"
100,"moby
moby",https://github.com/moby/moby,d8fef66b03c1ea8715470690efbd950033f7f628,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/05/12 23:52,2017/05/15 20:22,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"367 days, 20:30:00"
101,"moby
moby",https://github.com/moby/moby,d8fef66b03c1ea8715470690efbd950033f7f628,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/05/12 23:52,2016/09/22 08:18,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"132 days, 8:26:00"
102,"moby
moby",https://github.com/moby/moby,934328d8ea650bf8a9c3c719999ce2a1f5dd5df6,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/06/07 16:45,2016/11/18 06:00,2013/06/22 11:42,,1,1081 days 05:03:00.000000000,"163 days, 13:15:00"
103,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2013/06/22 11:42,,1,1187 days 20:36:00.000000000,"32 days, 23:00:00"
104,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/30 03:02,2013/06/22 11:42,,1,1187 days 23:33:00.000000000,"7 days, 15:47:00"
105,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 02:58,2013/06/22 11:42,,1,1189 days 13:38:00.000000000,"6 days, 1:38:00"
106,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2013/06/22 11:42,,1,1214 days 20:48:00.000000000,20:28:00
107,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/18 04:18,2013/06/22 11:42,,1,1220 days 19:36:00.000000000,"174 days, 21:00:00"
108,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/01 22:33,2017/08/02 22:07,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"243 days, 23:34:00"
109,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"442 days, 5:18:00"
110,"moby
moby",https://github.com/moby/moby,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/01/01 04:11,2017/04/18 08:18,2013/06/22 11:42,,1,1288 days 16:29:00.000000000,"107 days, 4:07:00"
111,"moby
moby",https://github.com/moby/moby,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/02/14 20:03,2013/06/22 11:42,,1,1455 days 21:36:00.000000000,"242 days, 10:45:00"
112,"moby
moby",https://github.com/moby/moby,d6e1cc32d309ee237342975388e729570343a974,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2019/09/11 15:51,2013/06/22 11:42,,1,1469 days 05:47:00.000000000,"802 days, 22:22:00"
113,"moby
moby",https://github.com/moby/moby,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",2017/09/30 06:09,2019/04/17 08:31,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"564 days, 2:22:00"
115,"moby
moby",https://github.com/moby/moby,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",2017/09/30 06:09,2019/07/17 20:59,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"655 days, 14:50:00"
116,"moby
moby",https://github.com/moby/moby,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/09/30 06:09,2018/05/19 03:28,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"230 days, 21:19:00"
117,"moby
moby",https://github.com/moby/moby,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",2017/12/08 10:10,2018/10/03 05:41,2013/06/22 11:42,,1,1629 days 22:28:00.000000000,"298 days, 19:31:00"
118,"moby
moby",https://github.com/moby/moby,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",2018/01/05 11:58,2018/02/17 03:51,2013/06/22 11:42,,1,1658 days 00:16:00.000000000,"42 days, 15:53:00"
119,"moby
moby",https://github.com/moby/moby,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/02/27 15:28,2013/06/22 11:42,,1,1700 days 16:09:00.000000000,"10 days, 11:37:00"
120,"moby
moby",https://github.com/moby/moby,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2019/10/04 10:57,2013/06/22 11:42,,1,1791 days 15:46:00.000000000,"503 days, 7:29:00"
124,"moby
moby",https://github.com/moby/moby,66d24c2b44a076a6dda17dabe028da9acaa55deb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/15 23:25,2016/09/08 00:02,2016/01/15 23:25,2018/03/09 15:17,1,0 days 00:00:00.000000000,"236 days, 0:37:00"
125,"moby
moby",https://github.com/moby/moby,66d24c2b44a076a6dda17dabe028da9acaa55deb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/15 23:25,2016/02/13 01:56,2016/01/15 23:25,2018/03/09 15:17,1,0 days 00:00:00.000000000,"28 days, 2:31:00"
126,"moby
moby",https://github.com/moby/moby,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/27 02:52,2016/01/15 23:25,2018/03/09 15:17,1,28 days 02:31:00.000000000,"196 days, 0:56:00"
127,"moby
moby",https://github.com/moby/moby,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/02 22:07,2016/01/15 23:25,2018/03/09 15:17,1,139 days 22:44:00.000000000,"424 days, 23:58:00"
128,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2016/01/15 23:25,2018/03/09 15:17,1,164 days 07:13:00.000000000,"86 days, 1:40:00"
129,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2016/01/15 23:25,2018/03/09 15:17,1,250 days 08:53:00.000000000,"32 days, 23:00:00"
130,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/24 01:20,2016/01/15 23:25,2018/03/09 15:17,1,250 days 11:50:00.000000000,"1 day, 14:05:00"
131,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2016/01/15 23:25,2018/03/09 15:17,1,252 days 01:55:00.000000000,"6 days, 1:42:00"
132,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/01 03:22,2016/01/15 23:25,2018/03/09 15:17,1,277 days 09:05:00.000000000,"12 days, 18:52:00"
133,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2016/01/15 23:25,2018/03/09 15:17,1,283 days 07:53:00.000000000,"149 days, 17:10:00"
134,"moby
moby",https://github.com/moby/moby,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/29 03:29,2016/01/15 23:25,2018/03/09 15:17,1,290 days 03:57:00.000000000,"28 days, 0:07:00"
135,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2016/01/15 23:25,2018/03/09 15:17,1,320 days 23:08:00.000000000,"442 days, 5:18:00"
139,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/26 06:40,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"51 days, 15:50:00"
140,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:02,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"246 days, 9:12:00"
141,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/15 03:21,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"69 days, 12:31:00"
142,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",2016/01/05 14:50,2016/02/18 19:57,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"44 days, 5:07:00"
143,"moby
moby",https://github.com/moby/moby,7465a3149f9f0f5c996e95198c46960a4b92c9c2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/14 03:37,2016/01/27 04:51,2015/02/25 03:33,2018/03/09 15:17,1,323 days 00:04:00.000000000,"13 days, 1:14:00"
144,"moby
moby",https://github.com/moby/moby,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 04:51,2016/01/27 07:21,2015/02/25 03:33,2018/03/09 15:17,1,336 days 01:18:00.000000000,2:30:00
145,"moby
moby",https://github.com/moby/moby,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 07:21,2016/01/28 02:46,2015/02/25 03:33,2018/03/09 15:17,1,336 days 03:48:00.000000000,19:25:00
146,"moby
moby",https://github.com/moby/moby,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/28 02:46,2016/02/26 06:40,2015/02/25 03:33,2018/03/09 15:17,1,336 days 23:13:00.000000000,"29 days, 3:54:00"
147,"moby
moby",https://github.com/moby/moby,b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",2016/02/09 19:24,2016/03/29 03:02,2015/02/25 03:33,2018/03/09 15:17,1,349 days 15:51:00.000000000,"48 days, 7:38:00"
148,"moby
moby",https://github.com/moby/moby,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/24 01:01,2015/02/25 03:33,2018/03/09 15:17,1,352 days 22:23:00.000000000,"192 days, 23:05:00"
149,"moby
moby",https://github.com/moby/moby,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",2016/03/25 01:18,2016/03/30 05:35,2015/02/25 03:33,2018/03/09 15:17,1,393 days 21:45:00.000000000,"5 days, 4:17:00"
150,"moby
moby",https://github.com/moby/moby,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/02 22:07,2015/02/25 03:33,2018/03/09 15:17,1,464 days 18:36:00.000000000,"424 days, 23:58:00"
151,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"86 days, 1:40:00"
152,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",2016/06/28 06:38,2016/12/08 06:49,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"163 days, 0:11:00"
153,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2015/02/25 03:33,2018/03/09 15:17,1,575 days 04:45:00.000000000,"32 days, 23:00:00"
154,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/30 03:02,2015/02/25 03:33,2018/03/09 15:17,1,575 days 07:42:00.000000000,"7 days, 15:47:00"
155,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/27 01:03,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"2 days, 23:43:00"
156,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
157,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2015/02/25 03:33,2018/03/09 15:17,1,608 days 03:45:00.000000000,"149 days, 17:10:00"
158,"moby
moby",https://github.com/moby/moby,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/29 03:29,2015/02/25 03:33,2018/03/09 15:17,1,614 days 23:49:00.000000000,"28 days, 0:07:00"
159,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2015/02/25 03:33,2018/03/09 15:17,1,645 days 19:00:00.000000000,"442 days, 5:18:00"
162,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:02,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"246 days, 9:12:00"
163,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/08/23 02:23,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"230 days, 11:33:00"
164,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/13 01:56,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"38 days, 11:06:00"
165,"moby
moby",https://github.com/moby/moby,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/23 02:23,2015/02/25 03:33,2018/03/09 15:17,1,352 days 22:23:00.000000000,"192 days, 0:27:00"
166,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/28 06:38,2017/08/02 22:07,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"400 days, 15:29:00"
167,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"86 days, 1:40:00"
168,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2015/02/25 03:33,2018/03/09 15:17,1,575 days 04:45:00.000000000,"32 days, 23:00:00"
169,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/24 01:20,2015/02/25 03:33,2018/03/09 15:17,1,575 days 07:42:00.000000000,"1 day, 14:05:00"
170,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"6 days, 1:42:00"
171,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
172,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2015/02/25 03:33,2018/03/09 15:17,1,608 days 03:45:00.000000000,"149 days, 17:10:00"
173,"moby
moby",https://github.com/moby/moby,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/29 03:29,2015/02/25 03:33,2018/03/09 15:17,1,614 days 23:49:00.000000000,"28 days, 0:07:00"
174,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2015/02/25 03:33,2018/03/09 15:17,1,645 days 19:00:00.000000000,"442 days, 5:18:00"
178,"moby
moby",https://github.com/moby/moby,5118f1431c9cae757d5e7c193ed85fc8fca3ae85,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/02/28 14:37,2015/03/10 09:24,2015/02/28 14:37,,1,0 days 00:00:00.000000000,"9 days, 18:47:00"
179,"moby
moby",https://github.com/moby/moby,ece4b5bde8ff6ea21b51275a69787191d12a5d65,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/03/10 09:24,2017/08/01 22:26,2015/02/28 14:37,,1,9 days 18:47:00.000000000,"875 days, 13:02:00"
180,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2015/02/28 14:37,,1,573 days 10:43:00.000000000,"6 days, 1:42:00"
181,"moby
moby",https://github.com/moby/moby,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/30 03:02,2016/10/25 07:18,2015/02/28 14:37,,1,579 days 12:25:00.000000000,"25 days, 4:16:00"
182,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/21 07:14,2015/02/28 14:37,,1,598 days 17:53:00.000000000,"32 days, 22:44:00"
183,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2018/02/17 03:51,2015/02/28 14:37,,1,604 days 16:41:00.000000000,"479 days, 20:33:00"
186,"moby
moby",https://github.com/moby/moby,eacd2fd4daa03b1161d879e835705f7d35b871e3,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",2016/01/21 11:51,2016/01/31 13:50,2015/12/01 17:47,,1,50 days 18:04:00.000000000,"10 days, 1:59:00"
187,"moby
moby",https://github.com/moby/moby,c7089b4b469e0a536a260c136ef71bc95591fa51,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",2016/01/31 13:50,2016/04/06 08:25,2015/12/01 17:47,,1,60 days 20:03:00.000000000,"65 days, 18:35:00"
188,"moby
moby",https://github.com/moby/moby,83809de7d45d3465977b2f7a7cf585863cec445c,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/06 08:25,2016/04/24 07:11,2015/12/01 17:47,,1,126 days 14:38:00.000000000,"17 days, 22:46:00"
189,"moby
moby",https://github.com/moby/moby,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/24 07:11,2016/10/21 09:02,2015/12/01 17:47,,1,144 days 13:24:00.000000000,"180 days, 1:51:00"
190,"moby
moby",https://github.com/moby/moby,9a19bd1b450a4f514d194d8a5571ab5be921464a,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/21 09:02,2016/10/22 11:56,2015/12/01 17:47,,1,324 days 15:15:00.000000000,"1 day, 2:54:00"
191,"moby
moby",https://github.com/moby/moby,929fa9ff8075d91624a90ecaae9c1fd31e50c294,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/22 11:56,2016/10/31 05:57,2015/12/01 17:47,,1,325 days 18:09:00.000000000,"8 days, 18:01:00"
192,"moby
moby",https://github.com/moby/moby,5add621331d2790d04437cff0d936649f5fb4767,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/31 05:57,2016/11/11 05:45,2015/12/01 17:47,,1,334 days 12:10:00.000000000,"10 days, 23:48:00"
193,"moby
moby",https://github.com/moby/moby,f6ecfd620a48751124d3d1e590e9e83a437996ca,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/11 05:45,2016/11/18 06:54,2015/12/01 17:47,,1,345 days 11:58:00.000000000,"7 days, 1:09:00"
194,"moby
moby",https://github.com/moby/moby,155435b6ceeb05b2927ecc726216666b898b6459,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/11/18 06:54,2017/01/21 08:09,2015/12/01 17:47,,1,352 days 13:07:00.000000000,"64 days, 1:15:00"
195,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/01 22:33,2017/06/30 17:29,2015/12/01 17:47,,1,366 days 04:46:00.000000000,"210 days, 18:56:00"
196,"moby
moby",https://github.com/moby/moby,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/06 01:57,2017/02/05 16:28,2015/12/01 17:47,,1,370 days 08:10:00.000000000,"61 days, 14:31:00"
197,"moby
moby",https://github.com/moby/moby,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/06/30 17:29,2018/12/20 23:47,2015/12/01 17:47,,1,576 days 23:42:00.000000000,"538 days, 6:18:00"
198,"moby
moby",https://github.com/moby/moby,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2018/12/20 23:47,2019/09/10 08:19,2015/12/01 17:47,,1,1115 days 06:00:00.000000000,"263 days, 8:32:00"
199,"moby
moby",https://github.com/moby/moby,38e4ae3bca76b9558eb44993c4208b41114c4597,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/17 21:37,2019/09/26 18:59,2015/12/01 17:47,,1,1324 days 03:50:00.000000000,"70 days, 21:22:00"
201,"moby
moby",https://github.com/moby/moby,eaa9c85511620aa82f1876e1503604f591f00d23,docs/Dockerfile,docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",2014/01/15 11:23,2015/02/18 13:20,2013/08/30 08:49,2016/10/12 04:14,1,138 days 02:34:00.000000000,"399 days, 1:57:00"
202,"moby
moby",https://github.com/moby/moby,3e84b9e56abdff7230e84a1830085c79c73aa3b7,docs/Dockerfile,docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/18 13:20,2015/02/25 09:37,2013/08/30 08:49,2016/10/12 04:14,1,537 days 04:31:00.000000000,"6 days, 20:17:00"
206,"moby
moby",https://github.com/moby/moby,22c46af4b358cf3ec4f7af47c701064c00cf7de4,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/08/06 05:17,2015/06/14 01:21,2014/08/06 05:17,2018/06/03 01:46,1,0 days 00:00:00.000000000,"311 days, 20:04:00"
207,"moby
moby",https://github.com/moby/moby,cd44018856be421497a35d96f88dd0eec42fae43,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/06/14 01:21,2016/07/04 23:43,2014/08/06 05:17,2018/06/03 01:46,1,311 days 20:04:00.000000000,"386 days, 22:22:00"
208,"moby
moby",https://github.com/moby/moby,11280665b45d0ac9920d17abaf6a7328f2bc77d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/07/04 23:43,2017/11/28 11:21,2014/08/06 05:17,2018/06/03 01:46,1,698 days 18:26:00.000000000,"511 days, 11:38:00"
209,"moby
moby",https://github.com/moby/moby,b6eed3dca2e57705cb75895cad0b5337c79686d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/28 11:21,2018/05/19 03:28,2014/08/06 05:17,2018/06/03 01:46,1,1210 days 06:04:00.000000000,"171 days, 16:07:00"
215,"moby
moby",https://github.com/moby/moby,6e3068700fb32299cf733acd74785e29609b1974,testing/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",2013/09/22 04:14,2013/10/28 04:13,2013/09/08 02:30,2014/02/15 13:50,1,14 days 01:44:00.000000000,"35 days, 23:59:00"
216,"moby
moby",https://github.com/moby/moby,17172276366fc3114ae52eb6c83aafbec004d5f3,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/10/28 04:13,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,50 days 01:43:00.000000000,"10 days, 8:52:00"
217,"moby
moby",https://github.com/moby/moby,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/29 08:51,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,51 days 06:21:00.000000000,"9 days, 4:14:00"
219,"moby
moby",https://github.com/moby/moby,95f3f77fc417bbc55f03e869136deec27e26bc51,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/10/19 14:33,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,0 days 00:00:00.000000000,"18 days, 22:32:00"
220,"moby
moby",https://github.com/moby/moby,efb4c800a7c8167cf2202466a720c0fad7001a5d,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/30 11:37,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,10 days 21:04:00.000000000,"8 days, 1:28:00"
226,"docker
docker-ce",https://github.com/docker/docker-ce,78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b,components/packaging/image/Dockerfile,components/packaging/image/Dockerfile.engine,"#COPY hack/dockerfile/binaries-commits /

",2018/07/11 09:04,2018/08/23 08:11,2018/07/11 09:04,2019/12/05 22:55,1,0 days 00:00:00.000000000,"42 days, 23:07:00"
228,"docker
docker-ce",https://github.com/docker/docker-ce,da964dbf5841c6622b70fb36f7f7f523238f8cbb,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",2016/01/21 11:51,2016/01/31 13:50,2015/12/01 17:47,,1,50 days 18:04:00.000000000,"10 days, 1:59:00"
229,"docker
docker-ce",https://github.com/docker/docker-ce,d59617c5ea5eeb806584d50fefccb2cf96d55bd7,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",2016/01/31 13:50,2016/04/06 08:25,2015/12/01 17:47,,1,60 days 20:03:00.000000000,"65 days, 18:35:00"
230,"docker
docker-ce",https://github.com/docker/docker-ce,3d85a4f2409198283337355316bd24d838f4a308,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/06 08:25,2016/04/24 07:11,2015/12/01 17:47,,1,126 days 14:38:00.000000000,"17 days, 22:46:00"
231,"docker
docker-ce",https://github.com/docker/docker-ce,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/24 07:11,2016/10/21 09:02,2015/12/01 17:47,,1,144 days 13:24:00.000000000,"180 days, 1:51:00"
232,"docker
docker-ce",https://github.com/docker/docker-ce,87b7e2db815407d1f55fe8b929164c7ee4de73a6,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/21 09:02,2016/10/22 11:56,2015/12/01 17:47,,1,324 days 15:15:00.000000000,"1 day, 2:54:00"
233,"docker
docker-ce",https://github.com/docker/docker-ce,65f0de5a38b9ee4836d27d874134d76f06e4b690,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/22 11:56,2016/10/31 05:57,2015/12/01 17:47,,1,325 days 18:09:00.000000000,"8 days, 18:01:00"
234,"docker
docker-ce",https://github.com/docker/docker-ce,1c00388b8a51103ea224beee5d4ce4c6070bab63,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/31 05:57,2016/11/11 05:45,2015/12/01 17:47,,1,334 days 12:10:00.000000000,"10 days, 23:48:00"
235,"docker
docker-ce",https://github.com/docker/docker-ce,8afc09fa08b4fb45d4bb115d8d1f8d99b225038f,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/11 05:45,2016/11/18 06:54,2015/12/01 17:47,,1,345 days 11:58:00.000000000,"7 days, 1:09:00"
236,"docker
docker-ce",https://github.com/docker/docker-ce,05a05baa0e6c5464c512c08d8577a342e682b91c,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/11/18 06:54,2017/01/21 08:09,2015/12/01 17:47,,1,352 days 13:07:00.000000000,"64 days, 1:15:00"
237,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/01 22:33,2017/06/30 17:29,2015/12/01 17:47,,1,366 days 04:46:00.000000000,"210 days, 18:56:00"
238,"docker
docker-ce",https://github.com/docker/docker-ce,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/06 01:57,2017/02/05 16:28,2015/12/01 17:47,,1,370 days 08:10:00.000000000,"61 days, 14:31:00"
239,"docker
docker-ce",https://github.com/docker/docker-ce,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/06/30 17:29,2018/12/20 23:47,2015/12/01 17:47,,1,576 days 23:42:00.000000000,"538 days, 6:18:00"
240,"docker
docker-ce",https://github.com/docker/docker-ce,8bae96ae89ba9f60f10b5a1244a256f5721659bd,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2018/12/20 23:47,2019/09/10 08:19,2015/12/01 17:47,,1,1115 days 06:00:00.000000000,"263 days, 8:32:00"
241,"docker
docker-ce",https://github.com/docker/docker-ce,fe75864cf817ed77fe119af2db6f40e2c88141a0,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/17 21:37,2019/09/26 18:59,2015/12/01 17:47,,1,1324 days 03:50:00.000000000,"70 days, 21:22:00"
243,"docker
docker-ce",https://github.com/docker/docker-ce,7e8cf8c782dd824f71cc9ae0b16f42fbd884e4da,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/02/28 14:37,2015/03/10 09:24,2015/02/28 14:37,,1,0 days 00:00:00.000000000,"9 days, 18:47:00"
244,"docker
docker-ce",https://github.com/docker/docker-ce,69c59ed353bb96d4a2d8e824d9cd643671dca178,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/03/10 09:24,2017/08/01 22:26,2015/02/28 14:37,,1,9 days 18:47:00.000000000,"875 days, 13:02:00"
245,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2015/02/28 14:37,,1,573 days 10:43:00.000000000,"6 days, 1:42:00"
246,"docker
docker-ce",https://github.com/docker/docker-ce,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/30 03:02,2016/10/25 07:18,2015/02/28 14:37,,1,579 days 12:25:00.000000000,"25 days, 4:16:00"
247,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/21 07:14,2015/02/28 14:37,,1,598 days 17:53:00.000000000,"32 days, 22:44:00"
248,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2018/02/17 03:51,2015/02/28 14:37,,1,604 days 16:41:00.000000000,"479 days, 20:33:00"
251,"docker
docker-ce",https://github.com/docker/docker-ce,9327ca0955ad75cc1beb759784326304123c6b05,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/08/27 07:51,2013/10/01 04:57,2013/06/22 11:42,,1,65 days 20:09:00.000000000,"34 days, 21:06:00"
252,"docker
docker-ce",https://github.com/docker/docker-ce,4d40f8afe3d3f7cdeee3f6ce2f4f8e725107508a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",2013/09/07 11:58,2013/09/07 12:14,2013/06/22 11:42,,1,77 days 00:16:00.000000000,0:16:00
253,"docker
docker-ce",https://github.com/docker/docker-ce,742fb66041377fe472ebc29508c4ea7f2140cb11,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/07 12:14,2013/09/07 12:16,2013/06/22 11:42,,1,77 days 00:32:00.000000000,0:02:00
254,"docker
docker-ce",https://github.com/docker/docker-ce,33aa0c2b851e1b478f1e55dc5e4a45cc8ceeac41,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/01 04:57,2013/10/16 09:31,2013/06/22 11:42,,1,100 days 17:15:00.000000000,"15 days, 4:34:00"
255,"docker
docker-ce",https://github.com/docker/docker-ce,952ac8a789e9be9ce4386ba3b14931a1c7d2e239,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/05 11:25,2013/11/05 13:12,2013/06/22 11:42,,1,104 days 23:43:00.000000000,"31 days, 1:47:00"
256,"docker
docker-ce",https://github.com/docker/docker-ce,5e4f4153669d1dbd07f53a9267d5d8677c107b51,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2013/11/01 06:58,2014/03/14 02:46,2013/06/22 11:42,,1,131 days 19:16:00.000000000,"132 days, 19:48:00"
257,"docker
docker-ce",https://github.com/docker/docker-ce,a7fc58e1eb11c1f9c94348203647b59eff438fdf,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO add linux/386 and linux/arm
",2013/12/19 15:06,2014/01/31 19:16,2013/06/22 11:42,,1,180 days 03:24:00.000000000,"43 days, 4:10:00"
258,"docker
docker-ce",https://github.com/docker/docker-ce,5ca82c401df8f0d035205702e2b6848d6afa3910,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2013/12/25 12:40,2015/11/15 11:01,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"689 days, 22:21:00"
259,"docker
docker-ce",https://github.com/docker/docker-ce,c48adc6929a1f41dd086e3f9b91af773bbd2c8f2,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/03/14 02:46,2014/07/10 06:21,2013/06/22 11:42,,1,264 days 15:04:00.000000000,"118 days, 3:35:00"
260,"docker
docker-ce",https://github.com/docker/docker-ce,79b92f27aa2690e85e628e6ce11033bf0333d828,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/06/19 11:04,2015/06/14 01:21,2013/06/22 11:42,,1,361 days 23:22:00.000000000,"359 days, 14:17:00"
261,"docker
docker-ce",https://github.com/docker/docker-ce,e5820ed7e4b39ee86c7a0b12702340d6f296667a,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2014/09/03 23:26,2016/09/08 00:02,2013/06/22 11:42,,1,438 days 11:44:00.000000000,"735 days, 0:36:00"
262,"docker
docker-ce",https://github.com/docker/docker-ce,44958a29f2f2eb9a144b895146af552f1a3cd8d1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",2015/01/23 07:42,2015/02/10 07:19,2013/06/22 11:42,,1,579 days 20:00:00.000000000,"17 days, 23:37:00"
263,"docker
docker-ce",https://github.com/docker/docker-ce,92fbf90d6ef31c368fe9dd7f3b4617cc953c65fe,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",2015/02/27 04:20,2015/04/21 18:33,2013/06/22 11:42,,1,614 days 16:38:00.000000000,"53 days, 14:13:00"
264,"docker
docker-ce",https://github.com/docker/docker-ce,1d551c443cbd014f7310d20396a5a81de5ad47ee,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/05/02 08:42,2016/08/24 01:01,2013/06/22 11:42,,1,678 days 21:00:00.000000000,"479 days, 16:19:00"
265,"docker
docker-ce",https://github.com/docker/docker-ce,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile,components/engine/Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 02:56,2013/06/22 11:42,,1,942 days 09:11:00.000000000,"13 days, 6:03:00"
266,"docker
docker-ce",https://github.com/docker/docker-ce,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",2016/03/15 12:12,2016/05/12 23:52,2013/06/22 11:42,,1,997 days 00:30:00.000000000,"58 days, 11:40:00"
267,"docker
docker-ce",https://github.com/docker/docker-ce,7bef93723c911971da6fbb12ad26697205d1a9e1,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/05/12 23:52,2017/05/15 20:22,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"367 days, 20:30:00"
268,"docker
docker-ce",https://github.com/docker/docker-ce,7bef93723c911971da6fbb12ad26697205d1a9e1,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/05/12 23:52,2016/09/22 08:18,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"132 days, 8:26:00"
269,"docker
docker-ce",https://github.com/docker/docker-ce,6fb90ed484e943d6cfc0849ab8f7be32241c9802,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/06/07 16:45,2016/11/18 06:00,2013/06/22 11:42,,1,1081 days 05:03:00.000000000,"163 days, 13:15:00"
270,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2013/06/22 11:42,,1,1187 days 20:36:00.000000000,"32 days, 23:00:00"
271,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/30 03:02,2013/06/22 11:42,,1,1187 days 23:33:00.000000000,"7 days, 15:47:00"
272,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 02:58,2013/06/22 11:42,,1,1189 days 13:38:00.000000000,"6 days, 1:38:00"
273,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2013/06/22 11:42,,1,1214 days 20:48:00.000000000,20:28:00
274,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/18 04:18,2013/06/22 11:42,,1,1220 days 19:36:00.000000000,"174 days, 21:00:00"
275,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/01 22:33,2017/08/02 22:07,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"243 days, 23:34:00"
276,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"442 days, 5:18:00"
277,"docker
docker-ce",https://github.com/docker/docker-ce,2160e9bb7d89df1a9261eb809546a2f902817ed1,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/01/01 04:11,2017/04/18 08:18,2013/06/22 11:42,,1,1288 days 16:29:00.000000000,"107 days, 4:07:00"
278,"docker
docker-ce",https://github.com/docker/docker-ce,9a9d90f97d60b698ff9786ef021b75881ee294f8,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/02/14 20:03,2013/06/22 11:42,,1,1455 days 21:36:00.000000000,"242 days, 10:45:00"
279,"docker
docker-ce",https://github.com/docker/docker-ce,605885e5180c01af497fba3c7bd25b605bb12341,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2019/09/11 15:51,2013/06/22 11:42,,1,1469 days 05:47:00.000000000,"802 days, 22:22:00"
280,"docker
docker-ce",https://github.com/docker/docker-ce,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/09/30 06:09,2018/05/19 03:28,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"230 days, 21:19:00"
281,"docker
docker-ce",https://github.com/docker/docker-ce,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",2017/09/30 06:09,2019/04/17 08:31,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"564 days, 2:22:00"
282,"docker
docker-ce",https://github.com/docker/docker-ce,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",2017/09/30 06:09,2019/07/17 20:59,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"655 days, 14:50:00"
284,"docker
docker-ce",https://github.com/docker/docker-ce,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",2017/12/08 10:10,2018/10/03 05:41,2013/06/22 11:42,,1,1629 days 22:28:00.000000000,"298 days, 19:31:00"
285,"docker
docker-ce",https://github.com/docker/docker-ce,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",2018/01/05 11:58,2018/02/17 03:51,2013/06/22 11:42,,1,1658 days 00:16:00.000000000,"42 days, 15:53:00"
286,"docker
docker-ce",https://github.com/docker/docker-ce,f11213a80093591f2a3ac7ed0bb5a03312ffb533,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/02/27 15:28,2013/06/22 11:42,,1,1700 days 16:09:00.000000000,"10 days, 11:37:00"
287,"docker
docker-ce",https://github.com/docker/docker-ce,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2019/10/04 10:57,2013/06/22 11:42,,1,1791 days 15:46:00.000000000,"503 days, 7:29:00"
291,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/15 03:21,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"69 days, 12:31:00"
292,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",2016/01/05 14:50,2016/02/18 19:57,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"44 days, 5:07:00"
293,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/26 06:40,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"51 days, 15:50:00"
294,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:02,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"246 days, 9:12:00"
295,"docker
docker-ce",https://github.com/docker/docker-ce,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/14 03:37,2016/01/27 04:51,2015/02/25 03:33,2018/03/09 15:17,1,323 days 00:04:00.000000000,"13 days, 1:14:00"
296,"docker
docker-ce",https://github.com/docker/docker-ce,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 04:51,2016/01/27 07:21,2015/02/25 03:33,2018/03/09 15:17,1,336 days 01:18:00.000000000,2:30:00
297,"docker
docker-ce",https://github.com/docker/docker-ce,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 07:21,2016/01/28 02:46,2015/02/25 03:33,2018/03/09 15:17,1,336 days 03:48:00.000000000,19:25:00
298,"docker
docker-ce",https://github.com/docker/docker-ce,ee8542db2e1591541098307d6f28f76bdb4e5435,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/28 02:46,2016/02/26 06:40,2015/02/25 03:33,2018/03/09 15:17,1,336 days 23:13:00.000000000,"29 days, 3:54:00"
299,"docker
docker-ce",https://github.com/docker/docker-ce,0e8ffb200ceea9e020ed40374db0d25ed6195204,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",2016/02/09 19:24,2016/03/29 03:02,2015/02/25 03:33,2018/03/09 15:17,1,349 days 15:51:00.000000000,"48 days, 7:38:00"
300,"docker
docker-ce",https://github.com/docker/docker-ce,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/24 01:01,2015/02/25 03:33,2018/03/09 15:17,1,352 days 22:23:00.000000000,"192 days, 23:05:00"
301,"docker
docker-ce",https://github.com/docker/docker-ce,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",2016/03/25 01:18,2016/03/30 05:35,2015/02/25 03:33,2018/03/09 15:17,1,393 days 21:45:00.000000000,"5 days, 4:17:00"
302,"docker
docker-ce",https://github.com/docker/docker-ce,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/02 22:07,2015/02/25 03:33,2018/03/09 15:17,1,464 days 18:36:00.000000000,"424 days, 23:58:00"
303,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",2016/06/28 06:38,2016/12/08 06:49,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"163 days, 0:11:00"
304,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"86 days, 1:40:00"
305,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2015/02/25 03:33,2018/03/09 15:17,1,575 days 04:45:00.000000000,"32 days, 23:00:00"
306,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/30 03:02,2015/02/25 03:33,2018/03/09 15:17,1,575 days 07:42:00.000000000,"7 days, 15:47:00"
307,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/27 01:03,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"2 days, 23:43:00"
308,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
309,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2015/02/25 03:33,2018/03/09 15:17,1,608 days 03:45:00.000000000,"149 days, 17:10:00"
310,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/29 03:29,2015/02/25 03:33,2018/03/09 15:17,1,614 days 23:49:00.000000000,"28 days, 0:07:00"
311,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2015/02/25 03:33,2018/03/09 15:17,1,645 days 19:00:00.000000000,"442 days, 5:18:00"
314,"docker
docker-ce",https://github.com/docker/docker-ce,4030bbc684dc21272124af1e2ee7686de85ea342,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/15 23:25,2016/09/08 00:02,2016/01/15 23:25,2018/03/09 15:17,1,0 days 00:00:00.000000000,"236 days, 0:37:00"
315,"docker
docker-ce",https://github.com/docker/docker-ce,4030bbc684dc21272124af1e2ee7686de85ea342,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/15 23:25,2016/02/13 01:56,2016/01/15 23:25,2018/03/09 15:17,1,0 days 00:00:00.000000000,"28 days, 2:31:00"
316,"docker
docker-ce",https://github.com/docker/docker-ce,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/27 02:52,2016/01/15 23:25,2018/03/09 15:17,1,28 days 02:31:00.000000000,"196 days, 0:56:00"
317,"docker
docker-ce",https://github.com/docker/docker-ce,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/02 22:07,2016/01/15 23:25,2018/03/09 15:17,1,139 days 22:44:00.000000000,"424 days, 23:58:00"
318,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2016/01/15 23:25,2018/03/09 15:17,1,164 days 07:13:00.000000000,"86 days, 1:40:00"
319,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2016/01/15 23:25,2018/03/09 15:17,1,250 days 08:53:00.000000000,"32 days, 23:00:00"
320,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/24 01:20,2016/01/15 23:25,2018/03/09 15:17,1,250 days 11:50:00.000000000,"1 day, 14:05:00"
321,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2016/01/15 23:25,2018/03/09 15:17,1,252 days 01:55:00.000000000,"6 days, 1:42:00"
322,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/01 03:22,2016/01/15 23:25,2018/03/09 15:17,1,277 days 09:05:00.000000000,"12 days, 18:52:00"
323,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2016/01/15 23:25,2018/03/09 15:17,1,283 days 07:53:00.000000000,"149 days, 17:10:00"
324,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/29 03:29,2016/01/15 23:25,2018/03/09 15:17,1,290 days 03:57:00.000000000,"28 days, 0:07:00"
325,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2016/01/15 23:25,2018/03/09 15:17,1,320 days 23:08:00.000000000,"442 days, 5:18:00"
329,"docker
docker-ce",https://github.com/docker/docker-ce,4c0e9a70666324c751229e1afbe4b1015655fc84,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/11/05 23:38,2016/09/08 00:02,2015/11/05 23:38,2018/03/09 15:17,1,0 days 00:00:00.000000000,"307 days, 0:24:00"
330,"docker
docker-ce",https://github.com/docker/docker-ce,4c0e9a70666324c751229e1afbe4b1015655fc84,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/11/05 23:38,2016/01/05 14:50,2015/11/05 23:38,2018/03/09 15:17,1,0 days 00:00:00.000000000,"60 days, 15:12:00"
331,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/13 01:56,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"38 days, 11:06:00"
332,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/05 14:50,2016/01/15 06:51,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"9 days, 16:01:00"
333,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/23 11:55,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"77 days, 21:05:00"
334,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/23 11:55,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"77 days, 21:05:00"
335,"docker
docker-ce",https://github.com/docker/docker-ce,2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/14 06:04,2016/03/23 11:55,2015/11/05 23:38,2018/03/09 15:17,1,69 days 06:26:00.000000000,"69 days, 5:51:00"
336,"docker
docker-ce",https://github.com/docker/docker-ce,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 02:56,2015/11/05 23:38,2018/03/09 15:17,1,75 days 21:15:00.000000000,"13 days, 6:03:00"
337,"docker
docker-ce",https://github.com/docker/docker-ce,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/24 01:01,2015/11/05 23:38,2018/03/09 15:17,1,99 days 02:18:00.000000000,"192 days, 23:05:00"
338,"docker
docker-ce",https://github.com/docker/docker-ce,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",2016/03/15 12:12,2016/05/20 04:13,2015/11/05 23:38,2018/03/09 15:17,1,130 days 12:34:00.000000000,"65 days, 16:01:00"
339,"docker
docker-ce",https://github.com/docker/docker-ce,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/02 22:07,2015/11/05 23:38,2018/03/09 15:17,1,210 days 22:31:00.000000000,"424 days, 23:58:00"
340,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2015/11/05 23:38,2018/03/09 15:17,1,235 days 07:00:00.000000000,"86 days, 1:40:00"
341,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2015/11/05 23:38,2018/03/09 15:17,1,321 days 08:40:00.000000000,"32 days, 23:00:00"
342,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/19 08:30,2015/11/05 23:38,2018/03/09 15:17,1,321 days 11:37:00.000000000,"26 days, 21:15:00"
343,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2015/11/05 23:38,2018/03/09 15:17,1,323 days 01:42:00.000000000,"6 days, 1:42:00"
344,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/11/05 23:38,2018/03/09 15:17,1,348 days 08:52:00.000000000,20:28:00
345,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2015/11/05 23:38,2018/03/09 15:17,1,354 days 07:40:00.000000000,"149 days, 17:10:00"
346,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/21 07:14,2015/11/05 23:38,2018/03/09 15:17,1,361 days 03:44:00.000000000,"20 days, 3:52:00"
347,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2015/11/05 23:38,2018/03/09 15:17,1,391 days 22:55:00.000000000,"442 days, 5:18:00"
351,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/13 01:56,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"38 days, 11:06:00"
352,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:02,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"246 days, 9:12:00"
353,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/08/23 02:23,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"230 days, 11:33:00"
354,"docker
docker-ce",https://github.com/docker/docker-ce,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/23 02:23,2015/02/25 03:33,2018/03/09 15:17,1,352 days 22:23:00.000000000,"192 days, 0:27:00"
355,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/28 06:38,2017/08/02 22:07,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"400 days, 15:29:00"
356,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"86 days, 1:40:00"
357,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2015/02/25 03:33,2018/03/09 15:17,1,575 days 04:45:00.000000000,"32 days, 23:00:00"
358,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/24 01:20,2015/02/25 03:33,2018/03/09 15:17,1,575 days 07:42:00.000000000,"1 day, 14:05:00"
359,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"6 days, 1:42:00"
360,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
361,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2015/02/25 03:33,2018/03/09 15:17,1,608 days 03:45:00.000000000,"149 days, 17:10:00"
362,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/29 03:29,2015/02/25 03:33,2018/03/09 15:17,1,614 days 23:49:00.000000000,"28 days, 0:07:00"
363,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2015/02/25 03:33,2018/03/09 15:17,1,645 days 19:00:00.000000000,"442 days, 5:18:00"
366,"docker
docker-ce",https://github.com/docker/docker-ce,0f4b49bea82d2dc2fb6004befdde9f1d380cb527,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",2014/01/15 11:23,2015/02/18 13:20,2013/08/30 08:49,2016/10/12 04:14,1,138 days 02:34:00.000000000,"399 days, 1:57:00"
368,"docker
docker-ce",https://github.com/docker/docker-ce,824b119187656e9475e2a02cd33d44f946f9d17b,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/18 13:20,2015/02/25 09:37,2013/08/30 08:49,2016/10/12 04:14,1,537 days 04:31:00.000000000,"6 days, 20:17:00"
376,"docker
docker-ce",https://github.com/docker/docker-ce,68301c38288c1554119f272cd8e44b6342965cac,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/08/06 05:17,2015/06/14 01:21,2014/08/06 05:17,2018/06/03 01:46,1,0 days 00:00:00.000000000,"311 days, 20:04:00"
377,"docker
docker-ce",https://github.com/docker/docker-ce,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/06/14 01:21,2016/07/04 23:43,2014/08/06 05:17,2018/06/03 01:46,1,311 days 20:04:00.000000000,"386 days, 22:22:00"
378,"docker
docker-ce",https://github.com/docker/docker-ce,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/07/04 23:43,2017/11/28 11:21,2014/08/06 05:17,2018/06/03 01:46,1,698 days 18:26:00.000000000,"511 days, 11:38:00"
379,"docker
docker-ce",https://github.com/docker/docker-ce,94ae8f10c7281c0b5bd8f0945ac9ce250dbd55db,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/28 11:21,2018/05/19 03:28,2014/08/06 05:17,2018/06/03 01:46,1,1210 days 06:04:00.000000000,"171 days, 16:07:00"
383,"docker
docker-ce",https://github.com/docker/docker-ce,736b960e2df15e35aca9abec3ef6a9bc64ead7b3,components/engine/testing/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",2013/09/22 04:14,2013/10/28 04:13,2013/09/08 02:30,2014/02/15 13:50,1,14 days 01:44:00.000000000,"35 days, 23:59:00"
384,"docker
docker-ce",https://github.com/docker/docker-ce,aac90cd92e4389ce099b59cb7313755538ca4d48,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/10/28 04:13,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,50 days 01:43:00.000000000,"10 days, 8:52:00"
385,"docker
docker-ce",https://github.com/docker/docker-ce,7a7c9f0f1d41534dd4afd66f7d8fa56e38ed94e1,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/29 08:51,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,51 days 06:21:00.000000000,"9 days, 4:14:00"
387,"docker
docker-ce",https://github.com/docker/docker-ce,8802449935b4e4d4be8e279e99348a99c4e13bc0,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/10/19 14:33,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,0 days 00:00:00.000000000,"18 days, 22:32:00"
388,"docker
docker-ce",https://github.com/docker/docker-ce,837c6b480c6859db6bf3f3fb044b070afb3f336d,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/30 11:37,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,10 days 21:04:00.000000000,"8 days, 1:28:00"
396,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,5.0/alpine/Dockerfile,5.0/alpine/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/08/11 02:05,2016/05/06 21:48,,1,1182 days 08:26:00.000000000,"374 days, 19:51:00"
398,"docker-library
redis",https://github.com/docker-library/redis,d875ae032d7fdcf380a5506c714b2844af3cd2a1,Dockerfile-alpine.template,Dockerfile-alpine.template,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/28 05:58,2020/08/11 02:05,2019/12/28 05:58,,1,0 days 00:00:00.000000000,"226 days, 20:07:00"
400,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,5.0/Dockerfile,5.0/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/08/11 02:05,2018/06/22 04:14,,1,406 days 02:00:00.000000000,"374 days, 19:51:00"
402,"docker-library
redis",https://github.com/docker-library/redis,d875ae032d7fdcf380a5506c714b2844af3cd2a1,Dockerfile.template,Dockerfile.template,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/28 05:58,2020/08/11 02:05,2019/12/28 05:58,,1,0 days 00:00:00.000000000,"226 days, 20:07:00"
404,"docker-library
redis",https://github.com/docker-library/redis,d122863aaf4f9e4c788368a11651c5e23a32c65c,6.0-rc/Dockerfile,6.0/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/20 02:26,2020/08/11 02:05,2019/12/20 02:26,,1,0 days 00:00:00.000000000,"234 days, 23:39:00"
406,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,5.0/32bit/Dockerfile,5.0/32bit/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/08/11 02:05,2018/06/22 04:14,,1,406 days 02:00:00.000000000,"374 days, 19:51:00"
408,"docker-library
redis",https://github.com/docker-library/redis,d122863aaf4f9e4c788368a11651c5e23a32c65c,6.0-rc/alpine/Dockerfile,6.0/alpine/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/20 02:26,2020/08/11 02:05,2019/12/20 02:26,,1,0 days 00:00:00.000000000,"234 days, 23:39:00"
417,"vmware
photon",https://github.com/vmware/photon,16934d5c41bc25b2878c44817a5e5abbb0ed5a4c,support/dockerfiles/photon/make-docker-image.sh,support/dockerfiles/photon/make-docker-image.sh,"# reinstalling inside to make sure rpmdb is created for tdnf.
# TODO find better solution.
",2015/07/02 00:41,2015/08/04 11:25,2015/04/16 03:00,,1,76 days 21:41:00.000000000,"33 days, 10:44:00"
418,"vmware
photon",https://github.com/vmware/photon,f093864e3c1f22c6bf990f1c9cd35546ed8d6097,support/dockerfiles/photon/make-docker-image.sh,support/dockerfiles/photon/make-docker-image.sh,"# # reinstalling inside to make sure rpmdb is created for tdnf.
# # TODO find better solution.
# chroot $TEMP_CHROOT bash -c \
#    ""tdnf install -y filesystem; \
#     tdnf install -y glibc ; \
#     tdnf install -y bash ; \
#     tdnf install -y coreutils ; \
#     tdnf install -y rpm-ostree ; \
#     tdnf install -y photon-release; \
#     rpm -e --nodeps perl; \
#     rpm -e --nodeps perl-DBD-SQLite; \
#     rpm -e --nodeps perl-Module-ScanDeps; \
#     rpm -e --nodeps perl-DBIx-Simple; \
#     rpm -e --nodeps perl-DBI; \
#     rpm -e --nodeps perl-WWW-Curl;""

",2015/08/04 11:25,2015/08/28 03:54,2015/04/16 03:00,,1,110 days 08:25:00.000000000,"23 days, 16:29:00"
419,"vmware
photon",https://github.com/vmware/photon,71aeaaeb0e77812f1eec535d30a694aaeac5a22d,support/dockerfiles/photon/make-docker-image.sh,support/dockerfiles/photon/make-docker-image.sh,"# # reinstalling inside to make sure rpmdb is created for tdnf.
# # TODO find better solution.
",2015/08/28 03:54,2016/11/23 08:17,2015/04/16 03:00,,1,134 days 00:54:00.000000000,"453 days, 4:23:00"
421,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,ebede7cd81c55fe98d0b9295cada55732b2be785,Dockerfile,Dockerfile,"## Start Hack
## All of this needed because of missing 8.11.x tag.  Once we update to 8.15 we can resume using Dockerfile.old or remove hack and use FROM node:8.15-slim

## Installing Node.js

# gpg keys listed at https://github.com/nodejs/node
",2019/02/28 06:41,2019/03/01 06:58,2015/07/10 18:04,2020/03/05 22:09,1,1328 days 12:37:00.000000000,"1 day, 0:17:00"
422,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,ebede7cd81c55fe98d0b9295cada55732b2be785,Dockerfile,Dockerfile," ## End Hack

## Actual Rocket.Chat stuff
",2019/02/28 06:41,2019/03/01 06:58,2015/07/10 18:04,2020/03/05 22:09,1,1328 days 12:37:00.000000000,"1 day, 0:17:00"
443,"docker-library
tomcat",https://github.com/docker-library/tomcat,ec75141e3cb6276b07d66c16042152e2d4de119c,6/jre7/Dockerfile,6/jre7/Dockerfile,"# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2016/04/23 05:22,2017/07/29 03:16,2014/10/23 08:32,2017/08/04 06:36,1,547 days 20:50:00.000000000,"461 days, 21:54:00"
445,"docker-library
tomcat",https://github.com/docker-library/tomcat,ec75141e3cb6276b07d66c16042152e2d4de119c,6/jre8/Dockerfile,6/jre8/Dockerfile,"# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2016/04/23 05:22,2017/07/29 03:16,2014/11/21 07:04,2017/08/04 06:36,1,518 days 22:18:00.000000000,"461 days, 21:54:00"
449,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
450,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
451,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
454,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
455,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
456,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
459,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
460,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
461,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
463,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
464,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
465,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
467,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
468,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
469,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
471,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,Dockerfile-yum.template,Dockerfile-yum.template,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
472,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,Dockerfile-yum.template,Dockerfile-yum.template,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
473,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,Dockerfile-yum.template,Dockerfile-yum.template,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00"
484,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,82bba8cc44febcc6d7f31e25373fd323a1b54bfc,8.5/5.6/Dockerfile,8.5/5.6/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2015/10/11 19:18,2019/04/24 20:47,2015/10/11 19:18,,1,0 days 00:00:00.000000000,"1291 days, 1:29:00"
497,"docker-library
busybox",https://github.com/docker-library/busybox,ba116f6e8efbad7f8d837d530a7dcd48da6c2b55,upstream/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
",2015/10/15 02:57,2016/10/08 01:56,2015/02/03 15:02,,1,253 days 11:55:00.000000000,"358 days, 22:59:00"
498,"docker-library
busybox",https://github.com/docker-library/busybox,4629888e69e7b69b594aec10529f8ca4a2fa31e7,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
",2016/10/08 01:56,2017/05/16 05:19,2015/02/03 15:02,,1,612 days 10:54:00.000000000,"220 days, 3:23:00"
499,"docker-library
busybox",https://github.com/docker-library/busybox,8b0d96682de7f70e9a67bc9ab1a488da289ede38,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now; 1.27+)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
",2017/05/16 05:19,2017/07/02 02:11,2015/02/03 15:02,,1,832 days 14:17:00.000000000,"46 days, 20:52:00"
502,"docker-library
busybox",https://github.com/docker-library/busybox,6b303c84f063bea2bc3bc86dc86c4db1f3a8b5d3,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# As long as we rely on libnss, we have to have libc.so anyhow, so
# we've removed CONFIG_STATIC here for now... :cry:
",2016/01/08 03:46,2016/10/08 01:56,2016/01/08 03:46,,1,0 days 00:00:00.000000000,"273 days, 22:10:00"
504,"docker-library
busybox",https://github.com/docker-library/busybox,4629888e69e7b69b594aec10529f8ca4a2fa31e7,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# As long as we rely on libnss, we have to have libc.so anyhow, so
# we've removed CONFIG_STATIC here for now... :cry:
",2016/10/08 01:56,2017/05/16 05:19,2016/01/08 03:46,,1,273 days 22:10:00.000000000,"220 days, 3:23:00"
505,"docker-library
busybox",https://github.com/docker-library/busybox,8b0d96682de7f70e9a67bc9ab1a488da289ede38,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now; 1.27+)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# As long as we rely on libnss, we have to have libc.so anyhow, so
# we've removed CONFIG_STATIC here for now... :cry:
",2017/05/16 05:19,2017/05/16 05:35,2016/01/08 03:46,,1,494 days 01:33:00.000000000,0:16:00
506,"docker-library
busybox",https://github.com/docker-library/busybox,6b303c84f063bea2bc3bc86dc86c4db1f3a8b5d3,musl/Dockerfile.builder,musl/Dockerfile.builder,"# see http://wiki.musl-libc.org/wiki/Building_Busybox
# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
",2016/01/08 03:46,2016/10/08 01:56,2016/01/08 03:46,,1,0 days 00:00:00.000000000,"273 days, 22:10:00"
507,"docker-library
busybox",https://github.com/docker-library/busybox,4629888e69e7b69b594aec10529f8ca4a2fa31e7,musl/Dockerfile.builder,musl/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# see http://wiki.musl-libc.org/wiki/Building_Busybox
",2016/10/08 01:56,2017/05/16 05:19,2016/01/08 03:46,,1,273 days 22:10:00.000000000,"220 days, 3:23:00"
510,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,2a2584ea8edb91065217e3f2a8d99e64e991445b,Dockerfile,7.8/Dockerfile,"## haskell package versions; can be overriden via context hacks
",2014/07/27 06:49,2014/10/07 08:37,2014/05/29 11:51,,1,58 days 18:58:00.000000000,"72 days, 1:48:00"
511,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,ced15f9e787dde6d7559819896bf322ef9a9fa17,7.8/Dockerfile,7.8/Dockerfile,"## install additional libs typically needed by hackage packages
",2014/10/07 08:37,2015/03/28 01:31,2014/05/29 11:51,,1,130 days 20:46:00.000000000,"171 days, 16:54:00"
559,"docker-library
drupal",https://github.com/docker-library/drupal,6440784240cfb19b860220e874a738b961577949,Dockerfile,7/apache-buster/Dockerfile,"# TODO use this MD5
",2015/04/15 08:20,2019/07/20 05:48,2015/04/15 08:20,,1,0 days 00:00:00.000000000,"1556 days, 21:28:00"
563,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,b95f1b3f7b1df5652ca7e226bc8ede55520cc89f,0.6/Dockerfile,0.6/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM, exposes a web UI, and bootstraps itself. Don't use this configuration
# for production.
",2016/01/30 04:18,2016/07/06 05:54,2016/01/30 04:18,2017/10/06 01:40,1,0 days 00:00:00.000000000,"158 days, 1:36:00"
590,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,8b6397888af7e165e1e1494c6be823a151b616c2,Dockerfile,1.23/Dockerfile,"# TODO: Switch to debian sid

",2015/12/19 10:39,2015/12/19 13:28,2014/10/11 03:48,2015/08/14 06:24,1,434 days 06:51:00.000000000,2:49:00
591,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,8b6397888af7e165e1e1494c6be823a151b616c2,Dockerfile,1.23/Dockerfile,"    # VisualEditor
    # TODO: make submodules shallow clones?
",2015/12/19 10:39,2017/06/08 08:19,2014/10/11 03:48,2015/08/14 06:24,1,434 days 06:51:00.000000000,"536 days, 21:40:00"
593,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,d254f8c01cd0bbbed38bc0c71d0d70066d6fbbb4,dev/Dockerfile,dev/Dockerfile,"    # Extensions
    # TODO: make submodules shallow clones?
",2017/12/21 02:08,2019/06/28 06:31,2017/12/21 02:08,,1,0 days 00:00:00.000000000,"554 days, 4:23:00"
595,"hashicorp
docker-consul",https://github.com/hashicorp/docker-consul,b95f1b3f7b1df5652ca7e226bc8ede55520cc89f,0.6/Dockerfile,0.X/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM, exposes a web UI, and bootstraps itself. Don't use this configuration
# for production.
",2016/01/30 04:18,2016/09/15 06:22,2016/01/30 04:18,,1,0 days 00:00:00.000000000,"229 days, 2:04:00"
598,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,7/Dockerfile,7/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2017/05/03 01:38,2020/05/08 13:19,1,45 days 01:07:00.000000000,"103 days, 23:50:00"
599,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,7/Dockerfile,7/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2017/05/03 01:38,2020/05/08 13:19,1,45 days 01:07:00.000000000,"103 days, 23:50:00"
600,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,6/Dockerfile,6/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2016/09/17 05:48,2020/05/07 22:15,1,272 days 20:57:00.000000000,"103 days, 23:50:00"
601,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,6/Dockerfile,6/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2016/09/17 05:48,2020/05/07 22:15,1,272 days 20:57:00.000000000,"103 days, 23:50:00"
603,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,Dockerfile.template,Dockerfile.template,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2017/06/16 01:40,,1,1 days 01:05:00.000000000,"103 days, 23:50:00"
604,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,Dockerfile.template,Dockerfile.template,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2017/06/16 01:40,,1,1 days 01:05:00.000000000,"103 days, 23:50:00"
606,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,5/Dockerfile,5/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2015/12/15 08:34,2017/09/30 03:05,1,549 days 18:11:00.000000000,"103 days, 23:50:00"
607,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,5/Dockerfile,5/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2015/12/15 08:34,2019/05/04 07:14,1,549 days 18:11:00.000000000,"103 days, 23:50:00"
610,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,4.9/Dockerfile,4.9/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2016/04/27 23:55,2017/09/30 03:05,1,415 days 02:50:00.000000000,"103 days, 23:50:00"
611,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,4.9/Dockerfile,4.9/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2016/04/27 23:55,2017/09/30 03:05,1,415 days 02:50:00.000000000,"103 days, 23:50:00"
618,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,df966bd85ec8ee2d918eef64d6a93eeee3cf4930,docker/master/dind/Dockerfile,docker-master/dind/Dockerfile,"# TODO aufs-tools

",2015/08/28 07:47,2017/03/11 16:10,2015/08/28 07:47,,1,0 days 00:00:00.000000000,"561 days, 8:23:00"
627,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,a5d820803f01e2582d45be1b00a2808ede979951,xen-orchestra/Dockerfile,xen-orchestra/Dockerfile,"# TODO use links to get a redis server/database instead (since that's where configuration actually goes)
",2013/11/02 14:34,2014/02/08 13:56,2013/11/02 14:34,,1,0 days 00:00:00.000000000,"97 days, 23:22:00"
631,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,277a6c9db8301713bf30afa54baff18635fef604,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.9 (if it makes it out of edge for 3.9)

",2018/07/04 10:52,2019/04/24 05:58,2016/09/08 06:32,,1,664 days 04:20:00.000000000,"293 days, 19:06:00"
632,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,4bc9e1a50ee138a12cef4333288ef4d8a1c16344,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.10 (if it makes it out of edge for 3.10)

",2019/04/24 05:58,2019/07/03 15:24,2016/09/08 06:32,,1,957 days 23:26:00.000000000,"70 days, 9:26:00"
633,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,b6144573262026530b06e311ac1b62e3081e4ecb,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.11 (if it makes it out of edge)
# https://pkgs.alpinelinux.org/packages?name=nbtscan&branch=edge&arch=x86_64

",2019/07/03 15:24,2020/02/15 10:49,2016/09/08 06:32,,1,1028 days 08:52:00.000000000,"226 days, 19:25:00"
650,"osrf
docker_images",https://github.com/osrf/docker_images,244cc8f750b08c8b63f6008708ee1c810d7cecc6,ros2/nightly/nightly/Dockerfile,ros2/nightly/nightly/Dockerfile,"# FIXME This is a workaround for pytest not found causing builds to fail
# Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
",2019/06/05 00:58,2019/12/23 02:17,2018/10/20 13:18,,1,227 days 11:40:00.000000000,"201 days, 1:19:00"
653,"osrf
docker_images",https://github.com/osrf/docker_images,f780a6cc3b381b6ac6fbb998766233b27f66f175,sros/kinetic/Dockerfile,sros/kinetic/Dockerfile,"# HACK, replacing shell with bash for later docker build commands
",2016/08/12 02:31,2019/12/26 23:57,2016/08/12 02:31,,1,0 days 00:00:00.000000000,"1231 days, 21:26:00"
655,"Nexenta
nexentastor-csi-driver",https://github.com/Nexenta/nexentastor-csi-driver,b99c6dfd96570909122af1351ed0b1a472176493,Dockerfile.csi-sanity,Dockerfile.csi-sanity,"# other csi-sanity options: --ginkgo.v -ginkgo.noColor
#TODO remove ""--ginkgo.skip"" option after switching from v2.0.1 to the next release,
# after releasing this https://github.com/kubernetes-csi/csi-test/pull/205/files
",2019/07/19 07:50,2019/07/26 02:24,2018/11/28 11:14,,1,232 days 20:36:00.000000000,"6 days, 18:34:00"
657,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,dbdd5294d5172438253ed6b5793b26e26ef30eb5,alpine/Dockerfile,2.0/alpine/Dockerfile,"# TODO: alter filename after v2 relese (version will be taken out of name)
",2020/03/11 10:24,2020/03/15 21:37,2019/10/19 05:34,2020/06/28 02:37,1,144 days 04:50:00.000000000,"4 days, 11:13:00"
660,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,dbdd5294d5172438253ed6b5793b26e26ef30eb5,Dockerfile.tmpl,Dockerfile.tmpl,"# TODO: alter filename after v2 relese (version will be taken out of name)
",2020/03/11 10:24,2020/03/15 21:37,2020/02/05 10:08,,1,35 days 00:16:00.000000000,"4 days, 11:13:00"
662,"docker
docker",https://github.com/docker/docker,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,Dockerfile.arm,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/11/05 23:38,2016/01/05 14:50,2015/11/05 23:38,2018/03/09 15:17,1,0 days 00:00:00.000000000,"60 days, 15:12:00"
663,"docker
docker",https://github.com/docker/docker,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,Dockerfile.arm,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/11/05 23:38,2016/09/08 00:02,2015/11/05 23:38,2018/03/09 15:17,1,0 days 00:00:00.000000000,"307 days, 0:24:00"
664,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/23 11:55,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"77 days, 21:05:00"
665,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/05 14:50,2016/01/15 06:51,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"9 days, 16:01:00"
666,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/13 01:56,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"38 days, 11:06:00"
667,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/23 11:55,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"77 days, 21:05:00"
668,"docker
docker",https://github.com/docker/docker,9560d941142b0bd17b0aa51e4d9bfe22354732ec,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/14 06:04,2016/03/23 11:55,2015/11/05 23:38,2018/03/09 15:17,1,69 days 06:26:00.000000000,"69 days, 5:51:00"
669,"docker
docker",https://github.com/docker/docker,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 02:56,2015/11/05 23:38,2018/03/09 15:17,1,75 days 21:15:00.000000000,"13 days, 6:03:00"
670,"docker
docker",https://github.com/docker/docker,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/24 01:01,2015/11/05 23:38,2018/03/09 15:17,1,99 days 02:18:00.000000000,"192 days, 23:05:00"
671,"docker
docker",https://github.com/docker/docker,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",2016/03/15 12:12,2016/05/20 04:13,2015/11/05 23:38,2018/03/09 15:17,1,130 days 12:34:00.000000000,"65 days, 16:01:00"
672,"docker
docker",https://github.com/docker/docker,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/02 22:07,2015/11/05 23:38,2018/03/09 15:17,1,210 days 22:31:00.000000000,"424 days, 23:58:00"
673,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2015/11/05 23:38,2018/03/09 15:17,1,235 days 07:00:00.000000000,"86 days, 1:40:00"
674,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2015/11/05 23:38,2018/03/09 15:17,1,321 days 08:40:00.000000000,"32 days, 23:00:00"
675,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/19 08:30,2015/11/05 23:38,2018/03/09 15:17,1,321 days 11:37:00.000000000,"26 days, 21:15:00"
676,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2015/11/05 23:38,2018/03/09 15:17,1,323 days 01:42:00.000000000,"6 days, 1:42:00"
677,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/11/05 23:38,2018/03/09 15:17,1,348 days 08:52:00.000000000,20:28:00
678,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2015/11/05 23:38,2018/03/09 15:17,1,354 days 07:40:00.000000000,"149 days, 17:10:00"
679,"docker
docker",https://github.com/docker/docker,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/21 07:14,2015/11/05 23:38,2018/03/09 15:17,1,361 days 03:44:00.000000000,"20 days, 3:52:00"
680,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2015/11/05 23:38,2018/03/09 15:17,1,391 days 22:55:00.000000000,"442 days, 5:18:00"
684,"docker
docker",https://github.com/docker/docker,20d24a450cbf22b6d5268bc1fe76022fa554d6be,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/08/27 07:51,2013/10/01 04:57,2013/06/22 11:42,,1,65 days 20:09:00.000000000,"34 days, 21:06:00"
685,"docker
docker",https://github.com/docker/docker,fa806f26aff927eb0d98b41e79786ae98987da5b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",2013/09/07 11:58,2013/09/07 12:14,2013/06/22 11:42,,1,77 days 00:16:00.000000000,0:16:00
686,"docker
docker",https://github.com/docker/docker,47838051be695a4e74c80690ceef811dcd3ef62c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/07 12:14,2013/09/07 12:16,2013/06/22 11:42,,1,77 days 00:32:00.000000000,0:02:00
687,"docker
docker",https://github.com/docker/docker,ccefe47897bdcef8b56bf54d4bd324989855f3b5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/01 04:57,2013/10/16 09:31,2013/06/22 11:42,,1,100 days 17:15:00.000000000,"15 days, 4:34:00"
688,"docker
docker",https://github.com/docker/docker,1cbdaebaa1c2326e57945333420d25d6f77011d5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/05 11:25,2013/11/05 13:12,2013/06/22 11:42,,1,104 days 23:43:00.000000000,"31 days, 1:47:00"
689,"docker
docker",https://github.com/docker/docker,31638ab2ad2a5380d447780f05f7aa078c9421f5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2013/11/01 06:58,2014/03/14 02:46,2013/06/22 11:42,,1,131 days 19:16:00.000000000,"132 days, 19:48:00"
690,"docker
docker",https://github.com/docker/docker,62a81370fffb3cfdb15ef19702f0ea07ab2f4c36,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",2013/12/19 15:06,2014/01/31 19:16,2013/06/22 11:42,,1,180 days 03:24:00.000000000,"43 days, 4:10:00"
691,"docker
docker",https://github.com/docker/docker,484a75f3549239d0489cb0ad518d79ed6783584a,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2013/12/25 12:40,2015/11/15 11:01,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"689 days, 22:21:00"
692,"docker
docker",https://github.com/docker/docker,44fe8cbbd174b5d85d4a063ed270f6b9d2279b70,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/03/14 02:46,2014/07/10 06:21,2013/06/22 11:42,,1,264 days 15:04:00.000000000,"118 days, 3:35:00"
693,"docker
docker",https://github.com/docker/docker,d0a0e91f1f8c3a43f04e7a58e37498124b283594,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/06/19 11:04,2015/06/14 01:21,2013/06/22 11:42,,1,361 days 23:22:00.000000000,"359 days, 14:17:00"
694,"docker
docker",https://github.com/docker/docker,d5151ca8ab5d90300839c8572cb96577de4d6233,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2014/09/03 23:26,2016/09/08 00:02,2013/06/22 11:42,,1,438 days 11:44:00.000000000,"735 days, 0:36:00"
695,"docker
docker",https://github.com/docker/docker,47769994e5cba81a96529b418052afce7a6d51a3,Dockerfile,Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",2015/01/23 07:42,2015/02/10 07:19,2013/06/22 11:42,,1,579 days 20:00:00.000000000,"17 days, 23:37:00"
696,"docker
docker",https://github.com/docker/docker,5d70a97b1fff8286220d2bef9ceb248401f046d1,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",2015/02/27 04:20,2015/04/21 18:33,2013/06/22 11:42,,1,614 days 16:38:00.000000000,"53 days, 14:13:00"
697,"docker
docker",https://github.com/docker/docker,6089e679a2fb2494fd3e599a9eab9327e6a509fc,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/05/02 08:42,2016/08/24 01:01,2013/06/22 11:42,,1,678 days 21:00:00.000000000,"479 days, 16:19:00"
698,"docker
docker",https://github.com/docker/docker,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile,Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 02:56,2013/06/22 11:42,,1,942 days 09:11:00.000000000,"13 days, 6:03:00"
699,"docker
docker",https://github.com/docker/docker,e6590b5fa2c442546d3dcfa3e0580eb024ede823,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",2016/03/15 12:12,2016/05/12 23:52,2013/06/22 11:42,,1,997 days 00:30:00.000000000,"58 days, 11:40:00"
700,"docker
docker",https://github.com/docker/docker,d8fef66b03c1ea8715470690efbd950033f7f628,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/05/12 23:52,2017/05/15 20:22,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"367 days, 20:30:00"
701,"docker
docker",https://github.com/docker/docker,d8fef66b03c1ea8715470690efbd950033f7f628,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/05/12 23:52,2016/09/22 08:18,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"132 days, 8:26:00"
702,"docker
docker",https://github.com/docker/docker,934328d8ea650bf8a9c3c719999ce2a1f5dd5df6,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/06/07 16:45,2016/11/18 06:00,2013/06/22 11:42,,1,1081 days 05:03:00.000000000,"163 days, 13:15:00"
703,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2013/06/22 11:42,,1,1187 days 20:36:00.000000000,"32 days, 23:00:00"
704,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/30 03:02,2013/06/22 11:42,,1,1187 days 23:33:00.000000000,"7 days, 15:47:00"
705,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 02:58,2013/06/22 11:42,,1,1189 days 13:38:00.000000000,"6 days, 1:38:00"
706,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2013/06/22 11:42,,1,1214 days 20:48:00.000000000,20:28:00
707,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/18 04:18,2013/06/22 11:42,,1,1220 days 19:36:00.000000000,"174 days, 21:00:00"
708,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/01 22:33,2017/08/02 22:07,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"243 days, 23:34:00"
709,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"442 days, 5:18:00"
710,"docker
docker",https://github.com/docker/docker,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/01/01 04:11,2017/04/18 08:18,2013/06/22 11:42,,1,1288 days 16:29:00.000000000,"107 days, 4:07:00"
711,"docker
docker",https://github.com/docker/docker,bc82b139955c4a0edb20b070926469cceea0fbbb,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/02/14 20:03,2013/06/22 11:42,,1,1455 days 21:36:00.000000000,"242 days, 10:45:00"
712,"docker
docker",https://github.com/docker/docker,d6e1cc32d309ee237342975388e729570343a974,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2019/09/11 15:51,2013/06/22 11:42,,1,1469 days 05:47:00.000000000,"802 days, 22:22:00"
713,"docker
docker",https://github.com/docker/docker,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",2017/09/30 06:09,2019/04/17 08:31,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"564 days, 2:22:00"
715,"docker
docker",https://github.com/docker/docker,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",2017/09/30 06:09,2019/07/17 20:59,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"655 days, 14:50:00"
716,"docker
docker",https://github.com/docker/docker,d539038d9712daa44254412c6fcc6d78a14da691,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/09/30 06:09,2018/05/19 03:28,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"230 days, 21:19:00"
717,"docker
docker",https://github.com/docker/docker,be8885525c4d1ef4a13bbd6396f60e8657bc5573,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",2017/12/08 10:10,2018/10/03 05:41,2013/06/22 11:42,,1,1629 days 22:28:00.000000000,"298 days, 19:31:00"
718,"docker
docker",https://github.com/docker/docker,eaae7750efbc80314c5e028c4d43d3cd9e104edd,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",2018/01/05 11:58,2018/02/17 03:51,2013/06/22 11:42,,1,1658 days 00:16:00.000000000,"42 days, 15:53:00"
719,"docker
docker",https://github.com/docker/docker,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/02/27 15:28,2013/06/22 11:42,,1,1700 days 16:09:00.000000000,"10 days, 11:37:00"
720,"docker
docker",https://github.com/docker/docker,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2019/10/04 10:57,2013/06/22 11:42,,1,1791 days 15:46:00.000000000,"503 days, 7:29:00"
724,"docker
docker",https://github.com/docker/docker,66d24c2b44a076a6dda17dabe028da9acaa55deb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/15 23:25,2016/09/08 00:02,2016/01/15 23:25,2018/03/09 15:17,1,0 days 00:00:00.000000000,"236 days, 0:37:00"
725,"docker
docker",https://github.com/docker/docker,66d24c2b44a076a6dda17dabe028da9acaa55deb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/15 23:25,2016/02/13 01:56,2016/01/15 23:25,2018/03/09 15:17,1,0 days 00:00:00.000000000,"28 days, 2:31:00"
726,"docker
docker",https://github.com/docker/docker,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/27 02:52,2016/01/15 23:25,2018/03/09 15:17,1,28 days 02:31:00.000000000,"196 days, 0:56:00"
727,"docker
docker",https://github.com/docker/docker,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/02 22:07,2016/01/15 23:25,2018/03/09 15:17,1,139 days 22:44:00.000000000,"424 days, 23:58:00"
728,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2016/01/15 23:25,2018/03/09 15:17,1,164 days 07:13:00.000000000,"86 days, 1:40:00"
729,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2016/01/15 23:25,2018/03/09 15:17,1,250 days 08:53:00.000000000,"32 days, 23:00:00"
730,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/24 01:20,2016/01/15 23:25,2018/03/09 15:17,1,250 days 11:50:00.000000000,"1 day, 14:05:00"
731,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2016/01/15 23:25,2018/03/09 15:17,1,252 days 01:55:00.000000000,"6 days, 1:42:00"
732,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/01 03:22,2016/01/15 23:25,2018/03/09 15:17,1,277 days 09:05:00.000000000,"12 days, 18:52:00"
733,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2016/01/15 23:25,2018/03/09 15:17,1,283 days 07:53:00.000000000,"149 days, 17:10:00"
734,"docker
docker",https://github.com/docker/docker,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/29 03:29,2016/01/15 23:25,2018/03/09 15:17,1,290 days 03:57:00.000000000,"28 days, 0:07:00"
735,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2016/01/15 23:25,2018/03/09 15:17,1,320 days 23:08:00.000000000,"442 days, 5:18:00"
739,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/26 06:40,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"51 days, 15:50:00"
740,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:02,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"246 days, 9:12:00"
741,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/15 03:21,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"69 days, 12:31:00"
742,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",2016/01/05 14:50,2016/02/18 19:57,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"44 days, 5:07:00"
743,"docker
docker",https://github.com/docker/docker,7465a3149f9f0f5c996e95198c46960a4b92c9c2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/14 03:37,2016/01/27 04:51,2015/02/25 03:33,2018/03/09 15:17,1,323 days 00:04:00.000000000,"13 days, 1:14:00"
744,"docker
docker",https://github.com/docker/docker,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 04:51,2016/01/27 07:21,2015/02/25 03:33,2018/03/09 15:17,1,336 days 01:18:00.000000000,2:30:00
745,"docker
docker",https://github.com/docker/docker,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 07:21,2016/01/28 02:46,2015/02/25 03:33,2018/03/09 15:17,1,336 days 03:48:00.000000000,19:25:00
746,"docker
docker",https://github.com/docker/docker,71a1caddf0af51cfc79db04f80513b292adb0231,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/28 02:46,2016/02/26 06:40,2015/02/25 03:33,2018/03/09 15:17,1,336 days 23:13:00.000000000,"29 days, 3:54:00"
747,"docker
docker",https://github.com/docker/docker,b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",2016/02/09 19:24,2016/03/29 03:02,2015/02/25 03:33,2018/03/09 15:17,1,349 days 15:51:00.000000000,"48 days, 7:38:00"
748,"docker
docker",https://github.com/docker/docker,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/24 01:01,2015/02/25 03:33,2018/03/09 15:17,1,352 days 22:23:00.000000000,"192 days, 23:05:00"
749,"docker
docker",https://github.com/docker/docker,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",2016/03/25 01:18,2016/03/30 05:35,2015/02/25 03:33,2018/03/09 15:17,1,393 days 21:45:00.000000000,"5 days, 4:17:00"
750,"docker
docker",https://github.com/docker/docker,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/02 22:07,2015/02/25 03:33,2018/03/09 15:17,1,464 days 18:36:00.000000000,"424 days, 23:58:00"
751,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"86 days, 1:40:00"
752,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",2016/06/28 06:38,2016/12/08 06:49,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"163 days, 0:11:00"
753,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2015/02/25 03:33,2018/03/09 15:17,1,575 days 04:45:00.000000000,"32 days, 23:00:00"
754,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/30 03:02,2015/02/25 03:33,2018/03/09 15:17,1,575 days 07:42:00.000000000,"7 days, 15:47:00"
755,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/27 01:03,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"2 days, 23:43:00"
756,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
757,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2015/02/25 03:33,2018/03/09 15:17,1,608 days 03:45:00.000000000,"149 days, 17:10:00"
758,"docker
docker",https://github.com/docker/docker,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/29 03:29,2015/02/25 03:33,2018/03/09 15:17,1,614 days 23:49:00.000000000,"28 days, 0:07:00"
759,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2015/02/25 03:33,2018/03/09 15:17,1,645 days 19:00:00.000000000,"442 days, 5:18:00"
762,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:02,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"246 days, 9:12:00"
763,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/08/23 02:23,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"230 days, 11:33:00"
764,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/13 01:56,2015/02/25 03:33,2018/03/09 15:17,1,314 days 11:17:00.000000000,"38 days, 11:06:00"
765,"docker
docker",https://github.com/docker/docker,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/23 02:23,2015/02/25 03:33,2018/03/09 15:17,1,352 days 22:23:00.000000000,"192 days, 0:27:00"
766,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/28 06:38,2017/08/02 22:07,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"400 days, 15:29:00"
767,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/22 08:18,2015/02/25 03:33,2018/03/09 15:17,1,489 days 03:05:00.000000000,"86 days, 1:40:00"
768,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/25 07:18,2015/02/25 03:33,2018/03/09 15:17,1,575 days 04:45:00.000000000,"32 days, 23:00:00"
769,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/24 01:20,2015/02/25 03:33,2018/03/09 15:17,1,575 days 07:42:00.000000000,"1 day, 14:05:00"
770,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"6 days, 1:42:00"
771,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
772,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/03/24 00:28,2015/02/25 03:33,2018/03/09 15:17,1,608 days 03:45:00.000000000,"149 days, 17:10:00"
773,"docker
docker",https://github.com/docker/docker,f2614f2107c838d014d31b806e3b8a9f1395cb2b,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/29 03:29,2015/02/25 03:33,2018/03/09 15:17,1,614 days 23:49:00.000000000,"28 days, 0:07:00"
774,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/17 03:51,2015/02/25 03:33,2018/03/09 15:17,1,645 days 19:00:00.000000000,"442 days, 5:18:00"
778,"docker
docker",https://github.com/docker/docker,5118f1431c9cae757d5e7c193ed85fc8fca3ae85,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/02/28 14:37,2015/03/10 09:24,2015/02/28 14:37,,1,0 days 00:00:00.000000000,"9 days, 18:47:00"
779,"docker
docker",https://github.com/docker/docker,ece4b5bde8ff6ea21b51275a69787191d12a5d65,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/03/10 09:24,2017/08/01 22:26,2015/02/28 14:37,,1,9 days 18:47:00.000000000,"875 days, 13:02:00"
780,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/30 03:02,2015/02/28 14:37,,1,573 days 10:43:00.000000000,"6 days, 1:42:00"
781,"docker
docker",https://github.com/docker/docker,7e12c3bb99381f117be73e05c187be6ce44280b9,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/30 03:02,2016/10/25 07:18,2015/02/28 14:37,,1,579 days 12:25:00.000000000,"25 days, 4:16:00"
782,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/21 07:14,2015/02/28 14:37,,1,598 days 17:53:00.000000000,"32 days, 22:44:00"
783,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2018/02/17 03:51,2015/02/28 14:37,,1,604 days 16:41:00.000000000,"479 days, 20:33:00"
786,"docker
docker",https://github.com/docker/docker,eacd2fd4daa03b1161d879e835705f7d35b871e3,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",2016/01/21 11:51,2016/01/31 13:50,2015/12/01 17:47,,1,50 days 18:04:00.000000000,"10 days, 1:59:00"
787,"docker
docker",https://github.com/docker/docker,c7089b4b469e0a536a260c136ef71bc95591fa51,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",2016/01/31 13:50,2016/04/06 08:25,2015/12/01 17:47,,1,60 days 20:03:00.000000000,"65 days, 18:35:00"
788,"docker
docker",https://github.com/docker/docker,83809de7d45d3465977b2f7a7cf585863cec445c,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/06 08:25,2016/04/24 07:11,2015/12/01 17:47,,1,126 days 14:38:00.000000000,"17 days, 22:46:00"
789,"docker
docker",https://github.com/docker/docker,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/24 07:11,2016/10/21 09:02,2015/12/01 17:47,,1,144 days 13:24:00.000000000,"180 days, 1:51:00"
790,"docker
docker",https://github.com/docker/docker,9a19bd1b450a4f514d194d8a5571ab5be921464a,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/21 09:02,2016/10/22 11:56,2015/12/01 17:47,,1,324 days 15:15:00.000000000,"1 day, 2:54:00"
791,"docker
docker",https://github.com/docker/docker,929fa9ff8075d91624a90ecaae9c1fd31e50c294,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/22 11:56,2016/10/31 05:57,2015/12/01 17:47,,1,325 days 18:09:00.000000000,"8 days, 18:01:00"
792,"docker
docker",https://github.com/docker/docker,5add621331d2790d04437cff0d936649f5fb4767,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/31 05:57,2016/11/11 05:45,2015/12/01 17:47,,1,334 days 12:10:00.000000000,"10 days, 23:48:00"
793,"docker
docker",https://github.com/docker/docker,f6ecfd620a48751124d3d1e590e9e83a437996ca,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/11 05:45,2016/11/18 06:54,2015/12/01 17:47,,1,345 days 11:58:00.000000000,"7 days, 1:09:00"
794,"docker
docker",https://github.com/docker/docker,155435b6ceeb05b2927ecc726216666b898b6459,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/11/18 06:54,2017/01/21 08:09,2015/12/01 17:47,,1,352 days 13:07:00.000000000,"64 days, 1:15:00"
795,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/01 22:33,2017/06/30 17:29,2015/12/01 17:47,,1,366 days 04:46:00.000000000,"210 days, 18:56:00"
796,"docker
docker",https://github.com/docker/docker,20e243780ef3b6a7d1debca6279e06b003895121,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/06 01:57,2017/02/05 16:28,2015/12/01 17:47,,1,370 days 08:10:00.000000000,"61 days, 14:31:00"
797,"docker
docker",https://github.com/docker/docker,d6e1cc32d309ee237342975388e729570343a974,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/06/30 17:29,2018/12/20 23:47,2015/12/01 17:47,,1,576 days 23:42:00.000000000,"538 days, 6:18:00"
798,"docker
docker",https://github.com/docker/docker,db22517fece05d8474e565cb4c6b0b538fab55b5,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2018/12/20 23:47,2019/09/10 08:19,2015/12/01 17:47,,1,1115 days 06:00:00.000000000,"263 days, 8:32:00"
799,"docker
docker",https://github.com/docker/docker,38e4ae3bca76b9558eb44993c4208b41114c4597,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/17 21:37,2019/09/26 18:59,2015/12/01 17:47,,1,1324 days 03:50:00.000000000,"70 days, 21:22:00"
801,"docker
docker",https://github.com/docker/docker,eaa9c85511620aa82f1876e1503604f591f00d23,docs/Dockerfile,docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",2014/01/15 11:23,2015/02/18 13:20,2013/08/30 08:49,2016/10/12 04:14,1,138 days 02:34:00.000000000,"399 days, 1:57:00"
802,"docker
docker",https://github.com/docker/docker,3e84b9e56abdff7230e84a1830085c79c73aa3b7,docs/Dockerfile,docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/18 13:20,2015/02/25 09:37,2013/08/30 08:49,2016/10/12 04:14,1,537 days 04:31:00.000000000,"6 days, 20:17:00"
806,"docker
docker",https://github.com/docker/docker,22c46af4b358cf3ec4f7af47c701064c00cf7de4,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/08/06 05:17,2015/06/14 01:21,2014/08/06 05:17,2018/06/03 01:46,1,0 days 00:00:00.000000000,"311 days, 20:04:00"
807,"docker
docker",https://github.com/docker/docker,cd44018856be421497a35d96f88dd0eec42fae43,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/06/14 01:21,2016/07/04 23:43,2014/08/06 05:17,2018/06/03 01:46,1,311 days 20:04:00.000000000,"386 days, 22:22:00"
808,"docker
docker",https://github.com/docker/docker,11280665b45d0ac9920d17abaf6a7328f2bc77d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/07/04 23:43,2017/11/28 11:21,2014/08/06 05:17,2018/06/03 01:46,1,698 days 18:26:00.000000000,"511 days, 11:38:00"
809,"docker
docker",https://github.com/docker/docker,b6eed3dca2e57705cb75895cad0b5337c79686d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/28 11:21,2018/05/19 03:28,2014/08/06 05:17,2018/06/03 01:46,1,1210 days 06:04:00.000000000,"171 days, 16:07:00"
815,"docker
docker",https://github.com/docker/docker,6e3068700fb32299cf733acd74785e29609b1974,testing/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",2013/09/22 04:14,2013/10/28 04:13,2013/09/08 02:30,2014/02/15 13:50,1,14 days 01:44:00.000000000,"35 days, 23:59:00"
816,"docker
docker",https://github.com/docker/docker,17172276366fc3114ae52eb6c83aafbec004d5f3,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/10/28 04:13,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,50 days 01:43:00.000000000,"10 days, 8:52:00"
817,"docker
docker",https://github.com/docker/docker,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/29 08:51,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,51 days 06:21:00.000000000,"9 days, 4:14:00"
819,"docker
docker",https://github.com/docker/docker,95f3f77fc417bbc55f03e869136deec27e26bc51,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/10/19 14:33,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,0 days 00:00:00.000000000,"18 days, 22:32:00"
820,"docker
docker",https://github.com/docker/docker,efb4c800a7c8167cf2202466a720c0fad7001a5d,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/30 11:37,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,10 days 21:04:00.000000000,"8 days, 1:28:00"
863,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,01ca82c640815b54476c6820dc414e70f7e521f7,docker/generate_dockerfile_jtreg.sh,docker/generate_dockerfile_jtreg.sh,"# TODO. change branch
",2018/01/03 15:49,2018/01/03 16:06,2018/01/03 15:49,2018/01/05 00:14,1,0 days 00:00:00.000000000,0:17:00
872,"docker-library
official-images",https://github.com/docker-library/official-images,447e88b53d1636a4641a6917b1b6c24f8bbf70a4,bashbrew/Dockerfile.release,bashbrew/Dockerfile.release,"#$os/}""; \
# TODO GOARM
",2017/05/03 06:36,2017/06/06 08:15,2017/05/03 06:36,2020/04/25 06:51,1,0 days 00:00:00.000000000,"34 days, 1:39:00"
873,"docker-library
official-images",https://github.com/docker-library/official-images,447e88b53d1636a4641a6917b1b6c24f8bbf70a4,bashbrew/Dockerfile.release,bashbrew/Dockerfile.release,"# TODO verify GPG signatures for manifest-tool releases
",2017/05/03 06:36,2017/09/12 07:52,2017/05/03 06:36,2020/04/25 06:51,1,0 days 00:00:00.000000000,"132 days, 1:16:00"
891,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,11/jdk/slim/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2018/04/15 01:18,,1,403 days 05:19:00.000000000,"113 days, 23:38:00"
892,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,11/jdk/slim/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2018/04/15 01:18,,1,403 days 05:19:00.000000000,1:57:00
895,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,11/jdk/Dockerfile,11/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2018/04/15 01:18,,1,403 days 05:19:00.000000000,"113 days, 23:38:00"
899,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,11/jre/slim/Dockerfile,11/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/07/17 08:32,2019/09/14 06:15,2019/07/17 08:32,,1,0 days 00:00:00.000000000,"58 days, 21:43:00"
903,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,11/jre/Dockerfile,11/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/07/17 08:32,2019/09/14 06:15,2018/04/15 01:18,,1,458 days 07:14:00.000000000,"58 days, 21:43:00"
909,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,Dockerfile-adopt-linux.template,Dockerfile-adopt-debian.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2019/05/23 06:37,,1,0 days 00:00:00.000000000,"113 days, 23:38:00"
913,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,8/jre/Dockerfile,8/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2014/10/10 21:26,,1,1685 days 09:11:00.000000000,"113 days, 23:38:00"
916,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,8/jdk/Dockerfile,8/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2014/07/19 08:19,,1,1768 days 22:18:00.000000000,"113 days, 23:38:00"
920,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2017/07/22 02:20,,1,670 days 04:17:00.000000000,"113 days, 23:38:00"
921,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2017/07/22 02:20,,1,670 days 04:17:00.000000000,1:57:00
927,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2017/07/22 02:20,,1,670 days 04:17:00.000000000,"113 days, 23:38:00"
928,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2017/07/22 02:20,,1,670 days 04:17:00.000000000,1:57:00
936,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,Dockerfile-adopt-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2019/05/23 06:37,,1,0 days 00:00:00.000000000,"113 days, 23:38:00"
938,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,Dockerfile-adopt-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2019/05/23 06:37,,1,0 days 00:00:00.000000000,1:57:00
948,"docker-library
docker",https://github.com/docker-library/docker,a98e0c42a96497670c36f4b2dcad2bcc81f18f35,1.7/dind/Dockerfile,17.09/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:54,2016/07/01 02:09,2015/08/07 04:54,2018/02/09 02:29,1,0 days 00:00:00.000000000,"328 days, 21:15:00"
952,"docker-library
docker",https://github.com/docker-library/docker,a98e0c42a96497670c36f4b2dcad2bcc81f18f35,1.8-rc/dind/Dockerfile,17.12/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:54,2016/07/01 02:09,2015/08/07 04:54,2018/05/11 01:18,1,0 days 00:00:00.000000000,"328 days, 21:15:00"
990,"docker-library
docker",https://github.com/docker-library/docker,e7e2e3119360567641d334f1d274952236632357,17.06-rc/Dockerfile,17.06/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/31 01:53,2017/06/08 08:31,2017/08/30 01:16,2017/09/28 01:49,1,-91 days +00:37:00.000000000,"8 days, 6:38:00"
1005,"docker-library
docker",https://github.com/docker-library/docker,2c75eb72ab98b95256be008aa93efdec289d96e8,17.03-rc/Dockerfile,17.03-rc/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/31 03:18,2017/06/08 08:31,2017/05/31 03:18,2017/06/29 09:41,1,0 days 00:00:00.000000000,"8 days, 5:13:00"
1010,"docker-library
docker",https://github.com/docker-library/docker,5a196cae40e2a0ab5050cf6d79b697e032352b24,17.03/Dockerfile,17.07/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/11 13:11,2017/06/08 08:31,2016/09/29 05:18,2017/10/19 01:49,1,224 days 07:53:00.000000000,"27 days, 19:20:00"
1013,"docker-library
docker",https://github.com/docker-library/docker,5a196cae40e2a0ab5050cf6d79b697e032352b24,17.05/Dockerfile,17.05/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/11 13:11,2017/06/08 08:31,2016/03/31 06:43,2017/06/29 09:41,1,406 days 06:28:00.000000000,"27 days, 19:20:00"
1023,"docker-library
docker",https://github.com/docker-library/docker,4d1f83ee6e25a5c2bb1c8a04de0643b1a964ba5e,1.12-rc/dind/Dockerfile,1.12-rc/dind/Dockerfile,"# TODO aufs-tools

",2016/06/17 03:03,2016/07/01 02:09,2016/09/29 05:18,2016/10/12 08:54,1,-105 days +21:45:00.000000000,"13 days, 23:06:00"
