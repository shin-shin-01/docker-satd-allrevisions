,project,gitPath,CommitID,Deleted CommitID,Dockerfile,LatestDockerfile,Comment,CommitDate,DeleteComment,(File) FirstCommit,(File) Deleted,isSATD,firstCommitからコメント追加までの日数,コメント追加からコメント削除までの日数,追加時ファイル,削除時ファイル
0,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,1efb3fc74b333e3317ec6fe2292d54cc491f5438,,3.8-beta/ubuntu/Dockerfile,3.8-rc/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/30 22:23,,2019/01/30 22:23,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/rabbitmq/blob/1efb3fc74b333e3317ec6fe2292d54cc491f5438/3.8-beta/ubuntu/Dockerfile,
1,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,1efb3fc74b333e3317ec6fe2292d54cc491f5438,,3.8-beta/alpine/Dockerfile,3.8-rc/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/30 22:23,,2019/01/30 22:23,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/rabbitmq/blob/1efb3fc74b333e3317ec6fe2292d54cc491f5438/3.8-beta/alpine/Dockerfile,
2,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,f22c0b266cfeb8cb6d776f9e6a961908c2557ad3,,3.7-rc/ubuntu/Dockerfile,3.7-rc/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/25 08:19,2020/08/28 01:11,2019/01/25 08:19,2020/08/28 01:11,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/rabbitmq/blob/f22c0b266cfeb8cb6d776f9e6a961908c2557ad3/3.7-rc/ubuntu/Dockerfile,
3,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,f22c0b266cfeb8cb6d776f9e6a961908c2557ad3,,3.7-rc/alpine/Dockerfile,3.7-rc/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/25 08:19,2020/08/28 01:11,2018/01/17 02:11,2020/08/28 01:11,1,373 days 06:08:00.000000000,ファイル削除,https://github.com/docker-library/rabbitmq/blob/f22c0b266cfeb8cb6d776f9e6a961908c2557ad3/3.7-rc/alpine/Dockerfile,
4,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,af5f6ff9a3916d89be6d190d562d247ae12ffa73,,3.8/ubuntu/Dockerfile,3.8/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/10/02 00:45,,2019/10/02 00:45,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/rabbitmq/blob/af5f6ff9a3916d89be6d190d562d247ae12ffa73/3.8/ubuntu/Dockerfile,
5,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,af5f6ff9a3916d89be6d190d562d247ae12ffa73,,3.8/alpine/Dockerfile,3.8/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/10/02 00:45,,2019/10/02 00:45,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/rabbitmq/blob/af5f6ff9a3916d89be6d190d562d247ae12ffa73/3.8/alpine/Dockerfile,
6,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,5bfde9806e24cfd84437197d5d171caef2adcae3,,3.7/alpine/Dockerfile,3.7/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/25 07:35,2020/08/28 01:11,2017/09/26 04:33,2020/08/28 01:11,1,486 days 03:02:00.000000000,ファイル削除,https://github.com/docker-library/rabbitmq/blob/5bfde9806e24cfd84437197d5d171caef2adcae3/3.7/alpine/Dockerfile,
7,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,1d70488e3336bd3f92226133b5077c48f5702c4b,57831db8b9aaaaeb781f9ad8ea771940297bd6cc,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO
# Start with new FROM
# Copy necessary artefacts from openssl-otp
# Install RabbitMQ
# Ensure RabbitMQ starts & rabbitmqctl works correctly
",2019/01/09 22:14,2019/01/10 02:21,2019/01/09 22:14,2020/08/28 01:11,1,0 days 00:00:00.000000000,4:07:00,https://github.com/docker-library/rabbitmq/blob/1d70488e3336bd3f92226133b5077c48f5702c4b/3.7/ubuntu/Dockerfile,https://github.com/docker-library/rabbitmq/blob/57831db8b9aaaaeb781f9ad8ea771940297bd6cc/3.7/ubuntu/Dockerfile
8,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,57831db8b9aaaaeb781f9ad8ea771940297bd6cc,f1e3be6aecba6db3cea294215d838c79b937943f,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO
# Install RabbitMQ
# Ensure RabbitMQ starts & rabbitmqctl works correctly
",2019/01/10 02:21,2019/01/14 20:48,2019/01/09 22:14,2020/08/28 01:11,1,0 days 04:07:00.000000000,"4 days, 18:27:00",https://github.com/docker-library/rabbitmq/blob/57831db8b9aaaaeb781f9ad8ea771940297bd6cc/3.7/ubuntu/Dockerfile,https://github.com/docker-library/rabbitmq/blob/f1e3be6aecba6db3cea294215d838c79b937943f/3.7/ubuntu/Dockerfile
9,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,f1e3be6aecba6db3cea294215d838c79b937943f,2f0a2a96fef956df0c6f30986cef7fdf79294599,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# Delete all src dirs to keep the final image size down, they add an extra 19MB
# TODO Could this be done better?
",2019/01/14 20:48,2019/01/15 20:13,2019/01/09 22:14,2020/08/28 01:11,1,4 days 22:34:00.000000000,23:25:00,https://github.com/docker-library/rabbitmq/blob/f1e3be6aecba6db3cea294215d838c79b937943f/3.7/ubuntu/Dockerfile,https://github.com/docker-library/rabbitmq/blob/2f0a2a96fef956df0c6f30986cef7fdf79294599/3.7/ubuntu/Dockerfile
10,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,f1e3be6aecba6db3cea294215d838c79b937943f,,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/14 20:48,2020/08/28 01:11,2019/01/09 22:14,2020/08/28 01:11,1,4 days 22:34:00.000000000,ファイル削除,https://github.com/docker-library/rabbitmq/blob/f1e3be6aecba6db3cea294215d838c79b937943f/3.7/ubuntu/Dockerfile,
11,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,21c07a969ba2bef48658cd05daca2d913d6549ce,c9da62615be192ec875ad35072a193007ce63cbc,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO @tianon why is this necessary?
# RUN ln -sf ""/usr/lib/rabbitmq/lib/rabbitmq_server-$RABBITMQ_VERSION/plugins"" /plugins

# Hint that the config, log & data (a.k.a. home dir) dirs should be separate volumes
",2019/01/14 21:50,2019/01/15 19:12,2019/01/09 22:14,2020/08/28 01:11,1,4 days 23:36:00.000000000,21:22:00,https://github.com/docker-library/rabbitmq/blob/21c07a969ba2bef48658cd05daca2d913d6549ce/3.7/ubuntu/Dockerfile,https://github.com/docker-library/rabbitmq/blob/c9da62615be192ec875ad35072a193007ce63cbc/3.7/ubuntu/Dockerfile
12,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,21c07a969ba2bef48658cd05daca2d913d6549ce,990eaf99031a9b8facf7da87959acfd403c43388,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# Add RabbitMQ to PATH, send all logs to TTY
# TODO @tianon is sbin a problem? Notice that I'm installing generic-unix, not the Debian package
",2019/01/14 21:50,2019/01/15 19:14,2019/01/09 22:14,2020/08/28 01:11,1,4 days 23:36:00.000000000,21:24:00,https://github.com/docker-library/rabbitmq/blob/21c07a969ba2bef48658cd05daca2d913d6549ce/3.7/ubuntu/Dockerfile,https://github.com/docker-library/rabbitmq/blob/990eaf99031a9b8facf7da87959acfd403c43388/3.7/ubuntu/Dockerfile
13,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,2f0a2a96fef956df0c6f30986cef7fdf79294599,5bfde9806e24cfd84437197d5d171caef2adcae3,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# Delete all src dirs to keep the final image size down, they add an extra 19MB
# TODO @dumbbell could this be done better, in the build/install phases?
",2019/01/15 20:13,2019/01/25 07:35,2019/01/09 22:14,2020/08/28 01:11,1,5 days 21:59:00.000000000,"9 days, 11:22:00",https://github.com/docker-library/rabbitmq/blob/2f0a2a96fef956df0c6f30986cef7fdf79294599/3.7/ubuntu/Dockerfile,https://github.com/docker-library/rabbitmq/blob/5bfde9806e24cfd84437197d5d171caef2adcae3/3.7/ubuntu/Dockerfile
14,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,f22c0b266cfeb8cb6d776f9e6a961908c2557ad3,,Dockerfile-alpine.template,Dockerfile-alpine.template,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/25 08:19,,2019/01/25 08:19,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/rabbitmq/blob/f22c0b266cfeb8cb6d776f9e6a961908c2557ad3/Dockerfile-alpine.template,
15,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,f22c0b266cfeb8cb6d776f9e6a961908c2557ad3,,Dockerfile-ubuntu.template,Dockerfile-ubuntu.template,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/25 08:19,,2019/01/25 08:19,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/rabbitmq/blob/f22c0b266cfeb8cb6d776f9e6a961908c2557ad3/Dockerfile-ubuntu.template,
16,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,77659a7555874cbbb2a1f7c32ce2f32bd81a7a41,,Dockerfile,3.6/debian/Dockerfile,"# get logs to stdout (thanks to http://www.superpumpup.com/docker-rabbitmq-stdout for inspiration)
# TODO figure out what we'd need to do to add ""(sasl_)?"" to this sed and have it work (""{""init terminating in do_boot"",{rabbit,failure_during_boot,{error,{cannot_log_to_tty,sasl_report_tty_h,not_installed}}}}"")
",2015/02/03 09:03,2019/01/15 09:22,2014/12/30 09:16,2019/01/15 09:22,1,34 days 23:47:00.000000000,ファイル削除,https://github.com/docker-library/rabbitmq/blob/77659a7555874cbbb2a1f7c32ce2f32bd81a7a41/Dockerfile,
17,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,820e85707b885356d3697fa89cfb2538b2e6c53d,,3.7.9/ubuntu/Dockerfile,3.7.9/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/02/13 11:01,2019/02/15 09:17,2019/02/13 11:01,2019/02/15 09:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/rabbitmq/blob/820e85707b885356d3697fa89cfb2538b2e6c53d/3.7.9/ubuntu/Dockerfile,
18,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,820e85707b885356d3697fa89cfb2538b2e6c53d,,3.7.9/alpine/Dockerfile,3.7.9/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/02/13 11:01,2019/02/15 09:17,2019/02/13 11:01,2019/02/15 09:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/rabbitmq/blob/820e85707b885356d3697fa89cfb2538b2e6c53d/3.7.9/alpine/Dockerfile,
19,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,820e85707b885356d3697fa89cfb2538b2e6c53d,,3.7.9/windows/Dockerfile,3.7.9/windows/Dockerfile,"# TODO verification
",2019/02/13 11:01,2019/02/15 09:17,2019/02/13 11:01,2019/02/15 09:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/rabbitmq/blob/820e85707b885356d3697fa89cfb2538b2e6c53d/3.7.9/windows/Dockerfile,
20,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,820e85707b885356d3697fa89cfb2538b2e6c53d,,3.7.9/windows/Dockerfile,3.7.9/windows/Dockerfile,"# TODO RABBITMQ_DATA_DIR

# TODO CMD [""rabbitmq-server""]
",2019/02/13 11:01,2019/02/15 09:17,2019/02/13 11:01,2019/02/15 09:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/rabbitmq/blob/820e85707b885356d3697fa89cfb2538b2e6c53d/3.7.9/windows/Dockerfile,
21,"docker-library
ruby",https://github.com/docker-library/ruby,281978ef87397763e377774740d82c8d87674ae9,,2.3/Dockerfile,2.3/jessie/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:20,2019/04/05 05:56,2015/12/25 23:46,2019/04/05 05:56,1,270 days 02:34:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/281978ef87397763e377774740d82c8d87674ae9/2.3/Dockerfile,
22,"docker-library
ruby",https://github.com/docker-library/ruby,281978ef87397763e377774740d82c8d87674ae9,,2.3/alpine/Dockerfile,2.3/alpine3.7/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:20,2019/04/05 05:56,2016/01/05 04:55,2019/04/05 05:56,1,259 days 21:25:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/281978ef87397763e377774740d82c8d87674ae9/2.3/alpine/Dockerfile,
23,"docker-library
ruby",https://github.com/docker-library/ruby,281978ef87397763e377774740d82c8d87674ae9,,2.3/slim/Dockerfile,2.3/jessie/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:20,2019/04/05 05:56,2015/12/25 23:46,2019/04/05 05:56,1,270 days 02:34:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/281978ef87397763e377774740d82c8d87674ae9/2.3/slim/Dockerfile,
24,"docker-library
ruby",https://github.com/docker-library/ruby,c9208def0c430de0144408e16140bd49254c4ca9,,2.4-rc/slim/Dockerfile,2.4/buster/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/12/06 03:31,2020/04/14 05:55,2016/12/06 03:31,2020/04/14 05:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/c9208def0c430de0144408e16140bd49254c4ca9/2.4-rc/slim/Dockerfile,
25,"docker-library
ruby",https://github.com/docker-library/ruby,98d971fb71e696bf6783388d0e2c4171c97f0459,,2.4/stretch/slim/Dockerfile,2.4/stretch/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/08/05 04:41,2020/04/14 05:55,2017/08/05 04:41,2020/04/14 05:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/98d971fb71e696bf6783388d0e2c4171c97f0459/2.4/stretch/slim/Dockerfile,
26,"docker-library
ruby",https://github.com/docker-library/ruby,c9208def0c430de0144408e16140bd49254c4ca9,,2.4-rc/Dockerfile,2.4/buster/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/12/06 03:31,2020/04/14 05:55,2016/12/06 03:31,2020/04/14 05:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/c9208def0c430de0144408e16140bd49254c4ca9/2.4-rc/Dockerfile,
27,"docker-library
ruby",https://github.com/docker-library/ruby,ee2df55c3abd3d0eccea5733f7041b733f8a5a62,,2.4/alpine3.7/Dockerfile,2.4/alpine3.11/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/12/07 20:22,2020/04/14 05:55,2017/12/07 20:22,2020/04/14 05:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/ee2df55c3abd3d0eccea5733f7041b733f8a5a62/2.4/alpine3.7/Dockerfile,
28,"docker-library
ruby",https://github.com/docker-library/ruby,a7a74d43ec21a6e589113be56024df083ff320ab,,2.4/alpine3.6/Dockerfile,2.4/alpine3.6/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/08/05 04:42,2018/10/20 06:01,2017/08/05 04:42,2018/10/20 06:01,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/a7a74d43ec21a6e589113be56024df083ff320ab/2.4/alpine3.6/Dockerfile,
29,"docker-library
ruby",https://github.com/docker-library/ruby,98d971fb71e696bf6783388d0e2c4171c97f0459,,2.4/stretch/Dockerfile,2.4/stretch/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/08/05 04:41,2020/04/14 05:55,2017/08/05 04:41,2020/04/14 05:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/98d971fb71e696bf6783388d0e2c4171c97f0459/2.4/stretch/Dockerfile,
30,"docker-library
ruby",https://github.com/docker-library/ruby,ee2df55c3abd3d0eccea5733f7041b733f8a5a62,,2.5-rc/alpine3.7/Dockerfile,2.5/alpine3.11/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/12/07 20:22,,2017/12/07 20:22,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/ee2df55c3abd3d0eccea5733f7041b733f8a5a62/2.5-rc/alpine3.7/Dockerfile,
31,"docker-library
ruby",https://github.com/docker-library/ruby,53ca276f03918cee2d9db367638be49725e5f152,,2.6-rc/stretch/Dockerfile,2.6/stretch/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/03/29 20:41,,2018/03/29 20:41,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/53ca276f03918cee2d9db367638be49725e5f152/2.6-rc/stretch/Dockerfile,
32,"docker-library
ruby",https://github.com/docker-library/ruby,53ca276f03918cee2d9db367638be49725e5f152,,2.6-rc/alpine3.7/Dockerfile,2.6/alpine3.11/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/03/29 20:41,,2018/03/29 20:41,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/53ca276f03918cee2d9db367638be49725e5f152/2.6-rc/alpine3.7/Dockerfile,
33,"docker-library
ruby",https://github.com/docker-library/ruby,d85cf42c5541e1827197397412480a61004d089f,,Dockerfile.template,Dockerfile-debian.template,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:14,,2016/02/04 05:11,,1,229 days 21:03:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/d85cf42c5541e1827197397412480a61004d089f/Dockerfile.template,
34,"docker-library
ruby",https://github.com/docker-library/ruby,bb5c7101e13cfa3632dfc21245b172c205d90353,,2.6-rc/alpine3.8/Dockerfile,2.6/alpine3.12/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/09/14 02:30,,2018/09/14 02:30,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/bb5c7101e13cfa3632dfc21245b172c205d90353/2.6-rc/alpine3.8/Dockerfile,
35,"docker-library
ruby",https://github.com/docker-library/ruby,d85cf42c5541e1827197397412480a61004d089f,,Dockerfile-alpine.template,Dockerfile-alpine.template,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:14,,2016/02/04 05:11,,1,229 days 21:03:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/d85cf42c5541e1827197397412480a61004d089f/Dockerfile-alpine.template,
36,"docker-library
ruby",https://github.com/docker-library/ruby,53ca276f03918cee2d9db367638be49725e5f152,,2.6-rc/stretch/slim/Dockerfile,2.6/stretch/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/03/29 20:41,,2018/03/29 20:41,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/53ca276f03918cee2d9db367638be49725e5f152/2.6-rc/stretch/slim/Dockerfile,
37,"docker-library
ruby",https://github.com/docker-library/ruby,486c3159dbd4d832ae30fedeba525b9b2425d060,,2.7-rc/alpine3.10/Dockerfile,2.7/alpine3.12/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/06/20 22:15,,2019/06/20 22:15,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/486c3159dbd4d832ae30fedeba525b9b2425d060/2.7-rc/alpine3.10/Dockerfile,
38,"docker-library
ruby",https://github.com/docker-library/ruby,b0c1b3c89142267912d8d0b532e206463c7d8ee0,,2.7-rc/stretch/slim/Dockerfile,2.7/buster/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/05/31 05:23,,2019/05/31 05:23,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/b0c1b3c89142267912d8d0b532e206463c7d8ee0/2.7-rc/stretch/slim/Dockerfile,
39,"docker-library
ruby",https://github.com/docker-library/ruby,06192e37c6daec1d2f2a516c04c7bcc97174b1e2,,2.5/alpine3.8/Dockerfile,2.5/alpine3.12/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/10/19 04:00,,2018/10/19 04:00,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/06192e37c6daec1d2f2a516c04c7bcc97174b1e2/2.5/alpine3.8/Dockerfile,
40,"docker-library
ruby",https://github.com/docker-library/ruby,6959194971f4f84e9bef2976ae6b8a469fa58dae,,2.5-rc/stretch/Dockerfile,2.5/stretch/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/10/22 08:56,,2017/10/22 08:56,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/6959194971f4f84e9bef2976ae6b8a469fa58dae/2.5-rc/stretch/Dockerfile,
41,"docker-library
ruby",https://github.com/docker-library/ruby,d85cf42c5541e1827197397412480a61004d089f,,Dockerfile-slim.template,Dockerfile-slim.template,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:14,,2016/02/04 05:11,,1,229 days 21:03:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/d85cf42c5541e1827197397412480a61004d089f/Dockerfile-slim.template,
42,"docker-library
ruby",https://github.com/docker-library/ruby,06192e37c6daec1d2f2a516c04c7bcc97174b1e2,,2.4/alpine3.8/Dockerfile,2.4/alpine3.10/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/10/19 04:00,2020/04/14 05:55,2018/10/19 04:00,2020/04/14 05:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/06192e37c6daec1d2f2a516c04c7bcc97174b1e2/2.4/alpine3.8/Dockerfile,
43,"docker-library
ruby",https://github.com/docker-library/ruby,6959194971f4f84e9bef2976ae6b8a469fa58dae,,2.5-rc/stretch/slim/Dockerfile,2.5/stretch/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/10/22 08:56,,2017/10/22 08:56,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/6959194971f4f84e9bef2976ae6b8a469fa58dae/2.5-rc/stretch/slim/Dockerfile,
44,"docker-library
ruby",https://github.com/docker-library/ruby,b0c1b3c89142267912d8d0b532e206463c7d8ee0,,2.7-rc/stretch/Dockerfile,2.7/buster/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/05/31 05:23,,2019/05/31 05:23,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/b0c1b3c89142267912d8d0b532e206463c7d8ee0/2.7-rc/stretch/Dockerfile,
45,"docker-library
ruby",https://github.com/docker-library/ruby,3b767347867328b98aefa48e60de95b2190f631e,,2.5/buster/slim/Dockerfile,2.5/buster/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/07/11 01:33,,2019/07/11 01:33,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/3b767347867328b98aefa48e60de95b2190f631e/2.5/buster/slim/Dockerfile,
46,"docker-library
ruby",https://github.com/docker-library/ruby,3b767347867328b98aefa48e60de95b2190f631e,,2.6/buster/Dockerfile,2.6/buster/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/07/11 01:33,,2019/07/11 01:33,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/3b767347867328b98aefa48e60de95b2190f631e/2.6/buster/Dockerfile,
47,"docker-library
ruby",https://github.com/docker-library/ruby,3b767347867328b98aefa48e60de95b2190f631e,,2.6/buster/slim/Dockerfile,2.6/buster/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/07/11 01:33,,2019/07/11 01:33,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/3b767347867328b98aefa48e60de95b2190f631e/2.6/buster/slim/Dockerfile,
48,"docker-library
ruby",https://github.com/docker-library/ruby,defb10adcd6dd2178be3cd9c884fd035b52d42fb,,2.7/alpine3.11/Dockerfile,2.7/alpine3.11/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2020/01/03 06:41,,2020/01/03 06:41,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/defb10adcd6dd2178be3cd9c884fd035b52d42fb/2.7/alpine3.11/Dockerfile,
49,"docker-library
ruby",https://github.com/docker-library/ruby,3b767347867328b98aefa48e60de95b2190f631e,,2.5/buster/Dockerfile,2.5/buster/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/07/11 01:33,,2019/07/11 01:33,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/ruby/blob/3b767347867328b98aefa48e60de95b2190f631e/2.5/buster/Dockerfile,
50,"docker-library
ruby",https://github.com/docker-library/ruby,bb5c7101e13cfa3632dfc21245b172c205d90353,,2.3/alpine3.8/Dockerfile,2.3/alpine3.8/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/09/14 02:30,2019/04/05 05:56,2018/09/14 02:30,2019/04/05 05:56,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/bb5c7101e13cfa3632dfc21245b172c205d90353/2.3/alpine3.8/Dockerfile,
51,"docker-library
ruby",https://github.com/docker-library/ruby,1f9102c4e5c9fb9842e09c3c50f6402ed583456a,,2.3/stretch/Dockerfile,2.3/stretch/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/10/26 03:12,2019/04/05 05:56,2017/10/26 03:12,2019/04/05 05:56,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/1f9102c4e5c9fb9842e09c3c50f6402ed583456a/2.3/stretch/Dockerfile,
52,"docker-library
ruby",https://github.com/docker-library/ruby,1f9102c4e5c9fb9842e09c3c50f6402ed583456a,,2.3/stretch/slim/Dockerfile,2.3/stretch/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/10/26 03:12,2019/04/05 05:56,2017/10/26 03:12,2019/04/05 05:56,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/1f9102c4e5c9fb9842e09c3c50f6402ed583456a/2.3/stretch/slim/Dockerfile,
53,"docker-library
ruby",https://github.com/docker-library/ruby,c9208def0c430de0144408e16140bd49254c4ca9,,2.4-rc/alpine/Dockerfile,2.4/alpine3.4/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/12/06 03:31,2018/05/23 06:42,2016/12/06 03:31,2018/05/23 06:42,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/c9208def0c430de0144408e16140bd49254c4ca9/2.4-rc/alpine/Dockerfile,
54,"docker-library
ruby",https://github.com/docker-library/ruby,281978ef87397763e377774740d82c8d87674ae9,,2.1/Dockerfile,2.1/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:20,2017/07/06 03:06,2014/08/13 05:16,2017/07/06 03:06,1,769 days 21:04:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/281978ef87397763e377774740d82c8d87674ae9/2.1/Dockerfile,
55,"docker-library
ruby",https://github.com/docker-library/ruby,281978ef87397763e377774740d82c8d87674ae9,,2.2/Dockerfile,2.2/jessie/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:20,2018/05/23 06:05,2014/12/18 06:50,2018/05/23 06:05,1,642 days 19:30:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/281978ef87397763e377774740d82c8d87674ae9/2.2/Dockerfile,
56,"docker-library
ruby",https://github.com/docker-library/ruby,281978ef87397763e377774740d82c8d87674ae9,,2.2/alpine/Dockerfile,2.2/alpine3.4/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:20,2018/05/23 06:05,2016/01/30 03:39,2018/05/23 06:05,1,234 days 22:41:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/281978ef87397763e377774740d82c8d87674ae9/2.2/alpine/Dockerfile,
57,"docker-library
ruby",https://github.com/docker-library/ruby,281978ef87397763e377774740d82c8d87674ae9,,2.2/slim/Dockerfile,2.2/jessie/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:20,2018/05/23 06:05,2015/01/24 08:59,2018/05/23 06:05,1,605 days 17:21:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/281978ef87397763e377774740d82c8d87674ae9/2.2/slim/Dockerfile,
58,"docker-library
ruby",https://github.com/docker-library/ruby,281978ef87397763e377774740d82c8d87674ae9,,2.1/alpine/Dockerfile,2.1/alpine/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:20,2017/07/06 03:06,2016/01/30 03:39,2017/07/06 03:06,1,234 days 22:41:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/281978ef87397763e377774740d82c8d87674ae9/2.1/alpine/Dockerfile,
59,"docker-library
ruby",https://github.com/docker-library/ruby,281978ef87397763e377774740d82c8d87674ae9,,2.1/slim/Dockerfile,2.1/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/09/21 02:20,2017/07/06 03:06,2015/01/17 10:29,2017/07/06 03:06,1,612 days 15:51:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/281978ef87397763e377774740d82c8d87674ae9/2.1/slim/Dockerfile,
60,"docker-library
ruby",https://github.com/docker-library/ruby,6959194971f4f84e9bef2976ae6b8a469fa58dae,,2.5-rc/alpine3.6/Dockerfile,2.5-rc/alpine3.6/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/10/22 08:56,2017/12/09 08:30,2017/10/22 08:56,2017/12/09 08:30,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/6959194971f4f84e9bef2976ae6b8a469fa58dae/2.5-rc/alpine3.6/Dockerfile,
61,"docker-library
ruby",https://github.com/docker-library/ruby,b0c1b3c89142267912d8d0b532e206463c7d8ee0,,2.7-rc/alpine3.9/Dockerfile,2.7-rc/alpine3.9/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/05/31 05:23,2019/06/26 07:19,2019/05/31 05:23,2019/06/26 07:19,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/ruby/blob/b0c1b3c89142267912d8d0b532e206463c7d8ee0/2.7-rc/alpine3.9/Dockerfile,
62,"moby
moby",https://github.com/moby/moby,66d24c2b44a076a6dda17dabe028da9acaa55deb,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/15 23:25,2016/02/13 01:56,2016/01/15 23:25,2018/05/12 04:28,1,0 days 00:00:00.000000000,"28 days, 2:31:00",https://github.com/moby/moby/blob/66d24c2b44a076a6dda17dabe028da9acaa55deb/Dockerfile.aarch64,https://github.com/moby/moby/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.aarch64
63,"moby
moby",https://github.com/moby/moby,66d24c2b44a076a6dda17dabe028da9acaa55deb,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/15 23:25,2016/09/08 00:02,2016/01/15 23:25,2018/05/12 04:28,1,0 days 00:00:00.000000000,"236 days, 0:37:00",https://github.com/moby/moby/blob/66d24c2b44a076a6dda17dabe028da9acaa55deb/Dockerfile.aarch64,https://github.com/moby/moby/blob/d0fa13a50201cdcef849b0c2ae67b0747222a1c6/Dockerfile.aarch64
64,"moby
moby",https://github.com/moby/moby,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2016/01/15 23:25,2018/05/12 04:28,1,28 days 02:31:00.000000000,"186 days, 4:22:00",https://github.com/moby/moby/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.aarch64,https://github.com/moby/moby/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile.aarch64
65,"moby
moby",https://github.com/moby/moby,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/12 02:39,2016/01/15 23:25,2018/05/12 04:28,1,139 days 22:44:00.000000000,"434 days, 4:30:00",https://github.com/moby/moby/blob/12e2c2687e5c1f47287aa3668c8853ee8b5d6706/Dockerfile.aarch64,https://github.com/moby/moby/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.aarch64
66,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2016/01/15 23:25,2018/05/12 04:28,1,164 days 07:13:00.000000000,"87 days, 11:49:00",https://github.com/moby/moby/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.aarch64,https://github.com/moby/moby/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile.aarch64
67,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2016/01/15 23:25,2018/05/12 04:28,1,250 days 08:53:00.000000000,"33 days, 16:36:00",https://github.com/moby/moby/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile.aarch64,https://github.com/moby/moby/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.aarch64
68,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2016/01/15 23:25,2018/05/12 04:28,1,250 days 11:50:00.000000000,"13 days, 18:00:00",https://github.com/moby/moby/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile.aarch64,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.aarch64
69,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2016/01/15 23:25,2018/05/12 04:28,1,252 days 01:55:00.000000000,1:17:00,https://github.com/moby/moby/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.aarch64,https://github.com/moby/moby/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile.aarch64
70,"moby
moby",https://github.com/moby/moby,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2016/01/15 23:25,2018/05/12 04:28,1,264 days 05:50:00.000000000,21:21:00,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.aarch64,https://github.com/moby/moby/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.aarch64
71,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,c07234707878412eaaeab252af19adac8cf25d6b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 10:30,2016/01/15 23:25,2018/05/12 04:28,1,277 days 09:05:00.000000000,"16 days, 2:00:00",https://github.com/moby/moby/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.aarch64,https://github.com/moby/moby/blob/c07234707878412eaaeab252af19adac8cf25d6b/Dockerfile.aarch64
72,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2016/01/15 23:25,2018/05/12 04:28,1,283 days 07:53:00.000000000,"169 days, 15:19:00",https://github.com/moby/moby/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.aarch64,https://github.com/moby/moby/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile.aarch64
73,"moby
moby",https://github.com/moby/moby,f2614f2107c838d014d31b806e3b8a9f1395cb2b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2016/01/15 23:25,2018/05/12 04:28,1,290 days 03:57:00.000000000,"8 days, 20:07:00",https://github.com/moby/moby/blob/f2614f2107c838d014d31b806e3b8a9f1395cb2b/Dockerfile.aarch64,https://github.com/moby/moby/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.aarch64
74,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2016/01/15 23:25,2018/05/12 04:28,1,320 days 23:08:00.000000000,"447 days, 13:47:00",https://github.com/moby/moby/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.aarch64,https://github.com/moby/moby/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.aarch64
75,"moby
moby",https://github.com/moby/moby,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2016/01/15 23:25,2018/05/12 04:28,1,518 days 09:53:00.000000000,ファイル削除,https://github.com/moby/moby/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.aarch64,
76,"moby
moby",https://github.com/moby/moby,d6e1cc32d309ee237342975388e729570343a974,,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2018/05/12 04:28,2016/01/15 23:25,2018/05/12 04:28,1,531 days 18:04:00.000000000,ファイル削除,https://github.com/moby/moby/blob/d6e1cc32d309ee237342975388e729570343a974/Dockerfile.aarch64,
77,"moby
moby",https://github.com/moby/moby,b529d1b0936b90ae14d584c73f7332919f8d76b7,,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2016/01/15 23:25,2018/05/12 04:28,1,763 days 04:26:00.000000000,ファイル削除,https://github.com/moby/moby/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile.aarch64,
78,"moby
moby",https://github.com/moby/moby,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,3be1a80f1ab2c07322cf54e4bce42914b797c3b1,Dockerfile.arm,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/11/05 23:38,2015/12/31 01:21,2015/11/05 23:38,2018/05/12 04:28,1,0 days 00:00:00.000000000,"55 days, 1:43:00",https://github.com/moby/moby/blob/b74fd0628aefbca3b77ffa5d52995c7af2f38d04/Dockerfile.arm,https://github.com/moby/moby/blob/3be1a80f1ab2c07322cf54e4bce42914b797c3b1/Dockerfile.armhf
79,"moby
moby",https://github.com/moby/moby,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.arm,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/11/05 23:38,2016/09/08 00:02,2015/11/05 23:38,2018/05/12 04:28,1,0 days 00:00:00.000000000,"307 days, 0:24:00",https://github.com/moby/moby/blob/b74fd0628aefbca3b77ffa5d52995c7af2f38d04/Dockerfile.arm,https://github.com/moby/moby/blob/d0fa13a50201cdcef849b0c2ae67b0747222a1c6/Dockerfile.armhf
80,"moby
moby",https://github.com/moby/moby,dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147,2d5ca742eb54e077861a29f201eb8fa38359cb1b,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2015/12/30 17:50,2016/01/12 03:25,2015/11/05 23:38,2018/05/12 04:28,1,54 days 18:12:00.000000000,"12 days, 9:35:00",https://github.com/moby/moby/blob/dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147/Dockerfile.armhf,https://github.com/moby/moby/blob/2d5ca742eb54e077861a29f201eb8fa38359cb1b/Dockerfile.armhf
81,"moby
moby",https://github.com/moby/moby,dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/12/30 17:50,2016/02/13 01:56,2015/11/05 23:38,2018/05/12 04:28,1,54 days 18:12:00.000000000,"44 days, 8:06:00",https://github.com/moby/moby/blob/dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147/Dockerfile.armhf,https://github.com/moby/moby/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.armhf
82,"moby
moby",https://github.com/moby/moby,dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147,2d5ca742eb54e077861a29f201eb8fa38359cb1b,Dockerfile.armhf,Dockerfile.armhf,"# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2015/12/30 17:50,2016/01/12 03:25,2015/11/05 23:38,2018/05/12 04:28,1,54 days 18:12:00.000000000,"12 days, 9:35:00",https://github.com/moby/moby/blob/dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147/Dockerfile.armhf,https://github.com/moby/moby/blob/2d5ca742eb54e077861a29f201eb8fa38359cb1b/Dockerfile.armhf
83,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,f4dfe15cbedd00668d1ad6fe26544cfb814f35ea,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/24 00:27,2015/11/05 23:38,2018/05/12 04:28,1,60 days 15:12:00.000000000,"78 days, 9:37:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.armhf,https://github.com/moby/moby/blob/f4dfe15cbedd00668d1ad6fe26544cfb814f35ea/Dockerfile.armhf
84,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,f4dfe15cbedd00668d1ad6fe26544cfb814f35ea,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/24 00:27,2015/11/05 23:38,2018/05/12 04:28,1,60 days 15:12:00.000000000,"78 days, 9:37:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.armhf,https://github.com/moby/moby/blob/f4dfe15cbedd00668d1ad6fe26544cfb814f35ea/Dockerfile.armhf
85,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,742a7d53f2961565f0baf43d6423383101be84c3,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/05 14:50,2016/01/14 11:44,2015/11/05 23:38,2018/05/12 04:28,1,60 days 15:12:00.000000000,"8 days, 20:54:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.armhf,https://github.com/moby/moby/blob/742a7d53f2961565f0baf43d6423383101be84c3/Dockerfile.armhf
86,"moby
moby",https://github.com/moby/moby,9560d941142b0bd17b0aa51e4d9bfe22354732ec,f4dfe15cbedd00668d1ad6fe26544cfb814f35ea,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/14 06:04,2016/03/24 00:27,2015/11/05 23:38,2018/05/12 04:28,1,69 days 06:26:00.000000000,"69 days, 18:23:00",https://github.com/moby/moby/blob/9560d941142b0bd17b0aa51e4d9bfe22354732ec/Dockerfile.armhf,https://github.com/moby/moby/blob/f4dfe15cbedd00668d1ad6fe26544cfb814f35ea/Dockerfile.armhf
87,"moby
moby",https://github.com/moby/moby,4357ed4a7363a1032edf93cf03232953c805184f,51620020aff6f31447a71a5a66af0066c524649a,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 04:37,2015/11/05 23:38,2018/05/12 04:28,1,75 days 21:15:00.000000000,"13 days, 7:44:00",https://github.com/moby/moby/blob/4357ed4a7363a1032edf93cf03232953c805184f/Dockerfile.armhf,https://github.com/moby/moby/blob/51620020aff6f31447a71a5a66af0066c524649a/Dockerfile.armhf
88,"moby
moby",https://github.com/moby/moby,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2015/11/05 23:38,2018/05/12 04:28,1,99 days 02:18:00.000000000,"186 days, 4:22:00",https://github.com/moby/moby/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.armhf,https://github.com/moby/moby/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile.armhf
89,"moby
moby",https://github.com/moby/moby,e6590b5fa2c442546d3dcfa3e0580eb024ede823,9b0d385975c80359b4cab2c75e4834fe803e12d5,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",2016/03/15 12:12,2016/05/27 22:54,2015/11/05 23:38,2018/05/12 04:28,1,130 days 12:34:00.000000000,"73 days, 10:42:00",https://github.com/moby/moby/blob/e6590b5fa2c442546d3dcfa3e0580eb024ede823/Dockerfile.armhf,https://github.com/moby/moby/blob/9b0d385975c80359b4cab2c75e4834fe803e12d5/Dockerfile.armhf
90,"moby
moby",https://github.com/moby/moby,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/12 02:39,2015/11/05 23:38,2018/05/12 04:28,1,210 days 22:31:00.000000000,"434 days, 4:30:00",https://github.com/moby/moby/blob/12e2c2687e5c1f47287aa3668c8853ee8b5d6706/Dockerfile.armhf,https://github.com/moby/moby/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.armhf
91,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2015/11/05 23:38,2018/05/12 04:28,1,235 days 07:00:00.000000000,"87 days, 11:49:00",https://github.com/moby/moby/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.armhf,https://github.com/moby/moby/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile.armhf
92,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2015/11/05 23:38,2018/05/12 04:28,1,321 days 08:40:00.000000000,"33 days, 16:36:00",https://github.com/moby/moby/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile.armhf,https://github.com/moby/moby/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.armhf
93,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2015/11/05 23:38,2018/05/12 04:28,1,321 days 11:37:00.000000000,"13 days, 18:00:00",https://github.com/moby/moby/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile.armhf,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.armhf
94,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2015/11/05 23:38,2018/05/12 04:28,1,323 days 01:42:00.000000000,1:17:00,https://github.com/moby/moby/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.armhf,https://github.com/moby/moby/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile.armhf
95,"moby
moby",https://github.com/moby/moby,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2015/11/05 23:38,2018/05/12 04:28,1,335 days 05:37:00.000000000,21:21:00,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.armhf,https://github.com/moby/moby/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.armhf
96,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2015/11/05 23:38,2018/05/12 04:28,1,348 days 08:52:00.000000000,"15 days, 17:17:00",https://github.com/moby/moby/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.armhf,https://github.com/moby/moby/blob/d58b47623b252803f5cd12f6d9ca584d1587ab22/Dockerfile.armhf
97,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2015/11/05 23:38,2018/05/12 04:28,1,354 days 07:40:00.000000000,"169 days, 15:19:00",https://github.com/moby/moby/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.armhf,https://github.com/moby/moby/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile.armhf
98,"moby
moby",https://github.com/moby/moby,f2614f2107c838d014d31b806e3b8a9f1395cb2b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2015/11/05 23:38,2018/05/12 04:28,1,361 days 03:44:00.000000000,"8 days, 20:07:00",https://github.com/moby/moby/blob/f2614f2107c838d014d31b806e3b8a9f1395cb2b/Dockerfile.armhf,https://github.com/moby/moby/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.armhf
99,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2015/11/05 23:38,2018/05/12 04:28,1,391 days 22:55:00.000000000,"447 days, 13:47:00",https://github.com/moby/moby/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.armhf,https://github.com/moby/moby/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.armhf
100,"moby
moby",https://github.com/moby/moby,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2015/11/05 23:38,2018/05/12 04:28,1,589 days 09:40:00.000000000,ファイル削除,https://github.com/moby/moby/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.armhf,
101,"moby
moby",https://github.com/moby/moby,d6e1cc32d309ee237342975388e729570343a974,,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2018/05/12 04:28,2015/11/05 23:38,2018/05/12 04:28,1,602 days 17:51:00.000000000,ファイル削除,https://github.com/moby/moby/blob/d6e1cc32d309ee237342975388e729570343a974/Dockerfile.armhf,
102,"moby
moby",https://github.com/moby/moby,b529d1b0936b90ae14d584c73f7332919f8d76b7,,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2015/11/05 23:38,2018/05/12 04:28,1,834 days 04:13:00.000000000,ファイル削除,https://github.com/moby/moby/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile.armhf,
103,"moby
moby",https://github.com/moby/moby,eacd2fd4daa03b1161d879e835705f7d35b871e3,c7089b4b469e0a536a260c136ef71bc95591fa51,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",2016/01/21 11:51,2016/01/31 13:50,2015/12/01 17:47,,1,50 days 18:04:00.000000000,"10 days, 1:59:00",https://github.com/moby/moby/blob/eacd2fd4daa03b1161d879e835705f7d35b871e3/Dockerfile.windows,https://github.com/moby/moby/blob/c7089b4b469e0a536a260c136ef71bc95591fa51/Dockerfile.windows
104,"moby
moby",https://github.com/moby/moby,c7089b4b469e0a536a260c136ef71bc95591fa51,83809de7d45d3465977b2f7a7cf585863cec445c,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",2016/01/31 13:50,2016/04/06 08:25,2015/12/01 17:47,,1,60 days 20:03:00.000000000,"65 days, 18:35:00",https://github.com/moby/moby/blob/c7089b4b469e0a536a260c136ef71bc95591fa51/Dockerfile.windows,https://github.com/moby/moby/blob/83809de7d45d3465977b2f7a7cf585863cec445c/Dockerfile.windows
105,"moby
moby",https://github.com/moby/moby,83809de7d45d3465977b2f7a7cf585863cec445c,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/06 08:25,2016/04/24 07:11,2015/12/01 17:47,,1,126 days 14:38:00.000000000,"17 days, 22:46:00",https://github.com/moby/moby/blob/83809de7d45d3465977b2f7a7cf585863cec445c/Dockerfile.windows,https://github.com/moby/moby/blob/4677f8036e8d090303ef76cbbe4f703d5c85d752/Dockerfile.windows
106,"moby
moby",https://github.com/moby/moby,4677f8036e8d090303ef76cbbe4f703d5c85d752,935d4d1c179259a262eb15fbf7e2bba2df26d740,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/24 07:11,2016/10/23 05:01,2015/12/01 17:47,,1,144 days 13:24:00.000000000,"181 days, 21:50:00",https://github.com/moby/moby/blob/4677f8036e8d090303ef76cbbe4f703d5c85d752/Dockerfile.windows,https://github.com/moby/moby/blob/935d4d1c179259a262eb15fbf7e2bba2df26d740/Dockerfile.windows
107,"moby
moby",https://github.com/moby/moby,9a19bd1b450a4f514d194d8a5571ab5be921464a,1f9beceacc916756bd5894f36306727ec9c6c008,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/21 09:02,2016/10/23 07:06,2015/12/01 17:47,,1,324 days 15:15:00.000000000,"1 day, 22:04:00",https://github.com/moby/moby/blob/9a19bd1b450a4f514d194d8a5571ab5be921464a/Dockerfile.windows,https://github.com/moby/moby/blob/1f9beceacc916756bd5894f36306727ec9c6c008/Dockerfile.windows
108,"moby
moby",https://github.com/moby/moby,929fa9ff8075d91624a90ecaae9c1fd31e50c294,5c9e38b73f4f5b6f2984436f6defd74a1eea9c9c,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/22 11:56,2016/11/03 15:08,2015/12/01 17:47,,1,325 days 18:09:00.000000000,"12 days, 3:12:00",https://github.com/moby/moby/blob/929fa9ff8075d91624a90ecaae9c1fd31e50c294/Dockerfile.windows,https://github.com/moby/moby/blob/5c9e38b73f4f5b6f2984436f6defd74a1eea9c9c/Dockerfile.windows
109,"moby
moby",https://github.com/moby/moby,5add621331d2790d04437cff0d936649f5fb4767,f87e6eb8305627e984f3d72c43837a833cc6de42,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/31 05:57,2016/11/11 07:28,2015/12/01 17:47,,1,334 days 12:10:00.000000000,"11 days, 1:31:00",https://github.com/moby/moby/blob/5add621331d2790d04437cff0d936649f5fb4767/Dockerfile.windows,https://github.com/moby/moby/blob/f87e6eb8305627e984f3d72c43837a833cc6de42/Dockerfile.windows
110,"moby
moby",https://github.com/moby/moby,f6ecfd620a48751124d3d1e590e9e83a437996ca,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/11 05:45,2016/12/01 22:33,2015/12/01 17:47,,1,345 days 11:58:00.000000000,"20 days, 16:48:00",https://github.com/moby/moby/blob/f6ecfd620a48751124d3d1e590e9e83a437996ca/Dockerfile.windows,https://github.com/moby/moby/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.windows
111,"moby
moby",https://github.com/moby/moby,155435b6ceeb05b2927ecc726216666b898b6459,96a2d9e7d2655a8374c2bdf326cd4a7224ce34bf,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/11/18 06:54,2016/12/06 20:10,2015/12/01 17:47,,1,352 days 13:07:00.000000000,"18 days, 13:16:00",https://github.com/moby/moby/blob/155435b6ceeb05b2927ecc726216666b898b6459/Dockerfile.windows,https://github.com/moby/moby/blob/96a2d9e7d2655a8374c2bdf326cd4a7224ce34bf/Dockerfile.windows
112,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,dffa5d6df2e51556edfbcebc4695fdbc0bcc1a90,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/01 22:33,2017/08/19 23:23,2015/12/01 17:47,,1,366 days 04:46:00.000000000,"261 days, 0:50:00",https://github.com/moby/moby/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.windows,https://github.com/moby/moby/blob/dffa5d6df2e51556edfbcebc4695fdbc0bcc1a90/Dockerfile.windows
113,"moby
moby",https://github.com/moby/moby,20e243780ef3b6a7d1debca6279e06b003895121,4af2555a353a8f407c49adb57877ead436af04be,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/06 01:57,2017/02/05 12:19,2015/12/01 17:47,,1,370 days 08:10:00.000000000,"61 days, 10:22:00",https://github.com/moby/moby/blob/20e243780ef3b6a7d1debca6279e06b003895121/Dockerfile.windows,https://github.com/moby/moby/blob/4af2555a353a8f407c49adb57877ead436af04be/Dockerfile.windows
114,"moby
moby",https://github.com/moby/moby,d6e1cc32d309ee237342975388e729570343a974,3bcf58236619f4c2902157ce4deaaaf44ca6f128,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/06/30 17:29,2019/01/05 04:58,2015/12/01 17:47,,1,576 days 23:42:00.000000000,"553 days, 11:29:00",https://github.com/moby/moby/blob/d6e1cc32d309ee237342975388e729570343a974/Dockerfile.windows,https://github.com/moby/moby/blob/3bcf58236619f4c2902157ce4deaaaf44ca6f128/Dockerfile.windows
115,"moby
moby",https://github.com/moby/moby,db22517fece05d8474e565cb4c6b0b538fab55b5,ecf91f0d7f90b2bd9fa048f2a800beaf613ac507,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2018/12/20 23:47,2019/09/10 08:19,2015/12/01 17:47,,1,1115 days 06:00:00.000000000,"263 days, 8:32:00",https://github.com/moby/moby/blob/db22517fece05d8474e565cb4c6b0b538fab55b5/Dockerfile.windows,https://github.com/moby/moby/blob/ecf91f0d7f90b2bd9fa048f2a800beaf613ac507/Dockerfile.windows
116,"moby
moby",https://github.com/moby/moby,38e4ae3bca76b9558eb44993c4208b41114c4597,83fd212f2cb71aae2f4a5a60c893c2bd01e59b72,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/17 21:37,2019/09/26 18:59,2015/12/01 17:47,,1,1324 days 03:50:00.000000000,"70 days, 21:22:00",https://github.com/moby/moby/blob/38e4ae3bca76b9558eb44993c4208b41114c4597/Dockerfile.windows,https://github.com/moby/moby/blob/83fd212f2cb71aae2f4a5a60c893c2bd01e59b72/Dockerfile.windows
117,"moby
moby",https://github.com/moby/moby,83fd212f2cb71aae2f4a5a60c893c2bd01e59b72,,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/09/26 18:59,,2015/12/01 17:47,,1,1395 days 01:12:00.000000000,削除されていません,https://github.com/moby/moby/blob/83fd212f2cb71aae2f4a5a60c893c2bd01e59b72/Dockerfile.windows,
118,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,4f8ca4797777ee9ed7fa6fbcc33080128c04051e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:47,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"246 days, 9:57:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.ppc64le,https://github.com/moby/moby/blob/4f8ca4797777ee9ed7fa6fbcc33080128c04051e/Dockerfile.ppc64le
119,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,b384fd6b1b2a379d857b4dc9971e441fe8aa5f37,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",2016/01/05 14:50,2016/02/13 10:36,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"38 days, 19:46:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.ppc64le,https://github.com/moby/moby/blob/b384fd6b1b2a379d857b4dc9971e441fe8aa5f37/Dockerfile.ppc64le
120,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,3b62a610ec81996ec3b1aa5422c62fa926ef4f04,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/20 05:51,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"45 days, 15:01:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.ppc64le,https://github.com/moby/moby/blob/3b62a610ec81996ec3b1aa5422c62fa926ef4f04/Dockerfile.ppc64le
121,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,2bcf50bdd41174b2519cab66b1fef0eb8bc78f9b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/15 03:21,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"69 days, 12:31:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.ppc64le,https://github.com/moby/moby/blob/2bcf50bdd41174b2519cab66b1fef0eb8bc78f9b/Dockerfile.ppc64le
122,"moby
moby",https://github.com/moby/moby,7465a3149f9f0f5c996e95198c46960a4b92c9c2,c39c7e6edf7d432730a84fa549b74203954b54c4,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/14 03:37,2016/01/28 02:36,2015/02/25 03:33,2018/05/12 04:28,1,323 days 00:04:00.000000000,"13 days, 22:59:00",https://github.com/moby/moby/blob/7465a3149f9f0f5c996e95198c46960a4b92c9c2/Dockerfile.ppc64le,https://github.com/moby/moby/blob/c39c7e6edf7d432730a84fa549b74203954b54c4/Dockerfile.ppc64le
123,"moby
moby",https://github.com/moby/moby,589c8a879fea758007a36bd0f00d07aa1000d0cb,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 04:51,2016/01/27 07:21,2015/02/25 03:33,2018/05/12 04:28,1,336 days 01:18:00.000000000,2:30:00,https://github.com/moby/moby/blob/589c8a879fea758007a36bd0f00d07aa1000d0cb/Dockerfile.ppc64le,https://github.com/moby/moby/blob/8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2/Dockerfile.ppc64le
124,"moby
moby",https://github.com/moby/moby,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,e5b1f29ac311d98b9f92b0211be2477d040e49e0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 07:21,2016/01/28 07:35,2015/02/25 03:33,2018/05/12 04:28,1,336 days 03:48:00.000000000,"1 day, 0:14:00",https://github.com/moby/moby/blob/8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2/Dockerfile.ppc64le,https://github.com/moby/moby/blob/e5b1f29ac311d98b9f92b0211be2477d040e49e0/Dockerfile.ppc64le
125,"moby
moby",https://github.com/moby/moby,71a1caddf0af51cfc79db04f80513b292adb0231,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/28 02:46,2016/02/26 06:40,2015/02/25 03:33,2018/05/12 04:28,1,336 days 23:13:00.000000000,"29 days, 3:54:00",https://github.com/moby/moby/blob/71a1caddf0af51cfc79db04f80513b292adb0231/Dockerfile.ppc64le,https://github.com/moby/moby/blob/84dc2d9e70f1ad4422732421e2d6b91274f4dfae/Dockerfile.ppc64le
126,"moby
moby",https://github.com/moby/moby,b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d,b35aaa9d1e284d17e8468ae1407e03405be4258c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",2016/02/09 19:24,2016/03/25 14:44,2015/02/25 03:33,2018/05/12 04:28,1,349 days 15:51:00.000000000,"44 days, 19:20:00",https://github.com/moby/moby/blob/b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d/Dockerfile.ppc64le,https://github.com/moby/moby/blob/b35aaa9d1e284d17e8468ae1407e03405be4258c/Dockerfile.ppc64le
127,"moby
moby",https://github.com/moby/moby,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2015/02/25 03:33,2018/05/12 04:28,1,352 days 22:23:00.000000000,"186 days, 4:22:00",https://github.com/moby/moby/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.ppc64le,https://github.com/moby/moby/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile.ppc64le
128,"moby
moby",https://github.com/moby/moby,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,78076d5cf9413476a8d4e27822b96fef7a55e055,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",2016/03/25 01:18,2016/03/29 16:58,2015/02/25 03:33,2018/05/12 04:28,1,393 days 21:45:00.000000000,"4 days, 15:40:00",https://github.com/moby/moby/blob/7ed3d265a4499ec03f10537fea0aac3ebaa0cec6/Dockerfile.ppc64le,https://github.com/moby/moby/blob/78076d5cf9413476a8d4e27822b96fef7a55e055/Dockerfile.ppc64le
129,"moby
moby",https://github.com/moby/moby,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/12 02:39,2015/02/25 03:33,2018/05/12 04:28,1,464 days 18:36:00.000000000,"434 days, 4:30:00",https://github.com/moby/moby/blob/12e2c2687e5c1f47287aa3668c8853ee8b5d6706/Dockerfile.ppc64le,https://github.com/moby/moby/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.ppc64le
130,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"87 days, 11:49:00",https://github.com/moby/moby/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.ppc64le,https://github.com/moby/moby/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile.ppc64le
131,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,9aa0c9a2142af249527aa301ddd7e21bc308c624,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",2016/06/28 06:38,2016/12/09 08:59,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"164 days, 2:21:00",https://github.com/moby/moby/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.ppc64le,https://github.com/moby/moby/blob/9aa0c9a2142af249527aa301ddd7e21bc308c624/Dockerfile.ppc64le
132,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2015/02/25 03:33,2018/05/12 04:28,1,575 days 04:45:00.000000000,"33 days, 16:36:00",https://github.com/moby/moby/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile.ppc64le,https://github.com/moby/moby/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.ppc64le
133,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2015/02/25 03:33,2018/05/12 04:28,1,575 days 07:42:00.000000000,"13 days, 18:00:00",https://github.com/moby/moby/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile.ppc64le,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.ppc64le
134,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2015/02/25 03:33,2018/05/12 04:28,1,576 days 21:47:00.000000000,1:17:00,https://github.com/moby/moby/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.ppc64le,https://github.com/moby/moby/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile.ppc64le
135,"moby
moby",https://github.com/moby/moby,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2015/02/25 03:33,2018/05/12 04:28,1,589 days 01:42:00.000000000,21:21:00,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.ppc64le,https://github.com/moby/moby/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.ppc64le
136,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2015/02/25 03:33,2018/05/12 04:28,1,602 days 04:57:00.000000000,"15 days, 17:17:00",https://github.com/moby/moby/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.ppc64le,https://github.com/moby/moby/blob/d58b47623b252803f5cd12f6d9ca584d1587ab22/Dockerfile.ppc64le
137,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2015/02/25 03:33,2018/05/12 04:28,1,608 days 03:45:00.000000000,"169 days, 15:19:00",https://github.com/moby/moby/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.ppc64le,https://github.com/moby/moby/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile.ppc64le
138,"moby
moby",https://github.com/moby/moby,f2614f2107c838d014d31b806e3b8a9f1395cb2b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2015/02/25 03:33,2018/05/12 04:28,1,614 days 23:49:00.000000000,"8 days, 20:07:00",https://github.com/moby/moby/blob/f2614f2107c838d014d31b806e3b8a9f1395cb2b/Dockerfile.ppc64le,https://github.com/moby/moby/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.ppc64le
139,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2015/02/25 03:33,2018/05/12 04:28,1,645 days 19:00:00.000000000,"447 days, 13:47:00",https://github.com/moby/moby/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.ppc64le,https://github.com/moby/moby/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.ppc64le
140,"moby
moby",https://github.com/moby/moby,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,843 days 05:45:00.000000000,ファイル削除,https://github.com/moby/moby/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.ppc64le,
141,"moby
moby",https://github.com/moby/moby,b529d1b0936b90ae14d584c73f7332919f8d76b7,,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,1088 days 00:18:00.000000000,ファイル削除,https://github.com/moby/moby/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile.ppc64le,
142,"moby
moby",https://github.com/moby/moby,5118f1431c9cae757d5e7c193ed85fc8fca3ae85,5d174e000f9e0d0d4d557367ab7685834d190a71,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/02/28 14:37,2015/03/12 23:05,2015/02/28 14:37,,1,0 days 00:00:00.000000000,"12 days, 8:28:00",https://github.com/moby/moby/blob/5118f1431c9cae757d5e7c193ed85fc8fca3ae85/Dockerfile.simple,https://github.com/moby/moby/blob/5d174e000f9e0d0d4d557367ab7685834d190a71/Dockerfile.simple
143,"moby
moby",https://github.com/moby/moby,ece4b5bde8ff6ea21b51275a69787191d12a5d65,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/03/10 09:24,2017/08/12 02:39,2015/02/28 14:37,,1,9 days 18:47:00.000000000,"885 days, 17:15:00",https://github.com/moby/moby/blob/ece4b5bde8ff6ea21b51275a69787191d12a5d65/Dockerfile.simple,https://github.com/moby/moby/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.simple
144,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/10/07 02:36,2015/02/28 14:37,,1,573 days 10:43:00.000000000,"13 days, 1:16:00",https://github.com/moby/moby/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.simple,https://github.com/moby/moby/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.simple
145,"moby
moby",https://github.com/moby/moby,7e12c3bb99381f117be73e05c187be6ce44280b9,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/30 03:02,2016/10/26 00:54,2015/02/28 14:37,,1,579 days 12:25:00.000000000,"25 days, 21:52:00",https://github.com/moby/moby/blob/7e12c3bb99381f117be73e05c187be6ce44280b9/Dockerfile.simple,https://github.com/moby/moby/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.simple
146,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/09 23:29,2015/02/28 14:37,,1,598 days 17:53:00.000000000,"21 days, 14:59:00",https://github.com/moby/moby/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.simple,https://github.com/moby/moby/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.simple
147,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2018/02/22 12:20,2015/02/28 14:37,,1,604 days 16:41:00.000000000,"485 days, 5:02:00",https://github.com/moby/moby/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.simple,https://github.com/moby/moby/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.simple
148,"moby
moby",https://github.com/moby/moby,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",2017/06/17 09:18,,2015/02/28 14:37,,1,839 days 18:41:00.000000000,削除されていません,https://github.com/moby/moby/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.simple,
149,"moby
moby",https://github.com/moby/moby,be8885525c4d1ef4a13bbd6396f60e8657bc5573,,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2017/12/08 10:10,,2015/02/28 14:37,,1,1013 days 19:33:00.000000000,削除されていません,https://github.com/moby/moby/blob/be8885525c4d1ef4a13bbd6396f60e8657bc5573/Dockerfile.simple,
150,"moby
moby",https://github.com/moby/moby,20d24a450cbf22b6d5268bc1fe76022fa554d6be,ccefe47897bdcef8b56bf54d4bd324989855f3b5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/08/27 07:51,2013/10/01 04:57,2013/06/22 11:42,,1,65 days 20:09:00.000000000,"34 days, 21:06:00",https://github.com/moby/moby/blob/20d24a450cbf22b6d5268bc1fe76022fa554d6be/Dockerfile,https://github.com/moby/moby/blob/ccefe47897bdcef8b56bf54d4bd324989855f3b5/Dockerfile
151,"moby
moby",https://github.com/moby/moby,fa806f26aff927eb0d98b41e79786ae98987da5b,47838051be695a4e74c80690ceef811dcd3ef62c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",2013/09/07 11:58,2013/09/07 12:14,2013/06/22 11:42,,1,77 days 00:16:00.000000000,0:16:00,https://github.com/moby/moby/blob/fa806f26aff927eb0d98b41e79786ae98987da5b/Dockerfile,https://github.com/moby/moby/blob/47838051be695a4e74c80690ceef811dcd3ef62c/Dockerfile
152,"moby
moby",https://github.com/moby/moby,47838051be695a4e74c80690ceef811dcd3ef62c,d757bd0904b71346b6c83622ae5685bc0c0d4349,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/07 12:14,2013/09/07 12:16,2013/06/22 11:42,,1,77 days 00:32:00.000000000,0:02:00,https://github.com/moby/moby/blob/47838051be695a4e74c80690ceef811dcd3ef62c/Dockerfile,https://github.com/moby/moby/blob/d757bd0904b71346b6c83622ae5685bc0c0d4349/Dockerfile
153,"moby
moby",https://github.com/moby/moby,ccefe47897bdcef8b56bf54d4bd324989855f3b5,ee7d9b0bdec40d02ba5ef25f557cca9444a19669,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/01 04:57,2013/10/16 09:31,2013/06/22 11:42,,1,100 days 17:15:00.000000000,"15 days, 4:34:00",https://github.com/moby/moby/blob/ccefe47897bdcef8b56bf54d4bd324989855f3b5/Dockerfile,https://github.com/moby/moby/blob/ee7d9b0bdec40d02ba5ef25f557cca9444a19669/Dockerfile
154,"moby
moby",https://github.com/moby/moby,1cbdaebaa1c2326e57945333420d25d6f77011d5,962a66cd36a615bb0a7cb9866becdccf4aa97839,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/05 11:25,2013/11/06 03:29,2013/06/22 11:42,,1,104 days 23:43:00.000000000,"31 days, 16:04:00",https://github.com/moby/moby/blob/1cbdaebaa1c2326e57945333420d25d6f77011d5/Dockerfile,https://github.com/moby/moby/blob/962a66cd36a615bb0a7cb9866becdccf4aa97839/Dockerfile
155,"moby
moby",https://github.com/moby/moby,31638ab2ad2a5380d447780f05f7aa078c9421f5,44fe8cbbd174b5d85d4a063ed270f6b9d2279b70,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2013/11/01 06:58,2014/03/14 02:46,2013/06/22 11:42,,1,131 days 19:16:00.000000000,"132 days, 19:48:00",https://github.com/moby/moby/blob/31638ab2ad2a5380d447780f05f7aa078c9421f5/Dockerfile,https://github.com/moby/moby/blob/44fe8cbbd174b5d85d4a063ed270f6b9d2279b70/Dockerfile
156,"moby
moby",https://github.com/moby/moby,62a81370fffb3cfdb15ef19702f0ea07ab2f4c36,523341d994265b9f72e4869f0fd094fd15f1b480,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",2013/12/19 15:06,2014/02/01 04:48,2013/06/22 11:42,,1,180 days 03:24:00.000000000,"43 days, 13:42:00",https://github.com/moby/moby/blob/62a81370fffb3cfdb15ef19702f0ea07ab2f4c36/Dockerfile,https://github.com/moby/moby/blob/523341d994265b9f72e4869f0fd094fd15f1b480/Dockerfile
157,"moby
moby",https://github.com/moby/moby,484a75f3549239d0489cb0ad518d79ed6783584a,8b9856dbd7a1981aaa76fcf0fc10b37d1141c9af,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2013/12/25 12:40,2015/11/13 02:51,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"687 days, 14:11:00",https://github.com/moby/moby/blob/484a75f3549239d0489cb0ad518d79ed6783584a/Dockerfile,https://github.com/moby/moby/blob/8b9856dbd7a1981aaa76fcf0fc10b37d1141c9af/Dockerfile
158,"moby
moby",https://github.com/moby/moby,44fe8cbbd174b5d85d4a063ed270f6b9d2279b70,b3ee9ac74e171e00f14027e39278013629e681b8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/03/14 02:46,2014/07/25 07:19,2013/06/22 11:42,,1,264 days 15:04:00.000000000,"133 days, 4:33:00",https://github.com/moby/moby/blob/44fe8cbbd174b5d85d4a063ed270f6b9d2279b70/Dockerfile,https://github.com/moby/moby/blob/b3ee9ac74e171e00f14027e39278013629e681b8/Dockerfile
159,"moby
moby",https://github.com/moby/moby,d0a0e91f1f8c3a43f04e7a58e37498124b283594,cd44018856be421497a35d96f88dd0eec42fae43,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/06/19 11:04,2015/06/14 01:21,2013/06/22 11:42,,1,361 days 23:22:00.000000000,"359 days, 14:17:00",https://github.com/moby/moby/blob/d0a0e91f1f8c3a43f04e7a58e37498124b283594/Dockerfile,https://github.com/moby/moby/blob/cd44018856be421497a35d96f88dd0eec42fae43/Dockerfile
160,"moby
moby",https://github.com/moby/moby,d5151ca8ab5d90300839c8572cb96577de4d6233,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2014/09/03 23:26,2016/09/08 00:02,2013/06/22 11:42,,1,438 days 11:44:00.000000000,"735 days, 0:36:00",https://github.com/moby/moby/blob/d5151ca8ab5d90300839c8572cb96577de4d6233/Dockerfile,https://github.com/moby/moby/blob/d0fa13a50201cdcef849b0c2ae67b0747222a1c6/Dockerfile
161,"moby
moby",https://github.com/moby/moby,47769994e5cba81a96529b418052afce7a6d51a3,df7a04f9a64fc7b8e528a3b99beb71b97b4b22d0,Dockerfile,Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",2015/01/23 07:42,2015/02/12 03:54,2013/06/22 11:42,,1,579 days 20:00:00.000000000,"19 days, 20:12:00",https://github.com/moby/moby/blob/47769994e5cba81a96529b418052afce7a6d51a3/Dockerfile,https://github.com/moby/moby/blob/df7a04f9a64fc7b8e528a3b99beb71b97b4b22d0/Dockerfile
162,"moby
moby",https://github.com/moby/moby,5d70a97b1fff8286220d2bef9ceb248401f046d1,72e9e12fa015d89c5184d6dda69497f1b090331d,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",2015/02/27 04:20,2015/05/01 02:29,2013/06/22 11:42,,1,614 days 16:38:00.000000000,"62 days, 22:09:00",https://github.com/moby/moby/blob/5d70a97b1fff8286220d2bef9ceb248401f046d1/Dockerfile,https://github.com/moby/moby/blob/72e9e12fa015d89c5184d6dda69497f1b090331d/Dockerfile
163,"moby
moby",https://github.com/moby/moby,6089e679a2fb2494fd3e599a9eab9327e6a509fc,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/05/02 08:42,2016/08/17 06:18,2013/06/22 11:42,,1,678 days 21:00:00.000000000,"472 days, 21:36:00",https://github.com/moby/moby/blob/6089e679a2fb2494fd3e599a9eab9327e6a509fc/Dockerfile,https://github.com/moby/moby/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile
164,"moby
moby",https://github.com/moby/moby,4357ed4a7363a1032edf93cf03232953c805184f,51620020aff6f31447a71a5a66af0066c524649a,Dockerfile,Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 04:37,2013/06/22 11:42,,1,942 days 09:11:00.000000000,"13 days, 7:44:00",https://github.com/moby/moby/blob/4357ed4a7363a1032edf93cf03232953c805184f/Dockerfile,https://github.com/moby/moby/blob/51620020aff6f31447a71a5a66af0066c524649a/Dockerfile
165,"moby
moby",https://github.com/moby/moby,e6590b5fa2c442546d3dcfa3e0580eb024ede823,9b0d385975c80359b4cab2c75e4834fe803e12d5,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",2016/03/15 12:12,2016/05/27 22:54,2013/06/22 11:42,,1,997 days 00:30:00.000000000,"73 days, 10:42:00",https://github.com/moby/moby/blob/e6590b5fa2c442546d3dcfa3e0580eb024ede823/Dockerfile,https://github.com/moby/moby/blob/9b0d385975c80359b4cab2c75e4834fe803e12d5/Dockerfile
166,"moby
moby",https://github.com/moby/moby,d8fef66b03c1ea8715470690efbd950033f7f628,a762ceace4e8c1c7ce4fb582789af9d8074be3e1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/05/12 23:52,2017/05/10 00:20,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"362 days, 0:28:00",https://github.com/moby/moby/blob/d8fef66b03c1ea8715470690efbd950033f7f628/Dockerfile,https://github.com/moby/moby/blob/a762ceace4e8c1c7ce4fb582789af9d8074be3e1/Dockerfile
167,"moby
moby",https://github.com/moby/moby,d8fef66b03c1ea8715470690efbd950033f7f628,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/05/12 23:52,2016/09/23 18:27,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"133 days, 18:35:00",https://github.com/moby/moby/blob/d8fef66b03c1ea8715470690efbd950033f7f628/Dockerfile,https://github.com/moby/moby/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile
168,"moby
moby",https://github.com/moby/moby,934328d8ea650bf8a9c3c719999ce2a1f5dd5df6,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/06/07 16:45,2016/11/09 23:29,2013/06/22 11:42,,1,1081 days 05:03:00.000000000,"155 days, 6:44:00",https://github.com/moby/moby/blob/934328d8ea650bf8a9c3c719999ce2a1f5dd5df6/Dockerfile,https://github.com/moby/moby/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile
169,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2013/06/22 11:42,,1,1187 days 20:36:00.000000000,"33 days, 16:36:00",https://github.com/moby/moby/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile,https://github.com/moby/moby/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile
170,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2013/06/22 11:42,,1,1187 days 23:33:00.000000000,"13 days, 18:00:00",https://github.com/moby/moby/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile
171,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2013/06/22 11:42,,1,1189 days 13:38:00.000000000,1:17:00,https://github.com/moby/moby/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile,https://github.com/moby/moby/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile
172,"moby
moby",https://github.com/moby/moby,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2013/06/22 11:42,,1,1201 days 17:33:00.000000000,21:21:00,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile,https://github.com/moby/moby/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile
173,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2013/06/22 11:42,,1,1214 days 20:48:00.000000000,"15 days, 17:17:00",https://github.com/moby/moby/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile,https://github.com/moby/moby/blob/d58b47623b252803f5cd12f6d9ca584d1587ab22/Dockerfile
174,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2013/06/22 11:42,,1,1220 days 19:36:00.000000000,"169 days, 15:19:00",https://github.com/moby/moby/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile,https://github.com/moby/moby/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile
175,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"447 days, 13:47:00",https://github.com/moby/moby/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile,https://github.com/moby/moby/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile
176,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/01 22:33,2017/08/12 02:39,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"253 days, 4:06:00",https://github.com/moby/moby/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile,https://github.com/moby/moby/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile
177,"moby
moby",https://github.com/moby/moby,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,34337db95d8eb85875509e341f452d8b555452b8,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/01/01 04:11,2017/05/06 07:03,2013/06/22 11:42,,1,1288 days 16:29:00.000000000,"125 days, 2:52:00",https://github.com/moby/moby/blob/1ecd8ed5186a161c1c43ae7c99b1c81b97188619/Dockerfile,https://github.com/moby/moby/blob/34337db95d8eb85875509e341f452d8b555452b8/Dockerfile
178,"moby
moby",https://github.com/moby/moby,bc82b139955c4a0edb20b070926469cceea0fbbb,ba49e8c49830b69c833edff3c393716da20f897a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/02/14 20:03,2013/06/22 11:42,,1,1455 days 21:36:00.000000000,"242 days, 10:45:00",https://github.com/moby/moby/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile,https://github.com/moby/moby/blob/ba49e8c49830b69c833edff3c393716da20f897a/Dockerfile
179,"moby
moby",https://github.com/moby/moby,d6e1cc32d309ee237342975388e729570343a974,a464a3d51f89566b3e480d66903056004576cc85,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2019/09/11 15:51,2013/06/22 11:42,,1,1469 days 05:47:00.000000000,"802 days, 22:22:00",https://github.com/moby/moby/blob/d6e1cc32d309ee237342975388e729570343a974/Dockerfile,https://github.com/moby/moby/blob/a464a3d51f89566b3e480d66903056004576cc85/Dockerfile
180,"moby
moby",https://github.com/moby/moby,d539038d9712daa44254412c6fcc6d78a14da691,,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2017/09/30 06:09,,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,削除されていません,https://github.com/moby/moby/blob/d539038d9712daa44254412c6fcc6d78a14da691/Dockerfile,
181,"moby
moby",https://github.com/moby/moby,d539038d9712daa44254412c6fcc6d78a14da691,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/09/30 06:09,2018/05/19 03:28,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"230 days, 21:19:00",https://github.com/moby/moby/blob/d539038d9712daa44254412c6fcc6d78a14da691/Dockerfile,https://github.com/moby/moby/blob/80bc8b4766cc808186af91930152d78afb22aef8/Dockerfile
182,"moby
moby",https://github.com/moby/moby,d539038d9712daa44254412c6fcc6d78a14da691,aac801ac751a9562698d2eb1de262f74476b93f9,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",2017/09/30 06:09,2019/04/21 05:34,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"567 days, 23:25:00",https://github.com/moby/moby/blob/d539038d9712daa44254412c6fcc6d78a14da691/Dockerfile,https://github.com/moby/moby/blob/aac801ac751a9562698d2eb1de262f74476b93f9/Dockerfile
183,"moby
moby",https://github.com/moby/moby,d539038d9712daa44254412c6fcc6d78a14da691,764160031e1dc165411ee6612a129bd26a9872b7,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",2017/09/30 06:09,2019/07/19 03:54,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"656 days, 21:45:00",https://github.com/moby/moby/blob/d539038d9712daa44254412c6fcc6d78a14da691/Dockerfile,https://github.com/moby/moby/blob/764160031e1dc165411ee6612a129bd26a9872b7/Dockerfile
184,"moby
moby",https://github.com/moby/moby,be8885525c4d1ef4a13bbd6396f60e8657bc5573,ec99bd6ab865f49da659cb6a2da3d805eff92ec1,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",2017/12/08 10:10,2018/09/07 17:35,2013/06/22 11:42,,1,1629 days 22:28:00.000000000,"273 days, 7:25:00",https://github.com/moby/moby/blob/be8885525c4d1ef4a13bbd6396f60e8657bc5573/Dockerfile,https://github.com/moby/moby/blob/ec99bd6ab865f49da659cb6a2da3d805eff92ec1/Dockerfile
185,"moby
moby",https://github.com/moby/moby,eaae7750efbc80314c5e028c4d43d3cd9e104edd,e3102d5055995a43b090dbc29342a1846a39edae,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",2018/01/05 11:58,2018/02/15 17:49,2013/06/22 11:42,,1,1658 days 00:16:00.000000000,"41 days, 5:51:00",https://github.com/moby/moby/blob/eaae7750efbc80314c5e028c4d43d3cd9e104edd/Dockerfile,https://github.com/moby/moby/blob/e3102d5055995a43b090dbc29342a1846a39edae/Dockerfile
186,"moby
moby",https://github.com/moby/moby,b529d1b0936b90ae14d584c73f7332919f8d76b7,00c1c604d08bbceb73a680d37d7428e6a4e986af,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/02/26 22:05,2013/06/22 11:42,,1,1700 days 16:09:00.000000000,"9 days, 18:14:00",https://github.com/moby/moby/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile,https://github.com/moby/moby/blob/00c1c604d08bbceb73a680d37d7428e6a4e986af/Dockerfile
187,"moby
moby",https://github.com/moby/moby,80bc8b4766cc808186af91930152d78afb22aef8,93f9b902af89f82367d750aa871d40f25ccd99ca,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2019/10/04 10:57,2013/06/22 11:42,,1,1791 days 15:46:00.000000000,"503 days, 7:29:00",https://github.com/moby/moby/blob/80bc8b4766cc808186af91930152d78afb22aef8/Dockerfile,https://github.com/moby/moby/blob/93f9b902af89f82367d750aa871d40f25ccd99ca/Dockerfile
188,"moby
moby",https://github.com/moby/moby,4e3ab9e9fbca682f75eb350c8ad4312282869a03,,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",2019/07/17 21:37,,2013/06/22 11:42,,1,2216 days 09:55:00.000000000,削除されていません,https://github.com/moby/moby/blob/4e3ab9e9fbca682f75eb350c8ad4312282869a03/Dockerfile,
189,"moby
moby",https://github.com/moby/moby,4e3ab9e9fbca682f75eb350c8ad4312282869a03,,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",2019/07/17 21:37,,2013/06/22 11:42,,1,2216 days 09:55:00.000000000,削除されていません,https://github.com/moby/moby/blob/4e3ab9e9fbca682f75eb350c8ad4312282869a03/Dockerfile,
190,"moby
moby",https://github.com/moby/moby,d1a3a17c671b9f89a90e59b58a92f04da0a4e3d9,,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",2020/01/15 23:22,,2013/06/22 11:42,,1,2398 days 11:40:00.000000000,削除されていません,https://github.com/moby/moby/blob/d1a3a17c671b9f89a90e59b58a92f04da0a4e3d9/Dockerfile,
191,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:02,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"246 days, 9:12:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.s390x,https://github.com/moby/moby/blob/d0fa13a50201cdcef849b0c2ae67b0747222a1c6/Dockerfile.s390x
192,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/13 01:56,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"38 days, 11:06:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.s390x,https://github.com/moby/moby/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.s390x
193,"moby
moby",https://github.com/moby/moby,91201678c6f58a5e46fe302bed9eb55a7ddcf693,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/08/24 01:01,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"231 days, 10:11:00",https://github.com/moby/moby/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.s390x,https://github.com/moby/moby/blob/08c16f8abfdc1f91119a35056c92d131b815fbf8/Dockerfile.s390x
194,"moby
moby",https://github.com/moby/moby,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2015/02/25 03:33,2018/05/12 04:28,1,352 days 22:23:00.000000000,"186 days, 4:22:00",https://github.com/moby/moby/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.s390x,https://github.com/moby/moby/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile.s390x
195,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/28 06:38,2017/08/12 02:39,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"409 days, 20:01:00",https://github.com/moby/moby/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.s390x,https://github.com/moby/moby/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.s390x
196,"moby
moby",https://github.com/moby/moby,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"87 days, 11:49:00",https://github.com/moby/moby/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.s390x,https://github.com/moby/moby/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile.s390x
197,"moby
moby",https://github.com/moby/moby,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2015/02/25 03:33,2018/05/12 04:28,1,575 days 04:45:00.000000000,"33 days, 16:36:00",https://github.com/moby/moby/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile.s390x,https://github.com/moby/moby/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.s390x
198,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2015/02/25 03:33,2018/05/12 04:28,1,575 days 07:42:00.000000000,"13 days, 18:00:00",https://github.com/moby/moby/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile.s390x,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.s390x
199,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2015/02/25 03:33,2018/05/12 04:28,1,576 days 21:47:00.000000000,1:17:00,https://github.com/moby/moby/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.s390x,https://github.com/moby/moby/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile.s390x
200,"moby
moby",https://github.com/moby/moby,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2015/02/25 03:33,2018/05/12 04:28,1,589 days 01:42:00.000000000,21:21:00,https://github.com/moby/moby/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.s390x,https://github.com/moby/moby/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.s390x
201,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2015/02/25 03:33,2018/05/12 04:28,1,602 days 04:57:00.000000000,"15 days, 17:17:00",https://github.com/moby/moby/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.s390x,https://github.com/moby/moby/blob/d58b47623b252803f5cd12f6d9ca584d1587ab22/Dockerfile.s390x
202,"moby
moby",https://github.com/moby/moby,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2015/02/25 03:33,2018/05/12 04:28,1,608 days 03:45:00.000000000,"169 days, 15:19:00",https://github.com/moby/moby/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.s390x,https://github.com/moby/moby/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile.s390x
203,"moby
moby",https://github.com/moby/moby,f2614f2107c838d014d31b806e3b8a9f1395cb2b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2015/02/25 03:33,2018/05/12 04:28,1,614 days 23:49:00.000000000,"8 days, 20:07:00",https://github.com/moby/moby/blob/f2614f2107c838d014d31b806e3b8a9f1395cb2b/Dockerfile.s390x,https://github.com/moby/moby/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.s390x
204,"moby
moby",https://github.com/moby/moby,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2015/02/25 03:33,2018/05/12 04:28,1,645 days 19:00:00.000000000,"447 days, 13:47:00",https://github.com/moby/moby/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.s390x,https://github.com/moby/moby/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.s390x
205,"moby
moby",https://github.com/moby/moby,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,843 days 05:45:00.000000000,ファイル削除,https://github.com/moby/moby/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.s390x,
206,"moby
moby",https://github.com/moby/moby,b529d1b0936b90ae14d584c73f7332919f8d76b7,,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,1088 days 00:18:00.000000000,ファイル削除,https://github.com/moby/moby/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile.s390x,
207,"moby
moby",https://github.com/moby/moby,22c46af4b358cf3ec4f7af47c701064c00cf7de4,cd44018856be421497a35d96f88dd0eec42fae43,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/08/06 05:17,2015/06/14 01:21,2014/08/06 05:17,2018/11/19 17:12,1,0 days 00:00:00.000000000,"311 days, 20:04:00",https://github.com/moby/moby/blob/22c46af4b358cf3ec4f7af47c701064c00cf7de4/builder/parser/testfiles/docker/Dockerfile,https://github.com/moby/moby/blob/cd44018856be421497a35d96f88dd0eec42fae43/builder/dockerfile/parser/testfiles/docker/Dockerfile
208,"moby
moby",https://github.com/moby/moby,22c46af4b358cf3ec4f7af47c701064c00cf7de4,,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2014/08/06 05:17,2018/11/19 17:12,2014/08/06 05:17,2018/11/19 17:12,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/moby/moby/blob/22c46af4b358cf3ec4f7af47c701064c00cf7de4/builder/parser/testfiles/docker/Dockerfile,
209,"moby
moby",https://github.com/moby/moby,cd44018856be421497a35d96f88dd0eec42fae43,11280665b45d0ac9920d17abaf6a7328f2bc77d9,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/06/14 01:21,2016/07/04 23:43,2014/08/06 05:17,2018/11/19 17:12,1,311 days 20:04:00.000000000,"386 days, 22:22:00",https://github.com/moby/moby/blob/cd44018856be421497a35d96f88dd0eec42fae43/builder/parser/testfiles/docker/Dockerfile,https://github.com/moby/moby/blob/11280665b45d0ac9920d17abaf6a7328f2bc77d9/builder/dockerfile/parser/testfiles/docker/Dockerfile
210,"moby
moby",https://github.com/moby/moby,11280665b45d0ac9920d17abaf6a7328f2bc77d9,b6eed3dca2e57705cb75895cad0b5337c79686d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/07/04 23:43,2017/11/28 11:21,2014/08/06 05:17,2018/11/19 17:12,1,698 days 18:26:00.000000000,"511 days, 11:38:00",https://github.com/moby/moby/blob/11280665b45d0ac9920d17abaf6a7328f2bc77d9/builder/dockerfile/parser/testfiles/docker/Dockerfile,https://github.com/moby/moby/blob/b6eed3dca2e57705cb75895cad0b5337c79686d9/builder/dockerfile/parser/testfiles/docker/Dockerfile
211,"moby
moby",https://github.com/moby/moby,b6eed3dca2e57705cb75895cad0b5337c79686d9,80bc8b4766cc808186af91930152d78afb22aef8,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/28 11:21,2018/05/19 03:28,2014/08/06 05:17,2018/11/19 17:12,1,1210 days 06:04:00.000000000,"171 days, 16:07:00",https://github.com/moby/moby/blob/b6eed3dca2e57705cb75895cad0b5337c79686d9/builder/dockerfile/parser/testfiles/docker/Dockerfile,https://github.com/moby/moby/blob/80bc8b4766cc808186af91930152d78afb22aef8/builder/dockerfile/parser/testfiles/docker/Dockerfile
212,"moby
moby",https://github.com/moby/moby,80bc8b4766cc808186af91930152d78afb22aef8,,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2018/11/19 17:12,2014/08/06 05:17,2018/11/19 17:12,1,1381 days 22:11:00.000000000,ファイル削除,https://github.com/moby/moby/blob/80bc8b4766cc808186af91930152d78afb22aef8/builder/dockerfile/parser/testfiles/docker/Dockerfile,
213,"moby
moby",https://github.com/moby/moby,be8885525c4d1ef4a13bbd6396f60e8657bc5573,,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2017/12/08 10:10,,2017/09/08 23:43,,1,90 days 10:27:00.000000000,削除されていません,https://github.com/moby/moby/blob/be8885525c4d1ef4a13bbd6396f60e8657bc5573/Dockerfile.e2e,
214,"moby
moby",https://github.com/moby/moby,934328d8ea650bf8a9c3c719999ce2a1f5dd5df6,,Dockerfile.solaris,Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",2016/06/07 16:45,2017/11/09 23:21,2016/06/07 16:45,2017/11/09 23:21,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/moby/moby/blob/934328d8ea650bf8a9c3c719999ce2a1f5dd5df6/Dockerfile.solaris,
215,"moby
moby",https://github.com/moby/moby,4357ed4a7363a1032edf93cf03232953c805184f,,Dockerfile.gccgo,Dockerfile.gccgo,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/09/27 07:17,2015/08/17 18:20,2016/09/27 07:17,1,156 days 02:33:00.000000000,ファイル削除,https://github.com/moby/moby/blob/4357ed4a7363a1032edf93cf03232953c805184f/Dockerfile.gccgo,
216,"moby
moby",https://github.com/moby/moby,eaa9c85511620aa82f1876e1503604f591f00d23,3e84b9e56abdff7230e84a1830085c79c73aa3b7,docs/Dockerfile,docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",2014/01/15 11:23,2015/02/18 13:20,2013/08/30 08:49,2017/02/01 06:41,1,138 days 02:34:00.000000000,"399 days, 1:57:00",https://github.com/moby/moby/blob/eaa9c85511620aa82f1876e1503604f591f00d23/docs/Dockerfile,https://github.com/moby/moby/blob/3e84b9e56abdff7230e84a1830085c79c73aa3b7/docs/Dockerfile
217,"moby
moby",https://github.com/moby/moby,3e84b9e56abdff7230e84a1830085c79c73aa3b7,,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",2015/02/18 13:20,2017/02/01 06:41,2013/08/30 08:49,2017/02/01 06:41,1,537 days 04:31:00.000000000,ファイル削除,https://github.com/moby/moby/blob/3e84b9e56abdff7230e84a1830085c79c73aa3b7/docs/Dockerfile,
218,"moby
moby",https://github.com/moby/moby,3e84b9e56abdff7230e84a1830085c79c73aa3b7,8d4459fffb5c1885b65506093538e059f0b51d90,docs/Dockerfile,docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/18 13:20,2015/02/25 09:37,2013/08/30 08:49,2017/02/01 06:41,1,537 days 04:31:00.000000000,"6 days, 20:17:00",https://github.com/moby/moby/blob/3e84b9e56abdff7230e84a1830085c79c73aa3b7/docs/Dockerfile,https://github.com/moby/moby/blob/8d4459fffb5c1885b65506093538e059f0b51d90/docs/Dockerfile
219,"moby
moby",https://github.com/moby/moby,8d4459fffb5c1885b65506093538e059f0b51d90,,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/25 09:37,2017/02/01 06:41,2013/08/30 08:49,2017/02/01 06:41,1,544 days 00:48:00.000000000,ファイル削除,https://github.com/moby/moby/blob/8d4459fffb5c1885b65506093538e059f0b51d90/docs/Dockerfile,
220,"moby
moby",https://github.com/moby/moby,95f3f77fc417bbc55f03e869136deec27e26bc51,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/10/19 14:33,2013/11/07 13:05,2013/10/19 14:33,2014/03/11 05:20,1,0 days 00:00:00.000000000,"18 days, 22:32:00",https://github.com/moby/moby/blob/95f3f77fc417bbc55f03e869136deec27e26bc51/hack/infrastructure/docker-ci/docker-test/Dockerfile,https://github.com/moby/moby/blob/249f76bebdb3c24ae0a59e3be7ae73fd1d88c065/hack/infrastructure/docker-ci/docker-test/Dockerfile
221,"moby
moby",https://github.com/moby/moby,efb4c800a7c8167cf2202466a720c0fad7001a5d,e37a7d49818581a17303aacd06baf1db6835cfd6,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/30 11:37,2013/11/01 01:42,2013/10/19 14:33,2014/03/11 05:20,1,10 days 21:04:00.000000000,"1 day, 14:05:00",https://github.com/moby/moby/blob/efb4c800a7c8167cf2202466a720c0fad7001a5d/hack/infrastructure/docker-ci/docker-test/Dockerfile,https://github.com/moby/moby/blob/e37a7d49818581a17303aacd06baf1db6835cfd6/hack/infrastructure/docker-ci/docker-test/Dockerfile
222,"moby
moby",https://github.com/moby/moby,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.4
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/11/07 13:05,2014/03/11 05:20,2013/10/19 14:33,2014/03/11 05:20,1,18 days 22:32:00.000000000,ファイル削除,https://github.com/moby/moby/blob/249f76bebdb3c24ae0a59e3be7ae73fd1d88c065/hack/infrastructure/docker-ci/docker-test/Dockerfile,
223,"moby
moby",https://github.com/moby/moby,6e3068700fb32299cf733acd74785e29609b1974,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,testing/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",2013/09/22 04:14,2013/11/07 13:05,2013/09/08 02:30,2014/03/11 05:20,1,14 days 01:44:00.000000000,"46 days, 8:51:00",https://github.com/moby/moby/blob/6e3068700fb32299cf733acd74785e29609b1974/testing/nightlyrelease/Dockerfile,https://github.com/moby/moby/blob/249f76bebdb3c24ae0a59e3be7ae73fd1d88c065/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
224,"moby
moby",https://github.com/moby/moby,17172276366fc3114ae52eb6c83aafbec004d5f3,d91e1453320dd8ff37f133b530e372c5b9bc1ec9,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/10/28 04:13,2013/10/30 05:44,2013/09/08 02:30,2014/03/11 05:20,1,50 days 01:43:00.000000000,"2 days, 1:31:00",https://github.com/moby/moby/blob/17172276366fc3114ae52eb6c83aafbec004d5f3/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,https://github.com/moby/moby/blob/d91e1453320dd8ff37f133b530e372c5b9bc1ec9/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
225,"moby
moby",https://github.com/moby/moby,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,d91e1453320dd8ff37f133b530e372c5b9bc1ec9,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/29 08:51,2013/10/30 05:44,2013/09/08 02:30,2014/03/11 05:20,1,51 days 06:21:00.000000000,20:53:00,https://github.com/moby/moby/blob/0cbeda73910d6d1d3336da93c5f94df0bdd5fa44/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,https://github.com/moby/moby/blob/d91e1453320dd8ff37f133b530e372c5b9bc1ec9/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
226,"moby
moby",https://github.com/moby/moby,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.6
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/11/07 13:05,2014/03/11 05:20,2013/09/08 02:30,2014/03/11 05:20,1,60 days 10:35:00.000000000,ファイル削除,https://github.com/moby/moby/blob/249f76bebdb3c24ae0a59e3be7ae73fd1d88c065/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,
227,"moby
moby",https://github.com/moby/moby,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,,Dockerfile.buildkit,Dockerfile.buildkit,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/moby/moby/blob/82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c/Dockerfile.buildkit,
228,"moby
moby",https://github.com/moby/moby,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,,Dockerfile.buildkit,Dockerfile.buildkit,"# Options for hack/validate/gometalinter
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/moby/moby/blob/82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c/Dockerfile.buildkit,
229,"moby
moby",https://github.com/moby/moby,878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30,,Dockerfile.centos,Dockerfile.centos,"# Wrap all commands in the ""docker-in-docker"" script to allow nested containers
#ENTRYPOINT [""hack/dind""]
",2015/04/01 05:58,2015/05/01 07:30,2015/04/01 05:58,2015/05/01 07:30,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/moby/moby/blob/878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30/Dockerfile.centos,
230,"docker
docker-ce",https://github.com/docker/docker-ce,4c0e9a70666324c751229e1afbe4b1015655fc84,f44591d6b90462fe0f2940c8c108467327ca50e0,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/11/05 23:38,2015/12/31 01:21,2015/11/05 23:38,2018/05/12 04:28,1,0 days 00:00:00.000000000,"55 days, 1:43:00",https://github.com/docker/docker-ce/blob/4c0e9a70666324c751229e1afbe4b1015655fc84/components/engine/Dockerfile.arm,https://github.com/docker/docker-ce/blob/f44591d6b90462fe0f2940c8c108467327ca50e0/components/engine/Dockerfile.armhf
231,"docker
docker-ce",https://github.com/docker/docker-ce,4c0e9a70666324c751229e1afbe4b1015655fc84,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/11/05 23:38,2016/09/08 00:02,2015/11/05 23:38,2018/05/12 04:28,1,0 days 00:00:00.000000000,"307 days, 0:24:00",https://github.com/docker/docker-ce/blob/4c0e9a70666324c751229e1afbe4b1015655fc84/components/engine/Dockerfile.arm,https://github.com/docker/docker-ce/blob/bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c/components/engine/Dockerfile.armhf
232,"docker
docker-ce",https://github.com/docker/docker-ce,6a60a419681de62ae7c641c83664bb7740fa908c,5cfea6b0eb46b0a4bc299639e6b785378b6660d3,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2015/12/30 17:50,2016/01/12 03:25,2015/11/05 23:38,2018/05/12 04:28,1,54 days 18:12:00.000000000,"12 days, 9:35:00",https://github.com/docker/docker-ce/blob/6a60a419681de62ae7c641c83664bb7740fa908c/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/5cfea6b0eb46b0a4bc299639e6b785378b6660d3/components/engine/Dockerfile.armhf
233,"docker
docker-ce",https://github.com/docker/docker-ce,6a60a419681de62ae7c641c83664bb7740fa908c,5cfea6b0eb46b0a4bc299639e6b785378b6660d3,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2015/12/30 17:50,2016/01/12 03:25,2015/11/05 23:38,2018/05/12 04:28,1,54 days 18:12:00.000000000,"12 days, 9:35:00",https://github.com/docker/docker-ce/blob/6a60a419681de62ae7c641c83664bb7740fa908c/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/5cfea6b0eb46b0a4bc299639e6b785378b6660d3/components/engine/Dockerfile.armhf
234,"docker
docker-ce",https://github.com/docker/docker-ce,6a60a419681de62ae7c641c83664bb7740fa908c,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/12/30 17:50,2016/02/13 01:56,2015/11/05 23:38,2018/05/12 04:28,1,54 days 18:12:00.000000000,"44 days, 8:06:00",https://github.com/docker/docker-ce/blob/6a60a419681de62ae7c641c83664bb7740fa908c/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/47313c7b66d30a236f172ff2c193b1cf5031fd0c/components/engine/Dockerfile.armhf
235,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,d1c6644a1676d962991c6ca4da46253ae95f2312,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/24 00:27,2015/11/05 23:38,2018/05/12 04:28,1,60 days 15:12:00.000000000,"78 days, 9:37:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/d1c6644a1676d962991c6ca4da46253ae95f2312/components/engine/Dockerfile.armhf
236,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,b4989a8d3c3dbfbaa91bca69ff36f9fa18f3ad28,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/05 14:50,2016/01/14 11:44,2015/11/05 23:38,2018/05/12 04:28,1,60 days 15:12:00.000000000,"8 days, 20:54:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/b4989a8d3c3dbfbaa91bca69ff36f9fa18f3ad28/components/engine/Dockerfile.armhf
237,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,d1c6644a1676d962991c6ca4da46253ae95f2312,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/24 00:27,2015/11/05 23:38,2018/05/12 04:28,1,60 days 15:12:00.000000000,"78 days, 9:37:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/d1c6644a1676d962991c6ca4da46253ae95f2312/components/engine/Dockerfile.armhf
238,"docker
docker-ce",https://github.com/docker/docker-ce,2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b,d1c6644a1676d962991c6ca4da46253ae95f2312,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/14 06:04,2016/03/24 00:27,2015/11/05 23:38,2018/05/12 04:28,1,69 days 06:26:00.000000000,"69 days, 18:23:00",https://github.com/docker/docker-ce/blob/2e1c787d5fe62e00f12ca8e2ca863cb85cd0373b/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/d1c6644a1676d962991c6ca4da46253ae95f2312/components/engine/Dockerfile.armhf
239,"docker
docker-ce",https://github.com/docker/docker-ce,4edafc3bc120137c52da71f041df222fcf88cb3d,5e084d01fea3e874cd77be21aab90b7d65b88977,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 04:37,2015/11/05 23:38,2018/05/12 04:28,1,75 days 21:15:00.000000000,"13 days, 7:44:00",https://github.com/docker/docker-ce/blob/4edafc3bc120137c52da71f041df222fcf88cb3d/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/5e084d01fea3e874cd77be21aab90b7d65b88977/components/engine/Dockerfile.armhf
240,"docker
docker-ce",https://github.com/docker/docker-ce,47313c7b66d30a236f172ff2c193b1cf5031fd0c,a0933c7d27b0559510dd97c75bc54edcd14f6130,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2015/11/05 23:38,2018/05/12 04:28,1,99 days 02:18:00.000000000,"186 days, 4:22:00",https://github.com/docker/docker-ce/blob/47313c7b66d30a236f172ff2c193b1cf5031fd0c/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/a0933c7d27b0559510dd97c75bc54edcd14f6130/components/engine/Dockerfile.armhf
241,"docker
docker-ce",https://github.com/docker/docker-ce,26d82a2984d6a5c6399fdff9a1624f18d0863df0,9b06540d329d2fcf96839faa3f760ce6b7cbfbe4,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",2016/03/15 12:12,2016/05/27 22:54,2015/11/05 23:38,2018/05/12 04:28,1,130 days 12:34:00.000000000,"73 days, 10:42:00",https://github.com/docker/docker-ce/blob/26d82a2984d6a5c6399fdff9a1624f18d0863df0/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/9b06540d329d2fcf96839faa3f760ce6b7cbfbe4/components/engine/Dockerfile.armhf
242,"docker
docker-ce",https://github.com/docker/docker-ce,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,9685380dbb006361ee592c9971ca3813a8e3b4ad,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/15 01:20,2015/11/05 23:38,2018/05/12 04:28,1,210 days 22:31:00.000000000,"437 days, 3:11:00",https://github.com/docker/docker-ce/blob/0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/9685380dbb006361ee592c9971ca3813a8e3b4ad/components/engine/Dockerfile.armhf
243,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,f04a024adba7d860a4efa598ccfb1f8749400461,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2015/11/05 23:38,2018/05/12 04:28,1,235 days 07:00:00.000000000,"87 days, 11:49:00",https://github.com/docker/docker-ce/blob/8ee0f568102e960349ad57df83db0d76223cd8c0/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/f04a024adba7d860a4efa598ccfb1f8749400461/components/engine/Dockerfile.armhf
244,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,ea2938292ab3607a9dab7b1c9143ff7b620b6599,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2015/11/05 23:38,2018/05/12 04:28,1,321 days 08:40:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker-ce/blob/58bc04a76a6821834e956fbce23b5c52ecfac918/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/ea2938292ab3607a9dab7b1c9143ff7b620b6599/components/engine/Dockerfile.armhf
245,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,391b6f94da2ef9268f60766b92216b482d48ac70,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2015/11/05 23:38,2018/05/12 04:28,1,321 days 11:37:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker-ce/blob/d08760316a8b777b01850352d326617c1c75b7ce/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile.armhf
246,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,da06cf8da01009b5e8f23eae96d661d30a9ba8f7,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2015/11/05 23:38,2018/05/12 04:28,1,323 days 01:42:00.000000000,1:17:00,https://github.com/docker/docker-ce/blob/75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/da06cf8da01009b5e8f23eae96d661d30a9ba8f7/components/engine/Dockerfile.armhf
247,"docker
docker-ce",https://github.com/docker/docker-ce,391b6f94da2ef9268f60766b92216b482d48ac70,9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2015/11/05 23:38,2018/05/12 04:28,1,335 days 05:37:00.000000000,21:21:00,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181/components/engine/Dockerfile.armhf
248,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2015/11/05 23:38,2018/05/12 04:28,1,348 days 08:52:00.000000000,"15 days, 17:17:00",https://github.com/docker/docker-ce/blob/44e77a4b4f79be08a5f353adfa2533a6aa8c845a/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/64d7644ec8c917daa03c0013a86bc5b7521b3a54/components/engine/Dockerfile.armhf
249,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,4de7d7962060bdf994c78b6a15e91e509833168c,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2015/11/05 23:38,2018/05/12 04:28,1,354 days 07:40:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker-ce/blob/515ebb7b5cb98dec83a7333059b6178ceb5fab78/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/4de7d7962060bdf994c78b6a15e91e509833168c/components/engine/Dockerfile.armhf
250,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,72ae55dd14ba3300f3b722866d86e0bc88f5dc39,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2015/11/05 23:38,2018/05/12 04:28,1,361 days 03:44:00.000000000,"8 days, 20:07:00",https://github.com/docker/docker-ce/blob/61646d77af8af895590b2069eefe76586bd48988/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/72ae55dd14ba3300f3b722866d86e0bc88f5dc39/components/engine/Dockerfile.armhf
251,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,c679327e8019ed4c68b1e7199eba5c9069fedca6,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/23 02:06,2015/11/05 23:38,2018/05/12 04:28,1,391 days 22:55:00.000000000,"448 days, 3:33:00",https://github.com/docker/docker-ce/blob/c9bef385b2510bc2b9624989e0f516152cd05c1f/components/engine/Dockerfile.armhf,https://github.com/docker/docker-ce/blob/c679327e8019ed4c68b1e7199eba5c9069fedca6/components/engine/Dockerfile.armhf
252,"docker
docker-ce",https://github.com/docker/docker-ce,9a9d90f97d60b698ff9786ef021b75881ee294f8,,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2015/11/05 23:38,2018/05/12 04:28,1,589 days 09:40:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/9a9d90f97d60b698ff9786ef021b75881ee294f8/components/engine/Dockerfile.armhf,
253,"docker
docker-ce",https://github.com/docker/docker-ce,605885e5180c01af497fba3c7bd25b605bb12341,,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2018/05/12 04:28,2015/11/05 23:38,2018/05/12 04:28,1,602 days 17:51:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/605885e5180c01af497fba3c7bd25b605bb12341/components/engine/Dockerfile.armhf,
254,"docker
docker-ce",https://github.com/docker/docker-ce,f11213a80093591f2a3ac7ed0bb5a03312ffb533,,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2015/11/05 23:38,2018/05/12 04:28,1,834 days 04:13:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/f11213a80093591f2a3ac7ed0bb5a03312ffb533/components/engine/Dockerfile.armhf,
255,"docker
docker-ce",https://github.com/docker/docker-ce,4030bbc684dc21272124af1e2ee7686de85ea342,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/15 23:25,2016/02/13 01:56,2016/01/15 23:25,2018/05/12 04:28,1,0 days 00:00:00.000000000,"28 days, 2:31:00",https://github.com/docker/docker-ce/blob/4030bbc684dc21272124af1e2ee7686de85ea342/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/47313c7b66d30a236f172ff2c193b1cf5031fd0c/components/engine/Dockerfile.aarch64
256,"docker
docker-ce",https://github.com/docker/docker-ce,4030bbc684dc21272124af1e2ee7686de85ea342,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/15 23:25,2016/09/08 00:02,2016/01/15 23:25,2018/05/12 04:28,1,0 days 00:00:00.000000000,"236 days, 0:37:00",https://github.com/docker/docker-ce/blob/4030bbc684dc21272124af1e2ee7686de85ea342/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c/components/engine/Dockerfile.aarch64
257,"docker
docker-ce",https://github.com/docker/docker-ce,47313c7b66d30a236f172ff2c193b1cf5031fd0c,a0933c7d27b0559510dd97c75bc54edcd14f6130,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2016/01/15 23:25,2018/05/12 04:28,1,28 days 02:31:00.000000000,"186 days, 4:22:00",https://github.com/docker/docker-ce/blob/47313c7b66d30a236f172ff2c193b1cf5031fd0c/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/a0933c7d27b0559510dd97c75bc54edcd14f6130/components/engine/Dockerfile.aarch64
258,"docker
docker-ce",https://github.com/docker/docker-ce,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,9685380dbb006361ee592c9971ca3813a8e3b4ad,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/15 01:20,2016/01/15 23:25,2018/05/12 04:28,1,139 days 22:44:00.000000000,"437 days, 3:11:00",https://github.com/docker/docker-ce/blob/0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/9685380dbb006361ee592c9971ca3813a8e3b4ad/components/engine/Dockerfile.aarch64
259,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,f04a024adba7d860a4efa598ccfb1f8749400461,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2016/01/15 23:25,2018/05/12 04:28,1,164 days 07:13:00.000000000,"87 days, 11:49:00",https://github.com/docker/docker-ce/blob/8ee0f568102e960349ad57df83db0d76223cd8c0/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/f04a024adba7d860a4efa598ccfb1f8749400461/components/engine/Dockerfile.aarch64
260,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,ea2938292ab3607a9dab7b1c9143ff7b620b6599,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2016/01/15 23:25,2018/05/12 04:28,1,250 days 08:53:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker-ce/blob/58bc04a76a6821834e956fbce23b5c52ecfac918/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/ea2938292ab3607a9dab7b1c9143ff7b620b6599/components/engine/Dockerfile.aarch64
261,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,391b6f94da2ef9268f60766b92216b482d48ac70,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2016/01/15 23:25,2018/05/12 04:28,1,250 days 11:50:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker-ce/blob/d08760316a8b777b01850352d326617c1c75b7ce/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile.aarch64
262,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,da06cf8da01009b5e8f23eae96d661d30a9ba8f7,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2016/01/15 23:25,2018/05/12 04:28,1,252 days 01:55:00.000000000,1:17:00,https://github.com/docker/docker-ce/blob/75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/da06cf8da01009b5e8f23eae96d661d30a9ba8f7/components/engine/Dockerfile.aarch64
263,"docker
docker-ce",https://github.com/docker/docker-ce,391b6f94da2ef9268f60766b92216b482d48ac70,9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2016/01/15 23:25,2018/05/12 04:28,1,264 days 05:50:00.000000000,21:21:00,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181/components/engine/Dockerfile.aarch64
264,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,7379675f650cee01e44ba324f7942bb4f88b975c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 10:30,2016/01/15 23:25,2018/05/12 04:28,1,277 days 09:05:00.000000000,"16 days, 2:00:00",https://github.com/docker/docker-ce/blob/44e77a4b4f79be08a5f353adfa2533a6aa8c845a/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/7379675f650cee01e44ba324f7942bb4f88b975c/components/engine/Dockerfile.aarch64
265,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,4de7d7962060bdf994c78b6a15e91e509833168c,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2016/01/15 23:25,2018/05/12 04:28,1,283 days 07:53:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker-ce/blob/515ebb7b5cb98dec83a7333059b6178ceb5fab78/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/4de7d7962060bdf994c78b6a15e91e509833168c/components/engine/Dockerfile.aarch64
266,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,72ae55dd14ba3300f3b722866d86e0bc88f5dc39,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2016/01/15 23:25,2018/05/12 04:28,1,290 days 03:57:00.000000000,"8 days, 20:07:00",https://github.com/docker/docker-ce/blob/61646d77af8af895590b2069eefe76586bd48988/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/72ae55dd14ba3300f3b722866d86e0bc88f5dc39/components/engine/Dockerfile.aarch64
267,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,c679327e8019ed4c68b1e7199eba5c9069fedca6,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/23 02:06,2016/01/15 23:25,2018/05/12 04:28,1,320 days 23:08:00.000000000,"448 days, 3:33:00",https://github.com/docker/docker-ce/blob/c9bef385b2510bc2b9624989e0f516152cd05c1f/components/engine/Dockerfile.aarch64,https://github.com/docker/docker-ce/blob/c679327e8019ed4c68b1e7199eba5c9069fedca6/components/engine/Dockerfile.aarch64
268,"docker
docker-ce",https://github.com/docker/docker-ce,9a9d90f97d60b698ff9786ef021b75881ee294f8,,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2016/01/15 23:25,2018/05/12 04:28,1,518 days 09:53:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/9a9d90f97d60b698ff9786ef021b75881ee294f8/components/engine/Dockerfile.aarch64,
269,"docker
docker-ce",https://github.com/docker/docker-ce,605885e5180c01af497fba3c7bd25b605bb12341,,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2018/05/12 04:28,2016/01/15 23:25,2018/05/12 04:28,1,531 days 18:04:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/605885e5180c01af497fba3c7bd25b605bb12341/components/engine/Dockerfile.aarch64,
270,"docker
docker-ce",https://github.com/docker/docker-ce,f11213a80093591f2a3ac7ed0bb5a03312ffb533,,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2016/01/15 23:25,2018/05/12 04:28,1,763 days 04:26:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/f11213a80093591f2a3ac7ed0bb5a03312ffb533/components/engine/Dockerfile.aarch64,
271,"docker
docker-ce",https://github.com/docker/docker-ce,da964dbf5841c6622b70fb36f7f7f523238f8cbb,d59617c5ea5eeb806584d50fefccb2cf96d55bd7,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",2016/01/21 11:51,2016/01/31 13:50,2015/12/01 17:47,,1,50 days 18:04:00.000000000,"10 days, 1:59:00",https://github.com/docker/docker-ce/blob/da964dbf5841c6622b70fb36f7f7f523238f8cbb/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/d59617c5ea5eeb806584d50fefccb2cf96d55bd7/components/engine/Dockerfile.windows
272,"docker
docker-ce",https://github.com/docker/docker-ce,d59617c5ea5eeb806584d50fefccb2cf96d55bd7,3d85a4f2409198283337355316bd24d838f4a308,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",2016/01/31 13:50,2016/04/06 08:25,2015/12/01 17:47,,1,60 days 20:03:00.000000000,"65 days, 18:35:00",https://github.com/docker/docker-ce/blob/d59617c5ea5eeb806584d50fefccb2cf96d55bd7/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/3d85a4f2409198283337355316bd24d838f4a308/components/engine/Dockerfile.windows
273,"docker
docker-ce",https://github.com/docker/docker-ce,3d85a4f2409198283337355316bd24d838f4a308,f103a2320b92c2f97054a105c922cbe726052440,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/06 08:25,2016/04/24 07:11,2015/12/01 17:47,,1,126 days 14:38:00.000000000,"17 days, 22:46:00",https://github.com/docker/docker-ce/blob/3d85a4f2409198283337355316bd24d838f4a308/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/f103a2320b92c2f97054a105c922cbe726052440/components/engine/Dockerfile.windows
274,"docker
docker-ce",https://github.com/docker/docker-ce,f103a2320b92c2f97054a105c922cbe726052440,04213eed5f9cb2206bd3ef735801aee685c01e82,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/24 07:11,2016/10/23 05:01,2015/12/01 17:47,,1,144 days 13:24:00.000000000,"181 days, 21:50:00",https://github.com/docker/docker-ce/blob/f103a2320b92c2f97054a105c922cbe726052440/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/04213eed5f9cb2206bd3ef735801aee685c01e82/components/engine/Dockerfile.windows
275,"docker
docker-ce",https://github.com/docker/docker-ce,87b7e2db815407d1f55fe8b929164c7ee4de73a6,c01f7998fd356e5d44604f4f3a99bf2019571036,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/21 09:02,2016/10/23 07:06,2015/12/01 17:47,,1,324 days 15:15:00.000000000,"1 day, 22:04:00",https://github.com/docker/docker-ce/blob/87b7e2db815407d1f55fe8b929164c7ee4de73a6/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/c01f7998fd356e5d44604f4f3a99bf2019571036/components/engine/Dockerfile.windows
276,"docker
docker-ce",https://github.com/docker/docker-ce,65f0de5a38b9ee4836d27d874134d76f06e4b690,a35b88e218b9173c4ab9ee0740260cc5c8766300,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/22 11:56,2016/11/03 15:08,2015/12/01 17:47,,1,325 days 18:09:00.000000000,"12 days, 3:12:00",https://github.com/docker/docker-ce/blob/65f0de5a38b9ee4836d27d874134d76f06e4b690/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/a35b88e218b9173c4ab9ee0740260cc5c8766300/components/engine/Dockerfile.windows
277,"docker
docker-ce",https://github.com/docker/docker-ce,1c00388b8a51103ea224beee5d4ce4c6070bab63,a99fd733adb195d781fe20502473ec8e4b0ef9c9,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/31 05:57,2016/11/11 07:28,2015/12/01 17:47,,1,334 days 12:10:00.000000000,"11 days, 1:31:00",https://github.com/docker/docker-ce/blob/1c00388b8a51103ea224beee5d4ce4c6070bab63/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/a99fd733adb195d781fe20502473ec8e4b0ef9c9/components/engine/Dockerfile.windows
278,"docker
docker-ce",https://github.com/docker/docker-ce,8afc09fa08b4fb45d4bb115d8d1f8d99b225038f,c9bef385b2510bc2b9624989e0f516152cd05c1f,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/11 05:45,2016/12/01 22:33,2015/12/01 17:47,,1,345 days 11:58:00.000000000,"20 days, 16:48:00",https://github.com/docker/docker-ce/blob/8afc09fa08b4fb45d4bb115d8d1f8d99b225038f/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/c9bef385b2510bc2b9624989e0f516152cd05c1f/components/engine/Dockerfile.windows
279,"docker
docker-ce",https://github.com/docker/docker-ce,05a05baa0e6c5464c512c08d8577a342e682b91c,3e9857033be81cbb5be055ff5103f6ebccf558da,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/11/18 06:54,2016/12/06 20:10,2015/12/01 17:47,,1,352 days 13:07:00.000000000,"18 days, 13:16:00",https://github.com/docker/docker-ce/blob/05a05baa0e6c5464c512c08d8577a342e682b91c/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/3e9857033be81cbb5be055ff5103f6ebccf558da/components/engine/Dockerfile.windows
280,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,9dabee631f26e569f8c4453405acfb2ee5ef4027,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/01 22:33,2017/08/31 08:44,2015/12/01 17:47,,1,366 days 04:46:00.000000000,"272 days, 10:11:00",https://github.com/docker/docker-ce/blob/c9bef385b2510bc2b9624989e0f516152cd05c1f/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/9dabee631f26e569f8c4453405acfb2ee5ef4027/components/engine/Dockerfile.windows
281,"docker
docker-ce",https://github.com/docker/docker-ce,ef878bf7f4d20b584fc725d3c494af5ba5c81d8c,ba62bc02bb8dce87e053de159df95be935adc2b8,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/06 01:57,2017/02/05 12:19,2015/12/01 17:47,,1,370 days 08:10:00.000000000,"61 days, 10:22:00",https://github.com/docker/docker-ce/blob/ef878bf7f4d20b584fc725d3c494af5ba5c81d8c/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/ba62bc02bb8dce87e053de159df95be935adc2b8/components/engine/Dockerfile.windows
282,"docker
docker-ce",https://github.com/docker/docker-ce,605885e5180c01af497fba3c7bd25b605bb12341,fda9ee4e31f2f97cfb3e2dcc225cae806d710ae9,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/06/30 17:29,2019/01/05 12:34,2015/12/01 17:47,,1,576 days 23:42:00.000000000,"553 days, 19:05:00",https://github.com/docker/docker-ce/blob/605885e5180c01af497fba3c7bd25b605bb12341/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/fda9ee4e31f2f97cfb3e2dcc225cae806d710ae9/components/engine/Dockerfile.windows
283,"docker
docker-ce",https://github.com/docker/docker-ce,8bae96ae89ba9f60f10b5a1244a256f5721659bd,d1ba4251b4b028a62efb204893a19ebfede3ee7a,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2018/12/20 23:47,2019/09/10 08:19,2015/12/01 17:47,,1,1115 days 06:00:00.000000000,"263 days, 8:32:00",https://github.com/docker/docker-ce/blob/8bae96ae89ba9f60f10b5a1244a256f5721659bd/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/d1ba4251b4b028a62efb204893a19ebfede3ee7a/components/engine/Dockerfile.windows
284,"docker
docker-ce",https://github.com/docker/docker-ce,fe75864cf817ed77fe119af2db6f40e2c88141a0,76c9258f75ff03200c430adb1e54d45cae81d9b8,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/17 21:37,2019/09/27 03:03,2015/12/01 17:47,,1,1324 days 03:50:00.000000000,"71 days, 5:26:00",https://github.com/docker/docker-ce/blob/fe75864cf817ed77fe119af2db6f40e2c88141a0/components/engine/Dockerfile.windows,https://github.com/docker/docker-ce/blob/76c9258f75ff03200c430adb1e54d45cae81d9b8/components/engine/Dockerfile.windows
285,"docker
docker-ce",https://github.com/docker/docker-ce,79bc167c15cf847a2930b00f70676d84a7c8cf86,,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/09/26 18:59,,2015/12/01 17:47,,1,1395 days 01:12:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/79bc167c15cf847a2930b00f70676d84a7c8cf86/components/engine/Dockerfile.windows,
286,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,36b081e8df55d1023fd7afd0a96d09f776551b7c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/15 03:21,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"69 days, 12:31:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/36b081e8df55d1023fd7afd0a96d09f776551b7c/components/engine/Dockerfile.ppc64le
287,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,0373049b19ef161841317152a063edbaeeef8359,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/20 05:51,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"45 days, 15:01:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/0373049b19ef161841317152a063edbaeeef8359/components/engine/Dockerfile.ppc64le
288,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,6b6c93e68e30af75a8095cecf481bc3a3a10a777,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:47,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"246 days, 9:57:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/6b6c93e68e30af75a8095cecf481bc3a3a10a777/components/engine/Dockerfile.ppc64le
289,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,9f086a0d578dadb60fa8d1e543703b50a811233e,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",2016/01/05 14:50,2016/02/13 10:36,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"38 days, 19:46:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/9f086a0d578dadb60fa8d1e543703b50a811233e/components/engine/Dockerfile.ppc64le
290,"docker
docker-ce",https://github.com/docker/docker-ce,37e5d77defe9377894fc3834775aa79216a4bbe6,0da34ddb6915a8457c0a93464d46a29f77aae5aa,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/14 03:37,2016/01/28 02:36,2015/02/25 03:33,2018/05/12 04:28,1,323 days 00:04:00.000000000,"13 days, 22:59:00",https://github.com/docker/docker-ce/blob/37e5d77defe9377894fc3834775aa79216a4bbe6/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/0da34ddb6915a8457c0a93464d46a29f77aae5aa/components/engine/Dockerfile.ppc64le
291,"docker
docker-ce",https://github.com/docker/docker-ce,81922b0d60f11309a91b709751532e0d05af6f96,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 04:51,2016/01/27 07:21,2015/02/25 03:33,2018/05/12 04:28,1,336 days 01:18:00.000000000,2:30:00,https://github.com/docker/docker-ce/blob/81922b0d60f11309a91b709751532e0d05af6f96/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/65cf98bf38f98ec09d8baf0de18ddbb3432a6040/components/engine/Dockerfile.ppc64le
292,"docker
docker-ce",https://github.com/docker/docker-ce,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,bcbfddb2b68dd6bf34dc304275c92cc0b95cc86d,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 07:21,2016/01/28 07:35,2015/02/25 03:33,2018/05/12 04:28,1,336 days 03:48:00.000000000,"1 day, 0:14:00",https://github.com/docker/docker-ce/blob/65cf98bf38f98ec09d8baf0de18ddbb3432a6040/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/bcbfddb2b68dd6bf34dc304275c92cc0b95cc86d/components/engine/Dockerfile.ppc64le
293,"docker
docker-ce",https://github.com/docker/docker-ce,ee8542db2e1591541098307d6f28f76bdb4e5435,534b2f07798d89f09baf2125f70d943544aa9269,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/28 02:46,2016/02/26 06:40,2015/02/25 03:33,2018/05/12 04:28,1,336 days 23:13:00.000000000,"29 days, 3:54:00",https://github.com/docker/docker-ce/blob/ee8542db2e1591541098307d6f28f76bdb4e5435/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/534b2f07798d89f09baf2125f70d943544aa9269/components/engine/Dockerfile.ppc64le
294,"docker
docker-ce",https://github.com/docker/docker-ce,0e8ffb200ceea9e020ed40374db0d25ed6195204,5d223a177b71f0772d66d0727aeea9b5ecc708b7,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",2016/02/09 19:24,2016/03/25 14:44,2015/02/25 03:33,2018/05/12 04:28,1,349 days 15:51:00.000000000,"44 days, 19:20:00",https://github.com/docker/docker-ce/blob/0e8ffb200ceea9e020ed40374db0d25ed6195204/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/5d223a177b71f0772d66d0727aeea9b5ecc708b7/components/engine/Dockerfile.ppc64le
295,"docker
docker-ce",https://github.com/docker/docker-ce,47313c7b66d30a236f172ff2c193b1cf5031fd0c,a0933c7d27b0559510dd97c75bc54edcd14f6130,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2015/02/25 03:33,2018/05/12 04:28,1,352 days 22:23:00.000000000,"186 days, 4:22:00",https://github.com/docker/docker-ce/blob/47313c7b66d30a236f172ff2c193b1cf5031fd0c/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/a0933c7d27b0559510dd97c75bc54edcd14f6130/components/engine/Dockerfile.ppc64le
296,"docker
docker-ce",https://github.com/docker/docker-ce,3b9321568d823fda6056789bfcd6aa022318841a,d37b8026f1000c2d58307a03a0e3e2480f268951,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",2016/03/25 01:18,2016/03/29 16:58,2015/02/25 03:33,2018/05/12 04:28,1,393 days 21:45:00.000000000,"4 days, 15:40:00",https://github.com/docker/docker-ce/blob/3b9321568d823fda6056789bfcd6aa022318841a/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/d37b8026f1000c2d58307a03a0e3e2480f268951/components/engine/Dockerfile.ppc64le
297,"docker
docker-ce",https://github.com/docker/docker-ce,0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7,9685380dbb006361ee592c9971ca3813a8e3b4ad,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/15 01:20,2015/02/25 03:33,2018/05/12 04:28,1,464 days 18:36:00.000000000,"437 days, 3:11:00",https://github.com/docker/docker-ce/blob/0f0bfaaffbe6ea65a078e7fa4d87fe13ff0b20f7/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/9685380dbb006361ee592c9971ca3813a8e3b4ad/components/engine/Dockerfile.ppc64le
298,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,2274bcf15c35735624c59802b7412d4f9114c75a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",2016/06/28 06:38,2016/12/09 08:59,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"164 days, 2:21:00",https://github.com/docker/docker-ce/blob/8ee0f568102e960349ad57df83db0d76223cd8c0/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/2274bcf15c35735624c59802b7412d4f9114c75a/components/engine/Dockerfile.ppc64le
299,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,f04a024adba7d860a4efa598ccfb1f8749400461,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"87 days, 11:49:00",https://github.com/docker/docker-ce/blob/8ee0f568102e960349ad57df83db0d76223cd8c0/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/f04a024adba7d860a4efa598ccfb1f8749400461/components/engine/Dockerfile.ppc64le
300,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,ea2938292ab3607a9dab7b1c9143ff7b620b6599,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2015/02/25 03:33,2018/05/12 04:28,1,575 days 04:45:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker-ce/blob/58bc04a76a6821834e956fbce23b5c52ecfac918/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/ea2938292ab3607a9dab7b1c9143ff7b620b6599/components/engine/Dockerfile.ppc64le
301,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,391b6f94da2ef9268f60766b92216b482d48ac70,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2015/02/25 03:33,2018/05/12 04:28,1,575 days 07:42:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker-ce/blob/d08760316a8b777b01850352d326617c1c75b7ce/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile.ppc64le
302,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,da06cf8da01009b5e8f23eae96d661d30a9ba8f7,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2015/02/25 03:33,2018/05/12 04:28,1,576 days 21:47:00.000000000,1:17:00,https://github.com/docker/docker-ce/blob/75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/da06cf8da01009b5e8f23eae96d661d30a9ba8f7/components/engine/Dockerfile.ppc64le
303,"docker
docker-ce",https://github.com/docker/docker-ce,391b6f94da2ef9268f60766b92216b482d48ac70,9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2015/02/25 03:33,2018/05/12 04:28,1,589 days 01:42:00.000000000,21:21:00,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181/components/engine/Dockerfile.ppc64le
304,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2015/02/25 03:33,2018/05/12 04:28,1,602 days 04:57:00.000000000,"15 days, 17:17:00",https://github.com/docker/docker-ce/blob/44e77a4b4f79be08a5f353adfa2533a6aa8c845a/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/64d7644ec8c917daa03c0013a86bc5b7521b3a54/components/engine/Dockerfile.ppc64le
305,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,4de7d7962060bdf994c78b6a15e91e509833168c,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2015/02/25 03:33,2018/05/12 04:28,1,608 days 03:45:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker-ce/blob/515ebb7b5cb98dec83a7333059b6178ceb5fab78/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/4de7d7962060bdf994c78b6a15e91e509833168c/components/engine/Dockerfile.ppc64le
306,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,72ae55dd14ba3300f3b722866d86e0bc88f5dc39,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2015/02/25 03:33,2018/05/12 04:28,1,614 days 23:49:00.000000000,"8 days, 20:07:00",https://github.com/docker/docker-ce/blob/61646d77af8af895590b2069eefe76586bd48988/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/72ae55dd14ba3300f3b722866d86e0bc88f5dc39/components/engine/Dockerfile.ppc64le
307,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,c679327e8019ed4c68b1e7199eba5c9069fedca6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/23 02:06,2015/02/25 03:33,2018/05/12 04:28,1,645 days 19:00:00.000000000,"448 days, 3:33:00",https://github.com/docker/docker-ce/blob/c9bef385b2510bc2b9624989e0f516152cd05c1f/components/engine/Dockerfile.ppc64le,https://github.com/docker/docker-ce/blob/c679327e8019ed4c68b1e7199eba5c9069fedca6/components/engine/Dockerfile.ppc64le
308,"docker
docker-ce",https://github.com/docker/docker-ce,9a9d90f97d60b698ff9786ef021b75881ee294f8,,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,843 days 05:45:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/9a9d90f97d60b698ff9786ef021b75881ee294f8/components/engine/Dockerfile.ppc64le,
309,"docker
docker-ce",https://github.com/docker/docker-ce,f11213a80093591f2a3ac7ed0bb5a03312ffb533,,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,1088 days 00:18:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/f11213a80093591f2a3ac7ed0bb5a03312ffb533/components/engine/Dockerfile.ppc64le,
310,"docker
docker-ce",https://github.com/docker/docker-ce,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2017/12/08 10:10,,2017/09/08 23:43,,1,90 days 10:27:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/91c1ef0fbfd3df31b78094b54869d49bf78afeeb/components/engine/Dockerfile.e2e,
311,"docker
docker-ce",https://github.com/docker/docker-ce,7e8cf8c782dd824f71cc9ae0b16f42fbd884e4da,10fceb4fae374ec6e4157214a4a11e3522a45240,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/02/28 14:37,2015/03/12 23:05,2015/02/28 14:37,,1,0 days 00:00:00.000000000,"12 days, 8:28:00",https://github.com/docker/docker-ce/blob/7e8cf8c782dd824f71cc9ae0b16f42fbd884e4da/components/engine/Dockerfile.simple,https://github.com/docker/docker-ce/blob/10fceb4fae374ec6e4157214a4a11e3522a45240/components/engine/Dockerfile.simple
312,"docker
docker-ce",https://github.com/docker/docker-ce,69c59ed353bb96d4a2d8e824d9cd643671dca178,1ebf5edb0d6211a8bd0a326f56405c8e7eb70e5b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/03/10 09:24,2017/08/15 01:37,2015/02/28 14:37,,1,9 days 18:47:00.000000000,"888 days, 16:13:00",https://github.com/docker/docker-ce/blob/69c59ed353bb96d4a2d8e824d9cd643671dca178/components/engine/Dockerfile.simple,https://github.com/docker/docker-ce/blob/1ebf5edb0d6211a8bd0a326f56405c8e7eb70e5b/components/engine/Dockerfile.simple
313,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/10/07 02:36,2015/02/28 14:37,,1,573 days 10:43:00.000000000,"13 days, 1:16:00",https://github.com/docker/docker-ce/blob/75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f/components/engine/Dockerfile.simple,https://github.com/docker/docker-ce/blob/9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181/components/engine/Dockerfile.simple
314,"docker
docker-ce",https://github.com/docker/docker-ce,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,ea2938292ab3607a9dab7b1c9143ff7b620b6599,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/30 03:02,2016/10/26 00:54,2015/02/28 14:37,,1,579 days 12:25:00.000000000,"25 days, 21:52:00",https://github.com/docker/docker-ce/blob/6e5d016ba60c4baa4931a603c3c7a407ca69b4bc/components/engine/Dockerfile.simple,https://github.com/docker/docker-ce/blob/ea2938292ab3607a9dab7b1c9143ff7b620b6599/components/engine/Dockerfile.simple
315,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,72ae55dd14ba3300f3b722866d86e0bc88f5dc39,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/09 23:29,2015/02/28 14:37,,1,598 days 17:53:00.000000000,"21 days, 14:59:00",https://github.com/docker/docker-ce/blob/44e77a4b4f79be08a5f353adfa2533a6aa8c845a/components/engine/Dockerfile.simple,https://github.com/docker/docker-ce/blob/72ae55dd14ba3300f3b722866d86e0bc88f5dc39/components/engine/Dockerfile.simple
316,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,c679327e8019ed4c68b1e7199eba5c9069fedca6,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2018/02/23 02:06,2015/02/28 14:37,,1,604 days 16:41:00.000000000,"485 days, 18:48:00",https://github.com/docker/docker-ce/blob/515ebb7b5cb98dec83a7333059b6178ceb5fab78/components/engine/Dockerfile.simple,https://github.com/docker/docker-ce/blob/c679327e8019ed4c68b1e7199eba5c9069fedca6/components/engine/Dockerfile.simple
317,"docker
docker-ce",https://github.com/docker/docker-ce,9a9d90f97d60b698ff9786ef021b75881ee294f8,,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",2017/06/17 09:18,,2015/02/28 14:37,,1,839 days 18:41:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/9a9d90f97d60b698ff9786ef021b75881ee294f8/components/engine/Dockerfile.simple,
318,"docker
docker-ce",https://github.com/docker/docker-ce,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2017/12/08 10:10,,2015/02/28 14:37,,1,1013 days 19:33:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/91c1ef0fbfd3df31b78094b54869d49bf78afeeb/components/engine/Dockerfile.simple,
319,"docker
docker-ce",https://github.com/docker/docker-ce,9327ca0955ad75cc1beb759784326304123c6b05,33aa0c2b851e1b478f1e55dc5e4a45cc8ceeac41,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/08/27 07:51,2013/10/01 04:57,2013/06/22 11:42,,1,65 days 20:09:00.000000000,"34 days, 21:06:00",https://github.com/docker/docker-ce/blob/9327ca0955ad75cc1beb759784326304123c6b05/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/33aa0c2b851e1b478f1e55dc5e4a45cc8ceeac41/components/engine/Dockerfile
320,"docker
docker-ce",https://github.com/docker/docker-ce,4d40f8afe3d3f7cdeee3f6ce2f4f8e725107508a,742fb66041377fe472ebc29508c4ea7f2140cb11,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",2013/09/07 11:58,2013/09/07 12:14,2013/06/22 11:42,,1,77 days 00:16:00.000000000,0:16:00,https://github.com/docker/docker-ce/blob/4d40f8afe3d3f7cdeee3f6ce2f4f8e725107508a/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/742fb66041377fe472ebc29508c4ea7f2140cb11/components/engine/Dockerfile
321,"docker
docker-ce",https://github.com/docker/docker-ce,742fb66041377fe472ebc29508c4ea7f2140cb11,970480b8f8cf2b4730078f136de5e7341571be25,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/07 12:14,2013/09/07 12:16,2013/06/22 11:42,,1,77 days 00:32:00.000000000,0:02:00,https://github.com/docker/docker-ce/blob/742fb66041377fe472ebc29508c4ea7f2140cb11/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/970480b8f8cf2b4730078f136de5e7341571be25/components/engine/Dockerfile
322,"docker
docker-ce",https://github.com/docker/docker-ce,33aa0c2b851e1b478f1e55dc5e4a45cc8ceeac41,8846d6c44348681e2964d46b103d645e3fd6b8dc,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/01 04:57,2013/10/16 09:31,2013/06/22 11:42,,1,100 days 17:15:00.000000000,"15 days, 4:34:00",https://github.com/docker/docker-ce/blob/33aa0c2b851e1b478f1e55dc5e4a45cc8ceeac41/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/8846d6c44348681e2964d46b103d645e3fd6b8dc/components/engine/Dockerfile
323,"docker
docker-ce",https://github.com/docker/docker-ce,952ac8a789e9be9ce4386ba3b14931a1c7d2e239,b64b038b0002d739898d6610cf45275358571fe9,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/05 11:25,2013/11/06 03:29,2013/06/22 11:42,,1,104 days 23:43:00.000000000,"31 days, 16:04:00",https://github.com/docker/docker-ce/blob/952ac8a789e9be9ce4386ba3b14931a1c7d2e239/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/b64b038b0002d739898d6610cf45275358571fe9/components/engine/Dockerfile
324,"docker
docker-ce",https://github.com/docker/docker-ce,5e4f4153669d1dbd07f53a9267d5d8677c107b51,c48adc6929a1f41dd086e3f9b91af773bbd2c8f2,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2013/11/01 06:58,2014/03/14 02:46,2013/06/22 11:42,,1,131 days 19:16:00.000000000,"132 days, 19:48:00",https://github.com/docker/docker-ce/blob/5e4f4153669d1dbd07f53a9267d5d8677c107b51/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/c48adc6929a1f41dd086e3f9b91af773bbd2c8f2/components/engine/Dockerfile
325,"docker
docker-ce",https://github.com/docker/docker-ce,a7fc58e1eb11c1f9c94348203647b59eff438fdf,df82456ed97e08ffa192c1f821acd9315295e7da,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO add linux/386 and linux/arm
",2013/12/19 15:06,2014/02/01 04:48,2013/06/22 11:42,,1,180 days 03:24:00.000000000,"43 days, 13:42:00",https://github.com/docker/docker-ce/blob/a7fc58e1eb11c1f9c94348203647b59eff438fdf/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/df82456ed97e08ffa192c1f821acd9315295e7da/components/engine/Dockerfile
326,"docker
docker-ce",https://github.com/docker/docker-ce,5ca82c401df8f0d035205702e2b6848d6afa3910,d41faf6fe1177b1ca296d996242f1d5ac854955c,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2013/12/25 12:40,2015/11/13 02:51,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"687 days, 14:11:00",https://github.com/docker/docker-ce/blob/5ca82c401df8f0d035205702e2b6848d6afa3910/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/d41faf6fe1177b1ca296d996242f1d5ac854955c/components/engine/Dockerfile
327,"docker
docker-ce",https://github.com/docker/docker-ce,c48adc6929a1f41dd086e3f9b91af773bbd2c8f2,6ae4c9014c47cc292e642bb85211b74fcf01af7a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/03/14 02:46,2014/07/25 07:19,2013/06/22 11:42,,1,264 days 15:04:00.000000000,"133 days, 4:33:00",https://github.com/docker/docker-ce/blob/c48adc6929a1f41dd086e3f9b91af773bbd2c8f2/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/6ae4c9014c47cc292e642bb85211b74fcf01af7a/components/engine/Dockerfile
328,"docker
docker-ce",https://github.com/docker/docker-ce,79b92f27aa2690e85e628e6ce11033bf0333d828,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/06/19 11:04,2015/06/14 01:21,2013/06/22 11:42,,1,361 days 23:22:00.000000000,"359 days, 14:17:00",https://github.com/docker/docker-ce/blob/79b92f27aa2690e85e628e6ce11033bf0333d828/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/57eb64c9c05d84f5c98a381a0d497a23b5a1792a/components/engine/Dockerfile
329,"docker
docker-ce",https://github.com/docker/docker-ce,e5820ed7e4b39ee86c7a0b12702340d6f296667a,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2014/09/03 23:26,2016/09/08 00:02,2013/06/22 11:42,,1,438 days 11:44:00.000000000,"735 days, 0:36:00",https://github.com/docker/docker-ce/blob/e5820ed7e4b39ee86c7a0b12702340d6f296667a/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c/components/engine/Dockerfile
330,"docker
docker-ce",https://github.com/docker/docker-ce,44958a29f2f2eb9a144b895146af552f1a3cd8d1,c13ff1800716bee309a2c14b666bc9422b710dbd,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",2015/01/23 07:42,2015/02/12 03:54,2013/06/22 11:42,,1,579 days 20:00:00.000000000,"19 days, 20:12:00",https://github.com/docker/docker-ce/blob/44958a29f2f2eb9a144b895146af552f1a3cd8d1/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/c13ff1800716bee309a2c14b666bc9422b710dbd/components/engine/Dockerfile
331,"docker
docker-ce",https://github.com/docker/docker-ce,92fbf90d6ef31c368fe9dd7f3b4617cc953c65fe,585f4aedc7e0a60950dcb3d1ac04f0a439f290db,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",2015/02/27 04:20,2015/05/01 02:29,2013/06/22 11:42,,1,614 days 16:38:00.000000000,"62 days, 22:09:00",https://github.com/docker/docker-ce/blob/92fbf90d6ef31c368fe9dd7f3b4617cc953c65fe/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/585f4aedc7e0a60950dcb3d1ac04f0a439f290db/components/engine/Dockerfile
332,"docker
docker-ce",https://github.com/docker/docker-ce,1d551c443cbd014f7310d20396a5a81de5ad47ee,a0933c7d27b0559510dd97c75bc54edcd14f6130,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/05/02 08:42,2016/08/17 06:18,2013/06/22 11:42,,1,678 days 21:00:00.000000000,"472 days, 21:36:00",https://github.com/docker/docker-ce/blob/1d551c443cbd014f7310d20396a5a81de5ad47ee/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/a0933c7d27b0559510dd97c75bc54edcd14f6130/components/engine/Dockerfile
333,"docker
docker-ce",https://github.com/docker/docker-ce,4edafc3bc120137c52da71f041df222fcf88cb3d,5e084d01fea3e874cd77be21aab90b7d65b88977,components/engine/Dockerfile,components/engine/Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 04:37,2013/06/22 11:42,,1,942 days 09:11:00.000000000,"13 days, 7:44:00",https://github.com/docker/docker-ce/blob/4edafc3bc120137c52da71f041df222fcf88cb3d/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/5e084d01fea3e874cd77be21aab90b7d65b88977/components/engine/Dockerfile
334,"docker
docker-ce",https://github.com/docker/docker-ce,26d82a2984d6a5c6399fdff9a1624f18d0863df0,9b06540d329d2fcf96839faa3f760ce6b7cbfbe4,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",2016/03/15 12:12,2016/05/27 22:54,2013/06/22 11:42,,1,997 days 00:30:00.000000000,"73 days, 10:42:00",https://github.com/docker/docker-ce/blob/26d82a2984d6a5c6399fdff9a1624f18d0863df0/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/9b06540d329d2fcf96839faa3f760ce6b7cbfbe4/components/engine/Dockerfile
335,"docker
docker-ce",https://github.com/docker/docker-ce,7bef93723c911971da6fbb12ad26697205d1a9e1,f04a024adba7d860a4efa598ccfb1f8749400461,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/05/12 23:52,2016/09/23 18:27,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"133 days, 18:35:00",https://github.com/docker/docker-ce/blob/7bef93723c911971da6fbb12ad26697205d1a9e1/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/f04a024adba7d860a4efa598ccfb1f8749400461/components/engine/Dockerfile
336,"docker
docker-ce",https://github.com/docker/docker-ce,7bef93723c911971da6fbb12ad26697205d1a9e1,8a093adb5cceabb305117fc020841db4bfec435e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/05/12 23:52,2017/05/10 00:20,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"362 days, 0:28:00",https://github.com/docker/docker-ce/blob/7bef93723c911971da6fbb12ad26697205d1a9e1/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/8a093adb5cceabb305117fc020841db4bfec435e/components/engine/Dockerfile
337,"docker
docker-ce",https://github.com/docker/docker-ce,6fb90ed484e943d6cfc0849ab8f7be32241c9802,72ae55dd14ba3300f3b722866d86e0bc88f5dc39,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/06/07 16:45,2016/11/09 23:29,2013/06/22 11:42,,1,1081 days 05:03:00.000000000,"155 days, 6:44:00",https://github.com/docker/docker-ce/blob/6fb90ed484e943d6cfc0849ab8f7be32241c9802/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/72ae55dd14ba3300f3b722866d86e0bc88f5dc39/components/engine/Dockerfile
338,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,ea2938292ab3607a9dab7b1c9143ff7b620b6599,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2013/06/22 11:42,,1,1187 days 20:36:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker-ce/blob/58bc04a76a6821834e956fbce23b5c52ecfac918/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/ea2938292ab3607a9dab7b1c9143ff7b620b6599/components/engine/Dockerfile
339,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,391b6f94da2ef9268f60766b92216b482d48ac70,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2013/06/22 11:42,,1,1187 days 23:33:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker-ce/blob/d08760316a8b777b01850352d326617c1c75b7ce/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile
340,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,da06cf8da01009b5e8f23eae96d661d30a9ba8f7,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2013/06/22 11:42,,1,1189 days 13:38:00.000000000,1:17:00,https://github.com/docker/docker-ce/blob/75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/da06cf8da01009b5e8f23eae96d661d30a9ba8f7/components/engine/Dockerfile
341,"docker
docker-ce",https://github.com/docker/docker-ce,391b6f94da2ef9268f60766b92216b482d48ac70,9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2013/06/22 11:42,,1,1201 days 17:33:00.000000000,21:21:00,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181/components/engine/Dockerfile
342,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2013/06/22 11:42,,1,1214 days 20:48:00.000000000,"15 days, 17:17:00",https://github.com/docker/docker-ce/blob/44e77a4b4f79be08a5f353adfa2533a6aa8c845a/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/64d7644ec8c917daa03c0013a86bc5b7521b3a54/components/engine/Dockerfile
343,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,4de7d7962060bdf994c78b6a15e91e509833168c,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2013/06/22 11:42,,1,1220 days 19:36:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker-ce/blob/515ebb7b5cb98dec83a7333059b6178ceb5fab78/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/4de7d7962060bdf994c78b6a15e91e509833168c/components/engine/Dockerfile
344,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,9685380dbb006361ee592c9971ca3813a8e3b4ad,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/01 22:33,2017/08/15 01:20,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"256 days, 2:47:00",https://github.com/docker/docker-ce/blob/c9bef385b2510bc2b9624989e0f516152cd05c1f/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/9685380dbb006361ee592c9971ca3813a8e3b4ad/components/engine/Dockerfile
345,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,c679327e8019ed4c68b1e7199eba5c9069fedca6,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/23 02:06,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"448 days, 3:33:00",https://github.com/docker/docker-ce/blob/c9bef385b2510bc2b9624989e0f516152cd05c1f/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/c679327e8019ed4c68b1e7199eba5c9069fedca6/components/engine/Dockerfile
346,"docker
docker-ce",https://github.com/docker/docker-ce,2160e9bb7d89df1a9261eb809546a2f902817ed1,0456165ea42cca2fbad96aedc6509e951f6a1d9a,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/01/01 04:11,2017/05/06 07:03,2013/06/22 11:42,,1,1288 days 16:29:00.000000000,"125 days, 2:52:00",https://github.com/docker/docker-ce/blob/2160e9bb7d89df1a9261eb809546a2f902817ed1/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/0456165ea42cca2fbad96aedc6509e951f6a1d9a/components/engine/Dockerfile
347,"docker
docker-ce",https://github.com/docker/docker-ce,9a9d90f97d60b698ff9786ef021b75881ee294f8,481715cd839638feb344bdcba36851505b49b633,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/02/16 02:07,2013/06/22 11:42,,1,1455 days 21:36:00.000000000,"243 days, 16:49:00",https://github.com/docker/docker-ce/blob/9a9d90f97d60b698ff9786ef021b75881ee294f8/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/481715cd839638feb344bdcba36851505b49b633/components/engine/Dockerfile
348,"docker
docker-ce",https://github.com/docker/docker-ce,605885e5180c01af497fba3c7bd25b605bb12341,2652782fc983bd35c9e2a7a888c3ebb595cc31e1,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2019/09/11 15:51,2013/06/22 11:42,,1,1469 days 05:47:00.000000000,"802 days, 22:22:00",https://github.com/docker/docker-ce/blob/605885e5180c01af497fba3c7bd25b605bb12341/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/2652782fc983bd35c9e2a7a888c3ebb595cc31e1/components/engine/Dockerfile
349,"docker
docker-ce",https://github.com/docker/docker-ce,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/09/30 06:09,2018/05/19 03:28,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"230 days, 21:19:00",https://github.com/docker/docker-ce/blob/e4ccd4c846b6e85d2543ad6649dff52d3e303c70/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/7a1680b13a4d40f402fb54bfef604e8539c37662/components/engine/Dockerfile
350,"docker
docker-ce",https://github.com/docker/docker-ce,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,d52a66f6949167cfd0e3be0df34549086d9addb0,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",2017/09/30 06:09,2019/07/19 06:01,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"656 days, 23:52:00",https://github.com/docker/docker-ce/blob/e4ccd4c846b6e85d2543ad6649dff52d3e303c70/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/d52a66f6949167cfd0e3be0df34549086d9addb0/components/engine/Dockerfile
351,"docker
docker-ce",https://github.com/docker/docker-ce,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2017/09/30 06:09,,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/e4ccd4c846b6e85d2543ad6649dff52d3e303c70/components/engine/Dockerfile,
352,"docker
docker-ce",https://github.com/docker/docker-ce,e4ccd4c846b6e85d2543ad6649dff52d3e303c70,4ada9355cb2594d16b801d2fad428302886f4021,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",2017/09/30 06:09,2019/04/21 05:34,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"567 days, 23:25:00",https://github.com/docker/docker-ce/blob/e4ccd4c846b6e85d2543ad6649dff52d3e303c70/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/4ada9355cb2594d16b801d2fad428302886f4021/components/engine/Dockerfile
353,"docker
docker-ce",https://github.com/docker/docker-ce,91c1ef0fbfd3df31b78094b54869d49bf78afeeb,97a0cbc24bf3f77186e4c980f901e15061b832a4,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",2017/12/08 10:10,2018/09/07 17:35,2013/06/22 11:42,,1,1629 days 22:28:00.000000000,"273 days, 7:25:00",https://github.com/docker/docker-ce/blob/91c1ef0fbfd3df31b78094b54869d49bf78afeeb/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/97a0cbc24bf3f77186e4c980f901e15061b832a4/components/engine/Dockerfile
354,"docker
docker-ce",https://github.com/docker/docker-ce,c6bfcea4c884c56b4860c83eb65b39a0fe356c4f,481715cd839638feb344bdcba36851505b49b633,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",2018/01/05 11:58,2018/02/16 02:07,2013/06/22 11:42,,1,1658 days 00:16:00.000000000,"41 days, 14:09:00",https://github.com/docker/docker-ce/blob/c6bfcea4c884c56b4860c83eb65b39a0fe356c4f/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/481715cd839638feb344bdcba36851505b49b633/components/engine/Dockerfile
355,"docker
docker-ce",https://github.com/docker/docker-ce,f11213a80093591f2a3ac7ed0bb5a03312ffb533,da1e08d48493406ce290a1b99269e52879af5b0e,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/03/01 10:35,2013/06/22 11:42,,1,1700 days 16:09:00.000000000,"12 days, 6:44:00",https://github.com/docker/docker-ce/blob/f11213a80093591f2a3ac7ed0bb5a03312ffb533/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/da1e08d48493406ce290a1b99269e52879af5b0e/components/engine/Dockerfile
356,"docker
docker-ce",https://github.com/docker/docker-ce,7a1680b13a4d40f402fb54bfef604e8539c37662,1fcfa3c1aabd517aca3f04b2e72dc1a10dc04db5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2019/10/06 05:41,2013/06/22 11:42,,1,1791 days 15:46:00.000000000,"505 days, 2:13:00",https://github.com/docker/docker-ce/blob/7a1680b13a4d40f402fb54bfef604e8539c37662/components/engine/Dockerfile,https://github.com/docker/docker-ce/blob/1fcfa3c1aabd517aca3f04b2e72dc1a10dc04db5/components/engine/Dockerfile
357,"docker
docker-ce",https://github.com/docker/docker-ce,b03d2799c83d1ada6b7ce96e59dfc885d7995c40,,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",2019/07/17 21:37,,2013/06/22 11:42,,1,2216 days 09:55:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/b03d2799c83d1ada6b7ce96e59dfc885d7995c40/components/engine/Dockerfile,
358,"docker
docker-ce",https://github.com/docker/docker-ce,b03d2799c83d1ada6b7ce96e59dfc885d7995c40,,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",2019/07/17 21:37,,2013/06/22 11:42,,1,2216 days 09:55:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/b03d2799c83d1ada6b7ce96e59dfc885d7995c40/components/engine/Dockerfile,
359,"docker
docker-ce",https://github.com/docker/docker-ce,0064565ac48a38f084f45f4fb476b5c2bed4b1d9,,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",2020/01/15 23:22,,2013/06/22 11:42,,1,2398 days 11:40:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/0064565ac48a38f084f45f4fb476b5c2bed4b1d9/components/engine/Dockerfile,
360,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,47313c7b66d30a236f172ff2c193b1cf5031fd0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/13 01:56,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"38 days, 11:06:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/47313c7b66d30a236f172ff2c193b1cf5031fd0c/components/engine/Dockerfile.s390x
361,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,497f1fa7f5e3d3637c934a6f55d5cd10ea76904b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/08/24 01:01,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"231 days, 10:11:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/497f1fa7f5e3d3637c934a6f55d5cd10ea76904b/components/engine/Dockerfile.s390x
362,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:02,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"246 days, 9:12:00",https://github.com/docker/docker-ce/blob/819eda81428c6968c2224c503773158f8b7fb2a8/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/bcba22b38ed2bf9c8ec2aca2bc50390e96761c0c/components/engine/Dockerfile.s390x
363,"docker
docker-ce",https://github.com/docker/docker-ce,47313c7b66d30a236f172ff2c193b1cf5031fd0c,a0933c7d27b0559510dd97c75bc54edcd14f6130,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2015/02/25 03:33,2018/05/12 04:28,1,352 days 22:23:00.000000000,"186 days, 4:22:00",https://github.com/docker/docker-ce/blob/47313c7b66d30a236f172ff2c193b1cf5031fd0c/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/a0933c7d27b0559510dd97c75bc54edcd14f6130/components/engine/Dockerfile.s390x
364,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,f04a024adba7d860a4efa598ccfb1f8749400461,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"87 days, 11:49:00",https://github.com/docker/docker-ce/blob/8ee0f568102e960349ad57df83db0d76223cd8c0/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/f04a024adba7d860a4efa598ccfb1f8749400461/components/engine/Dockerfile.s390x
365,"docker
docker-ce",https://github.com/docker/docker-ce,8ee0f568102e960349ad57df83db0d76223cd8c0,9685380dbb006361ee592c9971ca3813a8e3b4ad,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/28 06:38,2017/08/15 01:20,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"412 days, 18:42:00",https://github.com/docker/docker-ce/blob/8ee0f568102e960349ad57df83db0d76223cd8c0/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/9685380dbb006361ee592c9971ca3813a8e3b4ad/components/engine/Dockerfile.s390x
366,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,ea2938292ab3607a9dab7b1c9143ff7b620b6599,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2015/02/25 03:33,2018/05/12 04:28,1,575 days 04:45:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker-ce/blob/58bc04a76a6821834e956fbce23b5c52ecfac918/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/ea2938292ab3607a9dab7b1c9143ff7b620b6599/components/engine/Dockerfile.s390x
367,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,391b6f94da2ef9268f60766b92216b482d48ac70,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2015/02/25 03:33,2018/05/12 04:28,1,575 days 07:42:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker-ce/blob/d08760316a8b777b01850352d326617c1c75b7ce/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile.s390x
368,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,da06cf8da01009b5e8f23eae96d661d30a9ba8f7,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2015/02/25 03:33,2018/05/12 04:28,1,576 days 21:47:00.000000000,1:17:00,https://github.com/docker/docker-ce/blob/75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/da06cf8da01009b5e8f23eae96d661d30a9ba8f7/components/engine/Dockerfile.s390x
369,"docker
docker-ce",https://github.com/docker/docker-ce,391b6f94da2ef9268f60766b92216b482d48ac70,9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2015/02/25 03:33,2018/05/12 04:28,1,589 days 01:42:00.000000000,21:21:00,https://github.com/docker/docker-ce/blob/391b6f94da2ef9268f60766b92216b482d48ac70/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/9ad2ffa17adf20a0e82e1e0ef48ae406bdabc181/components/engine/Dockerfile.s390x
370,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,64d7644ec8c917daa03c0013a86bc5b7521b3a54,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2015/02/25 03:33,2018/05/12 04:28,1,602 days 04:57:00.000000000,"15 days, 17:17:00",https://github.com/docker/docker-ce/blob/44e77a4b4f79be08a5f353adfa2533a6aa8c845a/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/64d7644ec8c917daa03c0013a86bc5b7521b3a54/components/engine/Dockerfile.s390x
371,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,4de7d7962060bdf994c78b6a15e91e509833168c,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2015/02/25 03:33,2018/05/12 04:28,1,608 days 03:45:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker-ce/blob/515ebb7b5cb98dec83a7333059b6178ceb5fab78/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/4de7d7962060bdf994c78b6a15e91e509833168c/components/engine/Dockerfile.s390x
372,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,72ae55dd14ba3300f3b722866d86e0bc88f5dc39,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2015/02/25 03:33,2018/05/12 04:28,1,614 days 23:49:00.000000000,"8 days, 20:07:00",https://github.com/docker/docker-ce/blob/61646d77af8af895590b2069eefe76586bd48988/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/72ae55dd14ba3300f3b722866d86e0bc88f5dc39/components/engine/Dockerfile.s390x
373,"docker
docker-ce",https://github.com/docker/docker-ce,c9bef385b2510bc2b9624989e0f516152cd05c1f,c679327e8019ed4c68b1e7199eba5c9069fedca6,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/23 02:06,2015/02/25 03:33,2018/05/12 04:28,1,645 days 19:00:00.000000000,"448 days, 3:33:00",https://github.com/docker/docker-ce/blob/c9bef385b2510bc2b9624989e0f516152cd05c1f/components/engine/Dockerfile.s390x,https://github.com/docker/docker-ce/blob/c679327e8019ed4c68b1e7199eba5c9069fedca6/components/engine/Dockerfile.s390x
374,"docker
docker-ce",https://github.com/docker/docker-ce,9a9d90f97d60b698ff9786ef021b75881ee294f8,,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,843 days 05:45:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/9a9d90f97d60b698ff9786ef021b75881ee294f8/components/engine/Dockerfile.s390x,
375,"docker
docker-ce",https://github.com/docker/docker-ce,f11213a80093591f2a3ac7ed0bb5a03312ffb533,,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,1088 days 00:18:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/f11213a80093591f2a3ac7ed0bb5a03312ffb533/components/engine/Dockerfile.s390x,
376,"docker
docker-ce",https://github.com/docker/docker-ce,68301c38288c1554119f272cd8e44b6342965cac,,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2014/08/06 05:17,2018/11/19 17:12,2014/08/06 05:17,2018/11/19 17:12,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/68301c38288c1554119f272cd8e44b6342965cac/components/engine/builder/parser/testfiles/docker/Dockerfile,
377,"docker
docker-ce",https://github.com/docker/docker-ce,68301c38288c1554119f272cd8e44b6342965cac,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/08/06 05:17,2015/06/14 01:21,2014/08/06 05:17,2018/11/19 17:12,1,0 days 00:00:00.000000000,"311 days, 20:04:00",https://github.com/docker/docker-ce/blob/68301c38288c1554119f272cd8e44b6342965cac/components/engine/builder/parser/testfiles/docker/Dockerfile,https://github.com/docker/docker-ce/blob/57eb64c9c05d84f5c98a381a0d497a23b5a1792a/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile
378,"docker
docker-ce",https://github.com/docker/docker-ce,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,dc5e6798a10239fe6fc1ad788095ee9668247889,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/06/14 01:21,2016/07/04 23:43,2014/08/06 05:17,2018/11/19 17:12,1,311 days 20:04:00.000000000,"386 days, 22:22:00",https://github.com/docker/docker-ce/blob/57eb64c9c05d84f5c98a381a0d497a23b5a1792a/components/engine/builder/parser/testfiles/docker/Dockerfile,https://github.com/docker/docker-ce/blob/dc5e6798a10239fe6fc1ad788095ee9668247889/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile
379,"docker
docker-ce",https://github.com/docker/docker-ce,dc5e6798a10239fe6fc1ad788095ee9668247889,6a8cf843af181b118737a9abd0c7b3cded3a93cd,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/07/04 23:43,2017/12/01 13:12,2014/08/06 05:17,2018/11/19 17:12,1,698 days 18:26:00.000000000,"514 days, 13:29:00",https://github.com/docker/docker-ce/blob/dc5e6798a10239fe6fc1ad788095ee9668247889/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,https://github.com/docker/docker-ce/blob/6a8cf843af181b118737a9abd0c7b3cded3a93cd/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile
380,"docker
docker-ce",https://github.com/docker/docker-ce,94ae8f10c7281c0b5bd8f0945ac9ce250dbd55db,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/28 11:21,2018/05/19 03:28,2014/08/06 05:17,2018/11/19 17:12,1,1210 days 06:04:00.000000000,"171 days, 16:07:00",https://github.com/docker/docker-ce/blob/94ae8f10c7281c0b5bd8f0945ac9ce250dbd55db/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,https://github.com/docker/docker-ce/blob/7a1680b13a4d40f402fb54bfef604e8539c37662/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile
381,"docker
docker-ce",https://github.com/docker/docker-ce,7a1680b13a4d40f402fb54bfef604e8539c37662,,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2018/11/19 17:12,2014/08/06 05:17,2018/11/19 17:12,1,1381 days 22:11:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/7a1680b13a4d40f402fb54bfef604e8539c37662/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,
382,"docker
docker-ce",https://github.com/docker/docker-ce,78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b,b778905c3e6e5b392e95dde430de0ce4044f03bb,components/packaging/image/Dockerfile,components/packaging/image/Dockerfile.engine,"#COPY hack/dockerfile/binaries-commits /

",2018/07/11 09:04,2018/08/24 00:08,2018/07/11 09:04,2020/07/22 04:54,1,0 days 00:00:00.000000000,"43 days, 15:04:00",https://github.com/docker/docker-ce/blob/78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b/components/packaging/image/Dockerfile,https://github.com/docker/docker-ce/blob/b778905c3e6e5b392e95dde430de0ce4044f03bb/components/packaging/image/Dockerfile.engine
383,"docker
docker-ce",https://github.com/docker/docker-ce,78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b,,components/packaging/image/Dockerfile,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",2018/07/11 09:04,2020/07/22 04:54,2018/07/11 09:04,2020/07/22 04:54,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b/components/packaging/image/Dockerfile,
384,"docker
docker-ce",https://github.com/docker/docker-ce,78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b,,components/packaging/image/Dockerfile,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",2018/07/11 09:04,2020/07/22 04:54,2018/07/11 09:04,2020/07/22 04:54,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b/components/packaging/image/Dockerfile,
385,"docker
docker-ce",https://github.com/docker/docker-ce,78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b,,components/packaging/image/Dockerfile,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",2018/07/11 09:04,2020/07/22 04:54,2018/07/11 09:04,2020/07/22 04:54,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/78ba8bbfa182d305b3f34d7ecc2d05baa56c1c5b/components/packaging/image/Dockerfile,
386,"docker
docker-ce",https://github.com/docker/docker-ce,75f7edc9b6d3db48e524810599193656c42b7a27,,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-init - TODO move this out, last time we bumped was 2016!
",2018/08/24 07:53,2020/07/22 04:54,2018/08/24 07:53,2020/07/22 04:54,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/75f7edc9b6d3db48e524810599193656c42b7a27/components/packaging/image/Dockerfile.engine-dm,
387,"docker
docker-ce",https://github.com/docker/docker-ce,75f7edc9b6d3db48e524810599193656c42b7a27,,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",2018/08/24 07:53,2020/07/22 04:54,2018/08/24 07:53,2020/07/22 04:54,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/75f7edc9b6d3db48e524810599193656c42b7a27/components/packaging/image/Dockerfile.engine-dm,
388,"docker
docker-ce",https://github.com/docker/docker-ce,75f7edc9b6d3db48e524810599193656c42b7a27,,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",2018/08/24 07:53,2020/07/22 04:54,2018/08/24 07:53,2020/07/22 04:54,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/75f7edc9b6d3db48e524810599193656c42b7a27/components/packaging/image/Dockerfile.engine-dm,
389,"docker
docker-ce",https://github.com/docker/docker-ce,0aa2494eadf3ef807aa3fc27674c8c4d9925fb31,,components/cli/dockerfiles/Dockerfile.dev,components/cli/dockerfiles/Dockerfile.dev,"# FIXME(vdemeester) only used for e2e, could be in e2e special image in the future
",2018/03/06 19:15,,2017/04/19 08:12,,1,321 days 11:03:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/0aa2494eadf3ef807aa3fc27674c8c4d9925fb31/components/cli/dockerfiles/Dockerfile.dev,
390,"docker
docker-ce",https://github.com/docker/docker-ce,6fb90ed484e943d6cfc0849ab8f7be32241c9802,,components/engine/Dockerfile.solaris,components/engine/Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",2016/06/07 16:45,2017/11/09 23:21,2016/06/07 16:45,2017/11/09 23:21,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/6fb90ed484e943d6cfc0849ab8f7be32241c9802/components/engine/Dockerfile.solaris,
391,"docker
docker-ce",https://github.com/docker/docker-ce,736b960e2df15e35aca9abec3ef6a9bc64ead7b3,ba4e682cde6ad56a7fe88c5e61c976e1db93338b,components/engine/testing/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",2013/09/22 04:14,2013/11/07 13:05,2013/09/08 02:30,2014/03/11 05:20,1,14 days 01:44:00.000000000,"46 days, 8:51:00",https://github.com/docker/docker-ce/blob/736b960e2df15e35aca9abec3ef6a9bc64ead7b3/components/engine/testing/nightlyrelease/Dockerfile,https://github.com/docker/docker-ce/blob/ba4e682cde6ad56a7fe88c5e61c976e1db93338b/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
392,"docker
docker-ce",https://github.com/docker/docker-ce,aac90cd92e4389ce099b59cb7313755538ca4d48,d5914d940b1e172dc97b01692bf13fc83223b061,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/10/28 04:13,2013/10/30 05:44,2013/09/08 02:30,2014/03/11 05:20,1,50 days 01:43:00.000000000,"2 days, 1:31:00",https://github.com/docker/docker-ce/blob/aac90cd92e4389ce099b59cb7313755538ca4d48/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,https://github.com/docker/docker-ce/blob/d5914d940b1e172dc97b01692bf13fc83223b061/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
393,"docker
docker-ce",https://github.com/docker/docker-ce,7a7c9f0f1d41534dd4afd66f7d8fa56e38ed94e1,d5914d940b1e172dc97b01692bf13fc83223b061,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/29 08:51,2013/10/30 05:44,2013/09/08 02:30,2014/03/11 05:20,1,51 days 06:21:00.000000000,20:53:00,https://github.com/docker/docker-ce/blob/7a7c9f0f1d41534dd4afd66f7d8fa56e38ed94e1/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,https://github.com/docker/docker-ce/blob/d5914d940b1e172dc97b01692bf13fc83223b061/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
394,"docker
docker-ce",https://github.com/docker/docker-ce,ba4e682cde6ad56a7fe88c5e61c976e1db93338b,,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.6
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/11/07 13:05,2014/03/11 05:20,2013/09/08 02:30,2014/03/11 05:20,1,60 days 10:35:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/ba4e682cde6ad56a7fe88c5e61c976e1db93338b/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,
395,"docker
docker-ce",https://github.com/docker/docker-ce,8802449935b4e4d4be8e279e99348a99c4e13bc0,ba4e682cde6ad56a7fe88c5e61c976e1db93338b,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/10/19 14:33,2013/11/07 13:05,2013/10/19 14:33,2014/03/11 05:20,1,0 days 00:00:00.000000000,"18 days, 22:32:00",https://github.com/docker/docker-ce/blob/8802449935b4e4d4be8e279e99348a99c4e13bc0/components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,https://github.com/docker/docker-ce/blob/ba4e682cde6ad56a7fe88c5e61c976e1db93338b/components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile
396,"docker
docker-ce",https://github.com/docker/docker-ce,837c6b480c6859db6bf3f3fb044b070afb3f336d,ce0d02b06fc3cacbb34bfef7b633b65764d3bae0,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/30 11:37,2013/11/01 01:42,2013/10/19 14:33,2014/03/11 05:20,1,10 days 21:04:00.000000000,"1 day, 14:05:00",https://github.com/docker/docker-ce/blob/837c6b480c6859db6bf3f3fb044b070afb3f336d/components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,https://github.com/docker/docker-ce/blob/ce0d02b06fc3cacbb34bfef7b633b65764d3bae0/components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile
397,"docker
docker-ce",https://github.com/docker/docker-ce,ba4e682cde6ad56a7fe88c5e61c976e1db93338b,,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.4
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/11/07 13:05,2014/03/11 05:20,2013/10/19 14:33,2014/03/11 05:20,1,18 days 22:32:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/ba4e682cde6ad56a7fe88c5e61c976e1db93338b/components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,
398,"docker
docker-ce",https://github.com/docker/docker-ce,4edafc3bc120137c52da71f041df222fcf88cb3d,,components/engine/Dockerfile.gccgo,components/engine/Dockerfile.gccgo,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/09/27 07:17,2015/08/17 18:20,2016/09/27 07:17,1,156 days 02:33:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/4edafc3bc120137c52da71f041df222fcf88cb3d/components/engine/Dockerfile.gccgo,
399,"docker
docker-ce",https://github.com/docker/docker-ce,f4a7b443427875047af645e72059618ea9e14d9c,,components/cli/dockerfiles/Dockerfile.e2e,components/cli/dockerfiles/Dockerfile.e2e,"# TODO - consider replacing with an official image and a multi-stage build to pluck the binaries out
#ARG CONTAINERD_VERSION=v1.1.2
#ARG CONTAINERD_VERSION=47a128d
#ARG CONTAINERD_VERSION=6c3e782f
",2018/03/20 07:56,,2018/05/17 20:11,,1,-59 days +11:45:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/f4a7b443427875047af645e72059618ea9e14d9c/components/cli/dockerfiles/Dockerfile.e2e,
400,"docker
docker-ce",https://github.com/docker/docker-ce,f4a7b443427875047af645e72059618ea9e14d9c,,components/cli/dockerfiles/Dockerfile.e2e,components/cli/dockerfiles/Dockerfile.e2e,"# TODO - consider replacing with an official image and a multi-stage build to pluck the binaries out
",2018/03/20 07:56,,2018/05/17 20:11,,1,-59 days +11:45:00.000000000,削除されていません,https://github.com/docker/docker-ce/blob/f4a7b443427875047af645e72059618ea9e14d9c/components/cli/dockerfiles/Dockerfile.e2e,
401,"docker
docker-ce",https://github.com/docker/docker-ce,0f4b49bea82d2dc2fb6004befdde9f1d380cb527,824b119187656e9475e2a02cd33d44f946f9d17b,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",2014/01/15 11:23,2015/02/18 13:20,2013/08/30 08:49,2017/02/01 06:41,1,138 days 02:34:00.000000000,"399 days, 1:57:00",https://github.com/docker/docker-ce/blob/0f4b49bea82d2dc2fb6004befdde9f1d380cb527/components/engine/docs/Dockerfile,https://github.com/docker/docker-ce/blob/824b119187656e9475e2a02cd33d44f946f9d17b/components/engine/docs/Dockerfile
402,"docker
docker-ce",https://github.com/docker/docker-ce,824b119187656e9475e2a02cd33d44f946f9d17b,,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",2015/02/18 13:20,2017/02/01 06:41,2013/08/30 08:49,2017/02/01 06:41,1,537 days 04:31:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/824b119187656e9475e2a02cd33d44f946f9d17b/components/engine/docs/Dockerfile,
403,"docker
docker-ce",https://github.com/docker/docker-ce,824b119187656e9475e2a02cd33d44f946f9d17b,17fe06fc30b82f739ad1b3366edfbdb99180e339,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/18 13:20,2015/02/25 09:37,2013/08/30 08:49,2017/02/01 06:41,1,537 days 04:31:00.000000000,"6 days, 20:17:00",https://github.com/docker/docker-ce/blob/824b119187656e9475e2a02cd33d44f946f9d17b/components/engine/docs/Dockerfile,https://github.com/docker/docker-ce/blob/17fe06fc30b82f739ad1b3366edfbdb99180e339/components/engine/docs/Dockerfile
404,"docker
docker-ce",https://github.com/docker/docker-ce,17fe06fc30b82f739ad1b3366edfbdb99180e339,,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/25 09:37,2017/02/01 06:41,2013/08/30 08:49,2017/02/01 06:41,1,544 days 00:48:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/17fe06fc30b82f739ad1b3366edfbdb99180e339/components/engine/docs/Dockerfile,
405,"docker
docker-ce",https://github.com/docker/docker-ce,ae45d9cbead510f527a8882333d5b40be40c1352,,components/engine/Dockerfile.centos,components/engine/Dockerfile.centos,"# Wrap all commands in the ""docker-in-docker"" script to allow nested containers
#ENTRYPOINT [""hack/dind""]
",2015/04/01 05:58,2015/05/01 07:30,2015/04/01 05:58,2015/05/01 07:30,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/ae45d9cbead510f527a8882333d5b40be40c1352/components/engine/Dockerfile.centos,
406,"docker
docker-ce",https://github.com/docker/docker-ce,dd52c68ae4d8dbcbb34a4ba7983eb160dbfe37fc,,components/engine/Dockerfile.buildkit,components/engine/Dockerfile.buildkit,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/dd52c68ae4d8dbcbb34a4ba7983eb160dbfe37fc/components/engine/Dockerfile.buildkit,
407,"docker
docker-ce",https://github.com/docker/docker-ce,dd52c68ae4d8dbcbb34a4ba7983eb160dbfe37fc,,components/engine/Dockerfile.buildkit,components/engine/Dockerfile.buildkit,"# Options for hack/validate/gometalinter
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker-ce/blob/dd52c68ae4d8dbcbb34a4ba7983eb160dbfe37fc/components/engine/Dockerfile.buildkit,
408,"nodejs
docker-iojs",https://github.com/nodejs/docker-iojs,b1c0af6449717fd1487d00c3c99b722d9ebfc5a8,,Dockerfile,0.10/Dockerfile,"# TODO verify gpg and sha256: http://nodejs.org/dist/v0.10.30/SHASUMS256.txt.asc
",2014/08/12 06:27,2015/01/15 08:41,2014/08/12 06:27,2015/01/15 08:41,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/nodejs/docker-iojs/blob/b1c0af6449717fd1487d00c3c99b722d9ebfc5a8/Dockerfile,
409,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,,4.0/alpine/Dockerfile,4.0/alpine/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/05/01 00:20,2017/07/15 00:10,2020/05/01 00:20,1,748 days 06:04:00.000000000,ファイル削除,https://github.com/docker-library/redis/blob/0b2910f292fa6ac32318cb2acc84355b11aa8a7a/4.0/alpine/Dockerfile,
410,"docker-library
redis",https://github.com/docker-library/redis,d875ae032d7fdcf380a5506c714b2844af3cd2a1,1b36753550afda4dd1227e883ddb2bb50b30c810,Dockerfile-alpine.template,Dockerfile-alpine.template,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/28 05:58,2020/08/11 02:05,2019/12/28 05:58,,1,0 days 00:00:00.000000000,"226 days, 20:07:00",https://github.com/docker-library/redis/blob/d875ae032d7fdcf380a5506c714b2844af3cd2a1/Dockerfile-alpine.template,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/Dockerfile-alpine.template
411,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,,Dockerfile-alpine.template,Dockerfile-alpine.template,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,,2019/12/28 05:58,,1,226 days 20:07:00.000000000,削除されていません,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/Dockerfile-alpine.template,
412,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,1b36753550afda4dd1227e883ddb2bb50b30c810,5.0/32bit/Dockerfile,5.0/32bit/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/08/11 02:05,2018/06/22 04:14,,1,406 days 02:00:00.000000000,"374 days, 19:51:00",https://github.com/docker-library/redis/blob/0b2910f292fa6ac32318cb2acc84355b11aa8a7a/5.0/32bit/Dockerfile,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/5.0/32bit/Dockerfile
413,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,,5.0/32bit/Dockerfile,5.0/32bit/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,,2018/06/22 04:14,,1,780 days 21:51:00.000000000,削除されていません,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/5.0/32bit/Dockerfile,
414,"docker-library
redis",https://github.com/docker-library/redis,d122863aaf4f9e4c788368a11651c5e23a32c65c,1b36753550afda4dd1227e883ddb2bb50b30c810,6.0-rc/alpine/Dockerfile,6.0/alpine/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/20 02:26,2020/08/11 02:05,2019/12/20 02:26,,1,0 days 00:00:00.000000000,"234 days, 23:39:00",https://github.com/docker-library/redis/blob/d122863aaf4f9e4c788368a11651c5e23a32c65c/6.0-rc/alpine/Dockerfile,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/6.0/alpine/Dockerfile
415,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,,6.0/alpine/Dockerfile,6.0/alpine/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,,2019/12/20 02:26,,1,234 days 23:39:00.000000000,削除されていません,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/6.0/alpine/Dockerfile,
416,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,1b36753550afda4dd1227e883ddb2bb50b30c810,5.0/alpine/Dockerfile,5.0/alpine/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/08/11 02:05,2016/05/06 21:48,,1,1182 days 08:26:00.000000000,"374 days, 19:51:00",https://github.com/docker-library/redis/blob/0b2910f292fa6ac32318cb2acc84355b11aa8a7a/5.0/alpine/Dockerfile,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/5.0/alpine/Dockerfile
417,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,,5.0/alpine/Dockerfile,5.0/alpine/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,,2016/05/06 21:48,,1,1557 days 04:17:00.000000000,削除されていません,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/5.0/alpine/Dockerfile,
418,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,,4.0/32bit/Dockerfile,4.0/32bit/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/05/01 00:20,2015/07/16 05:59,2020/05/01 00:20,1,1478 days 00:15:00.000000000,ファイル削除,https://github.com/docker-library/redis/blob/0b2910f292fa6ac32318cb2acc84355b11aa8a7a/4.0/32bit/Dockerfile,
419,"docker-library
redis",https://github.com/docker-library/redis,d875ae032d7fdcf380a5506c714b2844af3cd2a1,1b36753550afda4dd1227e883ddb2bb50b30c810,Dockerfile.template,Dockerfile.template,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/28 05:58,2020/08/11 02:05,2019/12/28 05:58,,1,0 days 00:00:00.000000000,"226 days, 20:07:00",https://github.com/docker-library/redis/blob/d875ae032d7fdcf380a5506c714b2844af3cd2a1/Dockerfile.template,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/Dockerfile.template
420,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,,Dockerfile.template,Dockerfile.template,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,,2019/12/28 05:58,,1,226 days 20:07:00.000000000,削除されていません,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/Dockerfile.template,
421,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,1b36753550afda4dd1227e883ddb2bb50b30c810,5.0/Dockerfile,5.0/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/08/11 02:05,2018/06/22 04:14,,1,406 days 02:00:00.000000000,"374 days, 19:51:00",https://github.com/docker-library/redis/blob/0b2910f292fa6ac32318cb2acc84355b11aa8a7a/5.0/Dockerfile,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/5.0/Dockerfile
422,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,,5.0/Dockerfile,5.0/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,,2018/06/22 04:14,,1,780 days 21:51:00.000000000,削除されていません,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/5.0/Dockerfile,
423,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,,4.0/Dockerfile,4.0/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/05/01 00:20,2015/04/02 02:26,2020/05/01 00:20,1,1583 days 03:48:00.000000000,ファイル削除,https://github.com/docker-library/redis/blob/0b2910f292fa6ac32318cb2acc84355b11aa8a7a/4.0/Dockerfile,
424,"docker-library
redis",https://github.com/docker-library/redis,d122863aaf4f9e4c788368a11651c5e23a32c65c,,6.0-rc/32bit/Dockerfile,6.0-rc/32bit/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/20 02:26,2020/01/03 06:21,2019/12/20 02:26,2020/01/03 06:21,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/redis/blob/d122863aaf4f9e4c788368a11651c5e23a32c65c/6.0-rc/32bit/Dockerfile,
425,"docker-library
redis",https://github.com/docker-library/redis,d122863aaf4f9e4c788368a11651c5e23a32c65c,1b36753550afda4dd1227e883ddb2bb50b30c810,6.0-rc/Dockerfile,6.0/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/20 02:26,2020/08/11 02:05,2019/12/20 02:26,,1,0 days 00:00:00.000000000,"234 days, 23:39:00",https://github.com/docker-library/redis/blob/d122863aaf4f9e4c788368a11651c5e23a32c65c/6.0-rc/Dockerfile,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/6.0/Dockerfile
426,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,,6.0/Dockerfile,6.0/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,,2019/12/20 02:26,,1,234 days 23:39:00.000000000,削除されていません,https://github.com/docker-library/redis/blob/1b36753550afda4dd1227e883ddb2bb50b30c810/6.0/Dockerfile,
427,"docker-library
redis",https://github.com/docker-library/redis,d875ae032d7fdcf380a5506c714b2844af3cd2a1,,Dockerfile-32bit.template,Dockerfile-32bit.template,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/28 05:58,2020/01/01 09:44,2019/12/28 05:58,2020/01/01 09:44,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/redis/blob/d875ae032d7fdcf380a5506c714b2844af3cd2a1/Dockerfile-32bit.template,
428,"tianon
gosu",https://github.com/tianon/gosu,5fb235fb1f30d3fbbacd516033b1546dd246fef5,,Dockerfile,Dockerfile,"# TODO pin specific commit

# cache-fill
",2014/11/05 09:30,,2014/07/15 04:52,,1,113 days 04:38:00.000000000,削除されていません,https://github.com/tianon/gosu/blob/5fb235fb1f30d3fbbacd516033b1546dd246fef5/Dockerfile,
429,"31z4
zookeeper-docker",https://github.com/31z4/zookeeper-docker,15b6f73b9f36a8bf4960c661427ac41de49cf534,,3.5.3-beta/Dockerfile,3.5.8/Dockerfile,"    # TODO: the distribution given by apache is not gzipped correctly - unzip correctly when fixed
",2017/10/24 14:12,,2017/10/24 14:12,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/31z4/zookeeper-docker/blob/15b6f73b9f36a8bf4960c661427ac41de49cf534/3.5.3-beta/Dockerfile,
430,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,ebede7cd81c55fe98d0b9295cada55732b2be785,8160b5da4c8c8594fb9e7739119e6b359a49ac5c,Dockerfile,Dockerfile,"## Start Hack
## All of this needed because of missing 8.11.x tag.  Once we update to 8.15 we can resume using Dockerfile.old or remove hack and use FROM node:8.15-slim

## Installing Node.js

# gpg keys listed at https://github.com/nodejs/node
",2019/02/28 06:41,2019/03/01 06:58,2015/07/10 18:04,2020/03/05 22:09,1,1328 days 12:37:00.000000000,"1 day, 0:17:00",https://github.com/RocketChat/Docker.Official.Image/blob/ebede7cd81c55fe98d0b9295cada55732b2be785/Dockerfile,https://github.com/RocketChat/Docker.Official.Image/blob/8160b5da4c8c8594fb9e7739119e6b359a49ac5c/Dockerfile
431,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,ebede7cd81c55fe98d0b9295cada55732b2be785,8160b5da4c8c8594fb9e7739119e6b359a49ac5c,Dockerfile,Dockerfile," ## End Hack

## Actual Rocket.Chat stuff
",2019/02/28 06:41,2019/03/01 06:58,2015/07/10 18:04,2020/03/05 22:09,1,1328 days 12:37:00.000000000,"1 day, 0:17:00",https://github.com/RocketChat/Docker.Official.Image/blob/ebede7cd81c55fe98d0b9295cada55732b2be785/Dockerfile,https://github.com/RocketChat/Docker.Official.Image/blob/8160b5da4c8c8594fb9e7739119e6b359a49ac5c/Dockerfile
432,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,8160b5da4c8c8594fb9e7739119e6b359a49ac5c,,Dockerfile,Dockerfile,"## All of this needed because of missing 8.11.x tag.  Once we update to 8.15+ we can resume using Dockerfile.old or remove hack and use FROM node:8-slim

## Installing Node.js
",2019/03/01 06:58,2020/03/05 22:09,2015/07/10 18:04,2020/03/05 22:09,1,1329 days 12:54:00.000000000,ファイル削除,https://github.com/RocketChat/Docker.Official.Image/blob/8160b5da4c8c8594fb9e7739119e6b359a49ac5c/Dockerfile,
433,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,8160b5da4c8c8594fb9e7739119e6b359a49ac5c,,Dockerfile,Dockerfile,"## Start Hack
",2019/03/01 06:58,2020/03/05 22:09,2015/07/10 18:04,2020/03/05 22:09,1,1329 days 12:54:00.000000000,ファイル削除,https://github.com/RocketChat/Docker.Official.Image/blob/8160b5da4c8c8594fb9e7739119e6b359a49ac5c/Dockerfile,
434,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,8160b5da4c8c8594fb9e7739119e6b359a49ac5c,,Dockerfile,Dockerfile,"## End Hack

## Actual Rocket.Chat stuff
",2019/03/01 06:58,2020/03/05 22:09,2015/07/10 18:04,2020/03/05 22:09,1,1329 days 12:54:00.000000000,ファイル削除,https://github.com/RocketChat/Docker.Official.Image/blob/8160b5da4c8c8594fb9e7739119e6b359a49ac5c/Dockerfile,
435,"docker
compose",https://github.com/docker/compose,e0412a24884351e093764b91cc2689c682bc1562,,Dockerfile,Dockerfile,"# FIXME(chris-crone): virtualenv 16.3.0 breaks build, force 16.2.0 until fixed
",2019/02/05 18:51,,2014/01/17 02:28,,1,1845 days 16:23:00.000000000,削除されていません,https://github.com/docker/compose/blob/e0412a24884351e093764b91cc2689c682bc1562/Dockerfile,
436,"docker-library
redmine",https://github.com/docker-library/redmine,0ca74edc277862714856657aa9df3b7fab4d4b6f,,3.4/alpine/Dockerfile,3.4/alpine/Dockerfile,"# Todo: remove build dependencies
#	runDeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $runDeps; \
#	apk del .build-deps

",2019/04/05 01:29,2020/04/15 06:06,2019/04/05 01:29,2020/04/15 06:06,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/redmine/blob/0ca74edc277862714856657aa9df3b7fab4d4b6f/3.4/alpine/Dockerfile,
437,"docker-library
redmine",https://github.com/docker-library/redmine,0ca74edc277862714856657aa9df3b7fab4d4b6f,,4.0/alpine/Dockerfile,4.0/alpine/Dockerfile,"# Todo: remove build dependencies
#	runDeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $runDeps; \
#	apk del .build-deps

",2019/04/05 01:29,,2019/04/05 01:29,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/redmine/blob/0ca74edc277862714856657aa9df3b7fab4d4b6f/4.0/alpine/Dockerfile,
438,"docker-library
redmine",https://github.com/docker-library/redmine,0ca74edc277862714856657aa9df3b7fab4d4b6f,,Dockerfile-alpine.template,Dockerfile-alpine.template,"# Todo: remove build dependencies
#	runDeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $runDeps; \
#	apk del .build-deps

",2019/04/05 01:29,,2019/04/05 01:29,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/redmine/blob/0ca74edc277862714856657aa9df3b7fab4d4b6f/Dockerfile-alpine.template,
439,"containous
traefik",https://github.com/containous/traefik,a5a8d6929e793f6c3a70b1b84f68973c506deced,,build.Dockerfile,build.Dockerfile,"# This is a hack (see libcompose#32) - will be removed when libcompose will be fixed
# (i.e go get able)
",2015/09/27 22:56,,2015/09/16 04:38,,1,11 days 18:18:00.000000000,削除されていません,https://github.com/containous/traefik/blob/a5a8d6929e793f6c3a70b1b84f68973c506deced/build.Dockerfile,
440,"corretto
corretto-8-docker",https://github.com/corretto/corretto-8-docker,5e34c9377e6590699469d8087af24363250599af,,Dockerfile-debian,contrib/debian/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/06/28 01:58,2020/05/28 07:18,2019/06/28 01:58,2020/05/28 07:18,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/corretto/corretto-8-docker/blob/5e34c9377e6590699469d8087af24363250599af/Dockerfile-debian,
441,"docker-library
golang",https://github.com/docker-library/golang,898bf4174e6a575ae311d14a23f96b4f6724ee13,,1.4/cross/Dockerfile,1.4/cross/Dockerfile,"# TODO gcc: error: unrecognized command line option '-marm'
#	android/arm \

# ls src/runtime/defs_*_*.h | sed -r 's!^.*/defs_([^_]+)_([^_]+)[.]h$!\1/\2!'

# (set an explicit GOARM of 5 for maximum ARM compatibility)
",2014/11/19 13:24,2016/02/18 07:10,2014/11/15 15:46,2016/02/18 07:10,1,3 days 21:38:00.000000000,ファイル削除,https://github.com/docker-library/golang/blob/898bf4174e6a575ae311d14a23f96b4f6724ee13/1.4/cross/Dockerfile,
442,"docker-library
hello-world",https://github.com/docker-library/hello-world,7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87,,Dockerfile.build,Dockerfile.build,"# TODO TARGET_ARCH='i386' (heinous package conflicts trying to get ""gcc -m32""/""gcc-multilib"" to work with all the cross-compiling gccs)

",2017/06/14 07:55,,2015/06/19 07:48,,1,726 days 00:07:00.000000000,削除されていません,https://github.com/docker-library/hello-world/blob/7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87/Dockerfile.build,
443,"docker-library
wordpress",https://github.com/docker-library/wordpress,591388696848f29bfa627ab38f78678135096f15,,php7.2/fpm/Dockerfile,php7.2/fpm/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/12/09 05:43,,2017/12/09 05:43,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/wordpress/blob/591388696848f29bfa627ab38f78678135096f15/php7.2/fpm/Dockerfile,
444,"docker-library
wordpress",https://github.com/docker-library/wordpress,591388696848f29bfa627ab38f78678135096f15,,php7.2/apache/Dockerfile,php7.2/apache/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/12/09 05:43,,2017/12/09 05:43,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/wordpress/blob/591388696848f29bfa627ab38f78678135096f15/php7.2/apache/Dockerfile,
445,"docker-library
wordpress",https://github.com/docker-library/wordpress,637afb53dc03b4af19149a0880e796346f97c137,,php5.6/fpm/Dockerfile,php5.6/fpm/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2016/12/11 06:58,2019/01/05 09:07,2015/01/31 03:39,2019/01/05 09:07,1,680 days 03:19:00.000000000,ファイル削除,https://github.com/docker-library/wordpress/blob/637afb53dc03b4af19149a0880e796346f97c137/php5.6/fpm/Dockerfile,
446,"docker-library
wordpress",https://github.com/docker-library/wordpress,f56ccb5de179757eeb043ef5fedea6c3cf4e3bf2,,php7.1/apache/Dockerfile,php7.4/apache/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/01/05 09:59,2019/12/02 18:52,2017/01/05 09:59,2019/12/02 18:52,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/wordpress/blob/f56ccb5de179757eeb043ef5fedea6c3cf4e3bf2/php7.1/apache/Dockerfile,
447,"docker-library
wordpress",https://github.com/docker-library/wordpress,637afb53dc03b4af19149a0880e796346f97c137,,php5.6/apache/Dockerfile,php5.6/apache/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2016/12/11 06:58,2019/01/05 09:07,2014/08/12 06:32,2019/01/05 09:07,1,852 days 00:26:00.000000000,ファイル削除,https://github.com/docker-library/wordpress/blob/637afb53dc03b4af19149a0880e796346f97c137/php5.6/apache/Dockerfile,
448,"docker-library
wordpress",https://github.com/docker-library/wordpress,637afb53dc03b4af19149a0880e796346f97c137,,php7.0/fpm/Dockerfile,php7.0/fpm/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2016/12/11 06:58,2019/01/05 09:07,2016/10/07 04:29,2019/01/05 09:07,1,65 days 02:29:00.000000000,ファイル削除,https://github.com/docker-library/wordpress/blob/637afb53dc03b4af19149a0880e796346f97c137/php7.0/fpm/Dockerfile,
449,"docker-library
wordpress",https://github.com/docker-library/wordpress,637afb53dc03b4af19149a0880e796346f97c137,,php7.0/apache/Dockerfile,php7.0/apache/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2016/12/11 06:58,2019/01/05 09:07,2016/10/07 04:29,2019/01/05 09:07,1,65 days 02:29:00.000000000,ファイル削除,https://github.com/docker-library/wordpress/blob/637afb53dc03b4af19149a0880e796346f97c137/php7.0/apache/Dockerfile,
450,"docker-library
wordpress",https://github.com/docker-library/wordpress,f56ccb5de179757eeb043ef5fedea6c3cf4e3bf2,,php7.1/fpm/Dockerfile,php7.4/fpm/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/01/05 09:59,2019/12/02 18:52,2017/01/05 09:59,2019/12/02 18:52,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/wordpress/blob/f56ccb5de179757eeb043ef5fedea6c3cf4e3bf2/php7.1/fpm/Dockerfile,
451,"docker-library
wordpress",https://github.com/docker-library/wordpress,637afb53dc03b4af19149a0880e796346f97c137,,Dockerfile-debian.template,Dockerfile-debian.template,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2016/12/11 06:58,,2016/10/07 04:29,,1,65 days 02:29:00.000000000,削除されていません,https://github.com/docker-library/wordpress/blob/637afb53dc03b4af19149a0880e796346f97c137/Dockerfile-debian.template,
452,"docker-library
tomcat",https://github.com/docker-library/tomcat,ec75141e3cb6276b07d66c16042152e2d4de119c,0e18eab4234afbff617aee84e7156ac1b4fd67d5,6/jre7/Dockerfile,6/jre7/Dockerfile,"# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2016/04/23 05:22,2017/07/29 03:16,2014/10/23 08:32,2017/08/04 06:36,1,547 days 20:50:00.000000000,"461 days, 21:54:00",https://github.com/docker-library/tomcat/blob/ec75141e3cb6276b07d66c16042152e2d4de119c/6/jre7/Dockerfile,https://github.com/docker-library/tomcat/blob/0e18eab4234afbff617aee84e7156ac1b4fd67d5/6/jre7/Dockerfile
453,"docker-library
tomcat",https://github.com/docker-library/tomcat,0e18eab4234afbff617aee84e7156ac1b4fd67d5,,6/jre7/Dockerfile,6/jre7/Dockerfile,"#!/bin/sh$|#!/usr/bin/env bash|' '{}' +

# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2017/07/29 03:16,2017/08/04 06:36,2014/10/23 08:32,2017/08/04 06:36,1,1009 days 18:44:00.000000000,ファイル削除,https://github.com/docker-library/tomcat/blob/0e18eab4234afbff617aee84e7156ac1b4fd67d5/6/jre7/Dockerfile,
454,"docker-library
tomcat",https://github.com/docker-library/tomcat,ec75141e3cb6276b07d66c16042152e2d4de119c,0e18eab4234afbff617aee84e7156ac1b4fd67d5,6/jre8/Dockerfile,6/jre8/Dockerfile,"# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2016/04/23 05:22,2017/07/29 03:16,2014/11/21 07:04,2017/08/04 06:36,1,518 days 22:18:00.000000000,"461 days, 21:54:00",https://github.com/docker-library/tomcat/blob/ec75141e3cb6276b07d66c16042152e2d4de119c/6/jre8/Dockerfile,https://github.com/docker-library/tomcat/blob/0e18eab4234afbff617aee84e7156ac1b4fd67d5/6/jre8/Dockerfile
455,"docker-library
tomcat",https://github.com/docker-library/tomcat,0e18eab4234afbff617aee84e7156ac1b4fd67d5,,6/jre8/Dockerfile,6/jre8/Dockerfile,"#!/bin/sh$|#!/usr/bin/env bash|' '{}' +

# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2017/07/29 03:16,2017/08/04 06:36,2014/11/21 07:04,2017/08/04 06:36,1,980 days 20:12:00.000000000,ファイル削除,https://github.com/docker-library/tomcat/blob/0e18eab4234afbff617aee84e7156ac1b4fd67d5/6/jre8/Dockerfile,
456,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,8.5/jdk13/openjdk-oracle/Dockerfile,8.5/jdk14/openjdk-oraclelinux7/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,,2019/07/03 06:41,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk13/openjdk-oracle/Dockerfile,
457,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,9.0/jdk13/openjdk-oracle/Dockerfile,9.0/jdk14/openjdk-oraclelinux7/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,,2019/07/03 06:41,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk13/openjdk-oracle/Dockerfile,
458,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/9.0/jdk8/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk8/corretto/Dockerfile
459,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/9.0/jdk8/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk8/corretto/Dockerfile
460,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/9.0/jdk8/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk8/corretto/Dockerfile
461,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,,2019/06/25 09:08,,1,7 days 21:33:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk8/corretto/Dockerfile,
462,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,8.5/jdk12/openjdk-oracle/Dockerfile,8.5/jdk12/openjdk-oracle/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,2019/09/20 04:49,2019/07/03 06:41,2019/09/20 04:49,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk12/openjdk-oracle/Dockerfile,
463,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/7/jdk8/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/7/jdk8/corretto/Dockerfile
464,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/7/jdk8/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/7/jdk8/corretto/Dockerfile
465,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/7/jdk8/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/7/jdk8/corretto/Dockerfile
466,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,,2019/06/25 09:08,,1,7 days 21:33:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/7/jdk8/corretto/Dockerfile,
467,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,9.0/jdk12/openjdk-oracle/Dockerfile,9.0/jdk12/openjdk-oracle/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,2019/09/20 04:49,2019/07/03 06:41,2019/09/20 04:49,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk12/openjdk-oracle/Dockerfile,
468,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/8.5/jdk11/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk11/corretto/Dockerfile
469,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/8.5/jdk11/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk11/corretto/Dockerfile
470,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/8.5/jdk11/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk11/corretto/Dockerfile
471,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,,2019/06/25 09:08,,1,7 days 21:33:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk11/corretto/Dockerfile,
472,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/9.0/jdk11/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk11/corretto/Dockerfile
473,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/9.0/jdk11/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk11/corretto/Dockerfile
474,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/9.0/jdk11/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk11/corretto/Dockerfile
475,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,,2019/06/25 09:08,,1,7 days 21:33:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/9.0/jdk11/corretto/Dockerfile,
476,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/8.5/jdk8/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk8/corretto/Dockerfile
477,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/8.5/jdk8/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk8/corretto/Dockerfile
478,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/8.5/jdk8/corretto/Dockerfile,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk8/corretto/Dockerfile
479,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,,2019/06/25 09:08,,1,7 days 21:33:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/8.5/jdk8/corretto/Dockerfile,
480,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,Dockerfile-yum.template,Dockerfile-yum.template,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/Dockerfile-yum.template,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/Dockerfile-yum.template
481,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,Dockerfile-yum.template,Dockerfile-yum.template,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/Dockerfile-yum.template,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/Dockerfile-yum.template
482,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,Dockerfile-yum.template,Dockerfile-yum.template,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/07/03 06:41,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"7 days, 21:33:00",https://github.com/docker-library/tomcat/blob/58c79694a83a12077150ad57b8dd46296548b958/Dockerfile-yum.template,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/Dockerfile-yum.template
483,"docker-library
tomcat",https://github.com/docker-library/tomcat,ee7ff91af066dc7df9d88e3cb842c40f0b6d164b,,Dockerfile-yum.template,Dockerfile-yum.template,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/07/03 06:41,,2019/06/25 09:08,,1,7 days 21:33:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ee7ff91af066dc7df9d88e3cb842c40f0b6d164b/Dockerfile-yum.template,
484,"docker-library
tomcat",https://github.com/docker-library/tomcat,8aed00cdb1a1f1496895784e80f239079dcee411,,10.0/jdk14/openjdk-oracle/Dockerfile,10.0/jdk14/openjdk-oraclelinux7/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/04/23 09:23,,2020/04/23 09:23,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/8aed00cdb1a1f1496895784e80f239079dcee411/10.0/jdk14/openjdk-oracle/Dockerfile,
485,"docker-library
tomcat",https://github.com/docker-library/tomcat,8aed00cdb1a1f1496895784e80f239079dcee411,,10.0/jdk8/corretto/Dockerfile,10.0/jdk8/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/04/23 09:23,,2020/04/23 09:23,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/8aed00cdb1a1f1496895784e80f239079dcee411/10.0/jdk8/corretto/Dockerfile,
486,"docker-library
tomcat",https://github.com/docker-library/tomcat,8aed00cdb1a1f1496895784e80f239079dcee411,,10.0/jdk11/corretto/Dockerfile,10.0/jdk11/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/04/23 09:23,,2020/04/23 09:23,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/8aed00cdb1a1f1496895784e80f239079dcee411/10.0/jdk11/corretto/Dockerfile,
487,"docker-library
tomcat",https://github.com/docker-library/tomcat,ec75141e3cb6276b07d66c16042152e2d4de119c,,8.5/jre8/Dockerfile,8.5/jdk11/openjdk-buster/Dockerfile,"# http://tomcat.10.x6.nabble.com/VOTE-Release-Apache-Tomcat-8-0-32-tp5046007p5048274.html (ie, HACK HACK HACK)
",2016/04/23 05:22,,2016/04/02 01:43,,1,21 days 03:39:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ec75141e3cb6276b07d66c16042152e2d4de119c/8.5/jre8/Dockerfile,
488,"docker-library
tomcat",https://github.com/docker-library/tomcat,ec75141e3cb6276b07d66c16042152e2d4de119c,,9.0/jre8/Dockerfile,9.0/jdk11/openjdk-buster/Dockerfile,"# http://tomcat.10.x6.nabble.com/VOTE-Release-Apache-Tomcat-8-0-32-tp5046007p5048274.html (ie, HACK HACK HACK)
",2016/04/23 05:22,,2016/04/02 03:02,,1,21 days 02:20:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ec75141e3cb6276b07d66c16042152e2d4de119c/9.0/jre8/Dockerfile,
489,"docker-library
tomcat",https://github.com/docker-library/tomcat,ec75141e3cb6276b07d66c16042152e2d4de119c,,8.0/jre8/Dockerfile,9.0/jdk8/openjdk-buster/Dockerfile,"# http://tomcat.10.x6.nabble.com/VOTE-Release-Apache-Tomcat-8-0-32-tp5046007p5048274.html (ie, HACK HACK HACK)
",2016/04/23 05:22,,2014/11/21 07:04,,1,518 days 22:18:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ec75141e3cb6276b07d66c16042152e2d4de119c/8.0/jre8/Dockerfile,
490,"docker-library
tomcat",https://github.com/docker-library/tomcat,ec75141e3cb6276b07d66c16042152e2d4de119c,,8.0/jre7/Dockerfile,8.5/jdk8/openjdk-slim-buster/Dockerfile,"# http://tomcat.10.x6.nabble.com/VOTE-Release-Apache-Tomcat-8-0-32-tp5046007p5048274.html (ie, HACK HACK HACK)
",2016/04/23 05:22,,2014/10/23 08:32,,1,547 days 20:50:00.000000000,削除されていません,https://github.com/docker-library/tomcat/blob/ec75141e3cb6276b07d66c16042152e2d4de119c/8.0/jre7/Dockerfile,
491,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,8a4f6c9cb035044358072c465e41b4b8993731e7,,2018.0/7.2/Dockerfile,2018.0/7.2/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2018/06/18 18:44,2020/03/19 19:57,2018/06/18 18:44,2020/03/19 19:57,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/8a4f6c9cb035044358072c465e41b4b8993731e7/2018.0/7.2/Dockerfile,
492,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,e5b879923a6ffd5c342adc77a8c67361a4b38ebf,,9.1/7.1/Dockerfile,9.1/7.1/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2018/01/18 22:53,,2017/04/13 22:52,,1,280 days 00:01:00.000000000,削除されていません,https://github.com/zendtech/php-zendserver-docker/blob/e5b879923a6ffd5c342adc77a8c67361a4b38ebf/9.1/7.1/Dockerfile,
493,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,82bba8cc44febcc6d7f31e25373fd323a1b54bfc,cdbc844cac75163cb4880aed38bbfcc7473b4029,8.5/5.6/Dockerfile,8.5/5.6/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2015/10/11 19:18,2019/04/24 20:47,2015/10/11 19:18,,1,0 days 00:00:00.000000000,"1291 days, 1:29:00",https://github.com/zendtech/php-zendserver-docker/blob/82bba8cc44febcc6d7f31e25373fd323a1b54bfc/8.5/5.6/Dockerfile,https://github.com/zendtech/php-zendserver-docker/blob/cdbc844cac75163cb4880aed38bbfcc7473b4029/8.5/5.6/Dockerfile
494,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,cdbc844cac75163cb4880aed38bbfcc7473b4029,,8.5/5.6/Dockerfile,8.5/5.6/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2019/04/24 20:47,,2015/10/11 19:18,,1,1291 days 01:29:00.000000000,削除されていません,https://github.com/zendtech/php-zendserver-docker/blob/cdbc844cac75163cb4880aed38bbfcc7473b4029/8.5/5.6/Dockerfile,
495,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,bb3303d34a3e86a4bc9eb1d652c5cce6ad441a6e,,7.0/5.5/Dockerfile,7.0/5.5/Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/21 17:15,2018/04/30 21:42,2014/10/21 17:15,2018/04/30 21:42,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/bb3303d34a3e86a4bc9eb1d652c5cce6ad441a6e/7.0/5.5/Dockerfile,
496,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,bb3303d34a3e86a4bc9eb1d652c5cce6ad441a6e,,7.0/5.4/Dockerfile,7.0/5.4/Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/21 17:15,2018/04/30 21:42,2014/10/21 17:15,2018/04/30 21:42,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/bb3303d34a3e86a4bc9eb1d652c5cce6ad441a6e/7.0/5.4/Dockerfile,
497,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,7ab162d48d5bbf815f0b6ca947ff3c358d18ae92,,2019.0/Dockerfile,2019.0/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2019/07/22 17:45,,2019/07/22 17:45,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/zendtech/php-zendserver-docker/blob/7ab162d48d5bbf815f0b6ca947ff3c358d18ae92/2019.0/Dockerfile,
498,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,ed44d0b62d9a118877e5664f5b7c2f31ba681cd7,,8.0/5.5/Dockerfile,8.0/5.5/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2014/12/10 22:53,2016/08/01 18:35,2014/12/10 22:53,2016/08/01 18:35,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/ed44d0b62d9a118877e5664f5b7c2f31ba681cd7/8.0/5.5/Dockerfile,
499,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,4c3dda9854934f9bfa6893b286dd7532d08e39b9,,8.0/openshift/Dockerfile,8.0/openshift/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2014/12/21 19:44,2015/01/11 21:51,2014/12/21 19:44,2015/01/11 21:51,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/4c3dda9854934f9bfa6893b286dd7532d08e39b9/8.0/openshift/Dockerfile,
500,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,ed44d0b62d9a118877e5664f5b7c2f31ba681cd7,,8.0/5.6/Dockerfile,8.0/5.6/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2014/12/10 22:53,2016/08/01 18:35,2014/12/10 22:53,2016/08/01 18:35,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/ed44d0b62d9a118877e5664f5b7c2f31ba681cd7/8.0/5.6/Dockerfile,
501,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,82bba8cc44febcc6d7f31e25373fd323a1b54bfc,,8.5/5.5/Dockerfile,8.5/5.5/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2015/10/11 19:18,2018/04/30 21:42,2015/10/11 19:18,2018/04/30 21:42,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/82bba8cc44febcc6d7f31e25373fd323a1b54bfc/8.5/5.5/Dockerfile,
502,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,571a4032a3645d26df1690629f1c0551bae4822a,,Dockerfile,Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/19 23:21,2014/10/20 22:46,2014/10/19 23:21,2014/10/20 22:46,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/571a4032a3645d26df1690629f1c0551bae4822a/Dockerfile,
503,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,b3ff26b9a50d7cc80a23646d86bc5817a6d78d10,,5.4/Dockerfile,5.4/Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/20 22:47,2014/10/21 17:15,2014/10/20 22:47,2014/10/21 17:15,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/b3ff26b9a50d7cc80a23646d86bc5817a6d78d10/5.4/Dockerfile,
504,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,b3ff26b9a50d7cc80a23646d86bc5817a6d78d10,,5.5/Dockerfile,5.5/Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/20 22:47,2014/10/21 17:15,2014/10/20 22:47,2014/10/21 17:15,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/zendtech/php-zendserver-docker/blob/b3ff26b9a50d7cc80a23646d86bc5817a6d78d10/5.5/Dockerfile,
505,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,408fe81249d365ca7e7bac96a137c9e2b453fc6e,,nightly/7.2/Dockerfile,nightly/7.2/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2018/08/07 17:55,,2018/08/07 17:55,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/zendtech/php-zendserver-docker/blob/408fe81249d365ca7e7bac96a137c9e2b453fc6e/nightly/7.2/Dockerfile,
506,"docker-library
busybox",https://github.com/docker-library/busybox,6b303c84f063bea2bc3bc86dc86c4db1f3a8b5d3,4629888e69e7b69b594aec10529f8ca4a2fa31e7,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# As long as we rely on libnss, we have to have libc.so anyhow, so
# we've removed CONFIG_STATIC here for now... :cry:
",2016/01/08 03:46,2016/10/08 01:56,2016/01/08 03:46,,1,0 days 00:00:00.000000000,"273 days, 22:10:00",https://github.com/docker-library/busybox/blob/6b303c84f063bea2bc3bc86dc86c4db1f3a8b5d3/glibc/Dockerfile.builder,https://github.com/docker-library/busybox/blob/4629888e69e7b69b594aec10529f8ca4a2fa31e7/glibc/Dockerfile.builder
507,"docker-library
busybox",https://github.com/docker-library/busybox,6b303c84f063bea2bc3bc86dc86c4db1f3a8b5d3,,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# hack hack hack hack hack
# with glibc, static busybox uses libnss for DNS resolution :(
",2016/01/08 03:46,,2016/01/08 03:46,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/busybox/blob/6b303c84f063bea2bc3bc86dc86c4db1f3a8b5d3/glibc/Dockerfile.builder,
508,"docker-library
busybox",https://github.com/docker-library/busybox,4629888e69e7b69b594aec10529f8ca4a2fa31e7,8b0d96682de7f70e9a67bc9ab1a488da289ede38,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# As long as we rely on libnss, we have to have libc.so anyhow, so
# we've removed CONFIG_STATIC here for now... :cry:
",2016/10/08 01:56,2017/05/16 05:19,2016/01/08 03:46,,1,273 days 22:10:00.000000000,"220 days, 3:23:00",https://github.com/docker-library/busybox/blob/4629888e69e7b69b594aec10529f8ca4a2fa31e7/glibc/Dockerfile.builder,https://github.com/docker-library/busybox/blob/8b0d96682de7f70e9a67bc9ab1a488da289ede38/glibc/Dockerfile.builder
509,"docker-library
busybox",https://github.com/docker-library/busybox,8b0d96682de7f70e9a67bc9ab1a488da289ede38,0f16e461f1ec7482fd5784e0b9667d5be266fa7f,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now; 1.27+)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# As long as we rely on libnss, we have to have libc.so anyhow, so
# we've removed CONFIG_STATIC here for now... :cry:
",2017/05/16 05:19,2017/05/16 05:35,2016/01/08 03:46,,1,494 days 01:33:00.000000000,0:16:00,https://github.com/docker-library/busybox/blob/8b0d96682de7f70e9a67bc9ab1a488da289ede38/glibc/Dockerfile.builder,https://github.com/docker-library/busybox/blob/0f16e461f1ec7482fd5784e0b9667d5be266fa7f/glibc/Dockerfile.builder
510,"docker-library
busybox",https://github.com/docker-library/busybox,ba116f6e8efbad7f8d837d530a7dcd48da6c2b55,4629888e69e7b69b594aec10529f8ca4a2fa31e7,upstream/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
",2015/10/15 02:57,2016/10/08 01:56,2015/02/03 15:02,,1,253 days 11:55:00.000000000,"358 days, 22:59:00",https://github.com/docker-library/busybox/blob/ba116f6e8efbad7f8d837d530a7dcd48da6c2b55/upstream/Dockerfile.builder,https://github.com/docker-library/busybox/blob/4629888e69e7b69b594aec10529f8ca4a2fa31e7/uclibc/Dockerfile.builder
511,"docker-library
busybox",https://github.com/docker-library/busybox,4629888e69e7b69b594aec10529f8ca4a2fa31e7,8b0d96682de7f70e9a67bc9ab1a488da289ede38,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
",2016/10/08 01:56,2017/05/16 05:19,2015/02/03 15:02,,1,612 days 10:54:00.000000000,"220 days, 3:23:00",https://github.com/docker-library/busybox/blob/4629888e69e7b69b594aec10529f8ca4a2fa31e7/uclibc/Dockerfile.builder,https://github.com/docker-library/busybox/blob/8b0d96682de7f70e9a67bc9ab1a488da289ede38/uclibc/Dockerfile.builder
512,"docker-library
busybox",https://github.com/docker-library/busybox,8b0d96682de7f70e9a67bc9ab1a488da289ede38,4bede2d8a0805ac73ce3c04f430a03bccb8f88e9,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now; 1.27+)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
",2017/05/16 05:19,2017/07/02 02:11,2015/02/03 15:02,,1,832 days 14:17:00.000000000,"46 days, 20:52:00",https://github.com/docker-library/busybox/blob/8b0d96682de7f70e9a67bc9ab1a488da289ede38/uclibc/Dockerfile.builder,https://github.com/docker-library/busybox/blob/4bede2d8a0805ac73ce3c04f430a03bccb8f88e9/uclibc/Dockerfile.builder
513,"docker-library
busybox",https://github.com/docker-library/busybox,4bede2d8a0805ac73ce3c04f430a03bccb8f88e9,,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO s390x ? (needs BR2_TOOLCHAIN_BUILDROOT_UCLIBC support)
",2017/07/02 02:11,,2015/02/03 15:02,,1,879 days 11:09:00.000000000,削除されていません,https://github.com/docker-library/busybox/blob/4bede2d8a0805ac73ce3c04f430a03bccb8f88e9/uclibc/Dockerfile.builder,
514,"docker-library
busybox",https://github.com/docker-library/busybox,4bede2d8a0805ac73ce3c04f430a03bccb8f88e9,,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO ppc64el ? (needs BR2_TOOLCHAIN_BUILDROOT_UCLIBC support)
",2017/07/02 02:11,,2015/02/03 15:02,,1,879 days 11:09:00.000000000,削除されていません,https://github.com/docker-library/busybox/blob/4bede2d8a0805ac73ce3c04f430a03bccb8f88e9/uclibc/Dockerfile.builder,
515,"docker-library
busybox",https://github.com/docker-library/busybox,6b303c84f063bea2bc3bc86dc86c4db1f3a8b5d3,4629888e69e7b69b594aec10529f8ca4a2fa31e7,musl/Dockerfile.builder,musl/Dockerfile.builder,"# see http://wiki.musl-libc.org/wiki/Building_Busybox
# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
",2016/01/08 03:46,2016/10/08 01:56,2016/01/08 03:46,,1,0 days 00:00:00.000000000,"273 days, 22:10:00",https://github.com/docker-library/busybox/blob/6b303c84f063bea2bc3bc86dc86c4db1f3a8b5d3/musl/Dockerfile.builder,https://github.com/docker-library/busybox/blob/4629888e69e7b69b594aec10529f8ca4a2fa31e7/musl/Dockerfile.builder
516,"docker-library
busybox",https://github.com/docker-library/busybox,4629888e69e7b69b594aec10529f8ca4a2fa31e7,8b0d96682de7f70e9a67bc9ab1a488da289ede38,musl/Dockerfile.builder,musl/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# see http://wiki.musl-libc.org/wiki/Building_Busybox
",2016/10/08 01:56,2017/05/16 05:19,2016/01/08 03:46,,1,273 days 22:10:00.000000000,"220 days, 3:23:00",https://github.com/docker-library/busybox/blob/4629888e69e7b69b594aec10529f8ca4a2fa31e7/musl/Dockerfile.builder,https://github.com/docker-library/busybox/blob/8b0d96682de7f70e9a67bc9ab1a488da289ede38/musl/Dockerfile.builder
517,"docker-library
busybox",https://github.com/docker-library/busybox,8b0d96682de7f70e9a67bc9ab1a488da289ede38,,musl/Dockerfile.builder,musl/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now; 1.27+)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# see http://wiki.musl-libc.org/wiki/Building_Busybox
",2017/05/16 05:19,,2016/01/08 03:46,,1,494 days 01:33:00.000000000,削除されていません,https://github.com/docker-library/busybox/blob/8b0d96682de7f70e9a67bc9ab1a488da289ede38/musl/Dockerfile.builder,
518,"docker-library
busybox",https://github.com/docker-library/busybox,c28aca6a64e108187f75d573e680cea20893615a,,ubuntu/Dockerfile.builder,ubuntu/Dockerfile.builder,"# hack hack hack hack hack
# with glibc, static busybox uses libnss for DNS resolution :(
",2015/10/20 03:07,2016/01/12 00:39,2015/09/15 08:25,2016/01/12 00:39,1,34 days 18:42:00.000000000,ファイル削除,https://github.com/docker-library/busybox/blob/c28aca6a64e108187f75d573e680cea20893615a/ubuntu/Dockerfile.builder,
519,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,2a2584ea8edb91065217e3f2a8d99e64e991445b,ced15f9e787dde6d7559819896bf322ef9a9fa17,Dockerfile,7.8/Dockerfile,"## haskell package versions; can be overriden via context hacks
",2014/07/27 06:49,2014/10/07 08:37,2014/05/29 11:51,,1,58 days 18:58:00.000000000,"72 days, 1:48:00",https://github.com/haskell/docker-haskell/blob/2a2584ea8edb91065217e3f2a8d99e64e991445b/Dockerfile,https://github.com/haskell/docker-haskell/blob/ced15f9e787dde6d7559819896bf322ef9a9fa17/7.8/Dockerfile
520,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,ced15f9e787dde6d7559819896bf322ef9a9fa17,3d147020c8d2beb5a52cb3b9ef89712f9e2c1939,7.8/Dockerfile,7.8/Dockerfile,"## install additional libs typically needed by hackage packages
",2014/10/07 08:37,2015/03/28 01:31,2014/05/29 11:51,,1,130 days 20:46:00.000000000,"171 days, 16:54:00",https://github.com/haskell/docker-haskell/blob/ced15f9e787dde6d7559819896bf322ef9a9fa17/7.8/Dockerfile,https://github.com/haskell/docker-haskell/blob/3d147020c8d2beb5a52cb3b9ef89712f9e2c1939/7.8/Dockerfile
521,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,3d147020c8d2beb5a52cb3b9ef89712f9e2c1939,,7.8/Dockerfile,7.8/Dockerfile,"## install additional libs typically needed by hackage packages
#RUN apt-get update && \
#    apt-get install ${OPTS_APT} zlib1g-dev libtinfo-dev

## run ghci by default unless a command is specified
",2015/03/28 01:31,,2014/05/29 11:51,,1,302 days 13:40:00.000000000,削除されていません,https://github.com/haskell/docker-haskell/blob/3d147020c8d2beb5a52cb3b9ef89712f9e2c1939/7.8/Dockerfile,
522,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,3d147020c8d2beb5a52cb3b9ef89712f9e2c1939,,7.10/Dockerfile,7.10/Dockerfile,"## install additional libs typically needed by hackage packages
#RUN apt-get update && \
#    apt-get install ${OPTS_APT} zlib1g-dev libtinfo-dev

## run ghci by default unless a command is specified
",2015/03/28 01:31,,2015/03/28 01:31,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/haskell/docker-haskell/blob/3d147020c8d2beb5a52cb3b9ef89712f9e2c1939/7.10/Dockerfile,
523,"docker-library
memcached",https://github.com/docker-library/memcached,6c09fae709f1cee21d63f7b3619cad097edb6609,,alpine/Dockerfile,alpine/Dockerfile,"# TODO https://github.com/memcached/memcached/issues/382 ""t/chunked-extstore.t is flaky on arm32v6""
",2018/05/30 04:45,,2016/01/18 20:51,,1,862 days 07:54:00.000000000,削除されていません,https://github.com/docker-library/memcached/blob/6c09fae709f1cee21d63f7b3619cad097edb6609/alpine/Dockerfile,
524,"docker-library
memcached",https://github.com/docker-library/memcached,6c09fae709f1cee21d63f7b3619cad097edb6609,,debian/Dockerfile,debian/Dockerfile,"# TODO https://github.com/memcached/memcached/issues/382 ""t/chunked-extstore.t is flaky on arm32v6""
",2018/05/30 04:45,,2015/01/01 06:36,,1,1244 days 22:09:00.000000000,削除されていません,https://github.com/docker-library/memcached/blob/6c09fae709f1cee21d63f7b3619cad097edb6609/debian/Dockerfile,
525,"cloudbees
jenkins-ci.org-docker",https://github.com/cloudbees/jenkins-ci.org-docker,07d980e247edc241b6835df024e876cfdb469cad,,Dockerfile-jdk11,Dockerfile-jdk11,"# TODO: revert before the GA release of Java 11 support (JENKINS-55087)
",2018/12/08 06:13,,2014/12/03 17:04,,1,1465 days 13:09:00.000000000,削除されていません,https://github.com/cloudbees/jenkins-ci.org-docker/blob/07d980e247edc241b6835df024e876cfdb469cad/Dockerfile-jdk11,
526,"cloudbees
jenkins-ci.org-docker",https://github.com/cloudbees/jenkins-ci.org-docker,ae123feaec324dc35350a8bd9ab2704597857f38,,Dockerfile-alpine,Dockerfile-alpine,"# FIXME(oleg_nenashev): This is not an official AdoptOpenJDK Docker Image.
# There is no official Alpine images at the moment.
# Needs upgrade when/if there is an official alpine image.
",2020/08/13 18:42,,2017/07/20 18:53,,1,1119 days 23:49:00.000000000,削除されていません,https://github.com/cloudbees/jenkins-ci.org-docker/blob/ae123feaec324dc35350a8bd9ab2704597857f38/Dockerfile-alpine,
527,"therealprologic
docker-crux",https://github.com/therealprologic/docker-crux,0a2b1fda0bbc86d29be874874d2603c64d808c20,,build/aarch64/Dockerfile,build/aarch64/Dockerfile,"# Creates an image to build the CRUX filesystem

# TODO: Once bootstrapped, use 'crux:latest'
",2018/11/08 17:18,2018/11/14 22:29,2018/10/22 21:01,2018/11/14 22:29,1,16 days 20:17:00.000000000,ファイル削除,https://github.com/therealprologic/docker-crux/blob/0a2b1fda0bbc86d29be874874d2603c64d808c20/build/aarch64/Dockerfile,
528,"docker-library
docs",https://github.com/docker-library/docs,2633e18b556b92de3d9ce9280b833cd61e941ac2,,Dockerfile,Dockerfile,"# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
",2015/02/11 06:12,,2014/10/22 13:29,,1,111 days 16:43:00.000000000,削除されていません,https://github.com/docker-library/docs/blob/2633e18b556b92de3d9ce9280b833cd61e941ac2/Dockerfile,
529,"docker-library
docs",https://github.com/docker-library/docs,2633e18b556b92de3d9ce9280b833cd61e941ac2,,Dockerfile,Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
",2015/02/11 06:12,,2014/10/22 13:29,,1,111 days 16:43:00.000000000,削除されていません,https://github.com/docker-library/docs/blob/2633e18b556b92de3d9ce9280b833cd61e941ac2/Dockerfile,
530,"docker-library
docs",https://github.com/docker-library/docs,eb5d2577d11856d5bfff9de942ce05cbaa89e63e,,.template-helpers/generate-dockerfile-links-partial.tmpl,.template-helpers/generate-dockerfile-links-partial.tmpl,/* TODO decide what to do (if anything) about non-GitHub repos with respect to URL */,2016/06/07 02:56,,2016/06/07 02:56,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docs/blob/eb5d2577d11856d5bfff9de942ce05cbaa89e63e/.template-helpers/generate-dockerfile-links-partial.tmpl,
531,"docker-library
kibana",https://github.com/docker-library/kibana,cc92280939a05c80282bc33e85e8a24e14f08def,,5.0/Dockerfile,5/Dockerfile,"# TODO figure out what's going on here and what it'll settle to for 5.0 GA

",2016/04/19 01:22,2019/04/23 04:53,2016/04/19 01:22,2019/04/23 04:53,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/kibana/blob/cc92280939a05c80282bc33e85e8a24e14f08def/5.0/Dockerfile,
532,"RocketChat
Rocket.Chat",https://github.com/RocketChat/Rocket.Chat,79c023e0fb6c24d77c9c06a4bb34b5247565e0fb,,.docker/Dockerfile.rhel,.docker/Dockerfile.rhel,"# This is ugly... But for some reason npm and node aren't available at this stage.
",2018/04/11 05:09,,2018/04/11 05:09,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/RocketChat/Rocket.Chat/blob/79c023e0fb6c24d77c9c06a4bb34b5247565e0fb/.docker/Dockerfile.rhel,
533,"RocketChat
Rocket.Chat",https://github.com/RocketChat/Rocket.Chat,52439de994dcaac75645f39645dd68bc7e1c21b9,,.docker/Dockerfile.rhel,.docker/Dockerfile.rhel,"# Hack needed to force use of bundled library instead of system level outdated library
# https://github.com/lovell/sharp/issues/892
",2018/07/19 04:37,,2018/04/11 05:09,,1,98 days 23:28:00.000000000,削除されていません,https://github.com/RocketChat/Rocket.Chat/blob/52439de994dcaac75645f39645dd68bc7e1c21b9/.docker/Dockerfile.rhel,
534,"ibm-messaging
mq-container",https://github.com/ibm-messaging/mq-container,ec68367227f5c4fd6a59fcab928af0584673a016,,incubating/Dockerfile-sfbridge,incubating/Dockerfile-sfbridge,"# TODO: Create configuration file from environment variables?
# TODO: Add entrypoint to run the bridge
",2017/09/07 21:39,,2017/09/07 21:39,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/ibm-messaging/mq-container/blob/ec68367227f5c4fd6a59fcab928af0584673a016/incubating/Dockerfile-sfbridge,
535,"rocker-org
rocker",https://github.com/rocker-org/rocker,a35c1df7e3dced0956cc4c33fd32ef71a443d8c4,,rstudio/testing/Dockerfile,rstudio/testing/Dockerfile,"  ## hack to avoid RStudio-bug in detecting build-dependencies         
  # && ln -s&& ln -s ln -s /usr/local/bin/R /usr/bin/R \
  # && ln -s&& ln -s ln -s /usr/local/lib/R /usr/lib/R

",2016/12/22 03:57,,2016/11/12 15:45,,1,39 days 12:12:00.000000000,削除されていません,https://github.com/rocker-org/rocker/blob/a35c1df7e3dced0956cc4c33fd32ef71a443d8c4/rstudio/testing/Dockerfile,
536,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,70edeb47eda3c959874a737420cb4e31d9005be3,,official/webProfile8/java11/openj9/Dockerfile,official/latest/webProfile8/java11/openj9/Dockerfile,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/05/29 02:14,2019/11/04 10:02,2018/10/31 06:12,2019/11/04 10:02,1,209 days 20:02:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/70edeb47eda3c959874a737420cb4e31d9005be3/official/webProfile8/java11/openj9/Dockerfile,
537,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,70edeb47eda3c959874a737420cb4e31d9005be3,,official/kernel/java11/openj9/Dockerfile,official/latest/kernel/java11/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/05/29 02:14,2019/11/04 10:02,2018/10/31 06:12,2019/11/04 10:02,1,209 days 20:02:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/70edeb47eda3c959874a737420cb4e31d9005be3/official/kernel/java11/openj9/Dockerfile,
538,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,2c9acecae083e1a45873df87b7b0de7a14c4ee20,,official/19.0.0.x/javaee8/java12/openj9/Dockerfile,official/latest/javaee8/java12/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/06/05 04:45,2019/11/04 10:02,2019/06/05 04:45,2019/11/04 10:02,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/2c9acecae083e1a45873df87b7b0de7a14c4ee20/official/19.0.0.x/javaee8/java12/openj9/Dockerfile,
539,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,2c9acecae083e1a45873df87b7b0de7a14c4ee20,,official/19.0.0.x/webProfile8/java12/openj9/Dockerfile,official/latest/webProfile8/java12/openj9/Dockerfile,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/06/05 04:45,2019/11/04 10:02,2019/06/05 04:45,2019/11/04 10:02,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/2c9acecae083e1a45873df87b7b0de7a14c4ee20/official/19.0.0.x/webProfile8/java12/openj9/Dockerfile,
540,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,70edeb47eda3c959874a737420cb4e31d9005be3,,official/javaee8/java11/openj9/Dockerfile,official/latest/javaee8/java11/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/05/29 02:14,2019/11/04 10:02,2018/10/31 06:12,2019/11/04 10:02,1,209 days 20:02:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/70edeb47eda3c959874a737420cb4e31d9005be3/official/javaee8/java11/openj9/Dockerfile,
541,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,2c9acecae083e1a45873df87b7b0de7a14c4ee20,,official/19.0.0.x/kernel/java12/openj9/Dockerfile,official/latest/kernel/java12/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/06/05 04:45,2019/11/04 10:02,2019/06/05 04:45,2019/11/04 10:02,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/2c9acecae083e1a45873df87b7b0de7a14c4ee20/official/19.0.0.x/kernel/java12/openj9/Dockerfile,
542,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,,official/19.0.0.9/javaee8/java12/openj9/Dockerfile,official/19.0.0.9/javaee8/java12/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2019/11/20 22:55,2019/09/16 23:28,2019/11/20 22:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/5ccbc0792c730cae1f5b31070201f3286cd8ce03/official/19.0.0.9/javaee8/java12/openj9/Dockerfile,
543,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,,official/19.0.0.9/webProfile8/java11/openj9/Dockerfile,releases/19.0.0.9/webProfile8/Dockerfile.ubuntu.adoptopenjdk11,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2020/03/17 05:34,2019/09/16 23:28,2020/03/17 05:34,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/5ccbc0792c730cae1f5b31070201f3286cd8ce03/official/19.0.0.9/webProfile8/java11/openj9/Dockerfile,
544,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,,official/19.0.0.9/kernel/java11/openj9/Dockerfile,releases/19.0.0.9/kernel/Dockerfile.ubuntu.adoptopenjdk11,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2020/03/17 05:34,2019/09/16 23:28,2020/03/17 05:34,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/5ccbc0792c730cae1f5b31070201f3286cd8ce03/official/19.0.0.9/kernel/java11/openj9/Dockerfile,
545,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,,official/19.0.0.9/javaee8/java11/openj9/Dockerfile,releases/19.0.0.9/javaee8/Dockerfile.ubuntu.adoptopenjdk11,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2020/03/17 05:34,2019/09/16 23:28,2020/03/17 05:34,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/5ccbc0792c730cae1f5b31070201f3286cd8ce03/official/19.0.0.9/javaee8/java11/openj9/Dockerfile,
546,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,,official/19.0.0.9/kernel/java12/openj9/Dockerfile,official/19.0.0.9/kernel/java12/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2019/11/20 22:55,2019/09/16 23:28,2019/11/20 22:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/5ccbc0792c730cae1f5b31070201f3286cd8ce03/official/19.0.0.9/kernel/java12/openj9/Dockerfile,
547,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,,official/19.0.0.9/webProfile8/java12/openj9/Dockerfile,official/19.0.0.9/webProfile8/java12/openj9/Dockerfile,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2019/11/20 22:55,2019/09/16 23:28,2019/11/20 22:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/5ccbc0792c730cae1f5b31070201f3286cd8ce03/official/19.0.0.9/webProfile8/java12/openj9/Dockerfile,
548,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,79898914adc2141f929c5e8bd3ca6ac23c3b995d,,official/19.0.0.6/javaee8/java11/openj9/Dockerfile,releases/19.0.0.6/javaee8/Dockerfile.ubuntu.adoptopenjdk11,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/06/21 23:02,2020/01/07 04:50,2019/06/21 23:02,2020/01/07 04:50,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/79898914adc2141f929c5e8bd3ca6ac23c3b995d/official/19.0.0.6/javaee8/java11/openj9/Dockerfile,
549,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,79898914adc2141f929c5e8bd3ca6ac23c3b995d,,official/19.0.0.6/webProfile8/java11/openj9/Dockerfile,releases/19.0.0.6/webProfile8/Dockerfile.ubuntu.adoptopenjdk11,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/06/21 23:02,2020/01/07 04:50,2019/06/21 23:02,2020/01/07 04:50,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/79898914adc2141f929c5e8bd3ca6ac23c3b995d/official/19.0.0.6/webProfile8/java11/openj9/Dockerfile,
550,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,79898914adc2141f929c5e8bd3ca6ac23c3b995d,,official/19.0.0.6/kernel/java11/openj9/Dockerfile,releases/19.0.0.6/kernel/Dockerfile.ubuntu.adoptopenjdk11,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/06/21 23:02,2020/01/07 04:50,2019/06/21 23:02,2020/01/07 04:50,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/openliberty/ci.docker/blob/79898914adc2141f929c5e8bd3ca6ac23c3b995d/official/19.0.0.6/kernel/java11/openj9/Dockerfile,
551,"nginxinc
docker-nginx",https://github.com/nginxinc/docker-nginx,0501f0b73fd7fbfb139d1e98a7fd3b63426b16a1,,stable/alpine-perl/Dockerfile,stable/alpine-perl/Dockerfile,"# fixme: needs to check out a tag on the next 1.14 release
",2019/03/11 23:46,,2017/04/13 22:07,,1,697 days 01:39:00.000000000,削除されていません,https://github.com/nginxinc/docker-nginx/blob/0501f0b73fd7fbfb139d1e98a7fd3b63426b16a1/stable/alpine-perl/Dockerfile,
552,"nginxinc
docker-nginx",https://github.com/nginxinc/docker-nginx,0501f0b73fd7fbfb139d1e98a7fd3b63426b16a1,,stable/alpine/Dockerfile,stable/alpine/Dockerfile,"# fixme: needs to check out a tag on the next 1.14 release
",2019/03/11 23:46,,2016/02/17 02:10,,1,1118 days 21:36:00.000000000,削除されていません,https://github.com/nginxinc/docker-nginx/blob/0501f0b73fd7fbfb139d1e98a7fd3b63426b16a1/stable/alpine/Dockerfile,
553,"influxdata
influxdb",https://github.com/influxdata/influxdb,289a05efd63f58c7e2a1c751182709590bcc7380,,Dockerfile_build_ubuntu64_go1.11,Dockerfile_build_ubuntu64_go1.11,"# TODO(edd) this needs to be updated to 1.11 when the branch is available.
",2018/07/12 19:41,2019/01/12 03:38,2017/07/22 02:51,2019/01/12 03:38,1,355 days 16:50:00.000000000,ファイル削除,https://github.com/influxdata/influxdb/blob/289a05efd63f58c7e2a1c751182709590bcc7380/Dockerfile_build_ubuntu64_go1.11,
554,"cruxlinux
docker-crux",https://github.com/cruxlinux/docker-crux,0a2b1fda0bbc86d29be874874d2603c64d808c20,,build/aarch64/Dockerfile,build/aarch64/Dockerfile,"# Creates an image to build the CRUX filesystem

# TODO: Once bootstrapped, use 'crux:latest'
",2018/11/08 17:18,2018/11/14 22:29,2018/10/22 21:01,2018/11/14 22:29,1,16 days 20:17:00.000000000,ファイル削除,https://github.com/cruxlinux/docker-crux/blob/0a2b1fda0bbc86d29be874874d2603c64d808c20/build/aarch64/Dockerfile,
555,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,,3.6/Dockerfile,3.6/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,,2019/02/12 09:21,,1,43 days 21:50:00.000000000,削除されていません,https://github.com/docker-library/pypy/blob/d54416e2be73520a490eb0dd2819d8a2b4df3652/3.6/Dockerfile,
556,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,,2.7/slim/Dockerfile,2.7/slim/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,,2014/12/20 07:57,,1,1558 days 23:14:00.000000000,削除されていません,https://github.com/docker-library/pypy/blob/d54416e2be73520a490eb0dd2819d8a2b4df3652/2.7/slim/Dockerfile,
557,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,,3.6/slim/Dockerfile,3.6/slim/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,,2014/12/20 07:57,,1,1558 days 23:14:00.000000000,削除されていません,https://github.com/docker-library/pypy/blob/d54416e2be73520a490eb0dd2819d8a2b4df3652/3.6/slim/Dockerfile,
558,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,,2.7/Dockerfile,2.7/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,,2014/12/17 08:36,,1,1561 days 22:35:00.000000000,削除されていません,https://github.com/docker-library/pypy/blob/d54416e2be73520a490eb0dd2819d8a2b4df3652/2.7/Dockerfile,
559,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,,Dockerfile-slim.template,Dockerfile-slim.template,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,,2017/08/25 08:16,,1,579 days 22:55:00.000000000,削除されていません,https://github.com/docker-library/pypy/blob/d54416e2be73520a490eb0dd2819d8a2b4df3652/Dockerfile-slim.template,
560,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,,3.5/slim/Dockerfile,3.5/slim/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,2019/10/15 07:34,2019/02/12 09:21,2019/10/15 07:34,1,43 days 21:50:00.000000000,ファイル削除,https://github.com/docker-library/pypy/blob/d54416e2be73520a490eb0dd2819d8a2b4df3652/3.5/slim/Dockerfile,
561,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,,Dockerfile.template,Dockerfile.template,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,,2017/08/25 08:16,,1,579 days 22:55:00.000000000,削除されていません,https://github.com/docker-library/pypy/blob/d54416e2be73520a490eb0dd2819d8a2b4df3652/Dockerfile.template,
562,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,,3.5/Dockerfile,3.5/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,2019/10/15 07:34,2014/12/17 08:36,2019/10/15 07:34,1,1561 days 22:35:00.000000000,ファイル削除,https://github.com/docker-library/pypy/blob/d54416e2be73520a490eb0dd2819d8a2b4df3652/3.5/Dockerfile,
563,"docker-library
drupal",https://github.com/docker-library/drupal,b05d762e4fa8ff852649ed6673c5653d9bb18401,,8.6/fpm/Dockerfile,8.8/fpm-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:48,,2017/08/04 22:07,,1,714 days 07:41:00.000000000,削除されていません,https://github.com/docker-library/drupal/blob/b05d762e4fa8ff852649ed6673c5653d9bb18401/8.6/fpm/Dockerfile,
564,"docker-library
drupal",https://github.com/docker-library/drupal,b05d762e4fa8ff852649ed6673c5653d9bb18401,,8.6/apache/Dockerfile,8.8/apache-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:48,,2018/03/29 09:03,,1,477 days 20:45:00.000000000,削除されていません,https://github.com/docker-library/drupal/blob/b05d762e4fa8ff852649ed6673c5653d9bb18401/8.6/apache/Dockerfile,
565,"docker-library
drupal",https://github.com/docker-library/drupal,b05d762e4fa8ff852649ed6673c5653d9bb18401,,8.7/fpm/Dockerfile,8.9/apache-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:48,,2017/02/02 13:15,,1,897 days 16:33:00.000000000,削除されていません,https://github.com/docker-library/drupal/blob/b05d762e4fa8ff852649ed6673c5653d9bb18401/8.7/fpm/Dockerfile,
566,"docker-library
drupal",https://github.com/docker-library/drupal,b05d762e4fa8ff852649ed6673c5653d9bb18401,,8.7/apache/Dockerfile,8.9/fpm-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:48,,2017/02/02 13:15,,1,897 days 16:33:00.000000000,削除されていません,https://github.com/docker-library/drupal/blob/b05d762e4fa8ff852649ed6673c5653d9bb18401/8.7/apache/Dockerfile,
567,"docker-library
drupal",https://github.com/docker-library/drupal,b05d762e4fa8ff852649ed6673c5653d9bb18401,,7/fpm/Dockerfile,7/fpm-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:48,,2016/01/22 08:03,,1,1274 days 21:45:00.000000000,削除されていません,https://github.com/docker-library/drupal/blob/b05d762e4fa8ff852649ed6673c5653d9bb18401/7/fpm/Dockerfile,
568,"docker-library
drupal",https://github.com/docker-library/drupal,6440784240cfb19b860220e874a738b961577949,b05d762e4fa8ff852649ed6673c5653d9bb18401,Dockerfile,7/apache-buster/Dockerfile,"# TODO use this MD5
",2015/04/15 08:20,2019/07/20 05:48,2015/04/15 08:20,,1,0 days 00:00:00.000000000,"1556 days, 21:28:00",https://github.com/docker-library/drupal/blob/6440784240cfb19b860220e874a738b961577949/Dockerfile,https://github.com/docker-library/drupal/blob/b05d762e4fa8ff852649ed6673c5653d9bb18401/7/apache-buster/Dockerfile
569,"docker-library
drupal",https://github.com/docker-library/drupal,b05d762e4fa8ff852649ed6673c5653d9bb18401,,7/apache/Dockerfile,7/apache-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:48,,2015/04/15 08:20,,1,1556 days 21:28:00.000000000,削除されていません,https://github.com/docker-library/drupal/blob/b05d762e4fa8ff852649ed6673c5653d9bb18401/7/apache/Dockerfile,
570,"docker-library
drupal",https://github.com/docker-library/drupal,b05d762e4fa8ff852649ed6673c5653d9bb18401,,Dockerfile-debian.template,Dockerfile-debian.template,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:48,,2018/02/15 10:09,,1,519 days 19:39:00.000000000,削除されていません,https://github.com/docker-library/drupal/blob/b05d762e4fa8ff852649ed6673c5653d9bb18401/Dockerfile-debian.template,
571,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,8d7d53f701331936ae654fff0249ccf872e5de44,,0.8.3/Dockerfile,0.X/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/09/20 01:09,,2017/09/20 01:09,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/hashicorp/docker-vault/blob/8d7d53f701331936ae654fff0249ccf872e5de44/0.8.3/Dockerfile,
572,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,9b8dfaaf3738b16b4b2afbbdbc41f3419986b394,,0.7.2/Dockerfile,0.7.2/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/05/16 00:26,2017/10/06 01:40,2017/05/16 00:26,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/9b8dfaaf3738b16b4b2afbbdbc41f3419986b394/0.7.2/Dockerfile,
573,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,b95f1b3f7b1df5652ca7e226bc8ede55520cc89f,38c20af56a8d3d340a2392dd5ad11cdd51760bc4,0.6/Dockerfile,0.6/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM, exposes a web UI, and bootstraps itself. Don't use this configuration
# for production.
",2016/01/30 04:18,2016/07/06 05:54,2016/01/30 04:18,2017/10/06 01:40,1,0 days 00:00:00.000000000,"158 days, 1:36:00",https://github.com/hashicorp/docker-vault/blob/b95f1b3f7b1df5652ca7e226bc8ede55520cc89f/0.6/Dockerfile,https://github.com/hashicorp/docker-vault/blob/38c20af56a8d3d340a2392dd5ad11cdd51760bc4/0.6/Dockerfile
574,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,38c20af56a8d3d340a2392dd5ad11cdd51760bc4,,0.6/Dockerfile,0.6/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/07/06 05:54,2017/10/06 01:40,2016/01/30 04:18,2017/10/06 01:40,1,158 days 01:36:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/38c20af56a8d3d340a2392dd5ad11cdd51760bc4/0.6/Dockerfile,
575,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,70ec3a24d5f8bc77291f5367ef487303f9716d33,,0.7.3/Dockerfile,0.7.3/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/06/08 05:15,2017/10/06 01:40,2017/06/08 05:15,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/70ec3a24d5f8bc77291f5367ef487303f9716d33/0.7.3/Dockerfile,
576,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,67f88c6cea8da71a9803a401e7a7c950dd884b02,,0.7.0/Dockerfile,0.7.0/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/03/28 23:33,2017/10/06 01:40,2017/03/28 23:33,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/67f88c6cea8da71a9803a401e7a7c950dd884b02/0.7.0/Dockerfile,
577,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,638047d80dc87b97f7bda67c758f54b2826959ce,,0.8.0-rc1/Dockerfile,0.8.0-rc1/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/08/04 04:16,2017/10/06 01:40,2017/08/04 04:16,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/638047d80dc87b97f7bda67c758f54b2826959ce/0.8.0-rc1/Dockerfile,
578,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,c087a27b5ec93445e89dc46f25af973f114f1399,,0.6.5/Dockerfile,0.6.5/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/02/08 11:01,2017/10/06 01:40,2017/02/08 11:01,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/c087a27b5ec93445e89dc46f25af973f114f1399/0.6.5/Dockerfile,
579,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,3d3957180d689ecddb537aa799a878171280e8a3,,0.6.2/Dockerfile,0.6.2/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/10/06 05:37,2017/10/06 01:40,2016/10/06 05:37,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/3d3957180d689ecddb537aa799a878171280e8a3/0.6.2/Dockerfile,
580,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,b480db2b90dd4190c3ce4e8588624ed426fd7dea,,0.6.3/Dockerfile,0.6.3/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/12/06 01:35,2017/10/06 01:40,2016/12/06 01:35,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/b480db2b90dd4190c3ce4e8588624ed426fd7dea/0.6.3/Dockerfile,
581,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,296309e4e40be197e89b9f063463fe02c4c5c3e2,,0.6.1/Dockerfile,0.6.1/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/08/21 04:50,2017/10/06 01:40,2016/08/21 04:50,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/296309e4e40be197e89b9f063463fe02c4c5c3e2/0.6.1/Dockerfile,
582,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,7bbdde58de683a2bb6e384e4c20e30308b4ff882,,0.6.4/Dockerfile,0.6.4/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/12/17 05:52,2017/10/06 01:40,2016/12/17 05:52,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/7bbdde58de683a2bb6e384e4c20e30308b4ff882/0.6.4/Dockerfile,
583,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,20c626ab1c89a17c24f370ae18cfe6cbc0eb8d33,,0.8.0-beta1/Dockerfile,0.8.0-beta1/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/07/26 10:02,2017/10/06 01:40,2017/07/26 10:02,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/20c626ab1c89a17c24f370ae18cfe6cbc0eb8d33/0.8.0-beta1/Dockerfile,
584,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,d1cbdce2b531e9223356efb14e828afa556e1f70,,0.8.0/Dockerfile,0.8.0/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/08/09 22:39,2017/10/06 01:40,2017/08/09 22:39,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/d1cbdce2b531e9223356efb14e828afa556e1f70/0.8.0/Dockerfile,
585,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,9ddc187d94f68f2572e4d3b1e733c98c661d628b,,0.8.1/Dockerfile,0.8.1/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/08/17 21:30,2017/10/06 01:40,2017/08/17 21:30,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/9ddc187d94f68f2572e4d3b1e733c98c661d628b/0.8.1/Dockerfile,
586,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,0cbe9598ea742e5227a20012332400b0f96a0327,,0.8.2/Dockerfile,0.8.2/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/09/07 04:52,2017/10/06 01:40,2017/09/07 04:52,2017/10/06 01:40,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/hashicorp/docker-vault/blob/0cbe9598ea742e5227a20012332400b0f96a0327/0.8.2/Dockerfile,
587,"docker-library
postgres",https://github.com/docker-library/postgres,064113e0e481a1d0542846b81858e457fde02c90,,10/Dockerfile,10/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2018/08/22 06:39,,2017/06/22 08:03,,1,425 days 22:36:00.000000000,削除されていません,https://github.com/docker-library/postgres/blob/064113e0e481a1d0542846b81858e457fde02c90/10/Dockerfile,
588,"docker-library
postgres",https://github.com/docker-library/postgres,064113e0e481a1d0542846b81858e457fde02c90,,11/Dockerfile,11/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2018/08/22 06:39,,2018/05/26 04:46,,1,88 days 01:53:00.000000000,削除されていません,https://github.com/docker-library/postgres/blob/064113e0e481a1d0542846b81858e457fde02c90/11/Dockerfile,
589,"docker-library
postgres",https://github.com/docker-library/postgres,064113e0e481a1d0542846b81858e457fde02c90,,9.6/Dockerfile,9.6/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2018/08/22 06:39,,2016/05/13 06:01,,1,831 days 00:38:00.000000000,削除されていません,https://github.com/docker-library/postgres/blob/064113e0e481a1d0542846b81858e457fde02c90/9.6/Dockerfile,
590,"docker-library
postgres",https://github.com/docker-library/postgres,064113e0e481a1d0542846b81858e457fde02c90,,9.5/Dockerfile,9.5/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2018/08/22 06:39,,2015/07/09 01:47,,1,1140 days 04:52:00.000000000,削除されていません,https://github.com/docker-library/postgres/blob/064113e0e481a1d0542846b81858e457fde02c90/9.5/Dockerfile,
591,"docker-library
postgres",https://github.com/docker-library/postgres,064113e0e481a1d0542846b81858e457fde02c90,,Dockerfile-debian.template,Dockerfile-debian.template,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2018/08/22 06:39,,2014/08/02 06:15,,1,1481 days 00:24:00.000000000,削除されていません,https://github.com/docker-library/postgres/blob/064113e0e481a1d0542846b81858e457fde02c90/Dockerfile-debian.template,
592,"docker-library
postgres",https://github.com/docker-library/postgres,064113e0e481a1d0542846b81858e457fde02c90,,9.4/Dockerfile,9.4/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2018/08/22 06:39,2020/02/15 08:50,2014/07/16 09:14,2020/02/15 08:50,1,1497 days 21:25:00.000000000,ファイル削除,https://github.com/docker-library/postgres/blob/064113e0e481a1d0542846b81858e457fde02c90/9.4/Dockerfile,
593,"docker-library
postgres",https://github.com/docker-library/postgres,b96659493b841100dc75ed777bff01913d9fe9e1,,13/Dockerfile,13/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2020/05/22 00:26,,2020/05/22 00:26,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/postgres/blob/b96659493b841100dc75ed777bff01913d9fe9e1/13/Dockerfile,
594,"docker-library
postgres",https://github.com/docker-library/postgres,064113e0e481a1d0542846b81858e457fde02c90,,9.3/Dockerfile,9.3/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2018/08/22 06:39,2018/12/05 07:38,2014/06/24 01:03,2018/12/05 07:38,1,1520 days 05:36:00.000000000,ファイル削除,https://github.com/docker-library/postgres/blob/064113e0e481a1d0542846b81858e457fde02c90/9.3/Dockerfile,
595,"docker-library
postgres",https://github.com/docker-library/postgres,6f7881a307a7856aa7671260b1f0b690ca51b740,,12/Dockerfile,12/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2019/05/24 03:35,,2019/05/24 03:35,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/postgres/blob/6f7881a307a7856aa7671260b1f0b690ca51b740/12/Dockerfile,
596,"docker-library
repo-info",https://github.com/docker-library/repo-info,bdc1ec69eaeffb190f5543403e25d9424d2e1ef2,,Dockerfile.local,Dockerfile.local,"# TODO convert ""dpkg --print-architecture"" to Alpine architecture for downloading the correct architecture binary
",2019/04/09 07:52,,2016/07/23 08:16,,1,989 days 23:36:00.000000000,削除されていません,https://github.com/docker-library/repo-info/blob/bdc1ec69eaeffb190f5543403e25d9424d2e1ef2/Dockerfile.local,
597,"docker-library
repo-info",https://github.com/docker-library/repo-info,ee22b9996661e2621ce486b0709aaf1d5dc173a7,,Dockerfile.tag-details,Dockerfile.remote,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
",2016/08/06 05:07,,2016/08/06 05:07,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/repo-info/blob/ee22b9996661e2621ce486b0709aaf1d5dc173a7/Dockerfile.tag-details,
598,"docker-library
repo-info",https://github.com/docker-library/repo-info,ee22b9996661e2621ce486b0709aaf1d5dc173a7,,Dockerfile.tag-details,Dockerfile.remote,"# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
",2016/08/06 05:07,,2016/08/06 05:07,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/repo-info/blob/ee22b9996661e2621ce486b0709aaf1d5dc173a7/Dockerfile.tag-details,
599,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,8b6397888af7e165e1e1494c6be823a151b616c2,1828584c75e34ee08f12427e64d907f469cbab7c,Dockerfile,1.31/apache/Dockerfile,"# TODO: Switch to debian sid

",2015/12/19 10:39,2015/12/19 13:28,2015/08/13 14:16,,1,127 days 20:23:00.000000000,2:49:00,https://github.com/wikimedia/mediawiki-docker/blob/8b6397888af7e165e1e1494c6be823a151b616c2/Dockerfile,https://github.com/wikimedia/mediawiki-docker/blob/1828584c75e34ee08f12427e64d907f469cbab7c/1.31/apache/Dockerfile
600,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,8b6397888af7e165e1e1494c6be823a151b616c2,4b8cc73503e4fadd6f2b01eba840fa787a0d0ee3,Dockerfile,1.31/apache/Dockerfile,"    # VisualEditor
    # TODO: make submodules shallow clones?
",2015/12/19 10:39,2017/06/08 08:19,2015/08/13 14:16,,1,127 days 20:23:00.000000000,"536 days, 21:40:00",https://github.com/wikimedia/mediawiki-docker/blob/8b6397888af7e165e1e1494c6be823a151b616c2/Dockerfile,https://github.com/wikimedia/mediawiki-docker/blob/4b8cc73503e4fadd6f2b01eba840fa787a0d0ee3/1.31/apache/Dockerfile
601,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,4b8cc73503e4fadd6f2b01eba840fa787a0d0ee3,,Dockerfile,1.31/apache/Dockerfile,"    # Extensions
    # TODO: make submodules shallow clones?
",2017/06/08 08:19,,2015/08/13 14:16,,1,664 days 18:03:00.000000000,削除されていません,https://github.com/wikimedia/mediawiki-docker/blob/4b8cc73503e4fadd6f2b01eba840fa787a0d0ee3/Dockerfile,
602,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,d254f8c01cd0bbbed38bc0c71d0d70066d6fbbb4,9bdcc59dc6ae7bf40eb7d23c6c0d3b133f174146,dev/Dockerfile,dev/Dockerfile,"    # Extensions
    # TODO: make submodules shallow clones?
",2017/12/21 02:08,2019/06/28 06:31,2017/12/21 02:08,,1,0 days 00:00:00.000000000,"554 days, 4:23:00",https://github.com/wikimedia/mediawiki-docker/blob/d254f8c01cd0bbbed38bc0c71d0d70066d6fbbb4/dev/Dockerfile,https://github.com/wikimedia/mediawiki-docker/blob/9bdcc59dc6ae7bf40eb7d23c6c0d3b133f174146/dev/Dockerfile
603,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,9bdcc59dc6ae7bf40eb7d23c6c0d3b133f174146,,dev/Dockerfile,dev/Dockerfile,"	# Extensions
	# TODO: make submodules shallow clones?
",2019/06/28 06:31,,2017/12/21 02:08,,1,554 days 04:23:00.000000000,削除されていません,https://github.com/wikimedia/mediawiki-docker/blob/9bdcc59dc6ae7bf40eb7d23c6c0d3b133f174146/dev/Dockerfile,
604,"hashicorp
docker-consul",https://github.com/hashicorp/docker-consul,b95f1b3f7b1df5652ca7e226bc8ede55520cc89f,432568ecabf6c91ac33eb8e457040ccc69ce7f7a,0.6/Dockerfile,0.X/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM, exposes a web UI, and bootstraps itself. Don't use this configuration
# for production.
",2016/01/30 04:18,2016/09/15 06:22,2016/01/30 04:18,,1,0 days 00:00:00.000000000,"229 days, 2:04:00",https://github.com/hashicorp/docker-consul/blob/b95f1b3f7b1df5652ca7e226bc8ede55520cc89f/0.6/Dockerfile,https://github.com/hashicorp/docker-consul/blob/432568ecabf6c91ac33eb8e457040ccc69ce7f7a/0.X/Dockerfile
605,"hashicorp
docker-consul",https://github.com/hashicorp/docker-consul,56b6839bcf594c5bb796a86e860205c5fa5712b1,,0.6/Dockerfile,0.X/Dockerfile,"# By default you'll get an insecure single-node development server that stores
# everything in RAM, exposes a web UI and HTTP endpoints, and bootstraps itself.
# Don't use this configuration for production.
",2016/07/06 18:33,,2016/01/30 04:18,,1,158 days 14:15:00.000000000,削除されていません,https://github.com/hashicorp/docker-consul/blob/56b6839bcf594c5bb796a86e860205c5fa5712b1/0.6/Dockerfile,
606,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,Dockerfile.template,Dockerfile.template,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2017/06/16 01:40,,1,1 days 01:05:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/Dockerfile.template,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/Dockerfile.template
607,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,,Dockerfile.template,Dockerfile.template,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2017/06/17 02:45,,2017/06/16 01:40,,1,1 days 01:05:00.000000000,削除されていません,https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/Dockerfile.template,
608,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,Dockerfile.template,Dockerfile.template,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2017/06/16 01:40,,1,1 days 01:05:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/Dockerfile.template,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/Dockerfile.template
609,"docker-library
gcc",https://github.com/docker-library/gcc,0a7f7464baaa3a24cdd35e1173d84ab94e32a14d,,8/Dockerfile,8/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2018/05/03 04:26,,2018/05/03 04:26,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/gcc/blob/0a7f7464baaa3a24cdd35e1173d84ab94e32a14d/8/Dockerfile,
610,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,7/Dockerfile,7/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2017/05/03 01:38,2020/05/08 13:19,1,45 days 01:07:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/7/Dockerfile,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/7/Dockerfile
611,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,,7/Dockerfile,7/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2017/06/17 02:45,2020/05/08 13:19,2017/05/03 01:38,2020/05/08 13:19,1,45 days 01:07:00.000000000,ファイル削除,https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/7/Dockerfile,
612,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,7/Dockerfile,7/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2017/05/03 01:38,2020/05/08 13:19,1,45 days 01:07:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/7/Dockerfile,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/7/Dockerfile
613,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,,6/Dockerfile,6/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2017/06/17 02:45,2020/05/07 22:15,2016/09/17 05:48,2020/05/07 22:15,1,272 days 20:57:00.000000000,ファイル削除,https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/6/Dockerfile,
614,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,6/Dockerfile,6/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2016/09/17 05:48,2020/05/07 22:15,1,272 days 20:57:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/6/Dockerfile,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/6/Dockerfile
615,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,6/Dockerfile,6/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2016/09/17 05:48,2020/05/07 22:15,1,272 days 20:57:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/6/Dockerfile,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/6/Dockerfile
616,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,,5/Dockerfile,5/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2017/06/17 02:45,2019/05/04 07:14,2015/12/15 08:34,2019/05/04 07:14,1,549 days 18:11:00.000000000,ファイル削除,https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/5/Dockerfile,
617,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,5/Dockerfile,5/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2015/12/15 08:34,2019/05/04 07:14,1,549 days 18:11:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/5/Dockerfile,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/5/Dockerfile
618,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,5/Dockerfile,5/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2015/12/15 08:34,2019/05/04 07:14,1,549 days 18:11:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/5/Dockerfile,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/5/Dockerfile
619,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,4.9/Dockerfile,4.9/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2014/08/26 07:40,2017/09/30 03:05,1,1025 days 19:05:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/4.9/Dockerfile,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/4.9/Dockerfile
620,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,4.9/Dockerfile,4.9/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2014/08/26 07:40,2017/09/30 03:05,1,1025 days 19:05:00.000000000,"103 days, 23:50:00",https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/4.9/Dockerfile,https://github.com/docker-library/gcc/blob/1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a/4.9/Dockerfile
621,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,,4.9/Dockerfile,4.9/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2017/06/17 02:45,2017/09/30 03:05,2014/08/26 07:40,2017/09/30 03:05,1,1025 days 19:05:00.000000000,ファイル削除,https://github.com/docker-library/gcc/blob/3b33871fe9558262cb5ed6253d358f76710e9ccb/4.9/Dockerfile,
622,"docker-library
gcc",https://github.com/docker-library/gcc,067197794df278e6be14a76a3e0ec80e9ad86941,,9/Dockerfile,9/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2019/05/04 07:11,,2019/05/04 07:11,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/gcc/blob/067197794df278e6be14a76a3e0ec80e9ad86941/9/Dockerfile,
623,"docker-library
gcc",https://github.com/docker-library/gcc,97b046b578bd86cae5414d80b3ad0027c590aebd,,10/Dockerfile,10/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2020/05/08 05:24,,2020/05/08 05:24,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/gcc/blob/97b046b578bd86cae5414d80b3ad0027c590aebd/10/Dockerfile,
624,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,019e3dafeac4116b4547194b6452de9de76610dd,,docker-master/Dockerfile,docker-master/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/05/30 02:40,,2015/08/28 07:47,,1,1005 days 18:53:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/019e3dafeac4116b4547194b6452de9de76610dd/docker-master/Dockerfile,
625,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,02042c331baf96a01030574465fdb4f519108e06,,qemu/Dockerfile,qemu/Dockerfile,"# TODO verify signature
",2017/12/19 06:21,2019/01/18 07:41,2014/09/20 16:00,2019/01/18 07:41,1,1185 days 14:21:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/02042c331baf96a01030574465fdb4f519108e06/qemu/Dockerfile,
626,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,f84280ef47393b585e38e86994de77d605f11028,,containerd/Dockerfile,containerd/Dockerfile,"# TODO .asc / .sha256sum
",2020/03/27 08:17,,2020/03/27 08:17,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/f84280ef47393b585e38e86994de77d605f11028/containerd/Dockerfile,
627,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,df966bd85ec8ee2d918eef64d6a93eeee3cf4930,c850c4e79e7a661bf983685b04c9c00d4a20700c,docker/master/dind/Dockerfile,docker-master/dind/Dockerfile,"# TODO aufs-tools

",2015/08/28 07:47,2017/03/11 16:10,2015/08/28 07:47,,1,0 days 00:00:00.000000000,"561 days, 8:23:00",https://github.com/tianon/dockerfiles/blob/df966bd85ec8ee2d918eef64d6a93eeee3cf4930/docker/master/dind/Dockerfile,https://github.com/tianon/dockerfiles/blob/c850c4e79e7a661bf983685b04c9c00d4a20700c/docker-master/dind/Dockerfile
628,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c850c4e79e7a661bf983685b04c9c00d4a20700c,,docker/master/dind/Dockerfile,docker-master/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/03/11 16:10,,2015/08/28 07:47,,1,561 days 08:23:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/c850c4e79e7a661bf983685b04c9c00d4a20700c/docker/master/dind/Dockerfile,
629,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,019e3dafeac4116b4547194b6452de9de76610dd,,docker-master/dind/Dockerfile,docker-master/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/30 02:40,,2015/08/28 07:47,,1,1005 days 18:53:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/019e3dafeac4116b4547194b6452de9de76610dd/docker-master/dind/Dockerfile,
630,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,2e37f527a42e05e8b9e62a84ec34355edae69e47,,ruby-passenger/Dockerfile,ruby-passenger/Dockerfile,"# TODO find a clean way to do this here in such a way that gems like rmagick can install cleanly without first installing libmagickcore-dev
#ONBUILD ADD Gemfile /apps/rails/Gemfile
#ONBUILD ADD Gemfile.lock /apps/rails/Gemfile.lock
#ONBUILD RUN cd /apps/rails && bundle install --deployment
#ONBUILD ADD . /apps/rails
#ONBUILD RUN chown -R www-data:www-data /apps/rails
",2014/03/29 08:19,2019/09/14 06:33,2014/03/29 08:19,2019/09/14 06:33,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/2e37f527a42e05e8b9e62a84ec34355edae69e47/ruby-passenger/Dockerfile,
631,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,6f3b2ee0f98d1abde53cf49b7bb47bba0e466cfd,,ruby-unicorn/Dockerfile,ruby-unicorn/Dockerfile,"# TODO find a clean way to do this here in such a way that gems like rmagick can install cleanly without first installing libmagickcore-dev
#ONBUILD ADD Gemfile /apps/rails/Gemfile
#ONBUILD ADD Gemfile.lock /apps/rails/Gemfile.lock
#ONBUILD RUN bundle install --deployment
#ONBUILD ADD . /apps/rails
",2014/03/29 08:29,2019/09/14 06:33,2014/03/29 08:29,2019/09/14 06:33,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/6f3b2ee0f98d1abde53cf49b7bb47bba0e466cfd/ruby-unicorn/Dockerfile,
632,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,df966bd85ec8ee2d918eef64d6a93eeee3cf4930,,docker/experimental/dind/Dockerfile,docker/experimental/dind/Dockerfile,"# TODO aufs-tools

",2015/08/28 07:47,2016/11/13 01:12,2015/08/28 07:47,2016/11/13 01:12,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/df966bd85ec8ee2d918eef64d6a93eeee3cf4930/docker/experimental/dind/Dockerfile,
633,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,277a6c9db8301713bf30afa54baff18635fef604,4bc9e1a50ee138a12cef4333288ef4d8a1c16344,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.9 (if it makes it out of edge for 3.9)

",2018/07/04 10:52,2019/04/24 05:58,2016/09/08 06:32,,1,664 days 04:20:00.000000000,"293 days, 19:06:00",https://github.com/tianon/dockerfiles/blob/277a6c9db8301713bf30afa54baff18635fef604/network-toolbox/alpine/Dockerfile,https://github.com/tianon/dockerfiles/blob/4bc9e1a50ee138a12cef4333288ef4d8a1c16344/network-toolbox/alpine/Dockerfile
634,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,4bc9e1a50ee138a12cef4333288ef4d8a1c16344,b6144573262026530b06e311ac1b62e3081e4ecb,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.10 (if it makes it out of edge for 3.10)

",2019/04/24 05:58,2019/07/03 15:24,2016/09/08 06:32,,1,957 days 23:26:00.000000000,"70 days, 9:26:00",https://github.com/tianon/dockerfiles/blob/4bc9e1a50ee138a12cef4333288ef4d8a1c16344/network-toolbox/alpine/Dockerfile,https://github.com/tianon/dockerfiles/blob/b6144573262026530b06e311ac1b62e3081e4ecb/network-toolbox/alpine/Dockerfile
635,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,b6144573262026530b06e311ac1b62e3081e4ecb,ddf64adf1a6c26d5adf9c8fa1c895d01da9834ca,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.11 (if it makes it out of edge)
# https://pkgs.alpinelinux.org/packages?name=nbtscan&branch=edge&arch=x86_64

",2019/07/03 15:24,2020/02/15 10:49,2016/09/08 06:32,,1,1028 days 08:52:00.000000000,"226 days, 19:25:00",https://github.com/tianon/dockerfiles/blob/b6144573262026530b06e311ac1b62e3081e4ecb/network-toolbox/alpine/Dockerfile,https://github.com/tianon/dockerfiles/blob/ddf64adf1a6c26d5adf9c8fa1c895d01da9834ca/network-toolbox/alpine/Dockerfile
636,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,ddf64adf1a6c26d5adf9c8fa1c895d01da9834ca,,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.12 (if it makes it out of edge)
# https://pkgs.alpinelinux.org/packages?name=nbtscan&branch=edge&arch=x86_64

",2020/02/15 10:49,,2016/09/08 06:32,,1,1255 days 04:17:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/ddf64adf1a6c26d5adf9c8fa1c895d01da9834ca/network-toolbox/alpine/Dockerfile,
637,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,16243eae94d9f611d158fb2dc03a0393630c47cc,,speedtest/Dockerfile,speedtest/Dockerfile,"# TODO verify that ookla's ""armhf"" really is armv6
",2020/04/30 08:18,,2014/07/12 10:24,,1,2118 days 21:54:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/16243eae94d9f611d158fb2dc03a0393630c47cc/speedtest/Dockerfile,
638,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,16243eae94d9f611d158fb2dc03a0393630c47cc,,speedtest/Dockerfile,speedtest/Dockerfile,"# TODO figure out what ookla means by their bare ""arm"" arch
",2020/04/30 08:18,,2014/07/12 10:24,,1,2118 days 21:54:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/16243eae94d9f611d158fb2dc03a0393630c47cc/speedtest/Dockerfile,
639,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,03c351859fd6a80d65ee4a35a4bb71d7510a6041,,nylas/sync-engine/Dockerfile,nylas/sync-engine/Dockerfile," # TODO inbox-api or inbox-start
",2016/01/29 08:18,2019/06/25 13:10,2016/01/29 08:18,2019/06/25 13:10,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/03c351859fd6a80d65ee4a35a4bb71d7510a6041/nylas/sync-engine/Dockerfile,
640,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,8cfd903d3f1ffc976206ff75dab4dbfcd5274ca4,,makemkv/Dockerfile,makemkv/Dockerfile,"# TODO find some way to include ccextractor (currently buster-only)

# FPL_MainFeature detection only seemed to work with OpenJDK 9 (8 was insufficient)
",2018/12/26 14:52,,2017/04/02 15:53,,1,632 days 22:59:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/8cfd903d3f1ffc976206ff75dab4dbfcd5274ca4/makemkv/Dockerfile,
641,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,41fba5a095a778acf05150e538b08246b9354f8f,,zoom/Dockerfile,zoom/Dockerfile,"# TODO copy/steal ""browser.sh"" stuff from slack

",2020/09/10 02:13,,2020/09/10 02:13,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/41fba5a095a778acf05150e538b08246b9354f8f/zoom/Dockerfile,
642,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,a5d820803f01e2582d45be1b00a2808ede979951,87b99df183f09b842b49ea7009ba7b6e2c1894f2,xen-orchestra/Dockerfile,xen-orchestra/Dockerfile,"# TODO use links to get a redis server/database instead (since that's where configuration actually goes)
",2013/11/02 14:34,2014/02/08 13:56,2013/11/02 14:34,,1,0 days 00:00:00.000000000,"97 days, 23:22:00",https://github.com/tianon/dockerfiles/blob/a5d820803f01e2582d45be1b00a2808ede979951/xen-orchestra/Dockerfile,https://github.com/tianon/dockerfiles/blob/87b99df183f09b842b49ea7009ba7b6e2c1894f2/xen-orchestra/Dockerfile
643,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,a5d820803f01e2582d45be1b00a2808ede979951,,xen-orchestra/Dockerfile,xen-orchestra/Dockerfile,"# TODO see note above about redis
",2013/11/02 14:34,,2013/11/02 14:34,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/a5d820803f01e2582d45be1b00a2808ede979951/xen-orchestra/Dockerfile,
644,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,87b99df183f09b842b49ea7009ba7b6e2c1894f2,,xen-orchestra/Dockerfile,xen-orchestra/Dockerfile,"#RUN cd /xo/xo-server/public/http && for e in ../../../xo-web/public/*; do ln -s ""$e""; done

# TODO use links to get a redis server/database instead (since that's where configuration actually goes)
",2014/02/08 13:56,,2013/11/02 14:34,,1,97 days 23:22:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/87b99df183f09b842b49ea7009ba7b6e2c1894f2/xen-orchestra/Dockerfile,
645,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,2733bf5befe88d52b6e4126956499f97441871a6,,docker-tianon/Dockerfile,docker-tianon/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
#ENV DIND_COMMIT 130b0bc6032cc675d064e1cc62626cacc9c07a57

#RUN set -eux; \
#	wget -O /usr/local/bin/dind ""https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind""; \
#	chmod +x /usr/local/bin/dind

",2020/04/19 02:20,,2017/09/19 02:59,,1,942 days 23:21:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/2733bf5befe88d52b6e4126956499f97441871a6/docker-tianon/Dockerfile,
646,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,4651c8e65b80e0acc3d2f7df2de980ee28a03c7a,,familysearch-indexing/Dockerfile,familysearch-indexing/Dockerfile,"# TODO add a very lightweight browser for opening help and/or registration
",2014/02/23 15:47,2019/08/02 14:47,2014/02/23 15:47,2019/08/02 14:47,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/4651c8e65b80e0acc3d2f7df2de980ee28a03c7a/familysearch-indexing/Dockerfile,
647,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,1d2040c390a50eca1338d03c4db5ec2db56ef3e2,,grafana/Dockerfile,grafana/Dockerfile,"# TODO verify sha256 values! (add "".sha256"" to the end of this URL)
",2018/11/27 11:59,,2017/01/05 01:50,,1,691 days 10:09:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/1d2040c390a50eca1338d03c4db5ec2db56ef3e2/grafana/Dockerfile,
648,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,5f053bb00f6af3fad9a1a742cfbd689818160c2c,,caff/Dockerfile,caff/Dockerfile,"# TODO move this down when COPY adheres to USER (and remove chown)
",2014/08/27 02:29,,2014/08/27 02:29,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/5f053bb00f6af3fad9a1a742cfbd689818160c2c/caff/Dockerfile,
649,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c4f86111caa8c8eab8e1b3a58cdebcf86807169c,,sbin-init/ubuntu/upstart/12.10/Dockerfile,sbin-init/ubuntu/upstart/14.10/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/06/06 16:45,2019/06/15 05:03,2014/01/12 00:56,2019/06/15 05:03,1,145 days 15:49:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/c4f86111caa8c8eab8e1b3a58cdebcf86807169c/sbin-init/ubuntu/upstart/12.10/Dockerfile,
650,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c4f86111caa8c8eab8e1b3a58cdebcf86807169c,,sbin-init/ubuntu/upstart/13.10/Dockerfile,sbin-init/ubuntu/upstart/13.10/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/06/06 16:45,2014/09/25 13:05,2014/01/12 00:56,2014/09/25 13:05,1,145 days 15:49:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/c4f86111caa8c8eab8e1b3a58cdebcf86807169c/sbin-init/ubuntu/upstart/13.10/Dockerfile,
651,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c4f86111caa8c8eab8e1b3a58cdebcf86807169c,,sbin-init/ubuntu/upstart/13.04/Dockerfile,sbin-init/ubuntu/upstart/13.04/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/06/06 16:45,2014/09/25 13:05,2014/01/12 00:56,2014/09/25 13:05,1,145 days 15:49:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/c4f86111caa8c8eab8e1b3a58cdebcf86807169c/sbin-init/ubuntu/upstart/13.04/Dockerfile,
652,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c4f86111caa8c8eab8e1b3a58cdebcf86807169c,,sbin-init/ubuntu/upstart/12.04/Dockerfile,sbin-init/ubuntu/upstart/12.04/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/06/06 16:45,2019/06/15 05:03,2014/01/12 00:56,2019/06/15 05:03,1,145 days 15:49:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/c4f86111caa8c8eab8e1b3a58cdebcf86807169c/sbin-init/ubuntu/upstart/12.04/Dockerfile,
653,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c4f86111caa8c8eab8e1b3a58cdebcf86807169c,,sbin-init/ubuntu/upstart/14.04/Dockerfile,sbin-init/ubuntu/upstart/14.04/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/06/06 16:45,2019/06/15 05:03,2014/05/13 06:16,2019/06/15 05:03,1,24 days 10:29:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/c4f86111caa8c8eab8e1b3a58cdebcf86807169c/sbin-init/ubuntu/upstart/14.04/Dockerfile,
654,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c4f86111caa8c8eab8e1b3a58cdebcf86807169c,,sbin-init/ubuntu/upstart/Dockerfile.template,sbin-init/ubuntu/upstart/Dockerfile.template,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/06/06 16:45,2019/06/15 05:03,2014/02/12 08:56,2019/06/15 05:03,1,114 days 07:49:00.000000000,ファイル削除,https://github.com/tianon/dockerfiles/blob/c4f86111caa8c8eab8e1b3a58cdebcf86807169c/sbin-init/ubuntu/upstart/Dockerfile.template,
655,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,848b89e8272c2689af1499cc7642d3f3c9a31337,,toybox/Dockerfile,toybox/Dockerfile,"# TODO set ""TARGET"" appropriately based on ""apk --print-arch"" to avoid ""uname -m"" detection
",2020/09/04 06:28,,2020/09/04 06:23,,1,0 days 00:05:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/848b89e8272c2689af1499cc7642d3f3c9a31337/toybox/Dockerfile,
656,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,217170cf047605cd6919b5382a8af6476431d607,,mojo/Dockerfile,mojo/Dockerfile,"# TODO pin a version
",2019/04/26 13:41,,2014/02/23 16:19,,1,1887 days 21:22:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/217170cf047605cd6919b5382a8af6476431d607/mojo/Dockerfile,
657,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,217170cf047605cd6919b5382a8af6476431d607,,mojo/Dockerfile,mojo/Dockerfile,"# TODO pin versions
",2019/04/26 13:41,,2014/02/23 16:19,,1,1887 days 21:22:00.000000000,削除されていません,https://github.com/tianon/dockerfiles/blob/217170cf047605cd6919b5382a8af6476431d607/mojo/Dockerfile,
658,"osrf
docker_images",https://github.com/osrf/docker_images,9210d0d9992df92f34b6b0450f803521b5483789,,ros2/nightly/nightly/Dockerfile,ros2/nightly/nightly/Dockerfile,"# FIXME Remove this once rosdep detects ROS 2 packages https://github.com/ros-infrastructure/rosdep/issues/660
# ignore installed rosdep keys
",2019/03/22 09:35,,2018/10/20 13:18,,1,152 days 20:17:00.000000000,削除されていません,https://github.com/osrf/docker_images/blob/9210d0d9992df92f34b6b0450f803521b5483789/ros2/nightly/nightly/Dockerfile,
659,"osrf
docker_images",https://github.com/osrf/docker_images,244cc8f750b08c8b63f6008708ee1c810d7cecc6,a832e77acaf5c962f6f03ff935a41d6680512d2a,ros2/nightly/nightly/Dockerfile,ros2/nightly/nightly/Dockerfile,"# FIXME This is a workaround for pytest not found causing builds to fail
# Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
",2019/06/05 00:58,2019/12/23 02:17,2018/10/20 13:18,,1,227 days 11:40:00.000000000,"201 days, 1:19:00",https://github.com/osrf/docker_images/blob/244cc8f750b08c8b63f6008708ee1c810d7cecc6/ros2/nightly/nightly/Dockerfile,https://github.com/osrf/docker_images/blob/a832e77acaf5c962f6f03ff935a41d6680512d2a/ros2/nightly/nightly/Dockerfile
660,"osrf
docker_images",https://github.com/osrf/docker_images,3e6535bede473b60d71d009fd9b0596749bd311a,,ros2/nightly/nightly/Dockerfile,ros2/nightly/nightly/Dockerfile,"# FIXME Remove this once ament_export_interfaces respects COLCON_CURRENT_PREFIX https://github.com/ament/ament_cmake/issues/173
#Workaround hard coded paths in nightly tarball setup scripts
",2019/06/06 08:44,,2018/10/20 13:18,,1,228 days 19:26:00.000000000,削除されていません,https://github.com/osrf/docker_images/blob/3e6535bede473b60d71d009fd9b0596749bd311a/ros2/nightly/nightly/Dockerfile,
661,"osrf
docker_images",https://github.com/osrf/docker_images,244cc8f750b08c8b63f6008708ee1c810d7cecc6,,ros2/source/devel/Dockerfile,ros2/source/devel/Dockerfile,"# FIXME This is a workaround for pytest not found causing builds to fail
# Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
",2019/06/05 00:58,,2019/03/22 08:56,,1,74 days 16:02:00.000000000,削除されていません,https://github.com/osrf/docker_images/blob/244cc8f750b08c8b63f6008708ee1c810d7cecc6/ros2/source/devel/Dockerfile,
662,"osrf
docker_images",https://github.com/osrf/docker_images,f780a6cc3b381b6ac6fbb998766233b27f66f175,802c63f18487abd4e9b0fc95c095b2bf9f0835a0,sros/kinetic/Dockerfile,sros/kinetic/Dockerfile,"# HACK, replacing shell with bash for later docker build commands
",2016/08/12 02:31,2019/12/26 23:57,2016/08/12 02:31,,1,0 days 00:00:00.000000000,"1231 days, 21:26:00",https://github.com/osrf/docker_images/blob/f780a6cc3b381b6ac6fbb998766233b27f66f175/sros/kinetic/Dockerfile,https://github.com/osrf/docker_images/blob/802c63f18487abd4e9b0fc95c095b2bf9f0835a0/sros/kinetic/Dockerfile
663,"osrf
docker_images",https://github.com/osrf/docker_images,802c63f18487abd4e9b0fc95c095b2bf9f0835a0,,sros/kinetic/Dockerfile,sros/kinetic/Dockerfile,"# FIXME renaming manifest.xml is a workaround for rosdep misbehaving when both
# manifest.xml and package.xml are present
# install dependencies
",2019/12/26 23:57,,2016/08/12 02:31,,1,1231 days 21:26:00.000000000,削除されていません,https://github.com/osrf/docker_images/blob/802c63f18487abd4e9b0fc95c095b2bf9f0835a0/sros/kinetic/Dockerfile,
664,"Nexenta
nexentastor-csi-driver",https://github.com/Nexenta/nexentastor-csi-driver,b99c6dfd96570909122af1351ed0b1a472176493,b1776c49c8762b69856fb30f8edf05d824a83806,Dockerfile.csi-sanity,Dockerfile.csi-sanity,"# other csi-sanity options: --ginkgo.v -ginkgo.noColor
#TODO remove ""--ginkgo.skip"" option after switching from v2.0.1 to the next release,
# after releasing this https://github.com/kubernetes-csi/csi-test/pull/205/files
",2019/07/19 07:50,2019/07/26 02:24,2018/11/28 11:14,,1,232 days 20:36:00.000000000,"6 days, 18:34:00",https://github.com/Nexenta/nexentastor-csi-driver/blob/b99c6dfd96570909122af1351ed0b1a472176493/Dockerfile.csi-sanity,https://github.com/Nexenta/nexentastor-csi-driver/blob/b1776c49c8762b69856fb30f8edf05d824a83806/Dockerfile.csi-sanity
665,"Nexenta
nexentastor-csi-driver",https://github.com/Nexenta/nexentastor-csi-driver,b1776c49c8762b69856fb30f8edf05d824a83806,,Dockerfile.csi-sanity,Dockerfile.csi-sanity,"# other csi-sanity options: --ginkgo.v -ginkgo.noColor
#TODO remove ""--ginkgo.skip"" option after fixing volume paginatin by token:
",2019/07/26 02:24,,2018/11/28 11:14,,1,239 days 15:10:00.000000000,削除されていません,https://github.com/Nexenta/nexentastor-csi-driver/blob/b1776c49c8762b69856fb30f8edf05d824a83806/Dockerfile.csi-sanity,
666,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,dbdd5294d5172438253ed6b5793b26e26ef30eb5,99d6268cd808fd72eb2343cb0f7487a6d1ba3d45,alpine/Dockerfile,2.0/alpine/Dockerfile,"# TODO: alter filename after v2 relese (version will be taken out of name)
",2020/03/11 10:24,2020/03/15 21:31,2019/10/19 05:34,2020/06/30 03:37,1,144 days 04:50:00.000000000,"4 days, 11:07:00",https://github.com/caddyserver/caddy-docker/blob/dbdd5294d5172438253ed6b5793b26e26ef30eb5/alpine/Dockerfile,https://github.com/caddyserver/caddy-docker/blob/99d6268cd808fd72eb2343cb0f7487a6d1ba3d45/2.0/alpine/Dockerfile
667,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,e57e714a75e86e3ba872b0d3885056155f25a237,,alpine/Dockerfile,2.0/alpine/Dockerfile,"# TODO: alter filename after v2 release (version will be taken out of name)
",2020/03/15 20:54,2020/06/30 03:37,2019/10/19 05:34,2020/06/30 03:37,1,148 days 15:20:00.000000000,ファイル削除,https://github.com/caddyserver/caddy-docker/blob/e57e714a75e86e3ba872b0d3885056155f25a237/alpine/Dockerfile,
668,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,dbdd5294d5172438253ed6b5793b26e26ef30eb5,99d6268cd808fd72eb2343cb0f7487a6d1ba3d45,Dockerfile.tmpl,Dockerfile.tmpl,"# TODO: alter filename after v2 relese (version will be taken out of name)
",2020/03/11 10:24,2020/03/15 21:31,2020/02/05 10:08,,1,35 days 00:16:00.000000000,"4 days, 11:07:00",https://github.com/caddyserver/caddy-docker/blob/dbdd5294d5172438253ed6b5793b26e26ef30eb5/Dockerfile.tmpl,https://github.com/caddyserver/caddy-docker/blob/99d6268cd808fd72eb2343cb0f7487a6d1ba3d45/Dockerfile.tmpl
669,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,dbdd5294d5172438253ed6b5793b26e26ef30eb5,,Dockerfile.tmpl,Dockerfile.tmpl,/** TODO: support other architectures here **/,2020/03/11 10:24,,2020/02/05 10:08,,1,35 days 00:16:00.000000000,削除されていません,https://github.com/caddyserver/caddy-docker/blob/dbdd5294d5172438253ed6b5793b26e26ef30eb5/Dockerfile.tmpl,
670,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,e57e714a75e86e3ba872b0d3885056155f25a237,,Dockerfile.tmpl,Dockerfile.tmpl,"# TODO: alter filename after v2 release (version will be taken out of name)
",2020/03/15 20:54,,2020/02/05 10:08,,1,39 days 10:46:00.000000000,削除されていません,https://github.com/caddyserver/caddy-docker/blob/e57e714a75e86e3ba872b0d3885056155f25a237/Dockerfile.tmpl,
671,"docker
docker",https://github.com/docker/docker,66d24c2b44a076a6dda17dabe028da9acaa55deb,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/15 23:25,2016/02/13 01:56,2016/01/15 23:25,2018/05/12 04:28,1,0 days 00:00:00.000000000,"28 days, 2:31:00",https://github.com/docker/docker/blob/66d24c2b44a076a6dda17dabe028da9acaa55deb/Dockerfile.aarch64,https://github.com/docker/docker/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.aarch64
672,"docker
docker",https://github.com/docker/docker,66d24c2b44a076a6dda17dabe028da9acaa55deb,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/15 23:25,2016/09/08 00:02,2016/01/15 23:25,2018/05/12 04:28,1,0 days 00:00:00.000000000,"236 days, 0:37:00",https://github.com/docker/docker/blob/66d24c2b44a076a6dda17dabe028da9acaa55deb/Dockerfile.aarch64,https://github.com/docker/docker/blob/d0fa13a50201cdcef849b0c2ae67b0747222a1c6/Dockerfile.aarch64
673,"docker
docker",https://github.com/docker/docker,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2016/01/15 23:25,2018/05/12 04:28,1,28 days 02:31:00.000000000,"186 days, 4:22:00",https://github.com/docker/docker/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.aarch64,https://github.com/docker/docker/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile.aarch64
674,"docker
docker",https://github.com/docker/docker,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/12 02:39,2016/01/15 23:25,2018/05/12 04:28,1,139 days 22:44:00.000000000,"434 days, 4:30:00",https://github.com/docker/docker/blob/12e2c2687e5c1f47287aa3668c8853ee8b5d6706/Dockerfile.aarch64,https://github.com/docker/docker/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.aarch64
675,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2016/01/15 23:25,2018/05/12 04:28,1,164 days 07:13:00.000000000,"87 days, 11:49:00",https://github.com/docker/docker/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.aarch64,https://github.com/docker/docker/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile.aarch64
676,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2016/01/15 23:25,2018/05/12 04:28,1,250 days 08:53:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile.aarch64,https://github.com/docker/docker/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.aarch64
677,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2016/01/15 23:25,2018/05/12 04:28,1,250 days 11:50:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile.aarch64,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.aarch64
678,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2016/01/15 23:25,2018/05/12 04:28,1,252 days 01:55:00.000000000,1:17:00,https://github.com/docker/docker/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.aarch64,https://github.com/docker/docker/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile.aarch64
679,"docker
docker",https://github.com/docker/docker,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2016/01/15 23:25,2018/05/12 04:28,1,264 days 05:50:00.000000000,21:21:00,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.aarch64,https://github.com/docker/docker/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.aarch64
680,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,c07234707878412eaaeab252af19adac8cf25d6b,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 10:30,2016/01/15 23:25,2018/05/12 04:28,1,277 days 09:05:00.000000000,"16 days, 2:00:00",https://github.com/docker/docker/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.aarch64,https://github.com/docker/docker/blob/c07234707878412eaaeab252af19adac8cf25d6b/Dockerfile.aarch64
681,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2016/01/15 23:25,2018/05/12 04:28,1,283 days 07:53:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.aarch64,https://github.com/docker/docker/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile.aarch64
682,"docker
docker",https://github.com/docker/docker,f2614f2107c838d014d31b806e3b8a9f1395cb2b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2016/01/15 23:25,2018/05/12 04:28,1,290 days 03:57:00.000000000,"8 days, 20:07:00",https://github.com/docker/docker/blob/f2614f2107c838d014d31b806e3b8a9f1395cb2b/Dockerfile.aarch64,https://github.com/docker/docker/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.aarch64
683,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2016/01/15 23:25,2018/05/12 04:28,1,320 days 23:08:00.000000000,"447 days, 13:47:00",https://github.com/docker/docker/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.aarch64,https://github.com/docker/docker/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.aarch64
684,"docker
docker",https://github.com/docker/docker,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2016/01/15 23:25,2018/05/12 04:28,1,518 days 09:53:00.000000000,ファイル削除,https://github.com/docker/docker/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.aarch64,
685,"docker
docker",https://github.com/docker/docker,d6e1cc32d309ee237342975388e729570343a974,,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2018/05/12 04:28,2016/01/15 23:25,2018/05/12 04:28,1,531 days 18:04:00.000000000,ファイル削除,https://github.com/docker/docker/blob/d6e1cc32d309ee237342975388e729570343a974/Dockerfile.aarch64,
686,"docker
docker",https://github.com/docker/docker,b529d1b0936b90ae14d584c73f7332919f8d76b7,,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2016/01/15 23:25,2018/05/12 04:28,1,763 days 04:26:00.000000000,ファイル削除,https://github.com/docker/docker/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile.aarch64,
687,"docker
docker",https://github.com/docker/docker,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,3be1a80f1ab2c07322cf54e4bce42914b797c3b1,Dockerfile.arm,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/11/05 23:38,2015/12/31 01:21,2015/11/05 23:38,2018/05/12 04:28,1,0 days 00:00:00.000000000,"55 days, 1:43:00",https://github.com/docker/docker/blob/b74fd0628aefbca3b77ffa5d52995c7af2f38d04/Dockerfile.arm,https://github.com/docker/docker/blob/3be1a80f1ab2c07322cf54e4bce42914b797c3b1/Dockerfile.armhf
688,"docker
docker",https://github.com/docker/docker,b74fd0628aefbca3b77ffa5d52995c7af2f38d04,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.arm,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/11/05 23:38,2016/09/08 00:02,2015/11/05 23:38,2018/05/12 04:28,1,0 days 00:00:00.000000000,"307 days, 0:24:00",https://github.com/docker/docker/blob/b74fd0628aefbca3b77ffa5d52995c7af2f38d04/Dockerfile.arm,https://github.com/docker/docker/blob/d0fa13a50201cdcef849b0c2ae67b0747222a1c6/Dockerfile.armhf
689,"docker
docker",https://github.com/docker/docker,dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147,2d5ca742eb54e077861a29f201eb8fa38359cb1b,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2015/12/30 17:50,2016/01/12 03:25,2015/11/05 23:38,2018/05/12 04:28,1,54 days 18:12:00.000000000,"12 days, 9:35:00",https://github.com/docker/docker/blob/dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147/Dockerfile.armhf,https://github.com/docker/docker/blob/2d5ca742eb54e077861a29f201eb8fa38359cb1b/Dockerfile.armhf
690,"docker
docker",https://github.com/docker/docker,dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/12/30 17:50,2016/02/13 01:56,2015/11/05 23:38,2018/05/12 04:28,1,54 days 18:12:00.000000000,"44 days, 8:06:00",https://github.com/docker/docker/blob/dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147/Dockerfile.armhf,https://github.com/docker/docker/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.armhf
691,"docker
docker",https://github.com/docker/docker,dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147,2d5ca742eb54e077861a29f201eb8fa38359cb1b,Dockerfile.armhf,Dockerfile.armhf,"# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2015/12/30 17:50,2016/01/12 03:25,2015/11/05 23:38,2018/05/12 04:28,1,54 days 18:12:00.000000000,"12 days, 9:35:00",https://github.com/docker/docker/blob/dc38061bee468ebfbfa3c89f0bb5b2edb5fd5147/Dockerfile.armhf,https://github.com/docker/docker/blob/2d5ca742eb54e077861a29f201eb8fa38359cb1b/Dockerfile.armhf
692,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,f4dfe15cbedd00668d1ad6fe26544cfb814f35ea,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/24 00:27,2015/11/05 23:38,2018/05/12 04:28,1,60 days 15:12:00.000000000,"78 days, 9:37:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.armhf,https://github.com/docker/docker/blob/f4dfe15cbedd00668d1ad6fe26544cfb814f35ea/Dockerfile.armhf
693,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,f4dfe15cbedd00668d1ad6fe26544cfb814f35ea,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/24 00:27,2015/11/05 23:38,2018/05/12 04:28,1,60 days 15:12:00.000000000,"78 days, 9:37:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.armhf,https://github.com/docker/docker/blob/f4dfe15cbedd00668d1ad6fe26544cfb814f35ea/Dockerfile.armhf
694,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,742a7d53f2961565f0baf43d6423383101be84c3,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/05 14:50,2016/01/14 11:44,2015/11/05 23:38,2018/05/12 04:28,1,60 days 15:12:00.000000000,"8 days, 20:54:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.armhf,https://github.com/docker/docker/blob/742a7d53f2961565f0baf43d6423383101be84c3/Dockerfile.armhf
695,"docker
docker",https://github.com/docker/docker,9560d941142b0bd17b0aa51e4d9bfe22354732ec,f4dfe15cbedd00668d1ad6fe26544cfb814f35ea,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/14 06:04,2016/03/24 00:27,2015/11/05 23:38,2018/05/12 04:28,1,69 days 06:26:00.000000000,"69 days, 18:23:00",https://github.com/docker/docker/blob/9560d941142b0bd17b0aa51e4d9bfe22354732ec/Dockerfile.armhf,https://github.com/docker/docker/blob/f4dfe15cbedd00668d1ad6fe26544cfb814f35ea/Dockerfile.armhf
696,"docker
docker",https://github.com/docker/docker,4357ed4a7363a1032edf93cf03232953c805184f,51620020aff6f31447a71a5a66af0066c524649a,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 04:37,2015/11/05 23:38,2018/05/12 04:28,1,75 days 21:15:00.000000000,"13 days, 7:44:00",https://github.com/docker/docker/blob/4357ed4a7363a1032edf93cf03232953c805184f/Dockerfile.armhf,https://github.com/docker/docker/blob/51620020aff6f31447a71a5a66af0066c524649a/Dockerfile.armhf
697,"docker
docker",https://github.com/docker/docker,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2015/11/05 23:38,2018/05/12 04:28,1,99 days 02:18:00.000000000,"186 days, 4:22:00",https://github.com/docker/docker/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.armhf,https://github.com/docker/docker/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile.armhf
698,"docker
docker",https://github.com/docker/docker,e6590b5fa2c442546d3dcfa3e0580eb024ede823,9b0d385975c80359b4cab2c75e4834fe803e12d5,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",2016/03/15 12:12,2016/05/27 22:54,2015/11/05 23:38,2018/05/12 04:28,1,130 days 12:34:00.000000000,"73 days, 10:42:00",https://github.com/docker/docker/blob/e6590b5fa2c442546d3dcfa3e0580eb024ede823/Dockerfile.armhf,https://github.com/docker/docker/blob/9b0d385975c80359b4cab2c75e4834fe803e12d5/Dockerfile.armhf
699,"docker
docker",https://github.com/docker/docker,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/12 02:39,2015/11/05 23:38,2018/05/12 04:28,1,210 days 22:31:00.000000000,"434 days, 4:30:00",https://github.com/docker/docker/blob/12e2c2687e5c1f47287aa3668c8853ee8b5d6706/Dockerfile.armhf,https://github.com/docker/docker/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.armhf
700,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2015/11/05 23:38,2018/05/12 04:28,1,235 days 07:00:00.000000000,"87 days, 11:49:00",https://github.com/docker/docker/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.armhf,https://github.com/docker/docker/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile.armhf
701,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2015/11/05 23:38,2018/05/12 04:28,1,321 days 08:40:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile.armhf,https://github.com/docker/docker/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.armhf
702,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2015/11/05 23:38,2018/05/12 04:28,1,321 days 11:37:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile.armhf,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.armhf
703,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2015/11/05 23:38,2018/05/12 04:28,1,323 days 01:42:00.000000000,1:17:00,https://github.com/docker/docker/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.armhf,https://github.com/docker/docker/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile.armhf
704,"docker
docker",https://github.com/docker/docker,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2015/11/05 23:38,2018/05/12 04:28,1,335 days 05:37:00.000000000,21:21:00,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.armhf,https://github.com/docker/docker/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.armhf
705,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2015/11/05 23:38,2018/05/12 04:28,1,348 days 08:52:00.000000000,"15 days, 17:17:00",https://github.com/docker/docker/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.armhf,https://github.com/docker/docker/blob/d58b47623b252803f5cd12f6d9ca584d1587ab22/Dockerfile.armhf
706,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2015/11/05 23:38,2018/05/12 04:28,1,354 days 07:40:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.armhf,https://github.com/docker/docker/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile.armhf
707,"docker
docker",https://github.com/docker/docker,f2614f2107c838d014d31b806e3b8a9f1395cb2b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2015/11/05 23:38,2018/05/12 04:28,1,361 days 03:44:00.000000000,"8 days, 20:07:00",https://github.com/docker/docker/blob/f2614f2107c838d014d31b806e3b8a9f1395cb2b/Dockerfile.armhf,https://github.com/docker/docker/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.armhf
708,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2015/11/05 23:38,2018/05/12 04:28,1,391 days 22:55:00.000000000,"447 days, 13:47:00",https://github.com/docker/docker/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.armhf,https://github.com/docker/docker/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.armhf
709,"docker
docker",https://github.com/docker/docker,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2015/11/05 23:38,2018/05/12 04:28,1,589 days 09:40:00.000000000,ファイル削除,https://github.com/docker/docker/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.armhf,
710,"docker
docker",https://github.com/docker/docker,d6e1cc32d309ee237342975388e729570343a974,,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2018/05/12 04:28,2015/11/05 23:38,2018/05/12 04:28,1,602 days 17:51:00.000000000,ファイル削除,https://github.com/docker/docker/blob/d6e1cc32d309ee237342975388e729570343a974/Dockerfile.armhf,
711,"docker
docker",https://github.com/docker/docker,b529d1b0936b90ae14d584c73f7332919f8d76b7,,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2015/11/05 23:38,2018/05/12 04:28,1,834 days 04:13:00.000000000,ファイル削除,https://github.com/docker/docker/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile.armhf,
712,"docker
docker",https://github.com/docker/docker,eacd2fd4daa03b1161d879e835705f7d35b871e3,c7089b4b469e0a536a260c136ef71bc95591fa51,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",2016/01/21 11:51,2016/01/31 13:50,2015/12/01 17:47,,1,50 days 18:04:00.000000000,"10 days, 1:59:00",https://github.com/docker/docker/blob/eacd2fd4daa03b1161d879e835705f7d35b871e3/Dockerfile.windows,https://github.com/docker/docker/blob/c7089b4b469e0a536a260c136ef71bc95591fa51/Dockerfile.windows
713,"docker
docker",https://github.com/docker/docker,c7089b4b469e0a536a260c136ef71bc95591fa51,83809de7d45d3465977b2f7a7cf585863cec445c,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",2016/01/31 13:50,2016/04/06 08:25,2015/12/01 17:47,,1,60 days 20:03:00.000000000,"65 days, 18:35:00",https://github.com/docker/docker/blob/c7089b4b469e0a536a260c136ef71bc95591fa51/Dockerfile.windows,https://github.com/docker/docker/blob/83809de7d45d3465977b2f7a7cf585863cec445c/Dockerfile.windows
714,"docker
docker",https://github.com/docker/docker,83809de7d45d3465977b2f7a7cf585863cec445c,4677f8036e8d090303ef76cbbe4f703d5c85d752,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/06 08:25,2016/04/24 07:11,2015/12/01 17:47,,1,126 days 14:38:00.000000000,"17 days, 22:46:00",https://github.com/docker/docker/blob/83809de7d45d3465977b2f7a7cf585863cec445c/Dockerfile.windows,https://github.com/docker/docker/blob/4677f8036e8d090303ef76cbbe4f703d5c85d752/Dockerfile.windows
715,"docker
docker",https://github.com/docker/docker,4677f8036e8d090303ef76cbbe4f703d5c85d752,935d4d1c179259a262eb15fbf7e2bba2df26d740,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/24 07:11,2016/10/23 05:01,2015/12/01 17:47,,1,144 days 13:24:00.000000000,"181 days, 21:50:00",https://github.com/docker/docker/blob/4677f8036e8d090303ef76cbbe4f703d5c85d752/Dockerfile.windows,https://github.com/docker/docker/blob/935d4d1c179259a262eb15fbf7e2bba2df26d740/Dockerfile.windows
716,"docker
docker",https://github.com/docker/docker,9a19bd1b450a4f514d194d8a5571ab5be921464a,1f9beceacc916756bd5894f36306727ec9c6c008,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/21 09:02,2016/10/23 07:06,2015/12/01 17:47,,1,324 days 15:15:00.000000000,"1 day, 22:04:00",https://github.com/docker/docker/blob/9a19bd1b450a4f514d194d8a5571ab5be921464a/Dockerfile.windows,https://github.com/docker/docker/blob/1f9beceacc916756bd5894f36306727ec9c6c008/Dockerfile.windows
717,"docker
docker",https://github.com/docker/docker,929fa9ff8075d91624a90ecaae9c1fd31e50c294,5c9e38b73f4f5b6f2984436f6defd74a1eea9c9c,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/22 11:56,2016/11/03 15:08,2015/12/01 17:47,,1,325 days 18:09:00.000000000,"12 days, 3:12:00",https://github.com/docker/docker/blob/929fa9ff8075d91624a90ecaae9c1fd31e50c294/Dockerfile.windows,https://github.com/docker/docker/blob/5c9e38b73f4f5b6f2984436f6defd74a1eea9c9c/Dockerfile.windows
718,"docker
docker",https://github.com/docker/docker,5add621331d2790d04437cff0d936649f5fb4767,f87e6eb8305627e984f3d72c43837a833cc6de42,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/31 05:57,2016/11/11 07:28,2015/12/01 17:47,,1,334 days 12:10:00.000000000,"11 days, 1:31:00",https://github.com/docker/docker/blob/5add621331d2790d04437cff0d936649f5fb4767/Dockerfile.windows,https://github.com/docker/docker/blob/f87e6eb8305627e984f3d72c43837a833cc6de42/Dockerfile.windows
719,"docker
docker",https://github.com/docker/docker,f6ecfd620a48751124d3d1e590e9e83a437996ca,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/11 05:45,2016/12/01 22:33,2015/12/01 17:47,,1,345 days 11:58:00.000000000,"20 days, 16:48:00",https://github.com/docker/docker/blob/f6ecfd620a48751124d3d1e590e9e83a437996ca/Dockerfile.windows,https://github.com/docker/docker/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.windows
720,"docker
docker",https://github.com/docker/docker,155435b6ceeb05b2927ecc726216666b898b6459,96a2d9e7d2655a8374c2bdf326cd4a7224ce34bf,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/11/18 06:54,2016/12/06 20:10,2015/12/01 17:47,,1,352 days 13:07:00.000000000,"18 days, 13:16:00",https://github.com/docker/docker/blob/155435b6ceeb05b2927ecc726216666b898b6459/Dockerfile.windows,https://github.com/docker/docker/blob/96a2d9e7d2655a8374c2bdf326cd4a7224ce34bf/Dockerfile.windows
721,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,dffa5d6df2e51556edfbcebc4695fdbc0bcc1a90,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/01 22:33,2017/08/19 23:23,2015/12/01 17:47,,1,366 days 04:46:00.000000000,"261 days, 0:50:00",https://github.com/docker/docker/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.windows,https://github.com/docker/docker/blob/dffa5d6df2e51556edfbcebc4695fdbc0bcc1a90/Dockerfile.windows
722,"docker
docker",https://github.com/docker/docker,20e243780ef3b6a7d1debca6279e06b003895121,4af2555a353a8f407c49adb57877ead436af04be,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/06 01:57,2017/02/05 12:19,2015/12/01 17:47,,1,370 days 08:10:00.000000000,"61 days, 10:22:00",https://github.com/docker/docker/blob/20e243780ef3b6a7d1debca6279e06b003895121/Dockerfile.windows,https://github.com/docker/docker/blob/4af2555a353a8f407c49adb57877ead436af04be/Dockerfile.windows
723,"docker
docker",https://github.com/docker/docker,d6e1cc32d309ee237342975388e729570343a974,3bcf58236619f4c2902157ce4deaaaf44ca6f128,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/06/30 17:29,2019/01/05 04:58,2015/12/01 17:47,,1,576 days 23:42:00.000000000,"553 days, 11:29:00",https://github.com/docker/docker/blob/d6e1cc32d309ee237342975388e729570343a974/Dockerfile.windows,https://github.com/docker/docker/blob/3bcf58236619f4c2902157ce4deaaaf44ca6f128/Dockerfile.windows
724,"docker
docker",https://github.com/docker/docker,db22517fece05d8474e565cb4c6b0b538fab55b5,ecf91f0d7f90b2bd9fa048f2a800beaf613ac507,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2018/12/20 23:47,2019/09/10 08:19,2015/12/01 17:47,,1,1115 days 06:00:00.000000000,"263 days, 8:32:00",https://github.com/docker/docker/blob/db22517fece05d8474e565cb4c6b0b538fab55b5/Dockerfile.windows,https://github.com/docker/docker/blob/ecf91f0d7f90b2bd9fa048f2a800beaf613ac507/Dockerfile.windows
725,"docker
docker",https://github.com/docker/docker,38e4ae3bca76b9558eb44993c4208b41114c4597,83fd212f2cb71aae2f4a5a60c893c2bd01e59b72,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/17 21:37,2019/09/26 18:59,2015/12/01 17:47,,1,1324 days 03:50:00.000000000,"70 days, 21:22:00",https://github.com/docker/docker/blob/38e4ae3bca76b9558eb44993c4208b41114c4597/Dockerfile.windows,https://github.com/docker/docker/blob/83fd212f2cb71aae2f4a5a60c893c2bd01e59b72/Dockerfile.windows
726,"docker
docker",https://github.com/docker/docker,83fd212f2cb71aae2f4a5a60c893c2bd01e59b72,,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/09/26 18:59,,2015/12/01 17:47,,1,1395 days 01:12:00.000000000,削除されていません,https://github.com/docker/docker/blob/83fd212f2cb71aae2f4a5a60c893c2bd01e59b72/Dockerfile.windows,
727,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,4f8ca4797777ee9ed7fa6fbcc33080128c04051e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:47,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"246 days, 9:57:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.ppc64le,https://github.com/docker/docker/blob/4f8ca4797777ee9ed7fa6fbcc33080128c04051e/Dockerfile.ppc64le
728,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,b384fd6b1b2a379d857b4dc9971e441fe8aa5f37,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",2016/01/05 14:50,2016/02/13 10:36,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"38 days, 19:46:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.ppc64le,https://github.com/docker/docker/blob/b384fd6b1b2a379d857b4dc9971e441fe8aa5f37/Dockerfile.ppc64le
729,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,3b62a610ec81996ec3b1aa5422c62fa926ef4f04,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/20 05:51,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"45 days, 15:01:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.ppc64le,https://github.com/docker/docker/blob/3b62a610ec81996ec3b1aa5422c62fa926ef4f04/Dockerfile.ppc64le
730,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,2bcf50bdd41174b2519cab66b1fef0eb8bc78f9b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/03/15 03:21,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"69 days, 12:31:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.ppc64le,https://github.com/docker/docker/blob/2bcf50bdd41174b2519cab66b1fef0eb8bc78f9b/Dockerfile.ppc64le
731,"docker
docker",https://github.com/docker/docker,7465a3149f9f0f5c996e95198c46960a4b92c9c2,c39c7e6edf7d432730a84fa549b74203954b54c4,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/14 03:37,2016/01/28 02:36,2015/02/25 03:33,2018/05/12 04:28,1,323 days 00:04:00.000000000,"13 days, 22:59:00",https://github.com/docker/docker/blob/7465a3149f9f0f5c996e95198c46960a4b92c9c2/Dockerfile.ppc64le,https://github.com/docker/docker/blob/c39c7e6edf7d432730a84fa549b74203954b54c4/Dockerfile.ppc64le
732,"docker
docker",https://github.com/docker/docker,589c8a879fea758007a36bd0f00d07aa1000d0cb,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 04:51,2016/01/27 07:21,2015/02/25 03:33,2018/05/12 04:28,1,336 days 01:18:00.000000000,2:30:00,https://github.com/docker/docker/blob/589c8a879fea758007a36bd0f00d07aa1000d0cb/Dockerfile.ppc64le,https://github.com/docker/docker/blob/8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2/Dockerfile.ppc64le
733,"docker
docker",https://github.com/docker/docker,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,e5b1f29ac311d98b9f92b0211be2477d040e49e0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 07:21,2016/01/28 07:35,2015/02/25 03:33,2018/05/12 04:28,1,336 days 03:48:00.000000000,"1 day, 0:14:00",https://github.com/docker/docker/blob/8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2/Dockerfile.ppc64le,https://github.com/docker/docker/blob/e5b1f29ac311d98b9f92b0211be2477d040e49e0/Dockerfile.ppc64le
734,"docker
docker",https://github.com/docker/docker,71a1caddf0af51cfc79db04f80513b292adb0231,84dc2d9e70f1ad4422732421e2d6b91274f4dfae,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/28 02:46,2016/02/26 06:40,2015/02/25 03:33,2018/05/12 04:28,1,336 days 23:13:00.000000000,"29 days, 3:54:00",https://github.com/docker/docker/blob/71a1caddf0af51cfc79db04f80513b292adb0231/Dockerfile.ppc64le,https://github.com/docker/docker/blob/84dc2d9e70f1ad4422732421e2d6b91274f4dfae/Dockerfile.ppc64le
735,"docker
docker",https://github.com/docker/docker,b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d,b35aaa9d1e284d17e8468ae1407e03405be4258c,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",2016/02/09 19:24,2016/03/25 14:44,2015/02/25 03:33,2018/05/12 04:28,1,349 days 15:51:00.000000000,"44 days, 19:20:00",https://github.com/docker/docker/blob/b8a9812b92bdaf51ce6d59da82d9dbb089ab2d4d/Dockerfile.ppc64le,https://github.com/docker/docker/blob/b35aaa9d1e284d17e8468ae1407e03405be4258c/Dockerfile.ppc64le
736,"docker
docker",https://github.com/docker/docker,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2015/02/25 03:33,2018/05/12 04:28,1,352 days 22:23:00.000000000,"186 days, 4:22:00",https://github.com/docker/docker/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.ppc64le,https://github.com/docker/docker/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile.ppc64le
737,"docker
docker",https://github.com/docker/docker,7ed3d265a4499ec03f10537fea0aac3ebaa0cec6,78076d5cf9413476a8d4e27822b96fef7a55e055,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",2016/03/25 01:18,2016/03/29 16:58,2015/02/25 03:33,2018/05/12 04:28,1,393 days 21:45:00.000000000,"4 days, 15:40:00",https://github.com/docker/docker/blob/7ed3d265a4499ec03f10537fea0aac3ebaa0cec6/Dockerfile.ppc64le,https://github.com/docker/docker/blob/78076d5cf9413476a8d4e27822b96fef7a55e055/Dockerfile.ppc64le
738,"docker
docker",https://github.com/docker/docker,12e2c2687e5c1f47287aa3668c8853ee8b5d6706,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/03 22:09,2017/08/12 02:39,2015/02/25 03:33,2018/05/12 04:28,1,464 days 18:36:00.000000000,"434 days, 4:30:00",https://github.com/docker/docker/blob/12e2c2687e5c1f47287aa3668c8853ee8b5d6706/Dockerfile.ppc64le,https://github.com/docker/docker/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.ppc64le
739,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"87 days, 11:49:00",https://github.com/docker/docker/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.ppc64le,https://github.com/docker/docker/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile.ppc64le
740,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,9aa0c9a2142af249527aa301ddd7e21bc308c624,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",2016/06/28 06:38,2016/12/09 08:59,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"164 days, 2:21:00",https://github.com/docker/docker/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.ppc64le,https://github.com/docker/docker/blob/9aa0c9a2142af249527aa301ddd7e21bc308c624/Dockerfile.ppc64le
741,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2015/02/25 03:33,2018/05/12 04:28,1,575 days 04:45:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile.ppc64le,https://github.com/docker/docker/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.ppc64le
742,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2015/02/25 03:33,2018/05/12 04:28,1,575 days 07:42:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile.ppc64le,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.ppc64le
743,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2015/02/25 03:33,2018/05/12 04:28,1,576 days 21:47:00.000000000,1:17:00,https://github.com/docker/docker/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.ppc64le,https://github.com/docker/docker/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile.ppc64le
744,"docker
docker",https://github.com/docker/docker,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2015/02/25 03:33,2018/05/12 04:28,1,589 days 01:42:00.000000000,21:21:00,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.ppc64le,https://github.com/docker/docker/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.ppc64le
745,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2015/02/25 03:33,2018/05/12 04:28,1,602 days 04:57:00.000000000,"15 days, 17:17:00",https://github.com/docker/docker/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.ppc64le,https://github.com/docker/docker/blob/d58b47623b252803f5cd12f6d9ca584d1587ab22/Dockerfile.ppc64le
746,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2015/02/25 03:33,2018/05/12 04:28,1,608 days 03:45:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.ppc64le,https://github.com/docker/docker/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile.ppc64le
747,"docker
docker",https://github.com/docker/docker,f2614f2107c838d014d31b806e3b8a9f1395cb2b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2015/02/25 03:33,2018/05/12 04:28,1,614 days 23:49:00.000000000,"8 days, 20:07:00",https://github.com/docker/docker/blob/f2614f2107c838d014d31b806e3b8a9f1395cb2b/Dockerfile.ppc64le,https://github.com/docker/docker/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.ppc64le
748,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2015/02/25 03:33,2018/05/12 04:28,1,645 days 19:00:00.000000000,"447 days, 13:47:00",https://github.com/docker/docker/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.ppc64le,https://github.com/docker/docker/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.ppc64le
749,"docker
docker",https://github.com/docker/docker,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,843 days 05:45:00.000000000,ファイル削除,https://github.com/docker/docker/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.ppc64le,
750,"docker
docker",https://github.com/docker/docker,b529d1b0936b90ae14d584c73f7332919f8d76b7,,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,1088 days 00:18:00.000000000,ファイル削除,https://github.com/docker/docker/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile.ppc64le,
751,"docker
docker",https://github.com/docker/docker,5118f1431c9cae757d5e7c193ed85fc8fca3ae85,5d174e000f9e0d0d4d557367ab7685834d190a71,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/02/28 14:37,2015/03/12 23:05,2015/02/28 14:37,,1,0 days 00:00:00.000000000,"12 days, 8:28:00",https://github.com/docker/docker/blob/5118f1431c9cae757d5e7c193ed85fc8fca3ae85/Dockerfile.simple,https://github.com/docker/docker/blob/5d174e000f9e0d0d4d557367ab7685834d190a71/Dockerfile.simple
752,"docker
docker",https://github.com/docker/docker,ece4b5bde8ff6ea21b51275a69787191d12a5d65,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/03/10 09:24,2017/08/12 02:39,2015/02/28 14:37,,1,9 days 18:47:00.000000000,"885 days, 17:15:00",https://github.com/docker/docker/blob/ece4b5bde8ff6ea21b51275a69787191d12a5d65/Dockerfile.simple,https://github.com/docker/docker/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.simple
753,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/10/07 02:36,2015/02/28 14:37,,1,573 days 10:43:00.000000000,"13 days, 1:16:00",https://github.com/docker/docker/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.simple,https://github.com/docker/docker/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.simple
754,"docker
docker",https://github.com/docker/docker,7e12c3bb99381f117be73e05c187be6ce44280b9,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/30 03:02,2016/10/26 00:54,2015/02/28 14:37,,1,579 days 12:25:00.000000000,"25 days, 21:52:00",https://github.com/docker/docker/blob/7e12c3bb99381f117be73e05c187be6ce44280b9/Dockerfile.simple,https://github.com/docker/docker/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.simple
755,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/09 23:29,2015/02/28 14:37,,1,598 days 17:53:00.000000000,"21 days, 14:59:00",https://github.com/docker/docker/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.simple,https://github.com/docker/docker/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.simple
756,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2018/02/22 12:20,2015/02/28 14:37,,1,604 days 16:41:00.000000000,"485 days, 5:02:00",https://github.com/docker/docker/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.simple,https://github.com/docker/docker/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.simple
757,"docker
docker",https://github.com/docker/docker,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",2017/06/17 09:18,,2015/02/28 14:37,,1,839 days 18:41:00.000000000,削除されていません,https://github.com/docker/docker/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.simple,
758,"docker
docker",https://github.com/docker/docker,be8885525c4d1ef4a13bbd6396f60e8657bc5573,,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2017/12/08 10:10,,2015/02/28 14:37,,1,1013 days 19:33:00.000000000,削除されていません,https://github.com/docker/docker/blob/be8885525c4d1ef4a13bbd6396f60e8657bc5573/Dockerfile.simple,
759,"docker
docker",https://github.com/docker/docker,20d24a450cbf22b6d5268bc1fe76022fa554d6be,ccefe47897bdcef8b56bf54d4bd324989855f3b5,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/08/27 07:51,2013/10/01 04:57,2013/06/22 11:42,,1,65 days 20:09:00.000000000,"34 days, 21:06:00",https://github.com/docker/docker/blob/20d24a450cbf22b6d5268bc1fe76022fa554d6be/Dockerfile,https://github.com/docker/docker/blob/ccefe47897bdcef8b56bf54d4bd324989855f3b5/Dockerfile
760,"docker
docker",https://github.com/docker/docker,fa806f26aff927eb0d98b41e79786ae98987da5b,47838051be695a4e74c80690ceef811dcd3ef62c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",2013/09/07 11:58,2013/09/07 12:14,2013/06/22 11:42,,1,77 days 00:16:00.000000000,0:16:00,https://github.com/docker/docker/blob/fa806f26aff927eb0d98b41e79786ae98987da5b/Dockerfile,https://github.com/docker/docker/blob/47838051be695a4e74c80690ceef811dcd3ef62c/Dockerfile
761,"docker
docker",https://github.com/docker/docker,47838051be695a4e74c80690ceef811dcd3ef62c,d757bd0904b71346b6c83622ae5685bc0c0d4349,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/07 12:14,2013/09/07 12:16,2013/06/22 11:42,,1,77 days 00:32:00.000000000,0:02:00,https://github.com/docker/docker/blob/47838051be695a4e74c80690ceef811dcd3ef62c/Dockerfile,https://github.com/docker/docker/blob/d757bd0904b71346b6c83622ae5685bc0c0d4349/Dockerfile
762,"docker
docker",https://github.com/docker/docker,ccefe47897bdcef8b56bf54d4bd324989855f3b5,ee7d9b0bdec40d02ba5ef25f557cca9444a19669,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/01 04:57,2013/10/16 09:31,2013/06/22 11:42,,1,100 days 17:15:00.000000000,"15 days, 4:34:00",https://github.com/docker/docker/blob/ccefe47897bdcef8b56bf54d4bd324989855f3b5/Dockerfile,https://github.com/docker/docker/blob/ee7d9b0bdec40d02ba5ef25f557cca9444a19669/Dockerfile
763,"docker
docker",https://github.com/docker/docker,1cbdaebaa1c2326e57945333420d25d6f77011d5,962a66cd36a615bb0a7cb9866becdccf4aa97839,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/05 11:25,2013/11/06 03:29,2013/06/22 11:42,,1,104 days 23:43:00.000000000,"31 days, 16:04:00",https://github.com/docker/docker/blob/1cbdaebaa1c2326e57945333420d25d6f77011d5/Dockerfile,https://github.com/docker/docker/blob/962a66cd36a615bb0a7cb9866becdccf4aa97839/Dockerfile
764,"docker
docker",https://github.com/docker/docker,31638ab2ad2a5380d447780f05f7aa078c9421f5,44fe8cbbd174b5d85d4a063ed270f6b9d2279b70,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2013/11/01 06:58,2014/03/14 02:46,2013/06/22 11:42,,1,131 days 19:16:00.000000000,"132 days, 19:48:00",https://github.com/docker/docker/blob/31638ab2ad2a5380d447780f05f7aa078c9421f5/Dockerfile,https://github.com/docker/docker/blob/44fe8cbbd174b5d85d4a063ed270f6b9d2279b70/Dockerfile
765,"docker
docker",https://github.com/docker/docker,62a81370fffb3cfdb15ef19702f0ea07ab2f4c36,523341d994265b9f72e4869f0fd094fd15f1b480,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",2013/12/19 15:06,2014/02/01 04:48,2013/06/22 11:42,,1,180 days 03:24:00.000000000,"43 days, 13:42:00",https://github.com/docker/docker/blob/62a81370fffb3cfdb15ef19702f0ea07ab2f4c36/Dockerfile,https://github.com/docker/docker/blob/523341d994265b9f72e4869f0fd094fd15f1b480/Dockerfile
766,"docker
docker",https://github.com/docker/docker,484a75f3549239d0489cb0ad518d79ed6783584a,8b9856dbd7a1981aaa76fcf0fc10b37d1141c9af,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2013/12/25 12:40,2015/11/13 02:51,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"687 days, 14:11:00",https://github.com/docker/docker/blob/484a75f3549239d0489cb0ad518d79ed6783584a/Dockerfile,https://github.com/docker/docker/blob/8b9856dbd7a1981aaa76fcf0fc10b37d1141c9af/Dockerfile
767,"docker
docker",https://github.com/docker/docker,44fe8cbbd174b5d85d4a063ed270f6b9d2279b70,b3ee9ac74e171e00f14027e39278013629e681b8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/03/14 02:46,2014/07/25 07:19,2013/06/22 11:42,,1,264 days 15:04:00.000000000,"133 days, 4:33:00",https://github.com/docker/docker/blob/44fe8cbbd174b5d85d4a063ed270f6b9d2279b70/Dockerfile,https://github.com/docker/docker/blob/b3ee9ac74e171e00f14027e39278013629e681b8/Dockerfile
768,"docker
docker",https://github.com/docker/docker,d0a0e91f1f8c3a43f04e7a58e37498124b283594,cd44018856be421497a35d96f88dd0eec42fae43,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/06/19 11:04,2015/06/14 01:21,2013/06/22 11:42,,1,361 days 23:22:00.000000000,"359 days, 14:17:00",https://github.com/docker/docker/blob/d0a0e91f1f8c3a43f04e7a58e37498124b283594/Dockerfile,https://github.com/docker/docker/blob/cd44018856be421497a35d96f88dd0eec42fae43/Dockerfile
769,"docker
docker",https://github.com/docker/docker,d5151ca8ab5d90300839c8572cb96577de4d6233,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2014/09/03 23:26,2016/09/08 00:02,2013/06/22 11:42,,1,438 days 11:44:00.000000000,"735 days, 0:36:00",https://github.com/docker/docker/blob/d5151ca8ab5d90300839c8572cb96577de4d6233/Dockerfile,https://github.com/docker/docker/blob/d0fa13a50201cdcef849b0c2ae67b0747222a1c6/Dockerfile
770,"docker
docker",https://github.com/docker/docker,47769994e5cba81a96529b418052afce7a6d51a3,df7a04f9a64fc7b8e528a3b99beb71b97b4b22d0,Dockerfile,Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",2015/01/23 07:42,2015/02/12 03:54,2013/06/22 11:42,,1,579 days 20:00:00.000000000,"19 days, 20:12:00",https://github.com/docker/docker/blob/47769994e5cba81a96529b418052afce7a6d51a3/Dockerfile,https://github.com/docker/docker/blob/df7a04f9a64fc7b8e528a3b99beb71b97b4b22d0/Dockerfile
771,"docker
docker",https://github.com/docker/docker,5d70a97b1fff8286220d2bef9ceb248401f046d1,72e9e12fa015d89c5184d6dda69497f1b090331d,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",2015/02/27 04:20,2015/05/01 02:29,2013/06/22 11:42,,1,614 days 16:38:00.000000000,"62 days, 22:09:00",https://github.com/docker/docker/blob/5d70a97b1fff8286220d2bef9ceb248401f046d1/Dockerfile,https://github.com/docker/docker/blob/72e9e12fa015d89c5184d6dda69497f1b090331d/Dockerfile
772,"docker
docker",https://github.com/docker/docker,6089e679a2fb2494fd3e599a9eab9327e6a509fc,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/05/02 08:42,2016/08/17 06:18,2013/06/22 11:42,,1,678 days 21:00:00.000000000,"472 days, 21:36:00",https://github.com/docker/docker/blob/6089e679a2fb2494fd3e599a9eab9327e6a509fc/Dockerfile,https://github.com/docker/docker/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile
773,"docker
docker",https://github.com/docker/docker,4357ed4a7363a1032edf93cf03232953c805184f,51620020aff6f31447a71a5a66af0066c524649a,Dockerfile,Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/02/03 04:37,2013/06/22 11:42,,1,942 days 09:11:00.000000000,"13 days, 7:44:00",https://github.com/docker/docker/blob/4357ed4a7363a1032edf93cf03232953c805184f/Dockerfile,https://github.com/docker/docker/blob/51620020aff6f31447a71a5a66af0066c524649a/Dockerfile
774,"docker
docker",https://github.com/docker/docker,e6590b5fa2c442546d3dcfa3e0580eb024ede823,9b0d385975c80359b4cab2c75e4834fe803e12d5,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",2016/03/15 12:12,2016/05/27 22:54,2013/06/22 11:42,,1,997 days 00:30:00.000000000,"73 days, 10:42:00",https://github.com/docker/docker/blob/e6590b5fa2c442546d3dcfa3e0580eb024ede823/Dockerfile,https://github.com/docker/docker/blob/9b0d385975c80359b4cab2c75e4834fe803e12d5/Dockerfile
775,"docker
docker",https://github.com/docker/docker,d8fef66b03c1ea8715470690efbd950033f7f628,a762ceace4e8c1c7ce4fb582789af9d8074be3e1,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/05/12 23:52,2017/05/10 00:20,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"362 days, 0:28:00",https://github.com/docker/docker/blob/d8fef66b03c1ea8715470690efbd950033f7f628/Dockerfile,https://github.com/docker/docker/blob/a762ceace4e8c1c7ce4fb582789af9d8074be3e1/Dockerfile
776,"docker
docker",https://github.com/docker/docker,d8fef66b03c1ea8715470690efbd950033f7f628,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/05/12 23:52,2016/09/23 18:27,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"133 days, 18:35:00",https://github.com/docker/docker/blob/d8fef66b03c1ea8715470690efbd950033f7f628/Dockerfile,https://github.com/docker/docker/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile
777,"docker
docker",https://github.com/docker/docker,934328d8ea650bf8a9c3c719999ce2a1f5dd5df6,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/06/07 16:45,2016/11/09 23:29,2013/06/22 11:42,,1,1081 days 05:03:00.000000000,"155 days, 6:44:00",https://github.com/docker/docker/blob/934328d8ea650bf8a9c3c719999ce2a1f5dd5df6/Dockerfile,https://github.com/docker/docker/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile
778,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2013/06/22 11:42,,1,1187 days 20:36:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile,https://github.com/docker/docker/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile
779,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2013/06/22 11:42,,1,1187 days 23:33:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile
780,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2013/06/22 11:42,,1,1189 days 13:38:00.000000000,1:17:00,https://github.com/docker/docker/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile,https://github.com/docker/docker/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile
781,"docker
docker",https://github.com/docker/docker,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2013/06/22 11:42,,1,1201 days 17:33:00.000000000,21:21:00,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile,https://github.com/docker/docker/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile
782,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2013/06/22 11:42,,1,1214 days 20:48:00.000000000,"15 days, 17:17:00",https://github.com/docker/docker/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile,https://github.com/docker/docker/blob/d58b47623b252803f5cd12f6d9ca584d1587ab22/Dockerfile
783,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2013/06/22 11:42,,1,1220 days 19:36:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile,https://github.com/docker/docker/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile
784,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"447 days, 13:47:00",https://github.com/docker/docker/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile,https://github.com/docker/docker/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile
785,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/01 22:33,2017/08/12 02:39,2013/06/22 11:42,,1,1258 days 10:51:00.000000000,"253 days, 4:06:00",https://github.com/docker/docker/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile,https://github.com/docker/docker/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile
786,"docker
docker",https://github.com/docker/docker,1ecd8ed5186a161c1c43ae7c99b1c81b97188619,34337db95d8eb85875509e341f452d8b555452b8,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/01/01 04:11,2017/05/06 07:03,2013/06/22 11:42,,1,1288 days 16:29:00.000000000,"125 days, 2:52:00",https://github.com/docker/docker/blob/1ecd8ed5186a161c1c43ae7c99b1c81b97188619/Dockerfile,https://github.com/docker/docker/blob/34337db95d8eb85875509e341f452d8b555452b8/Dockerfile
787,"docker
docker",https://github.com/docker/docker,bc82b139955c4a0edb20b070926469cceea0fbbb,ba49e8c49830b69c833edff3c393716da20f897a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/02/14 20:03,2013/06/22 11:42,,1,1455 days 21:36:00.000000000,"242 days, 10:45:00",https://github.com/docker/docker/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile,https://github.com/docker/docker/blob/ba49e8c49830b69c833edff3c393716da20f897a/Dockerfile
788,"docker
docker",https://github.com/docker/docker,d6e1cc32d309ee237342975388e729570343a974,a464a3d51f89566b3e480d66903056004576cc85,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",2017/06/30 17:29,2019/09/11 15:51,2013/06/22 11:42,,1,1469 days 05:47:00.000000000,"802 days, 22:22:00",https://github.com/docker/docker/blob/d6e1cc32d309ee237342975388e729570343a974/Dockerfile,https://github.com/docker/docker/blob/a464a3d51f89566b3e480d66903056004576cc85/Dockerfile
789,"docker
docker",https://github.com/docker/docker,d539038d9712daa44254412c6fcc6d78a14da691,,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2017/09/30 06:09,,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,削除されていません,https://github.com/docker/docker/blob/d539038d9712daa44254412c6fcc6d78a14da691/Dockerfile,
790,"docker
docker",https://github.com/docker/docker,d539038d9712daa44254412c6fcc6d78a14da691,80bc8b4766cc808186af91930152d78afb22aef8,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/09/30 06:09,2018/05/19 03:28,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"230 days, 21:19:00",https://github.com/docker/docker/blob/d539038d9712daa44254412c6fcc6d78a14da691/Dockerfile,https://github.com/docker/docker/blob/80bc8b4766cc808186af91930152d78afb22aef8/Dockerfile
791,"docker
docker",https://github.com/docker/docker,d539038d9712daa44254412c6fcc6d78a14da691,aac801ac751a9562698d2eb1de262f74476b93f9,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",2017/09/30 06:09,2019/04/21 05:34,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"567 days, 23:25:00",https://github.com/docker/docker/blob/d539038d9712daa44254412c6fcc6d78a14da691/Dockerfile,https://github.com/docker/docker/blob/aac801ac751a9562698d2eb1de262f74476b93f9/Dockerfile
792,"docker
docker",https://github.com/docker/docker,d539038d9712daa44254412c6fcc6d78a14da691,764160031e1dc165411ee6612a129bd26a9872b7,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",2017/09/30 06:09,2019/07/19 03:54,2013/06/22 11:42,,1,1560 days 18:27:00.000000000,"656 days, 21:45:00",https://github.com/docker/docker/blob/d539038d9712daa44254412c6fcc6d78a14da691/Dockerfile,https://github.com/docker/docker/blob/764160031e1dc165411ee6612a129bd26a9872b7/Dockerfile
793,"docker
docker",https://github.com/docker/docker,be8885525c4d1ef4a13bbd6396f60e8657bc5573,ec99bd6ab865f49da659cb6a2da3d805eff92ec1,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",2017/12/08 10:10,2018/09/07 17:35,2013/06/22 11:42,,1,1629 days 22:28:00.000000000,"273 days, 7:25:00",https://github.com/docker/docker/blob/be8885525c4d1ef4a13bbd6396f60e8657bc5573/Dockerfile,https://github.com/docker/docker/blob/ec99bd6ab865f49da659cb6a2da3d805eff92ec1/Dockerfile
794,"docker
docker",https://github.com/docker/docker,eaae7750efbc80314c5e028c4d43d3cd9e104edd,e3102d5055995a43b090dbc29342a1846a39edae,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",2018/01/05 11:58,2018/02/15 17:49,2013/06/22 11:42,,1,1658 days 00:16:00.000000000,"41 days, 5:51:00",https://github.com/docker/docker/blob/eaae7750efbc80314c5e028c4d43d3cd9e104edd/Dockerfile,https://github.com/docker/docker/blob/e3102d5055995a43b090dbc29342a1846a39edae/Dockerfile
795,"docker
docker",https://github.com/docker/docker,b529d1b0936b90ae14d584c73f7332919f8d76b7,00c1c604d08bbceb73a680d37d7428e6a4e986af,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/02/26 22:05,2013/06/22 11:42,,1,1700 days 16:09:00.000000000,"9 days, 18:14:00",https://github.com/docker/docker/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile,https://github.com/docker/docker/blob/00c1c604d08bbceb73a680d37d7428e6a4e986af/Dockerfile
796,"docker
docker",https://github.com/docker/docker,80bc8b4766cc808186af91930152d78afb22aef8,93f9b902af89f82367d750aa871d40f25ccd99ca,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2019/10/04 10:57,2013/06/22 11:42,,1,1791 days 15:46:00.000000000,"503 days, 7:29:00",https://github.com/docker/docker/blob/80bc8b4766cc808186af91930152d78afb22aef8/Dockerfile,https://github.com/docker/docker/blob/93f9b902af89f82367d750aa871d40f25ccd99ca/Dockerfile
797,"docker
docker",https://github.com/docker/docker,4e3ab9e9fbca682f75eb350c8ad4312282869a03,,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",2019/07/17 21:37,,2013/06/22 11:42,,1,2216 days 09:55:00.000000000,削除されていません,https://github.com/docker/docker/blob/4e3ab9e9fbca682f75eb350c8ad4312282869a03/Dockerfile,
798,"docker
docker",https://github.com/docker/docker,4e3ab9e9fbca682f75eb350c8ad4312282869a03,,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",2019/07/17 21:37,,2013/06/22 11:42,,1,2216 days 09:55:00.000000000,削除されていません,https://github.com/docker/docker/blob/4e3ab9e9fbca682f75eb350c8ad4312282869a03/Dockerfile,
799,"docker
docker",https://github.com/docker/docker,d1a3a17c671b9f89a90e59b58a92f04da0a4e3d9,,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",2020/01/15 23:22,,2013/06/22 11:42,,1,2398 days 11:40:00.000000000,削除されていません,https://github.com/docker/docker/blob/d1a3a17c671b9f89a90e59b58a92f04da0a4e3d9/Dockerfile,
800,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,d0fa13a50201cdcef849b0c2ae67b0747222a1c6,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/05 14:50,2016/09/08 00:02,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"246 days, 9:12:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.s390x,https://github.com/docker/docker/blob/d0fa13a50201cdcef849b0c2ae67b0747222a1c6/Dockerfile.s390x
801,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/05 14:50,2016/02/13 01:56,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"38 days, 11:06:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.s390x,https://github.com/docker/docker/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.s390x
802,"docker
docker",https://github.com/docker/docker,91201678c6f58a5e46fe302bed9eb55a7ddcf693,08c16f8abfdc1f91119a35056c92d131b815fbf8,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/05 14:50,2016/08/24 01:01,2015/02/25 03:33,2018/05/12 04:28,1,314 days 11:17:00.000000000,"231 days, 10:11:00",https://github.com/docker/docker/blob/91201678c6f58a5e46fe302bed9eb55a7ddcf693/Dockerfile.s390x,https://github.com/docker/docker/blob/08c16f8abfdc1f91119a35056c92d131b815fbf8/Dockerfile.s390x
803,"docker
docker",https://github.com/docker/docker,f27b5dda4afc0b0a278eb5379d17dfc3533c5397,37302bbb3f4889e9de2a95d5ea018acdab9e4447,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/13 01:56,2016/08/17 06:18,2015/02/25 03:33,2018/05/12 04:28,1,352 days 22:23:00.000000000,"186 days, 4:22:00",https://github.com/docker/docker/blob/f27b5dda4afc0b0a278eb5379d17dfc3533c5397/Dockerfile.s390x,https://github.com/docker/docker/blob/37302bbb3f4889e9de2a95d5ea018acdab9e4447/Dockerfile.s390x
804,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,f34e4d295d5c17a78c33beb14b65e5d001c16968,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/06/28 06:38,2017/08/12 02:39,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"409 days, 20:01:00",https://github.com/docker/docker/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.s390x,https://github.com/docker/docker/blob/f34e4d295d5c17a78c33beb14b65e5d001c16968/Dockerfile.s390x
805,"docker
docker",https://github.com/docker/docker,ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e,a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/06/28 06:38,2016/09/23 18:27,2015/02/25 03:33,2018/05/12 04:28,1,489 days 03:05:00.000000000,"87 days, 11:49:00",https://github.com/docker/docker/blob/ee3ac3aa66bfb27b7c21dfb253fdaa113baedd4e/Dockerfile.s390x,https://github.com/docker/docker/blob/a94067c07fbfa77cdc57aa33c2fe2270cabb9ca3/Dockerfile.s390x
806,"docker
docker",https://github.com/docker/docker,5f4dcd825299bf58e87e69c2bff3ceefc300a432,36f47aa2527f83d7ca7254c43eb08ffc5ce1102e,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2016/10/26 00:54,2015/02/25 03:33,2018/05/12 04:28,1,575 days 04:45:00.000000000,"33 days, 16:36:00",https://github.com/docker/docker/blob/5f4dcd825299bf58e87e69c2bff3ceefc300a432/Dockerfile.s390x,https://github.com/docker/docker/blob/36f47aa2527f83d7ca7254c43eb08ffc5ce1102e/Dockerfile.s390x
807,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/10/06 05:15,2015/02/25 03:33,2018/05/12 04:28,1,575 days 07:42:00.000000000,"13 days, 18:00:00",https://github.com/docker/docker/blob/bd31b24336ff2da098e62a375552586434a012b0/Dockerfile.s390x,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.s390x
808,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,b8265e55508db99aea632033b2f5008f921b11e2,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/09/24 02:37,2015/02/25 03:33,2018/05/12 04:28,1,576 days 21:47:00.000000000,1:17:00,https://github.com/docker/docker/blob/1b41125ad9f1a3881b71bd044d76fd285170addb/Dockerfile.s390x,https://github.com/docker/docker/blob/b8265e55508db99aea632033b2f5008f921b11e2/Dockerfile.s390x
809,"docker
docker",https://github.com/docker/docker,0b86ca9ad0916b62b7429f5d15821962bc4f7db0,5ee2c2a6475056f55327ce77b61677499a9e3fa8,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/06 05:15,2016/10/07 02:36,2015/02/25 03:33,2018/05/12 04:28,1,589 days 01:42:00.000000000,21:21:00,https://github.com/docker/docker/blob/0b86ca9ad0916b62b7429f5d15821962bc4f7db0/Dockerfile.s390x,https://github.com/docker/docker/blob/5ee2c2a6475056f55327ce77b61677499a9e3fa8/Dockerfile.s390x
810,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,d58b47623b252803f5cd12f6d9ca584d1587ab22,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/11/04 01:47,2015/02/25 03:33,2018/05/12 04:28,1,602 days 04:57:00.000000000,"15 days, 17:17:00",https://github.com/docker/docker/blob/3996975b0840033bda3919440d122d734a4bc66b/Dockerfile.s390x,https://github.com/docker/docker/blob/d58b47623b252803f5cd12f6d9ca584d1587ab22/Dockerfile.s390x
811,"docker
docker",https://github.com/docker/docker,2790ac68b32b399c872de88388bdccc359ed7a88,330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/04/12 22:37,2015/02/25 03:33,2018/05/12 04:28,1,608 days 03:45:00.000000000,"169 days, 15:19:00",https://github.com/docker/docker/blob/2790ac68b32b399c872de88388bdccc359ed7a88/Dockerfile.s390x,https://github.com/docker/docker/blob/330ddf8eb8f8a551677bdfc757fcefdb0cdaec3f/Dockerfile.s390x
812,"docker
docker",https://github.com/docker/docker,f2614f2107c838d014d31b806e3b8a9f1395cb2b,93e837d1d2d3a24b0219ccadc1fdf170d242c137,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/11/09 23:29,2015/02/25 03:33,2018/05/12 04:28,1,614 days 23:49:00.000000000,"8 days, 20:07:00",https://github.com/docker/docker/blob/f2614f2107c838d014d31b806e3b8a9f1395cb2b/Dockerfile.s390x,https://github.com/docker/docker/blob/93e837d1d2d3a24b0219ccadc1fdf170d242c137/Dockerfile.s390x
813,"docker
docker",https://github.com/docker/docker,470dfd69b3a86d8966f51d3f7237bdb10d6e00e0,49ad3d69a7780e54ace50290d0a1a55c1182a947,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/01 22:33,2018/02/22 12:20,2015/02/25 03:33,2018/05/12 04:28,1,645 days 19:00:00.000000000,"447 days, 13:47:00",https://github.com/docker/docker/blob/470dfd69b3a86d8966f51d3f7237bdb10d6e00e0/Dockerfile.s390x,https://github.com/docker/docker/blob/49ad3d69a7780e54ace50290d0a1a55c1182a947/Dockerfile.s390x
814,"docker
docker",https://github.com/docker/docker,bc82b139955c4a0edb20b070926469cceea0fbbb,,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/06/17 09:18,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,843 days 05:45:00.000000000,ファイル削除,https://github.com/docker/docker/blob/bc82b139955c4a0edb20b070926469cceea0fbbb/Dockerfile.s390x,
815,"docker
docker",https://github.com/docker/docker,b529d1b0936b90ae14d584c73f7332919f8d76b7,,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2018/05/12 04:28,2015/02/25 03:33,2018/05/12 04:28,1,1088 days 00:18:00.000000000,ファイル削除,https://github.com/docker/docker/blob/b529d1b0936b90ae14d584c73f7332919f8d76b7/Dockerfile.s390x,
816,"docker
docker",https://github.com/docker/docker,22c46af4b358cf3ec4f7af47c701064c00cf7de4,cd44018856be421497a35d96f88dd0eec42fae43,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/08/06 05:17,2015/06/14 01:21,2014/08/06 05:17,2018/11/19 17:12,1,0 days 00:00:00.000000000,"311 days, 20:04:00",https://github.com/docker/docker/blob/22c46af4b358cf3ec4f7af47c701064c00cf7de4/builder/parser/testfiles/docker/Dockerfile,https://github.com/docker/docker/blob/cd44018856be421497a35d96f88dd0eec42fae43/builder/dockerfile/parser/testfiles/docker/Dockerfile
817,"docker
docker",https://github.com/docker/docker,22c46af4b358cf3ec4f7af47c701064c00cf7de4,,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2014/08/06 05:17,2018/11/19 17:12,2014/08/06 05:17,2018/11/19 17:12,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker/blob/22c46af4b358cf3ec4f7af47c701064c00cf7de4/builder/parser/testfiles/docker/Dockerfile,
818,"docker
docker",https://github.com/docker/docker,cd44018856be421497a35d96f88dd0eec42fae43,11280665b45d0ac9920d17abaf6a7328f2bc77d9,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/06/14 01:21,2016/07/04 23:43,2014/08/06 05:17,2018/11/19 17:12,1,311 days 20:04:00.000000000,"386 days, 22:22:00",https://github.com/docker/docker/blob/cd44018856be421497a35d96f88dd0eec42fae43/builder/parser/testfiles/docker/Dockerfile,https://github.com/docker/docker/blob/11280665b45d0ac9920d17abaf6a7328f2bc77d9/builder/dockerfile/parser/testfiles/docker/Dockerfile
819,"docker
docker",https://github.com/docker/docker,11280665b45d0ac9920d17abaf6a7328f2bc77d9,b6eed3dca2e57705cb75895cad0b5337c79686d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/07/04 23:43,2017/11/28 11:21,2014/08/06 05:17,2018/11/19 17:12,1,698 days 18:26:00.000000000,"511 days, 11:38:00",https://github.com/docker/docker/blob/11280665b45d0ac9920d17abaf6a7328f2bc77d9/builder/dockerfile/parser/testfiles/docker/Dockerfile,https://github.com/docker/docker/blob/b6eed3dca2e57705cb75895cad0b5337c79686d9/builder/dockerfile/parser/testfiles/docker/Dockerfile
820,"docker
docker",https://github.com/docker/docker,b6eed3dca2e57705cb75895cad0b5337c79686d9,80bc8b4766cc808186af91930152d78afb22aef8,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/28 11:21,2018/05/19 03:28,2014/08/06 05:17,2018/11/19 17:12,1,1210 days 06:04:00.000000000,"171 days, 16:07:00",https://github.com/docker/docker/blob/b6eed3dca2e57705cb75895cad0b5337c79686d9/builder/dockerfile/parser/testfiles/docker/Dockerfile,https://github.com/docker/docker/blob/80bc8b4766cc808186af91930152d78afb22aef8/builder/dockerfile/parser/testfiles/docker/Dockerfile
821,"docker
docker",https://github.com/docker/docker,80bc8b4766cc808186af91930152d78afb22aef8,,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2018/11/19 17:12,2014/08/06 05:17,2018/11/19 17:12,1,1381 days 22:11:00.000000000,ファイル削除,https://github.com/docker/docker/blob/80bc8b4766cc808186af91930152d78afb22aef8/builder/dockerfile/parser/testfiles/docker/Dockerfile,
822,"docker
docker",https://github.com/docker/docker,be8885525c4d1ef4a13bbd6396f60e8657bc5573,,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2017/12/08 10:10,,2017/09/08 23:43,,1,90 days 10:27:00.000000000,削除されていません,https://github.com/docker/docker/blob/be8885525c4d1ef4a13bbd6396f60e8657bc5573/Dockerfile.e2e,
823,"docker
docker",https://github.com/docker/docker,934328d8ea650bf8a9c3c719999ce2a1f5dd5df6,,Dockerfile.solaris,Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",2016/06/07 16:45,2017/11/09 23:21,2016/06/07 16:45,2017/11/09 23:21,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker/blob/934328d8ea650bf8a9c3c719999ce2a1f5dd5df6/Dockerfile.solaris,
824,"docker
docker",https://github.com/docker/docker,4357ed4a7363a1032edf93cf03232953c805184f,,Dockerfile.gccgo,Dockerfile.gccgo,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/09/27 07:17,2015/08/17 18:20,2016/09/27 07:17,1,156 days 02:33:00.000000000,ファイル削除,https://github.com/docker/docker/blob/4357ed4a7363a1032edf93cf03232953c805184f/Dockerfile.gccgo,
825,"docker
docker",https://github.com/docker/docker,eaa9c85511620aa82f1876e1503604f591f00d23,3e84b9e56abdff7230e84a1830085c79c73aa3b7,docs/Dockerfile,docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",2014/01/15 11:23,2015/02/18 13:20,2013/08/30 08:49,2017/02/01 06:41,1,138 days 02:34:00.000000000,"399 days, 1:57:00",https://github.com/docker/docker/blob/eaa9c85511620aa82f1876e1503604f591f00d23/docs/Dockerfile,https://github.com/docker/docker/blob/3e84b9e56abdff7230e84a1830085c79c73aa3b7/docs/Dockerfile
826,"docker
docker",https://github.com/docker/docker,3e84b9e56abdff7230e84a1830085c79c73aa3b7,,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",2015/02/18 13:20,2017/02/01 06:41,2013/08/30 08:49,2017/02/01 06:41,1,537 days 04:31:00.000000000,ファイル削除,https://github.com/docker/docker/blob/3e84b9e56abdff7230e84a1830085c79c73aa3b7/docs/Dockerfile,
827,"docker
docker",https://github.com/docker/docker,3e84b9e56abdff7230e84a1830085c79c73aa3b7,8d4459fffb5c1885b65506093538e059f0b51d90,docs/Dockerfile,docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/18 13:20,2015/02/25 09:37,2013/08/30 08:49,2017/02/01 06:41,1,537 days 04:31:00.000000000,"6 days, 20:17:00",https://github.com/docker/docker/blob/3e84b9e56abdff7230e84a1830085c79c73aa3b7/docs/Dockerfile,https://github.com/docker/docker/blob/8d4459fffb5c1885b65506093538e059f0b51d90/docs/Dockerfile
828,"docker
docker",https://github.com/docker/docker,8d4459fffb5c1885b65506093538e059f0b51d90,,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/25 09:37,2017/02/01 06:41,2013/08/30 08:49,2017/02/01 06:41,1,544 days 00:48:00.000000000,ファイル削除,https://github.com/docker/docker/blob/8d4459fffb5c1885b65506093538e059f0b51d90/docs/Dockerfile,
829,"docker
docker",https://github.com/docker/docker,95f3f77fc417bbc55f03e869136deec27e26bc51,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/10/19 14:33,2013/11/07 13:05,2013/10/19 14:33,2014/03/11 05:20,1,0 days 00:00:00.000000000,"18 days, 22:32:00",https://github.com/docker/docker/blob/95f3f77fc417bbc55f03e869136deec27e26bc51/hack/infrastructure/docker-ci/docker-test/Dockerfile,https://github.com/docker/docker/blob/249f76bebdb3c24ae0a59e3be7ae73fd1d88c065/hack/infrastructure/docker-ci/docker-test/Dockerfile
830,"docker
docker",https://github.com/docker/docker,efb4c800a7c8167cf2202466a720c0fad7001a5d,e37a7d49818581a17303aacd06baf1db6835cfd6,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/30 11:37,2013/11/01 01:42,2013/10/19 14:33,2014/03/11 05:20,1,10 days 21:04:00.000000000,"1 day, 14:05:00",https://github.com/docker/docker/blob/efb4c800a7c8167cf2202466a720c0fad7001a5d/hack/infrastructure/docker-ci/docker-test/Dockerfile,https://github.com/docker/docker/blob/e37a7d49818581a17303aacd06baf1db6835cfd6/hack/infrastructure/docker-ci/docker-test/Dockerfile
831,"docker
docker",https://github.com/docker/docker,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.4
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/11/07 13:05,2014/03/11 05:20,2013/10/19 14:33,2014/03/11 05:20,1,18 days 22:32:00.000000000,ファイル削除,https://github.com/docker/docker/blob/249f76bebdb3c24ae0a59e3be7ae73fd1d88c065/hack/infrastructure/docker-ci/docker-test/Dockerfile,
832,"docker
docker",https://github.com/docker/docker,6e3068700fb32299cf733acd74785e29609b1974,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,testing/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",2013/09/22 04:14,2013/11/07 13:05,2013/09/08 02:30,2014/03/11 05:20,1,14 days 01:44:00.000000000,"46 days, 8:51:00",https://github.com/docker/docker/blob/6e3068700fb32299cf733acd74785e29609b1974/testing/nightlyrelease/Dockerfile,https://github.com/docker/docker/blob/249f76bebdb3c24ae0a59e3be7ae73fd1d88c065/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
833,"docker
docker",https://github.com/docker/docker,17172276366fc3114ae52eb6c83aafbec004d5f3,d91e1453320dd8ff37f133b530e372c5b9bc1ec9,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/10/28 04:13,2013/10/30 05:44,2013/09/08 02:30,2014/03/11 05:20,1,50 days 01:43:00.000000000,"2 days, 1:31:00",https://github.com/docker/docker/blob/17172276366fc3114ae52eb6c83aafbec004d5f3/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,https://github.com/docker/docker/blob/d91e1453320dd8ff37f133b530e372c5b9bc1ec9/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
834,"docker
docker",https://github.com/docker/docker,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,d91e1453320dd8ff37f133b530e372c5b9bc1ec9,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/29 08:51,2013/10/30 05:44,2013/09/08 02:30,2014/03/11 05:20,1,51 days 06:21:00.000000000,20:53:00,https://github.com/docker/docker/blob/0cbeda73910d6d1d3336da93c5f94df0bdd5fa44/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,https://github.com/docker/docker/blob/d91e1453320dd8ff37f133b530e372c5b9bc1ec9/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
835,"docker
docker",https://github.com/docker/docker,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.6
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/11/07 13:05,2014/03/11 05:20,2013/09/08 02:30,2014/03/11 05:20,1,60 days 10:35:00.000000000,ファイル削除,https://github.com/docker/docker/blob/249f76bebdb3c24ae0a59e3be7ae73fd1d88c065/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,
836,"docker
docker",https://github.com/docker/docker,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,,Dockerfile.buildkit,Dockerfile.buildkit,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker/blob/82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c/Dockerfile.buildkit,
837,"docker
docker",https://github.com/docker/docker,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,,Dockerfile.buildkit,Dockerfile.buildkit,"# Options for hack/validate/gometalinter
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker/blob/82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c/Dockerfile.buildkit,
838,"docker
docker",https://github.com/docker/docker,878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30,,Dockerfile.centos,Dockerfile.centos,"# Wrap all commands in the ""docker-in-docker"" script to allow nested containers
#ENTRYPOINT [""hack/dind""]
",2015/04/01 05:58,2015/05/01 07:30,2015/04/01 05:58,2015/05/01 07:30,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker/docker/blob/878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30/Dockerfile.centos,
839,"docker-library
mongo",https://github.com/docker-library/mongo,9ba0d6f19538d7922f62a41cea6589e366b100d3,,4.2/windows/windowsservercore-1809/Dockerfile,4.2/windows/windowsservercore-1809/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/12/04 02:26,,2019/12/04 02:26,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/9ba0d6f19538d7922f62a41cea6589e366b100d3/4.2/windows/windowsservercore-1809/Dockerfile,
840,"docker-library
mongo",https://github.com/docker-library/mongo,380200038360980631e362f964857d48489f99a2,,4.1/windows/windowsservercore-ltsc2016/Dockerfile,4.2/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/07/18 05:51,,2018/07/18 05:51,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/380200038360980631e362f964857d48489f99a2/4.1/windows/windowsservercore-ltsc2016/Dockerfile,
841,"docker-library
mongo",https://github.com/docker-library/mongo,380200038360980631e362f964857d48489f99a2,,4.1/Dockerfile,4.2/Dockerfile,"# TODO some sort of download verification here
",2018/07/18 05:51,,2018/07/18 05:51,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/380200038360980631e362f964857d48489f99a2/4.1/Dockerfile,
842,"docker-library
mongo",https://github.com/docker-library/mongo,32bf9f7905feb2b039c623e76e66d1602e73d277,,3.4/Dockerfile,3.4/Dockerfile,"# TODO some sort of download verification here
",2017/09/01 01:47,2020/02/08 08:52,2016/11/02 05:59,2020/02/08 08:52,1,302 days 19:48:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/32bf9f7905feb2b039c623e76e66d1602e73d277/3.4/Dockerfile,
843,"docker-library
mongo",https://github.com/docker-library/mongo,daeeeccd0edd110e6341ba3ee2d699caf885fbce,,3.4/windows/windowsservercore-ltsc2016/Dockerfile,3.4/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/11/23 07:25,2020/02/08 08:52,2017/11/23 07:25,2020/02/08 08:52,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/daeeeccd0edd110e6341ba3ee2d699caf885fbce/3.4/windows/windowsservercore-ltsc2016/Dockerfile,
844,"docker-library
mongo",https://github.com/docker-library/mongo,89549b2b779421c057b04858477012b7aa17f498,,3.3/windows/windowsservercore/Dockerfile,3.4/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2016/08/18 07:14,2019/04/12 08:27,2016/08/18 07:14,2019/04/12 08:27,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/89549b2b779421c057b04858477012b7aa17f498/3.3/windows/windowsservercore/Dockerfile,
845,"docker-library
mongo",https://github.com/docker-library/mongo,32bf9f7905feb2b039c623e76e66d1602e73d277,,3.6/Dockerfile,3.6/Dockerfile,"# TODO some sort of download verification here
",2017/09/01 01:47,,2017/11/23 09:40,,1,-84 days +16:07:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/32bf9f7905feb2b039c623e76e66d1602e73d277/3.6/Dockerfile,
846,"docker-library
mongo",https://github.com/docker-library/mongo,d7084920a1d3db7f50fc352c1c879845e36e48a6,,4.0-rc/Dockerfile,4.0/Dockerfile,"# TODO some sort of download verification here
",2018/05/23 00:17,,2018/05/23 00:17,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/d7084920a1d3db7f50fc352c1c879845e36e48a6/4.0-rc/Dockerfile,
847,"docker-library
mongo",https://github.com/docker-library/mongo,b6a2025cd8ddf3cf15e125e208177b44dc08771f,,4.2-rc/Dockerfile,4.2-rc/Dockerfile,"# TODO some sort of download verification here
",2019/06/13 08:19,2019/08/14 01:19,2019/06/13 08:19,2019/08/14 01:19,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/b6a2025cd8ddf3cf15e125e208177b44dc08771f/4.2-rc/Dockerfile,
848,"docker-library
mongo",https://github.com/docker-library/mongo,cac8a53d000f9e9f537438b976b719ad1b5bad3c,,Dockerfile-linux.template,Dockerfile-linux.template,"# TODO some sort of download verification here
",2018/12/25 04:14,,2018/12/25 04:14,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/cac8a53d000f9e9f537438b976b719ad1b5bad3c/Dockerfile-linux.template,
849,"docker-library
mongo",https://github.com/docker-library/mongo,daeeeccd0edd110e6341ba3ee2d699caf885fbce,,3.0/windows/windowsservercore-ltsc2016/Dockerfile,3.0/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/11/23 07:25,2018/05/10 04:13,2017/11/23 07:25,2018/05/10 04:13,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/daeeeccd0edd110e6341ba3ee2d699caf885fbce/3.0/windows/windowsservercore-ltsc2016/Dockerfile,
850,"docker-library
mongo",https://github.com/docker-library/mongo,17f05e95936bc3ec911446ffe4c2f5889363083d,,3.5/windows/windowsservercore/Dockerfile,3.5/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/04/01 05:30,2017/12/06 10:55,2017/04/01 05:30,2017/12/06 10:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/17f05e95936bc3ec911446ffe4c2f5889363083d/3.5/windows/windowsservercore/Dockerfile,
851,"docker-library
mongo",https://github.com/docker-library/mongo,daeeeccd0edd110e6341ba3ee2d699caf885fbce,,3.2/windows/windowsservercore-ltsc2016/Dockerfile,3.2/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/11/23 07:25,2018/12/25 03:19,2017/11/23 07:25,2018/12/25 03:19,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/daeeeccd0edd110e6341ba3ee2d699caf885fbce/3.2/windows/windowsservercore-ltsc2016/Dockerfile,
852,"docker-library
mongo",https://github.com/docker-library/mongo,89549b2b779421c057b04858477012b7aa17f498,,3.2/windows/windowsservercore/Dockerfile,3.2/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2016/08/18 07:14,2018/12/25 03:19,2016/08/18 07:14,2018/12/25 03:19,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/89549b2b779421c057b04858477012b7aa17f498/3.2/windows/windowsservercore/Dockerfile,
853,"docker-library
mongo",https://github.com/docker-library/mongo,daeeeccd0edd110e6341ba3ee2d699caf885fbce,,3.5/windows/windowsservercore-ltsc2016/Dockerfile,3.5/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/11/23 07:25,2017/12/06 10:55,2017/11/23 07:25,2017/12/06 10:55,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/daeeeccd0edd110e6341ba3ee2d699caf885fbce/3.5/windows/windowsservercore-ltsc2016/Dockerfile,
854,"docker-library
mongo",https://github.com/docker-library/mongo,89549b2b779421c057b04858477012b7aa17f498,,3.0/windows/windowsservercore/Dockerfile,3.0/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2016/08/18 07:14,2018/05/10 04:13,2016/08/18 07:14,2018/05/10 04:13,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/89549b2b779421c057b04858477012b7aa17f498/3.0/windows/windowsservercore/Dockerfile,
855,"docker-library
mongo",https://github.com/docker-library/mongo,375c4226fe653262306de9539bb2d3fc985dc3b4,,3.6-rc/windows/windowsservercore-ltsc2016/Dockerfile,3.6/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/11/23 09:40,,2017/11/23 09:40,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/375c4226fe653262306de9539bb2d3fc985dc3b4/3.6-rc/windows/windowsservercore-ltsc2016/Dockerfile,
856,"docker-library
mongo",https://github.com/docker-library/mongo,375c4226fe653262306de9539bb2d3fc985dc3b4,,3.6-rc/windows/windowsservercore-1709/Dockerfile,3.6/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/11/23 09:40,2019/04/12 08:27,2017/11/23 09:40,2019/04/12 08:27,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/375c4226fe653262306de9539bb2d3fc985dc3b4/3.6-rc/windows/windowsservercore-1709/Dockerfile,
857,"docker-library
mongo",https://github.com/docker-library/mongo,380200038360980631e362f964857d48489f99a2,,4.1/windows/windowsservercore-1803/Dockerfile,4.2/windows/windowsservercore-1803/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/07/18 05:51,2019/12/10 07:37,2018/07/18 05:51,2019/12/10 07:37,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/380200038360980631e362f964857d48489f99a2/4.1/windows/windowsservercore-1803/Dockerfile,
858,"docker-library
mongo",https://github.com/docker-library/mongo,380200038360980631e362f964857d48489f99a2,,4.0/windows/windowsservercore-1803/Dockerfile,4.0/windows/windowsservercore-1803/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/07/18 05:51,2019/12/10 07:37,2018/07/18 05:51,2019/12/10 07:37,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/380200038360980631e362f964857d48489f99a2/4.0/windows/windowsservercore-1803/Dockerfile,
859,"docker-library
mongo",https://github.com/docker-library/mongo,380200038360980631e362f964857d48489f99a2,,4.1/windows/windowsservercore-1709/Dockerfile,4.1/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/07/18 05:51,2019/04/12 08:27,2018/07/18 05:51,2019/04/12 08:27,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/380200038360980631e362f964857d48489f99a2/4.1/windows/windowsservercore-1709/Dockerfile,
860,"docker-library
mongo",https://github.com/docker-library/mongo,692ec82754bde8d6d4e663462669b3be2a6f8b2b,,3.7/windows/windowsservercore-1709/Dockerfile,4.0/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/01/17 02:12,2019/04/12 08:27,2018/01/17 02:12,2019/04/12 08:27,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/692ec82754bde8d6d4e663462669b3be2a6f8b2b/3.7/windows/windowsservercore-1709/Dockerfile,
861,"docker-library
mongo",https://github.com/docker-library/mongo,692ec82754bde8d6d4e663462669b3be2a6f8b2b,,3.7/windows/windowsservercore-ltsc2016/Dockerfile,4.0/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/01/17 02:12,,2018/01/17 02:12,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/692ec82754bde8d6d4e663462669b3be2a6f8b2b/3.7/windows/windowsservercore-ltsc2016/Dockerfile,
862,"docker-library
mongo",https://github.com/docker-library/mongo,32bf9f7905feb2b039c623e76e66d1602e73d277,,3.0/Dockerfile,3.0/Dockerfile,"# TODO some sort of download verification here
",2017/09/01 01:47,2018/05/10 04:13,2014/08/19 06:43,2018/05/10 04:13,1,1108 days 19:04:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/32bf9f7905feb2b039c623e76e66d1602e73d277/3.0/Dockerfile,
863,"docker-library
mongo",https://github.com/docker-library/mongo,32bf9f7905feb2b039c623e76e66d1602e73d277,,3.2/Dockerfile,3.2/Dockerfile,"# TODO some sort of download verification here
",2017/09/01 01:47,2018/12/25 03:19,2015/11/01 01:56,2018/12/25 03:19,1,669 days 23:51:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/32bf9f7905feb2b039c623e76e66d1602e73d277/3.2/Dockerfile,
864,"docker-library
mongo",https://github.com/docker-library/mongo,cac8a53d000f9e9f537438b976b719ad1b5bad3c,,Dockerfile-windows.template,Dockerfile-windows.template,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/12/25 04:14,,2018/12/25 04:14,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/cac8a53d000f9e9f537438b976b719ad1b5bad3c/Dockerfile-windows.template,
865,"docker-library
mongo",https://github.com/docker-library/mongo,9ba0d6f19538d7922f62a41cea6589e366b100d3,,4.0/windows/windowsservercore-1809/Dockerfile,4.0/windows/windowsservercore-1809/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/12/04 02:26,,2019/12/04 02:26,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/9ba0d6f19538d7922f62a41cea6589e366b100d3/4.0/windows/windowsservercore-1809/Dockerfile,
866,"docker-library
mongo",https://github.com/docker-library/mongo,d7084920a1d3db7f50fc352c1c879845e36e48a6,,4.0-rc/windows/windowsservercore-ltsc2016/Dockerfile,4.0-rc/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/05/23 00:17,2018/06/28 02:12,2018/05/23 00:17,2018/06/28 02:12,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/d7084920a1d3db7f50fc352c1c879845e36e48a6/4.0-rc/windows/windowsservercore-ltsc2016/Dockerfile,
867,"docker-library
mongo",https://github.com/docker-library/mongo,d7084920a1d3db7f50fc352c1c879845e36e48a6,,4.0-rc/windows/windowsservercore-1709/Dockerfile,4.0-rc/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/05/23 00:17,2018/06/28 02:12,2018/05/23 00:17,2018/06/28 02:12,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/d7084920a1d3db7f50fc352c1c879845e36e48a6/4.0-rc/windows/windowsservercore-1709/Dockerfile,
868,"docker-library
mongo",https://github.com/docker-library/mongo,ec80a4a2218babddb8b572209e45841b96c1954c,,3.4-rc/windows/windowsservercore/Dockerfile,3.4-rc/windows/windowsservercore/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2016/11/02 05:59,2016/11/30 02:50,2016/11/02 05:59,2016/11/30 02:50,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/ec80a4a2218babddb8b572209e45841b96c1954c/3.4-rc/windows/windowsservercore/Dockerfile,
869,"docker-library
mongo",https://github.com/docker-library/mongo,3fecc7f8e812d9dc8b03e83f47bfe544442ad9a3,,4.4-rc/Dockerfile,4.4/Dockerfile,"# TODO some sort of download verification here
",2020/03/11 08:19,,2020/03/11 08:19,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/3fecc7f8e812d9dc8b03e83f47bfe544442ad9a3/4.4-rc/Dockerfile,
870,"docker-library
mongo",https://github.com/docker-library/mongo,b6a2025cd8ddf3cf15e125e208177b44dc08771f,,4.2-rc/windows/windowsservercore-1803/Dockerfile,4.2-rc/windows/windowsservercore-1803/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/06/13 08:19,2019/08/14 01:19,2019/06/13 08:19,2019/08/14 01:19,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/b6a2025cd8ddf3cf15e125e208177b44dc08771f/4.2-rc/windows/windowsservercore-1803/Dockerfile,
871,"docker-library
mongo",https://github.com/docker-library/mongo,b6a2025cd8ddf3cf15e125e208177b44dc08771f,,4.2-rc/windows/windowsservercore-ltsc2016/Dockerfile,4.2-rc/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/06/13 08:19,2019/08/14 01:19,2019/06/13 08:19,2019/08/14 01:19,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/b6a2025cd8ddf3cf15e125e208177b44dc08771f/4.2-rc/windows/windowsservercore-ltsc2016/Dockerfile,
872,"docker-library
mongo",https://github.com/docker-library/mongo,3fecc7f8e812d9dc8b03e83f47bfe544442ad9a3,,4.4-rc/windows/windowsservercore-ltsc2016/Dockerfile,4.4/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/03/11 08:19,,2020/03/11 08:19,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/3fecc7f8e812d9dc8b03e83f47bfe544442ad9a3/4.4-rc/windows/windowsservercore-ltsc2016/Dockerfile,
873,"docker-library
mongo",https://github.com/docker-library/mongo,3fecc7f8e812d9dc8b03e83f47bfe544442ad9a3,,4.4-rc/windows/windowsservercore-1809/Dockerfile,4.4/windows/windowsservercore-1809/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/03/11 08:19,,2020/03/11 08:19,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/3fecc7f8e812d9dc8b03e83f47bfe544442ad9a3/4.4-rc/windows/windowsservercore-1809/Dockerfile,
874,"docker-library
mongo",https://github.com/docker-library/mongo,692ec82754bde8d6d4e663462669b3be2a6f8b2b,,3.7/Dockerfile,3.7/Dockerfile,"# TODO some sort of download verification here
",2018/01/17 02:12,2018/06/28 02:12,2018/01/17 02:12,2018/06/28 02:12,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/mongo/blob/692ec82754bde8d6d4e663462669b3be2a6f8b2b/3.7/Dockerfile,
875,"docker-library
mongo",https://github.com/docker-library/mongo,c312dd5c0d72cfabe25fd4b1f9dab6d5fdf1d6ff,,3.6/windows/windowsservercore-1809/Dockerfile,3.6/windows/windowsservercore-1809/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/03/21 02:20,,2020/03/21 02:20,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/mongo/blob/c312dd5c0d72cfabe25fd4b1f9dab6d5fdf1d6ff/3.6/windows/windowsservercore-1809/Dockerfile,
876,"jenkinsci
jenkins-ci.org-docker",https://github.com/jenkinsci/jenkins-ci.org-docker,07d980e247edc241b6835df024e876cfdb469cad,,Dockerfile-jdk11,Dockerfile-jdk11,"# TODO: revert before the GA release of Java 11 support (JENKINS-55087)
",2018/12/08 06:13,,2014/12/03 17:04,,1,1465 days 13:09:00.000000000,削除されていません,https://github.com/jenkinsci/jenkins-ci.org-docker/blob/07d980e247edc241b6835df024e876cfdb469cad/Dockerfile-jdk11,
877,"jenkinsci
jenkins-ci.org-docker",https://github.com/jenkinsci/jenkins-ci.org-docker,ae123feaec324dc35350a8bd9ab2704597857f38,,Dockerfile-alpine,Dockerfile-alpine,"# FIXME(oleg_nenashev): This is not an official AdoptOpenJDK Docker Image.
# There is no official Alpine images at the moment.
# Needs upgrade when/if there is an official alpine image.
",2020/08/13 18:42,,2017/07/20 18:53,,1,1119 days 23:49:00.000000000,削除されていません,https://github.com/jenkinsci/jenkins-ci.org-docker/blob/ae123feaec324dc35350a8bd9ab2704597857f38/Dockerfile-alpine,
878,"docker-library
official-images",https://github.com/docker-library/official-images,447e88b53d1636a4641a6917b1b6c24f8bbf70a4,76e1068df5a4610b6f77c0fdb8874bcc10583a9f,bashbrew/Dockerfile.release,bashbrew/Dockerfile.release,"#$os/}""; \
# TODO GOARM
",2017/05/03 06:36,2017/06/06 08:15,2017/05/03 06:36,2020/09/01 08:14,1,0 days 00:00:00.000000000,"34 days, 1:39:00",https://github.com/docker-library/official-images/blob/447e88b53d1636a4641a6917b1b6c24f8bbf70a4/bashbrew/Dockerfile.release,https://github.com/docker-library/official-images/blob/76e1068df5a4610b6f77c0fdb8874bcc10583a9f/bashbrew/Dockerfile.release
879,"docker-library
official-images",https://github.com/docker-library/official-images,447e88b53d1636a4641a6917b1b6c24f8bbf70a4,f6cbc219978a8cb48e0735eb0d460125fb0dab4e,bashbrew/Dockerfile.release,bashbrew/Dockerfile.release,"# TODO verify GPG signatures for manifest-tool releases
",2017/05/03 06:36,2017/09/12 07:52,2017/05/03 06:36,2020/09/01 08:14,1,0 days 00:00:00.000000000,"132 days, 1:16:00",https://github.com/docker-library/official-images/blob/447e88b53d1636a4641a6917b1b6c24f8bbf70a4/bashbrew/Dockerfile.release,https://github.com/docker-library/official-images/blob/f6cbc219978a8cb48e0735eb0d460125fb0dab4e/bashbrew/Dockerfile.release
880,"docker-library
official-images",https://github.com/docker-library/official-images,f6cbc219978a8cb48e0735eb0d460125fb0dab4e,,bashbrew/Dockerfile.release,bashbrew/Dockerfile.release,"# gpg: key 0F386284C03A1162: public key ""Philip Estes <estesp@gmail.com>"" imported
#ENV MANIFEST_TOOL_GPG_KEY 27F3EA268A97867EAF0BD05C0F386284C03A1162
# TODO consume Phil's releases again (once he fixes https://github.com/estesp/manifest-tool/issues/47 properly)

",2017/09/12 07:52,2020/09/01 08:14,2017/05/03 06:36,2020/09/01 08:14,1,132 days 01:16:00.000000000,ファイル削除,https://github.com/docker-library/official-images/blob/f6cbc219978a8cb48e0735eb0d460125fb0dab4e/bashbrew/Dockerfile.release,
881,"docker-library
official-images",https://github.com/docker-library/official-images,84aa9ed158196e09a9e68f34d6a2a02ce43a0f7e,,bashbrew/put-multiarch/Dockerfile,bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
",2019/05/10 08:53,2020/05/23 09:20,2019/05/10 08:53,2020/05/23 09:20,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/official-images/blob/84aa9ed158196e09a9e68f34d6a2a02ce43a0f7e/bashbrew/put-multiarch/Dockerfile,
882,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.s390x,vendor/github.com/docker/docker/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.s390x,
883,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.s390x,vendor/github.com/docker/docker/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.s390x,
884,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile,vendor/github.com/docker/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile,
885,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile,vendor/github.com/docker/docker/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile,
886,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.aarch64,vendor/github.com/docker/docker/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.aarch64,
887,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.aarch64,vendor/github.com/docker/docker/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.aarch64,
888,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.windows,vendor/github.com/docker/docker/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.windows,
889,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.solaris,vendor/github.com/docker/docker/Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.solaris,
890,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.ppc64le,vendor/github.com/docker/docker/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.ppc64le,
891,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.ppc64le,vendor/github.com/docker/docker/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.ppc64le,
892,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.armhf,vendor/github.com/docker/docker/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.armhf,
893,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.armhf,vendor/github.com/docker/docker/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.armhf,
894,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.simple,vendor/github.com/docker/docker/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.simple,
895,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,,vendor/github.com/docker/docker/Dockerfile.simple,vendor/github.com/docker/docker/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:32,2017/07/26 04:32,2018/03/17 04:32,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/influxdata/kapacitor/blob/5dd218345c6ac415de818984998112a9ecad5167/vendor/github.com/docker/docker/Dockerfile.simple,
896,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jre/windows/windowsservercore-1809/Dockerfile,8/jre/windows/windowsservercore-1809/Dockerfile,"# TODO signature? checksum?
",2019/05/23 06:37,,2019/05/23 06:37,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jre/windows/windowsservercore-1809/Dockerfile,
897,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jdk/windows/windowsservercore-1809/Dockerfile,8/jdk/windows/windowsservercore-1809/Dockerfile,"# TODO signature? checksum?
",2019/05/23 06:37,,2019/01/15 17:49,,1,127 days 12:48:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jdk/windows/windowsservercore-1809/Dockerfile,
898,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,,11/jre/slim/Dockerfile,11/jre/slim-buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/07/17 08:32,,2018/04/15 01:18,,1,458 days 07:14:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/572682ed1cb951ab8d978e8015e4a910093db920/11/jre/slim/Dockerfile,
899,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,451e66427f3c53fada288aaff950617c5864745f,11/jre/slim/Dockerfile,11/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/07/17 08:32,2019/09/14 06:15,2018/04/15 01:18,,1,458 days 07:14:00.000000000,"58 days, 21:43:00",https://github.com/docker-library/openjdk/blob/572682ed1cb951ab8d978e8015e4a910093db920/11/jre/slim/Dockerfile,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/11/jre/slim-buster/Dockerfile
900,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,11/jre/slim/Dockerfile,11/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2018/04/15 01:18,,1,517 days 04:57:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/11/jre/slim/Dockerfile,
901,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jdk/Dockerfile,8/jdk/buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/05/23 06:37,,2014/07/19 08:19,,1,1768 days 22:18:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jdk/Dockerfile,
902,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,451e66427f3c53fada288aaff950617c5864745f,8/jdk/Dockerfile,8/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2014/07/19 08:19,,1,1768 days 22:18:00.000000000,"113 days, 23:38:00",https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jdk/Dockerfile,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/8/jdk/buster/Dockerfile
903,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,8/jdk/Dockerfile,8/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2014/07/19 08:19,,1,1882 days 21:56:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/8/jdk/Dockerfile,
904,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,Dockerfile-adopt-windows.template,Dockerfile-adopt-windows-servercore.template,"# TODO signature? checksum?
",2019/05/23 06:37,,2019/05/23 06:37,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/Dockerfile-adopt-windows.template,
905,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/05/23 06:37,,2017/07/22 02:20,,1,670 days 04:17:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jdk/slim/Dockerfile,
906,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,451e66427f3c53fada288aaff950617c5864745f,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2017/07/22 02:20,,1,670 days 04:17:00.000000000,"113 days, 23:38:00",https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jdk/slim/Dockerfile,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/8/jdk/slim-buster/Dockerfile
907,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,e715db19b8abe216948ef5b81dcb352273bd69f3,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2017/07/22 02:20,,1,670 days 04:17:00.000000000,1:57:00,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jdk/slim/Dockerfile,https://github.com/docker-library/openjdk/blob/e715db19b8abe216948ef5b81dcb352273bd69f3/8/jdk/slim-buster/Dockerfile
908,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2017/07/22 02:20,,1,784 days 03:55:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/8/jdk/slim/Dockerfile,
909,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,Dockerfile-adopt-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO strip ""demo"" and ""man"" folders?
",2019/05/23 06:37,,2019/05/23 06:37,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/Dockerfile-adopt-slim.template,
910,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,451e66427f3c53fada288aaff950617c5864745f,Dockerfile-adopt-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2019/05/23 06:37,,1,0 days 00:00:00.000000000,"113 days, 23:38:00",https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/Dockerfile-adopt-slim.template,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/Dockerfile-adopt-debian-slim.template
911,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,e715db19b8abe216948ef5b81dcb352273bd69f3,Dockerfile-adopt-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2019/05/23 06:37,,1,0 days 00:00:00.000000000,1:57:00,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/Dockerfile-adopt-slim.template,https://github.com/docker-library/openjdk/blob/e715db19b8abe216948ef5b81dcb352273bd69f3/Dockerfile-adopt-debian-slim.template
912,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,Dockerfile-adopt-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2019/05/23 06:37,,1,113 days 23:38:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/Dockerfile-adopt-slim.template,
913,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,11/jdk/Dockerfile,11/jdk/buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/05/23 06:37,,2018/04/15 01:18,,1,403 days 05:19:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/11/jdk/Dockerfile,
914,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,451e66427f3c53fada288aaff950617c5864745f,11/jdk/Dockerfile,11/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2018/04/15 01:18,,1,403 days 05:19:00.000000000,"113 days, 23:38:00",https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/11/jdk/Dockerfile,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/11/jdk/buster/Dockerfile
915,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,11/jdk/Dockerfile,11/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2018/04/15 01:18,,1,517 days 04:57:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/11/jdk/Dockerfile,
916,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jre/Dockerfile,8/jre/buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/05/23 06:37,,2014/10/10 21:26,,1,1685 days 09:11:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jre/Dockerfile,
917,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,451e66427f3c53fada288aaff950617c5864745f,8/jre/Dockerfile,8/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2014/10/10 21:26,,1,1685 days 09:11:00.000000000,"113 days, 23:38:00",https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jre/Dockerfile,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/8/jre/buster/Dockerfile
918,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,8/jre/Dockerfile,8/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2014/10/10 21:26,,1,1799 days 08:49:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/8/jre/Dockerfile,
919,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jdk/windows/windowsservercore-ltsc2016/Dockerfile,8/jdk/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO signature? checksum?
",2019/05/23 06:37,,2017/11/23 07:52,,1,545 days 22:45:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jdk/windows/windowsservercore-ltsc2016/Dockerfile,
920,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,451e66427f3c53fada288aaff950617c5864745f,11/jdk/slim/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2018/04/15 01:18,,1,403 days 05:19:00.000000000,"113 days, 23:38:00",https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/11/jdk/slim/Dockerfile,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/11/jdk/slim-buster/Dockerfile
921,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,11/jdk/slim/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/05/23 06:37,,2018/04/15 01:18,,1,403 days 05:19:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/11/jdk/slim/Dockerfile,
922,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,e715db19b8abe216948ef5b81dcb352273bd69f3,11/jdk/slim/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2018/04/15 01:18,,1,403 days 05:19:00.000000000,1:57:00,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/11/jdk/slim/Dockerfile,https://github.com/docker-library/openjdk/blob/e715db19b8abe216948ef5b81dcb352273bd69f3/11/jdk/slim-buster/Dockerfile
923,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,11/jdk/slim/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2018/04/15 01:18,,1,517 days 04:57:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/11/jdk/slim/Dockerfile,
924,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,11/jdk/windows/windowsservercore-ltsc2016/Dockerfile,11/jdk/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO signature? checksum?
",2019/05/23 06:37,,2018/09/06 07:03,,1,258 days 23:34:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/11/jdk/windows/windowsservercore-ltsc2016/Dockerfile,
925,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,,11/jre/Dockerfile,11/jre/buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/07/17 08:32,,2018/04/15 01:18,,1,458 days 07:14:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/572682ed1cb951ab8d978e8015e4a910093db920/11/jre/Dockerfile,
926,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,451e66427f3c53fada288aaff950617c5864745f,11/jre/Dockerfile,11/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/07/17 08:32,2019/09/14 06:15,2018/04/15 01:18,,1,458 days 07:14:00.000000000,"58 days, 21:43:00",https://github.com/docker-library/openjdk/blob/572682ed1cb951ab8d978e8015e4a910093db920/11/jre/Dockerfile,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/11/jre/buster/Dockerfile
927,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,11/jre/Dockerfile,11/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2018/04/15 01:18,,1,517 days 04:57:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/11/jre/Dockerfile,
928,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,451e66427f3c53fada288aaff950617c5864745f,Dockerfile-adopt-linux.template,Dockerfile-adopt-debian.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2019/05/23 06:37,,1,0 days 00:00:00.000000000,"113 days, 23:38:00",https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/Dockerfile-adopt-linux.template,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/Dockerfile-adopt-debian.template
929,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,Dockerfile-adopt-linux.template,Dockerfile-adopt-debian.template,"# TODO strip ""demo"" and ""man"" folders?
",2019/05/23 06:37,,2019/05/23 06:37,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/Dockerfile-adopt-linux.template,
930,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,Dockerfile-adopt-linux.template,Dockerfile-adopt-debian.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2019/05/23 06:37,,1,113 days 23:38:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/Dockerfile-adopt-linux.template,
931,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jre/windows/windowsservercore-ltsc2016/Dockerfile,8/jre/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO signature? checksum?
",2019/05/23 06:37,,2019/05/23 06:37,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jre/windows/windowsservercore-ltsc2016/Dockerfile,
932,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,11/jdk/windows/windowsservercore-1809/Dockerfile,11/jdk/windows/windowsservercore-1809/Dockerfile,"# TODO signature? checksum?
",2019/05/23 06:37,,2019/01/15 17:49,,1,127 days 12:48:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/11/jdk/windows/windowsservercore-1809/Dockerfile,
933,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,,11/jre/windows/windowsservercore-1809/Dockerfile,11/jre/windows/windowsservercore-1809/Dockerfile,"# TODO signature? checksum?
",2019/07/17 08:32,,2019/07/17 08:32,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/572682ed1cb951ab8d978e8015e4a910093db920/11/jre/windows/windowsservercore-1809/Dockerfile,
934,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/05/23 06:37,,2017/07/22 02:20,,1,670 days 04:17:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jre/slim/Dockerfile,
935,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,451e66427f3c53fada288aaff950617c5864745f,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 06:37,2019/09/14 06:15,2017/07/22 02:20,,1,670 days 04:17:00.000000000,"113 days, 23:38:00",https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jre/slim/Dockerfile,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/8/jre/slim-buster/Dockerfile
936,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,e715db19b8abe216948ef5b81dcb352273bd69f3,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2017/07/22 02:20,,1,670 days 04:17:00.000000000,1:57:00,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jre/slim/Dockerfile,https://github.com/docker-library/openjdk/blob/e715db19b8abe216948ef5b81dcb352273bd69f3/8/jre/slim-buster/Dockerfile
937,"docker-library
openjdk",https://github.com/docker-library/openjdk,451e66427f3c53fada288aaff950617c5864745f,,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/09/14 06:15,,2017/07/22 02:20,,1,784 days 03:55:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/451e66427f3c53fada288aaff950617c5864745f/8/jre/slim/Dockerfile,
938,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,,11/jre/windows/windowsservercore-ltsc2016/Dockerfile,11/jre/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO signature? checksum?
",2019/07/17 08:32,,2019/07/17 08:32,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/572682ed1cb951ab8d978e8015e4a910093db920/11/jre/windows/windowsservercore-ltsc2016/Dockerfile,
939,"docker-library
openjdk",https://github.com/docker-library/openjdk,db97c023c9f036d5e4df5fd9d1e5d21bdbabccce,,13/jdk/oracle/Dockerfile,13/jdk/oracle/Dockerfile,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2019/01/02 17:24,2020/03/18 06:09,2019/01/02 17:24,2020/03/18 06:09,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/openjdk/blob/db97c023c9f036d5e4df5fd9d1e5d21bdbabccce/13/jdk/oracle/Dockerfile,
940,"docker-library
openjdk",https://github.com/docker-library/openjdk,7d6b0528da55c7b74feff4f565c9dbb8907b8c9a,,12/jdk/oracle/Dockerfile,12/jdk/oracle/Dockerfile,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2018/09/13 07:10,2019/09/18 08:59,2018/09/13 07:10,2019/09/18 08:59,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/openjdk/blob/7d6b0528da55c7b74feff4f565c9dbb8907b8c9a/12/jdk/oracle/Dockerfile,
941,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,,11/jre/windows/windowsservercore-1803/Dockerfile,11/jre/windows/windowsservercore-1803/Dockerfile,"# TODO signature? checksum?
",2019/07/17 08:32,2019/12/10 07:35,2019/07/17 08:32,2019/12/10 07:35,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/openjdk/blob/572682ed1cb951ab8d978e8015e4a910093db920/11/jre/windows/windowsservercore-1803/Dockerfile,
942,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,11/jdk/windows/windowsservercore-1803/Dockerfile,11/jdk/windows/windowsservercore-1803/Dockerfile,"# TODO signature? checksum?
",2019/05/23 06:37,2019/12/10 07:35,2018/09/06 07:03,2019/12/10 07:35,1,258 days 23:34:00.000000000,ファイル削除,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/11/jdk/windows/windowsservercore-1803/Dockerfile,
943,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jre/windows/windowsservercore-1803/Dockerfile,8/jre/windows/windowsservercore-1803/Dockerfile,"# TODO signature? checksum?
",2019/05/23 06:37,2019/12/10 07:35,2019/05/23 06:37,2019/12/10 07:35,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jre/windows/windowsservercore-1803/Dockerfile,
944,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,,8/jdk/windows/windowsservercore-1803/Dockerfile,8/jdk/windows/windowsservercore-1803/Dockerfile,"# TODO signature? checksum?
",2019/05/23 06:37,2019/12/10 07:35,2018/11/08 01:22,2019/12/10 07:35,1,196 days 05:15:00.000000000,ファイル削除,https://github.com/docker-library/openjdk/blob/3eb0351b208d739fac35345c85e3c6237c2114ec/8/jdk/windows/windowsservercore-1803/Dockerfile,
945,"docker-library
openjdk",https://github.com/docker-library/openjdk,7d6b0528da55c7b74feff4f565c9dbb8907b8c9a,,Dockerfile-oracle.template,Dockerfile-oracle-oraclelinux.template,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2018/09/13 07:10,,2018/09/13 07:10,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/openjdk/blob/7d6b0528da55c7b74feff4f565c9dbb8907b8c9a/Dockerfile-oracle.template,
946,"docker-library
openjdk",https://github.com/docker-library/openjdk,7d6b0528da55c7b74feff4f565c9dbb8907b8c9a,,11/jdk/oracle/Dockerfile,11/jdk/oracle/Dockerfile,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2018/09/13 07:10,2019/04/20 07:49,2018/09/13 07:10,2019/04/20 07:49,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/openjdk/blob/7d6b0528da55c7b74feff4f565c9dbb8907b8c9a/11/jdk/oracle/Dockerfile,
947,"docker-library
openjdk",https://github.com/docker-library/openjdk,7d6b0528da55c7b74feff4f565c9dbb8907b8c9a,,10/jdk/oracle/Dockerfile,10/jdk/oracle/Dockerfile,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2018/09/13 07:10,2018/12/07 05:42,2018/09/13 07:10,2018/12/07 05:42,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/openjdk/blob/7d6b0528da55c7b74feff4f565c9dbb8907b8c9a/10/jdk/oracle/Dockerfile,
948,"docker-library
docker",https://github.com/docker-library/docker,5dd425e5b74a02bde63257e56c2bb67cbae74686,,18.09-rc/Dockerfile,18.09/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/08/23 06:02,2020/06/10 06:17,2018/08/23 06:02,2020/06/10 06:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5dd425e5b74a02bde63257e56c2bb67cbae74686/18.09-rc/Dockerfile,
949,"docker-library
docker",https://github.com/docker-library/docker,5dd425e5b74a02bde63257e56c2bb67cbae74686,,18.09-rc/Dockerfile,18.09/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/08/23 06:02,2020/06/10 06:17,2018/08/23 06:02,2020/06/10 06:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5dd425e5b74a02bde63257e56c2bb67cbae74686/18.09-rc/Dockerfile,
950,"docker-library
docker",https://github.com/docker-library/docker,690c2cedc6c5e8a47507240b7d8a39a19f03bae6,,18.02-rc/Dockerfile,18.02-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/01/26 02:44,2018/02/09 02:29,2018/01/26 02:44,2018/02/09 02:29,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/690c2cedc6c5e8a47507240b7d8a39a19f03bae6/18.02-rc/Dockerfile,
951,"docker-library
docker",https://github.com/docker-library/docker,690c2cedc6c5e8a47507240b7d8a39a19f03bae6,,18.02-rc/Dockerfile,18.02-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/01/26 02:44,2018/02/09 02:29,2018/01/26 02:44,2018/02/09 02:29,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/690c2cedc6c5e8a47507240b7d8a39a19f03bae6/18.02-rc/Dockerfile,
952,"docker-library
docker",https://github.com/docker-library/docker,690c2cedc6c5e8a47507240b7d8a39a19f03bae6,,18.02-rc/dind/Dockerfile,18.03/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/01/26 02:44,2018/07/20 05:53,2018/01/26 02:44,2018/07/20 05:53,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/690c2cedc6c5e8a47507240b7d8a39a19f03bae6/18.02-rc/dind/Dockerfile,
953,"docker-library
docker",https://github.com/docker-library/docker,bc5d62520258cacb230485ee96754f9f9aa117c4,,18.03/dind/Dockerfile,18.03/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/09 03:09,2018/07/20 05:53,2018/01/26 02:44,2018/07/20 05:53,1,103 days 00:25:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/bc5d62520258cacb230485ee96754f9f9aa117c4/18.03/dind/Dockerfile,
954,"docker-library
docker",https://github.com/docker-library/docker,a98e0c42a96497670c36f4b2dcad2bcc81f18f35,1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5,1.7/dind/Dockerfile,17.09/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:54,2016/07/01 02:09,2015/08/07 04:54,2018/02/09 02:29,1,0 days 00:00:00.000000000,"328 days, 21:15:00",https://github.com/docker-library/docker/blob/a98e0c42a96497670c36f4b2dcad2bcc81f18f35/1.7/dind/Dockerfile,https://github.com/docker-library/docker/blob/1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5/17.09/dind/Dockerfile
955,"docker-library
docker",https://github.com/docker-library/docker,1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5,,1.11/dind/Dockerfile,17.09/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/07/01 02:09,2018/02/09 02:29,2015/08/07 04:54,2018/02/09 02:29,1,328 days 21:15:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5/1.11/dind/Dockerfile,
956,"docker-library
docker",https://github.com/docker-library/docker,168a6d227d021c6d38c3986b7c668702ec172fa7,,17.06/dind/Dockerfile,17.06/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/09/30 02:02,2017/11/08 23:45,2017/09/30 02:02,2017/11/08 23:45,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/168a6d227d021c6d38c3986b7c668702ec172fa7/17.06/dind/Dockerfile,
957,"docker-library
docker",https://github.com/docker-library/docker,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,,Dockerfile-dind.template,Dockerfile-dind.template,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/06/08 08:31,,2017/06/08 08:31,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/Dockerfile-dind.template,
958,"docker-library
docker",https://github.com/docker-library/docker,bc5d62520258cacb230485ee96754f9f9aa117c4,,Dockerfile-dind.template,Dockerfile-dind.template,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/09 03:09,,2017/06/08 08:31,,1,334 days 18:38:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/bc5d62520258cacb230485ee96754f9f9aa117c4/Dockerfile-dind.template,
959,"docker-library
docker",https://github.com/docker-library/docker,a98e0c42a96497670c36f4b2dcad2bcc81f18f35,1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5,1.8-rc/dind/Dockerfile,17.12/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:54,2016/07/01 02:09,2015/08/07 04:54,2018/05/11 01:18,1,0 days 00:00:00.000000000,"328 days, 21:15:00",https://github.com/docker-library/docker/blob/a98e0c42a96497670c36f4b2dcad2bcc81f18f35/1.8-rc/dind/Dockerfile,https://github.com/docker-library/docker/blob/1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5/17.12/dind/Dockerfile
960,"docker-library
docker",https://github.com/docker-library/docker,1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5,,1.10/dind/Dockerfile,17.12/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/07/01 02:09,2018/05/11 01:18,2015/08/07 04:54,2018/05/11 01:18,1,328 days 21:15:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5/1.10/dind/Dockerfile,
961,"docker-library
docker",https://github.com/docker-library/docker,bc5d62520258cacb230485ee96754f9f9aa117c4,,17.12/dind/Dockerfile,17.12/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/09 03:09,2018/05/11 01:18,2015/08/07 04:54,2018/05/11 01:18,1,1005 days 22:15:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/bc5d62520258cacb230485ee96754f9f9aa117c4/17.12/dind/Dockerfile,
962,"docker-library
docker",https://github.com/docker-library/docker,84fbcfc4cbef254dce2e7ecd7fcff788da4690df,,18.06-rc/dind/Dockerfile,18.06-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/07/03 02:02,2018/08/23 01:26,2018/07/03 02:02,2018/08/23 01:26,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/84fbcfc4cbef254dce2e7ecd7fcff788da4690df/18.06-rc/dind/Dockerfile,
963,"docker-library
docker",https://github.com/docker-library/docker,84fbcfc4cbef254dce2e7ecd7fcff788da4690df,,18.06-rc/dind/Dockerfile,18.06-rc/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/07/03 02:02,2018/08/23 01:26,2018/07/03 02:02,2018/08/23 01:26,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/84fbcfc4cbef254dce2e7ecd7fcff788da4690df/18.06-rc/dind/Dockerfile,
964,"docker-library
docker",https://github.com/docker-library/docker,84fbcfc4cbef254dce2e7ecd7fcff788da4690df,,18.06-rc/Dockerfile,18.06-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/07/03 02:02,2018/08/23 01:26,2018/07/03 02:02,2018/08/23 01:26,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/84fbcfc4cbef254dce2e7ecd7fcff788da4690df/18.06-rc/Dockerfile,
965,"docker-library
docker",https://github.com/docker-library/docker,84fbcfc4cbef254dce2e7ecd7fcff788da4690df,,18.06-rc/Dockerfile,18.06-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/07/03 02:02,2018/08/23 01:26,2018/07/03 02:02,2018/08/23 01:26,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/84fbcfc4cbef254dce2e7ecd7fcff788da4690df/18.06-rc/Dockerfile,
966,"docker-library
docker",https://github.com/docker-library/docker,98ffef81ebfa7601a9ed2f0bf56d78f426bf253c,,19.03-rc/Dockerfile,19.03-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2019/04/06 08:09,,2019/04/06 08:09,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/98ffef81ebfa7601a9ed2f0bf56d78f426bf253c/19.03-rc/Dockerfile,
967,"docker-library
docker",https://github.com/docker-library/docker,98ffef81ebfa7601a9ed2f0bf56d78f426bf253c,,19.03-rc/Dockerfile,19.03-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2019/04/06 08:09,,2019/04/06 08:09,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/98ffef81ebfa7601a9ed2f0bf56d78f426bf253c/19.03-rc/Dockerfile,
968,"docker-library
docker",https://github.com/docker-library/docker,4975dca2dd357705c5613045348402ab664ccdf0,,19.03/Dockerfile,19.03/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2019/07/23 05:16,,2019/07/23 05:16,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/4975dca2dd357705c5613045348402ab664ccdf0/19.03/Dockerfile,
969,"docker-library
docker",https://github.com/docker-library/docker,4975dca2dd357705c5613045348402ab664ccdf0,,19.03/Dockerfile,19.03/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2019/07/23 05:16,,2019/07/23 05:16,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/4975dca2dd357705c5613045348402ab664ccdf0/19.03/Dockerfile,
970,"docker-library
docker",https://github.com/docker-library/docker,27e5adeb0597e445e3b9df951f03eaf89131184b,,18.09-rc/Dockerfile,18.09-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/12/05 06:56,2020/06/10 06:17,2018/12/05 06:56,2020/06/10 06:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/27e5adeb0597e445e3b9df951f03eaf89131184b/18.09-rc/Dockerfile,
971,"docker-library
docker",https://github.com/docker-library/docker,27e5adeb0597e445e3b9df951f03eaf89131184b,,18.09-rc/Dockerfile,18.09-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/12/05 06:56,2020/06/10 06:17,2018/12/05 06:56,2020/06/10 06:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/27e5adeb0597e445e3b9df951f03eaf89131184b/18.09-rc/Dockerfile,
972,"docker-library
docker",https://github.com/docker-library/docker,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,,Dockerfile.template,Dockerfile.template,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/06/08 08:31,,2017/06/08 08:31,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/Dockerfile.template,
973,"docker-library
docker",https://github.com/docker-library/docker,454a0ff9e99d4fde7112b25d64d25f940ab28a99,,Dockerfile.template,Dockerfile.template,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/10/12 06:31,,2017/06/08 08:31,,1,125 days 22:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/454a0ff9e99d4fde7112b25d64d25f940ab28a99/Dockerfile.template,
974,"docker-library
docker",https://github.com/docker-library/docker,f522868d85d70569fb3e90bd913efa1c3394a264,,17.09-rc/Dockerfile,17.12-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/12/03 23:02,2018/03/01 02:44,2017/12/03 23:02,2018/03/01 02:44,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f522868d85d70569fb3e90bd913efa1c3394a264/17.09-rc/Dockerfile,
975,"docker-library
docker",https://github.com/docker-library/docker,f522868d85d70569fb3e90bd913efa1c3394a264,,17.09-rc/Dockerfile,17.12-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/12/03 23:02,2018/03/01 02:44,2017/12/03 23:02,2018/03/01 02:44,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f522868d85d70569fb3e90bd913efa1c3394a264/17.09-rc/Dockerfile,
976,"docker-library
docker",https://github.com/docker-library/docker,5dd425e5b74a02bde63257e56c2bb67cbae74686,,18.09-rc/dind/Dockerfile,18.09/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/08/23 06:02,2020/06/10 06:17,2018/08/23 06:02,2020/06/10 06:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5dd425e5b74a02bde63257e56c2bb67cbae74686/18.09-rc/dind/Dockerfile,
977,"docker-library
docker",https://github.com/docker-library/docker,5dd425e5b74a02bde63257e56c2bb67cbae74686,,18.09-rc/dind/Dockerfile,18.09/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/08/23 06:02,2020/06/10 06:17,2018/08/23 06:02,2020/06/10 06:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5dd425e5b74a02bde63257e56c2bb67cbae74686/18.09-rc/dind/Dockerfile,
978,"docker-library
docker",https://github.com/docker-library/docker,2f6926c4fb37274b90fae3ba6c3320619a8d0289,,17.07/windows/windowsservercore/Dockerfile,17.10/windows/windowsservercore/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/13 08:46,2017/11/22 02:48,2017/10/13 08:46,2017/11/22 02:48,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/2f6926c4fb37274b90fae3ba6c3320619a8d0289/17.07/windows/windowsservercore/Dockerfile,
979,"docker-library
docker",https://github.com/docker-library/docker,2f6926c4fb37274b90fae3ba6c3320619a8d0289,,Dockerfile-windows-windowsservercore.template,Dockerfile-windows-windowsservercore.template,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/13 08:46,,2017/10/13 08:46,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/2f6926c4fb37274b90fae3ba6c3320619a8d0289/Dockerfile-windows-windowsservercore.template,
980,"docker-library
docker",https://github.com/docker-library/docker,2f6926c4fb37274b90fae3ba6c3320619a8d0289,,17.10-rc/windows/windowsservercore/Dockerfile,17.10-rc/windows/windowsservercore/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/13 08:46,2017/10/19 01:49,2017/10/13 08:46,2017/10/19 01:49,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/2f6926c4fb37274b90fae3ba6c3320619a8d0289/17.10-rc/windows/windowsservercore/Dockerfile,
981,"docker-library
docker",https://github.com/docker-library/docker,2f6926c4fb37274b90fae3ba6c3320619a8d0289,,17.09/windows/windowsservercore/Dockerfile,17.09/windows/windowsservercore-1709/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/13 08:46,2017/12/09 03:24,2017/10/13 08:46,2017/12/09 03:24,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/2f6926c4fb37274b90fae3ba6c3320619a8d0289/17.09/windows/windowsservercore/Dockerfile,
982,"docker-library
docker",https://github.com/docker-library/docker,2f6926c4fb37274b90fae3ba6c3320619a8d0289,,17.06/windows/windowsservercore/Dockerfile,17.06/windows/windowsservercore/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/13 08:46,2017/11/08 23:45,2017/10/13 08:46,2017/11/08 23:45,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/2f6926c4fb37274b90fae3ba6c3320619a8d0289/17.06/windows/windowsservercore/Dockerfile,
983,"docker-library
docker",https://github.com/docker-library/docker,ce8784112e81f724c96dae8272dd7367d712f3e9,,17.09-rc/Dockerfile,17.09/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/09/08 01:31,2018/02/09 02:29,2017/09/08 01:31,2018/02/09 02:29,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/ce8784112e81f724c96dae8272dd7367d712f3e9/17.09-rc/Dockerfile,
984,"docker-library
docker",https://github.com/docker-library/docker,454a0ff9e99d4fde7112b25d64d25f940ab28a99,,17.09/Dockerfile,17.09/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/10/12 06:31,2018/02/09 02:29,2017/09/08 01:31,2018/02/09 02:29,1,34 days 05:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/454a0ff9e99d4fde7112b25d64d25f940ab28a99/17.09/Dockerfile,
985,"docker-library
docker",https://github.com/docker-library/docker,e7e2e3119360567641d334f1d274952236632357,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,17.06-rc/Dockerfile,17.06/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/31 01:53,2017/06/08 08:31,2017/05/31 01:53,2017/11/08 23:45,1,0 days 00:00:00.000000000,"8 days, 6:38:00",https://github.com/docker-library/docker/blob/e7e2e3119360567641d334f1d274952236632357/17.06-rc/Dockerfile,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/17.06/Dockerfile
986,"docker-library
docker",https://github.com/docker-library/docker,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,,17.06-rc/Dockerfile,17.06/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/06/08 08:31,2017/11/08 23:45,2017/05/31 01:53,2017/11/08 23:45,1,8 days 06:38:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/17.06-rc/Dockerfile,
987,"docker-library
docker",https://github.com/docker-library/docker,454a0ff9e99d4fde7112b25d64d25f940ab28a99,,17.06/Dockerfile,17.06/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/10/12 06:31,2017/11/08 23:45,2017/05/31 01:53,2017/11/08 23:45,1,134 days 04:38:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/454a0ff9e99d4fde7112b25d64d25f940ab28a99/17.06/Dockerfile,
988,"docker-library
docker",https://github.com/docker-library/docker,5235be1da9e2347f1efbbc2a6689726cb72569ce,,17.11-rc/dind/Dockerfile,17.11-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/10/31 23:21,2017/11/22 02:48,2017/10/31 23:21,2017/11/22 02:48,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5235be1da9e2347f1efbbc2a6689726cb72569ce/17.11-rc/dind/Dockerfile,
989,"docker-library
docker",https://github.com/docker-library/docker,5235be1da9e2347f1efbbc2a6689726cb72569ce,,17.11-rc/Dockerfile,17.11-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/10/31 23:21,2017/11/22 02:48,2017/10/31 23:21,2017/11/22 02:48,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5235be1da9e2347f1efbbc2a6689726cb72569ce/17.11-rc/Dockerfile,
990,"docker-library
docker",https://github.com/docker-library/docker,5235be1da9e2347f1efbbc2a6689726cb72569ce,,17.11-rc/Dockerfile,17.11-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/31 23:21,2017/11/22 02:48,2017/10/31 23:21,2017/11/22 02:48,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5235be1da9e2347f1efbbc2a6689726cb72569ce/17.11-rc/Dockerfile,
991,"docker-library
docker",https://github.com/docker-library/docker,5235be1da9e2347f1efbbc2a6689726cb72569ce,,17.11-rc/windows/windowsservercore/Dockerfile,17.11-rc/windows/windowsservercore/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/31 23:21,2017/11/17 04:22,2017/10/31 23:21,2017/11/17 04:22,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5235be1da9e2347f1efbbc2a6689726cb72569ce/17.11-rc/windows/windowsservercore/Dockerfile,
992,"docker-library
docker",https://github.com/docker-library/docker,8ada62f762b30d09fd54664710c0ef3b64038f07,,17.10-rc/Dockerfile,17.12/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/06 01:38,2018/05/11 01:18,2017/10/06 01:38,2018/05/11 01:18,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/8ada62f762b30d09fd54664710c0ef3b64038f07/17.10-rc/Dockerfile,
993,"docker-library
docker",https://github.com/docker-library/docker,454a0ff9e99d4fde7112b25d64d25f940ab28a99,,17.10-rc/Dockerfile,17.12/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/10/12 06:31,2018/05/11 01:18,2017/10/06 01:38,2018/05/11 01:18,1,6 days 04:53:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/454a0ff9e99d4fde7112b25d64d25f940ab28a99/17.10-rc/Dockerfile,
994,"docker-library
docker",https://github.com/docker-library/docker,5d58870994d0ba33a5228af06876fe2026752924,,18.03-rc/dind/Dockerfile,18.05-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/02/23 03:05,2018/05/11 01:18,2018/02/23 03:05,2018/05/11 01:18,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5d58870994d0ba33a5228af06876fe2026752924/18.03-rc/dind/Dockerfile,
995,"docker-library
docker",https://github.com/docker-library/docker,bc5d62520258cacb230485ee96754f9f9aa117c4,,18.05-rc/dind/Dockerfile,18.05-rc/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/09 03:09,2018/05/11 01:18,2018/02/23 03:05,2018/05/11 01:18,1,75 days 00:04:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/bc5d62520258cacb230485ee96754f9f9aa117c4/18.05-rc/dind/Dockerfile,
996,"docker-library
docker",https://github.com/docker-library/docker,045fbbc0ac44b1db42ef8b499f2bef1db8dcfe61,,18.04-rc/dind/Dockerfile,18.06/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/04/04 02:45,2019/06/15 06:03,2018/04/04 02:45,2019/06/15 06:03,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/045fbbc0ac44b1db42ef8b499f2bef1db8dcfe61/18.04-rc/dind/Dockerfile,
997,"docker-library
docker",https://github.com/docker-library/docker,bc5d62520258cacb230485ee96754f9f9aa117c4,,18.04/dind/Dockerfile,18.06/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/09 03:09,2019/06/15 06:03,2018/04/04 02:45,2019/06/15 06:03,1,35 days 00:24:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/bc5d62520258cacb230485ee96754f9f9aa117c4/18.04/dind/Dockerfile,
998,"docker-library
docker",https://github.com/docker-library/docker,737f83092a47b012d09a0cbf0ed72759550301cb,,1.13-rc/experimental/dind/Dockerfile,1.13-rc/experimental/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/11/12 10:36,2016/11/13 01:13,2016/11/12 10:36,2016/11/13 01:13,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/737f83092a47b012d09a0cbf0ed72759550301cb/1.13-rc/experimental/dind/Dockerfile,
999,"docker-library
docker",https://github.com/docker-library/docker,737f83092a47b012d09a0cbf0ed72759550301cb,,1.13-rc/dind/Dockerfile,1.13-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/11/12 10:36,2017/01/19 03:43,2016/11/12 10:36,2017/01/19 03:43,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/737f83092a47b012d09a0cbf0ed72759550301cb/1.13-rc/dind/Dockerfile,
1000,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,,1.2/dind/Dockerfile,1.2/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f1341e1e9a099073463b1e8192c45435ce3e6760/1.2/dind/Dockerfile,
1001,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,,1.5/dind/Dockerfile,1.5/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f1341e1e9a099073463b1e8192c45435ce3e6760/1.5/dind/Dockerfile,
1002,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,,1.1/dind/Dockerfile,1.1/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f1341e1e9a099073463b1e8192c45435ce3e6760/1.1/dind/Dockerfile,
1003,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,,1.3/dind/Dockerfile,1.3/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f1341e1e9a099073463b1e8192c45435ce3e6760/1.3/dind/Dockerfile,
1004,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,,1.0/dind/Dockerfile,1.0/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f1341e1e9a099073463b1e8192c45435ce3e6760/1.0/dind/Dockerfile,
1005,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,,1.4/dind/Dockerfile,1.4/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f1341e1e9a099073463b1e8192c45435ce3e6760/1.4/dind/Dockerfile,
1006,"docker-library
docker",https://github.com/docker-library/docker,27e5adeb0597e445e3b9df951f03eaf89131184b,,18.09-rc/dind/Dockerfile,18.09-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/12/05 06:56,2020/06/10 06:17,2018/12/05 06:56,2020/06/10 06:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/27e5adeb0597e445e3b9df951f03eaf89131184b/18.09-rc/dind/Dockerfile,
1007,"docker-library
docker",https://github.com/docker-library/docker,27e5adeb0597e445e3b9df951f03eaf89131184b,,18.09-rc/dind/Dockerfile,18.09-rc/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/12/05 06:56,2020/06/10 06:17,2018/12/05 06:56,2020/06/10 06:17,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/27e5adeb0597e445e3b9df951f03eaf89131184b/18.09-rc/dind/Dockerfile,
1008,"docker-library
docker",https://github.com/docker-library/docker,2aa6d388f205fc20ad22402bfed4ece715c7cb48,,17.09/windows/windowsservercore-ltsc2016/Dockerfile,17.09/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/11/23 08:09,2017/12/09 03:24,2017/11/23 08:09,2017/12/09 03:24,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/2aa6d388f205fc20ad22402bfed4ece715c7cb48/17.09/windows/windowsservercore-ltsc2016/Dockerfile,
1009,"docker-library
docker",https://github.com/docker-library/docker,5a196cae40e2a0ab5050cf6d79b697e032352b24,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,17.05/Dockerfile,17.05/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/11 13:11,2017/06/08 08:31,2016/03/31 06:43,2017/06/29 10:31,1,406 days 06:28:00.000000000,"27 days, 19:20:00",https://github.com/docker-library/docker/blob/5a196cae40e2a0ab5050cf6d79b697e032352b24/17.05/Dockerfile,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/17.05/Dockerfile
1010,"docker-library
docker",https://github.com/docker-library/docker,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,,17.05/Dockerfile,17.05/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/06/08 08:31,2017/06/29 10:31,2016/03/31 06:43,2017/06/29 10:31,1,434 days 01:48:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/17.05/Dockerfile,
1011,"docker-library
docker",https://github.com/docker-library/docker,5a196cae40e2a0ab5050cf6d79b697e032352b24,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,17.03/Dockerfile,17.07/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/11 13:11,2017/06/08 08:31,2016/06/17 03:03,2017/10/19 01:49,1,328 days 10:08:00.000000000,"27 days, 19:20:00",https://github.com/docker-library/docker/blob/5a196cae40e2a0ab5050cf6d79b697e032352b24/17.03/Dockerfile,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/17.07/Dockerfile
1012,"docker-library
docker",https://github.com/docker-library/docker,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,,17.03/Dockerfile,17.07/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/06/08 08:31,2017/10/19 01:49,2016/06/17 03:03,2017/10/19 01:49,1,356 days 05:28:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/17.03/Dockerfile,
1013,"docker-library
docker",https://github.com/docker-library/docker,454a0ff9e99d4fde7112b25d64d25f940ab28a99,,17.07/Dockerfile,17.07/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/10/12 06:31,2017/10/19 01:49,2016/06/17 03:03,2017/10/19 01:49,1,482 days 03:28:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/454a0ff9e99d4fde7112b25d64d25f940ab28a99/17.07/Dockerfile,
1014,"docker-library
docker",https://github.com/docker-library/docker,4d1f83ee6e25a5c2bb1c8a04de0643b1a964ba5e,1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5,1.12-rc/dind/Dockerfile,1.12-rc/dind/Dockerfile,"# TODO aufs-tools

",2016/06/17 03:03,2016/07/01 02:09,2016/06/17 03:03,2016/10/12 08:54,1,0 days 00:00:00.000000000,"13 days, 23:06:00",https://github.com/docker-library/docker/blob/4d1f83ee6e25a5c2bb1c8a04de0643b1a964ba5e/1.12-rc/dind/Dockerfile,https://github.com/docker-library/docker/blob/1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5/1.12-rc/dind/Dockerfile
1015,"docker-library
docker",https://github.com/docker-library/docker,1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5,,1.12-rc/dind/Dockerfile,1.12-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/07/01 02:09,2016/10/12 08:54,2016/06/17 03:03,2016/10/12 08:54,1,13 days 23:06:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5/1.12-rc/dind/Dockerfile,
1016,"docker-library
docker",https://github.com/docker-library/docker,f60aacc67bcba2d5b45c28665742a60b99d24466,,17.06-rc/Dockerfile,17.06-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/07/15 04:39,2017/09/06 08:56,2017/07/15 04:39,2017/09/06 08:56,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f60aacc67bcba2d5b45c28665742a60b99d24466/17.06-rc/Dockerfile,
1017,"docker-library
docker",https://github.com/docker-library/docker,e7e2e3119360567641d334f1d274952236632357,,17.06-rc/dind/Dockerfile,17.06-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/05/31 01:53,2017/09/06 08:56,2017/05/31 01:53,2017/09/06 08:56,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/e7e2e3119360567641d334f1d274952236632357/17.06-rc/dind/Dockerfile,
1018,"docker-library
docker",https://github.com/docker-library/docker,20e81e7474e54f9edbb33c931e4731ef6c5b8335,,1.9-rc/dind/Dockerfile,1.9-rc/dind/Dockerfile,"# TODO aufs-tools

",2015/10/14 23:05,2015/11/21 04:15,2015/10/14 23:05,2015/11/21 04:15,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/20e81e7474e54f9edbb33c931e4731ef6c5b8335/1.9-rc/dind/Dockerfile,
1019,"docker-library
docker",https://github.com/docker-library/docker,98ffef81ebfa7601a9ed2f0bf56d78f426bf253c,,19.03-rc/dind/Dockerfile,19.03-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2019/04/06 08:09,,2019/04/06 08:09,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/98ffef81ebfa7601a9ed2f0bf56d78f426bf253c/19.03-rc/dind/Dockerfile,
1020,"docker-library
docker",https://github.com/docker-library/docker,98ffef81ebfa7601a9ed2f0bf56d78f426bf253c,,19.03-rc/dind/Dockerfile,19.03-rc/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2019/04/06 08:09,,2019/04/06 08:09,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/98ffef81ebfa7601a9ed2f0bf56d78f426bf253c/19.03-rc/dind/Dockerfile,
1021,"docker-library
docker",https://github.com/docker-library/docker,4975dca2dd357705c5613045348402ab664ccdf0,,19.03/dind/Dockerfile,19.03/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2019/07/23 05:16,,2019/07/23 05:16,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/4975dca2dd357705c5613045348402ab664ccdf0/19.03/dind/Dockerfile,
1022,"docker-library
docker",https://github.com/docker-library/docker,4975dca2dd357705c5613045348402ab664ccdf0,,19.03/dind/Dockerfile,19.03/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2019/07/23 05:16,,2019/07/23 05:16,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/docker-library/docker/blob/4975dca2dd357705c5613045348402ab664ccdf0/19.03/dind/Dockerfile,
1023,"docker-library
docker",https://github.com/docker-library/docker,5d58870994d0ba33a5228af06876fe2026752924,,18.03-rc/Dockerfile,18.05-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/02/23 03:05,2018/05/11 01:18,2018/02/23 03:05,2018/05/11 01:18,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5d58870994d0ba33a5228af06876fe2026752924/18.03-rc/Dockerfile,
1024,"docker-library
docker",https://github.com/docker-library/docker,5d58870994d0ba33a5228af06876fe2026752924,,18.03-rc/Dockerfile,18.05-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/02/23 03:05,2018/05/11 01:18,2018/02/23 03:05,2018/05/11 01:18,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5d58870994d0ba33a5228af06876fe2026752924/18.03-rc/Dockerfile,
1025,"docker-library
docker",https://github.com/docker-library/docker,8de8842b2fffc6bb43609c133b54207ffb7b4ce2,,18.01-rc/Dockerfile,18.06/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/01/05 04:48,2019/06/15 06:03,2018/01/05 04:48,2019/06/15 06:03,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/8de8842b2fffc6bb43609c133b54207ffb7b4ce2/18.01-rc/Dockerfile,
1026,"docker-library
docker",https://github.com/docker-library/docker,8de8842b2fffc6bb43609c133b54207ffb7b4ce2,,18.01-rc/Dockerfile,18.06/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/01/05 04:48,2019/06/15 06:03,2018/01/05 04:48,2019/06/15 06:03,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/8de8842b2fffc6bb43609c133b54207ffb7b4ce2/18.01-rc/Dockerfile,
1027,"docker-library
docker",https://github.com/docker-library/docker,2c75eb72ab98b95256be008aa93efdec289d96e8,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,17.03-rc/Dockerfile,17.03-rc/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/31 03:18,2017/06/08 08:31,2017/02/23 06:49,2017/06/29 10:31,1,96 days 20:29:00.000000000,"8 days, 5:13:00",https://github.com/docker-library/docker/blob/2c75eb72ab98b95256be008aa93efdec289d96e8/17.03-rc/Dockerfile,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/17.03-rc/Dockerfile
1028,"docker-library
docker",https://github.com/docker-library/docker,8390fd856922deec4ca7bf0004e6e8e81f60c9f2,,17.03-rc/Dockerfile,17.03-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/06/08 08:31,2017/06/29 10:31,2017/02/23 06:49,2017/06/29 10:31,1,105 days 01:42:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/8390fd856922deec4ca7bf0004e6e8e81f60c9f2/17.03-rc/Dockerfile,
1029,"docker-library
docker",https://github.com/docker-library/docker,06717e6f2add8226068bec54abb23e646dea90e0,,17.03-rc/dind/Dockerfile,17.03-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/02/23 06:49,2017/06/29 10:31,2017/02/23 06:49,2017/06/29 10:31,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/06717e6f2add8226068bec54abb23e646dea90e0/17.03-rc/dind/Dockerfile,
1030,"docker-library
docker",https://github.com/docker-library/docker,f522868d85d70569fb3e90bd913efa1c3394a264,,17.09-rc/windows/windowsservercore-1709/Dockerfile,17.09-rc/windows/windowsservercore-1709/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/12/03 23:02,2017/12/05 09:35,2017/12/03 23:02,2017/12/05 09:35,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f522868d85d70569fb3e90bd913efa1c3394a264/17.09-rc/windows/windowsservercore-1709/Dockerfile,
1031,"docker-library
docker",https://github.com/docker-library/docker,f522868d85d70569fb3e90bd913efa1c3394a264,,17.09-rc/windows/windowsservercore-ltsc2016/Dockerfile,17.09-rc/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/12/03 23:02,2017/12/05 09:35,2017/12/03 23:02,2017/12/05 09:35,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/f522868d85d70569fb3e90bd913efa1c3394a264/17.09-rc/windows/windowsservercore-ltsc2016/Dockerfile,
1032,"docker-library
docker",https://github.com/docker-library/docker,ce8784112e81f724c96dae8272dd7367d712f3e9,,17.09-rc/dind/Dockerfile,17.12-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/09/08 01:31,2018/03/01 02:44,2017/09/08 01:31,2018/03/01 02:44,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/ce8784112e81f724c96dae8272dd7367d712f3e9/17.09-rc/dind/Dockerfile,
1033,"docker-library
docker",https://github.com/docker-library/docker,045fbbc0ac44b1db42ef8b499f2bef1db8dcfe61,,18.04-rc/Dockerfile,18.05/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/04/04 02:45,2018/07/20 05:53,2018/04/04 02:45,2018/07/20 05:53,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/045fbbc0ac44b1db42ef8b499f2bef1db8dcfe61/18.04-rc/Dockerfile,
1034,"docker-library
docker",https://github.com/docker-library/docker,045fbbc0ac44b1db42ef8b499f2bef1db8dcfe61,,18.04-rc/Dockerfile,18.05/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/04/04 02:45,2018/07/20 05:53,2018/04/04 02:45,2018/07/20 05:53,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/045fbbc0ac44b1db42ef8b499f2bef1db8dcfe61/18.04-rc/Dockerfile,
1035,"docker-library
docker",https://github.com/docker-library/docker,b4404c1aadf1a09b5216b27fb35499bdcfd4d77a,,1.11-rc/dind/Dockerfile,1.11-rc/dind/Dockerfile,"# TODO aufs-tools

",2016/03/31 06:43,2016/04/14 05:33,2016/03/31 06:43,2016/04/14 05:33,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/b4404c1aadf1a09b5216b27fb35499bdcfd4d77a/1.11-rc/dind/Dockerfile,
1036,"docker-library
docker",https://github.com/docker-library/docker,eb714a73e7e3f87705f468c3c6e9f4e316136bf5,,1.12/experimental/dind/Dockerfile,1.12/experimental/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/08/23 04:06,2017/03/03 05:45,2016/08/23 04:06,2017/03/03 05:45,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/eb714a73e7e3f87705f468c3c6e9f4e316136bf5/1.12/experimental/dind/Dockerfile,
1037,"docker-library
docker",https://github.com/docker-library/docker,a98e0c42a96497670c36f4b2dcad2bcc81f18f35,,1.6/dind/Dockerfile,1.6/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:54,2015/08/22 12:24,2015/08/07 04:54,2015/08/22 12:24,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/a98e0c42a96497670c36f4b2dcad2bcc81f18f35/1.6/dind/Dockerfile,
1038,"docker-library
docker",https://github.com/docker-library/docker,56215ac49d9947e317154fad823410df1201089b,,17.05-rc/dind/Dockerfile,17.05-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/04/14 02:58,2017/05/06 05:28,2017/04/14 02:58,2017/05/06 05:28,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/56215ac49d9947e317154fad823410df1201089b/17.05-rc/dind/Dockerfile,
1039,"docker-library
docker",https://github.com/docker-library/docker,dba6c6279614ac0a7e520f0b7f7c027250488a4f,,1.12-rc/experimental/dind/Dockerfile,1.12-rc/experimental/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/09/29 05:18,2016/10/12 08:54,2016/09/29 05:18,2016/10/12 08:54,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/dba6c6279614ac0a7e520f0b7f7c027250488a4f/1.12-rc/experimental/dind/Dockerfile,
1040,"docker-library
docker",https://github.com/docker-library/docker,8de8842b2fffc6bb43609c133b54207ffb7b4ce2,,18.01-rc/dind/Dockerfile,18.01/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/01/05 04:48,2018/02/09 02:29,2018/01/05 04:48,2018/02/09 02:29,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/8de8842b2fffc6bb43609c133b54207ffb7b4ce2/18.01-rc/dind/Dockerfile,
1041,"docker-library
docker",https://github.com/docker-library/docker,5c4db83ebdc26e4303fc3a6adf916367d440eea2,,1.8-rc/dind/Dockerfile,1.8-rc/dind/Dockerfile,"# TODO aufs-tools

",2015/09/04 06:10,2015/09/11 04:56,2015/09/04 06:10,2015/09/11 04:56,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/5c4db83ebdc26e4303fc3a6adf916367d440eea2/1.8-rc/dind/Dockerfile,
1042,"docker-library
docker",https://github.com/docker-library/docker,8ada62f762b30d09fd54664710c0ef3b64038f07,,17.10-rc/dind/Dockerfile,17.10-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/10/06 01:38,2017/10/19 01:49,2017/10/06 01:38,2017/10/19 01:49,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/8ada62f762b30d09fd54664710c0ef3b64038f07/17.10-rc/dind/Dockerfile,
1043,"docker-library
docker",https://github.com/docker-library/docker,e9c09260bfaea5199c6c053a83fc46564aa14990,,17.04-rc/dind/Dockerfile,17.04-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/03/23 03:11,2017/04/07 01:34,2017/03/23 03:11,2017/04/07 01:34,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/e9c09260bfaea5199c6c053a83fc46564aa14990/17.04-rc/dind/Dockerfile,
1044,"docker-library
docker",https://github.com/docker-library/docker,945f73423dd843ee587567712b6657d5780307da,,1.10-rc/dind/Dockerfile,1.10-rc/dind/Dockerfile,"# TODO aufs-tools

",2016/01/16 06:50,2016/02/23 09:28,2016/01/16 06:50,2016/02/23 09:28,1,0 days 00:00:00.000000000,ファイル削除,https://github.com/docker-library/docker/blob/945f73423dd843ee587567712b6657d5780307da/1.10-rc/dind/Dockerfile,
1045,"hashicorp
vault",https://github.com/hashicorp/vault,e6ec457488a5469e66a344720c4d237c4156d3e6,,scripts/docker/Dockerfile.ui,scripts/docker/Dockerfile.ui,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2020/07/21 03:11,,2020/07/21 03:11,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/hashicorp/vault/blob/e6ec457488a5469e66a344720c4d237c4156d3e6/scripts/docker/Dockerfile.ui,
1046,"hashicorp
vault",https://github.com/hashicorp/vault,e6ec457488a5469e66a344720c4d237c4156d3e6,,scripts/docker/Dockerfile,scripts/docker/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2020/07/21 03:11,,2020/07/21 03:11,,1,0 days 00:00:00.000000000,削除されていません,https://github.com/hashicorp/vault/blob/e6ec457488a5469e66a344720c4d237c4156d3e6/scripts/docker/Dockerfile,
