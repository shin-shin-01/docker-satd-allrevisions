,project,gitPath,CommitID,Dockerfiles,LatestDockerfile,Comments,CommitDate,DeleteComment,(File) FirstCommit,(File) Deleted,isSATD,firstCommitからコメント追加までの日数,コメント追加からコメント削除までの日数
0,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,3d8ea96e0a1a54c995eedbc325df34e163224365,3.8-rc/ubuntu/Dockerfile,3.8-rc/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/11/11 15:05,2020/02/19 21:05,2019/01/30 22:23,,1,284 days 16:42:00.000000000,"100 days, 6:00:00"
1,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,3d8ea96e0a1a54c995eedbc325df34e163224365,3.8-rc/alpine/Dockerfile,3.8-rc/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/11/11 15:05,2020/02/19 21:05,2019/01/30 22:23,,1,284 days 16:42:00.000000000,"100 days, 6:00:00"
2,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,52e744d86c39bd939aa1d1e7627c555c70e1380b,3.7-rc/ubuntu/Dockerfile,3.7-rc/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2020/01/28 21:05,2020/01/28 21:05,2019/01/25 08:19,2020/08/15 06:21,1,368 days 12:46:00.000000000,0:00:00
3,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,52e744d86c39bd939aa1d1e7627c555c70e1380b,3.7-rc/alpine/Dockerfile,3.7-rc/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2020/01/28 21:05,2020/01/28 21:05,2018/01/17 02:11,2018/01/31 02:15,1,741 days 18:54:00.000000000,0:00:00
4,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,d782d042fc95f8294bc0f69d0ddf5eba19d3cf98,3.8/ubuntu/Dockerfile,3.8/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2020/04/11 04:17,,2019/10/02 00:45,,1,192 days 03:32:00.000000000,削除されていません
5,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,d782d042fc95f8294bc0f69d0ddf5eba19d3cf98,3.8/alpine/Dockerfile,3.8/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2020/04/11 04:17,,2019/10/02 00:45,,1,192 days 03:32:00.000000000,削除されていません
6,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,064d595490cc5595f50b98cfc801abbbca2b5afd,3.7/alpine/Dockerfile,3.7/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/03/20 02:11,2019/03/20 02:11,2017/09/26 04:33,2020/08/15 06:21,1,539 days 21:38:00.000000000,0:00:00
7,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,6631b6ca7ec272b35e6f5fc86f5eb34c781846c8,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/15 20:10,2019/01/15 20:10,2019/01/09 22:14,2020/08/15 06:21,1,5 days 21:56:00.000000000,0:00:00
8,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,5318927c3a2d0fcdd049178127e05b6b47870e4b,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# Delete all src dirs to keep the final image size down, they add an extra 19MB
# TODO @dumbbell could this be done better, in the build/install phases?
",2019/01/16 00:13,2019/03/20 02:11,2019/01/09 22:14,2020/08/15 06:21,1,6 days 01:59:00.000000000,"63 days, 1:58:00"
9,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,57831db8b9aaaaeb781f9ad8ea771940297bd6cc,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO
# Install RabbitMQ
# Ensure RabbitMQ starts & rabbitmqctl works correctly
",2019/01/10 02:21,2019/09/11 20:05,2019/01/09 22:14,2020/08/15 06:21,1,0 days 04:07:00.000000000,"244 days, 17:44:00"
10,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,6631b6ca7ec272b35e6f5fc86f5eb34c781846c8,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# Delete all src dirs to keep the final image size down, they add an extra 19MB
# TODO Could this be done better?
",2019/01/15 20:10,2019/01/15 20:10,2019/01/09 22:14,2020/08/15 06:21,1,5 days 21:56:00.000000000,0:00:00
11,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,21c07a969ba2bef48658cd05daca2d913d6549ce,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# Add RabbitMQ to PATH, send all logs to TTY
# TODO @tianon is sbin a problem? Notice that I'm installing generic-unix, not the Debian package
",2019/01/14 21:50,2019/01/15 20:10,2019/01/09 22:14,2020/08/15 06:21,1,4 days 23:36:00.000000000,22:20:00
12,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,631d8f5d2b55db4f5df4fc8f52ad4e1f9803c98f,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO
# Start with new FROM
# Copy necessary artefacts from openssl-otp
# Install RabbitMQ
# Ensure RabbitMQ starts & rabbitmqctl works correctly
",2019/01/10 00:48,2019/09/11 20:05,2019/01/09 22:14,2020/08/15 06:21,1,0 days 02:34:00.000000000,"244 days, 19:17:00"
13,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,21c07a969ba2bef48658cd05daca2d913d6549ce,3.7/ubuntu/Dockerfile,3.7/ubuntu/Dockerfile,"# TODO @tianon why is this necessary?
# RUN ln -sf ""/usr/lib/rabbitmq/lib/rabbitmq_server-$RABBITMQ_VERSION/plugins"" /plugins

# Hint that the config, log & data (a.k.a. home dir) dirs should be separate volumes
",2019/01/14 21:50,2019/01/15 20:10,2019/01/09 22:14,2020/08/15 06:21,1,4 days 23:36:00.000000000,22:20:00
14,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,f22c0b266cfeb8cb6d776f9e6a961908c2557ad3,Dockerfile-alpine.template,Dockerfile-alpine.template,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/25 08:19,2020/06/25 02:54,2019/01/25 08:19,,1,0 days 00:00:00.000000000,"516 days, 18:35:00"
15,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,f22c0b266cfeb8cb6d776f9e6a961908c2557ad3,Dockerfile-ubuntu.template,Dockerfile-ubuntu.template,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/01/25 08:19,2019/05/29 07:22,2019/01/25 08:19,,1,0 days 00:00:00.000000000,"123 days, 23:03:00"
16,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,7ce5e0f1d23c4fa21c126eda339e11e052d548cf,Dockerfile,3.6/debian/Dockerfile,"# get logs to stdout (thanks to http://www.superpumpup.com/docker-rabbitmq-stdout for inspiration)
# TODO figure out what we'd need to do to add ""(sasl_)?"" to this sed and have it work (""{""init terminating in do_boot"",{rabbit,failure_during_boot,{error,{cannot_log_to_tty,sasl_report_tty_h,not_installed}}}}"")
",2015/02/10 03:20,2015/02/12 02:14,2014/12/30 09:16,2019/01/14 23:44,1,41 days 18:04:00.000000000,"1 day, 22:54:00"
17,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,820e85707b885356d3697fa89cfb2538b2e6c53d,3.7.9/ubuntu/Dockerfile,3.7.9/ubuntu/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/02/13 11:01,2019/02/15 09:17,2019/02/13 11:01,2019/02/15 09:17,1,0 days 00:00:00.000000000,"1 day, 22:16:00"
18,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,820e85707b885356d3697fa89cfb2538b2e6c53d,3.7.9/alpine/Dockerfile,3.7.9/alpine/Dockerfile,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html
",2019/02/13 11:01,2019/02/15 09:17,2019/02/13 11:01,2019/02/15 09:17,1,0 days 00:00:00.000000000,"1 day, 22:16:00"
19,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,820e85707b885356d3697fa89cfb2538b2e6c53d,3.7.9/windows/Dockerfile,3.7.9/windows/Dockerfile,"# TODO verification
",2019/02/13 11:01,2019/02/15 09:17,2019/02/13 11:01,2019/02/15 09:17,1,0 days 00:00:00.000000000,"1 day, 22:16:00"
20,"docker-library
rabbitmq",https://github.com/docker-library/rabbitmq,820e85707b885356d3697fa89cfb2538b2e6c53d,3.7.9/windows/Dockerfile,3.7.9/windows/Dockerfile,"# TODO RABBITMQ_DATA_DIR

# TODO CMD [""rabbitmq-server""]
",2019/02/13 11:01,2019/02/15 09:17,2019/02/13 11:01,2019/02/15 09:17,1,0 days 00:00:00.000000000,"1 day, 22:16:00"
21,"docker-library
ruby",https://github.com/docker-library/ruby,15e585cbe131a3506daf25710e87433e90c3cbd1,2.3/jessie/Dockerfile,2.3/jessie/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/12/15 09:03,2017/03/17 14:03,2015/12/25 23:46,2019/04/05 02:16,1,720 days 09:17:00.000000000,"-273 days, 5:00:00"
22,"docker-library
ruby",https://github.com/docker-library/ruby,15e585cbe131a3506daf25710e87433e90c3cbd1,2.3/alpine3.4/Dockerfile,2.3/alpine3.7/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/12/15 09:03,2017/03/17 14:03,2016/01/05 04:55,2019/04/05 02:16,1,710 days 04:08:00.000000000,"-273 days, 5:00:00"
23,"docker-library
ruby",https://github.com/docker-library/ruby,15e585cbe131a3506daf25710e87433e90c3cbd1,2.3/jessie/slim/Dockerfile,2.3/jessie/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/12/15 09:03,2017/03/17 14:03,2015/12/25 23:46,2019/04/05 02:16,1,720 days 09:17:00.000000000,"-273 days, 5:00:00"
24,"docker-library
ruby",https://github.com/docker-library/ruby,0011ab1a6a0d7452d81e5e7dde02ac0753e466aa,2.4/slim/Dockerfile,2.4/buster/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/05/20 02:03,2019/10/02 00:24,2016/12/06 03:31,2020/04/14 05:24,1,164 days 22:32:00.000000000,"864 days, 22:21:00"
25,"docker-library
ruby",https://github.com/docker-library/ruby,d6c177822be0198eb410c210912dcd7e2c04fd3f,2.4/stretch/slim/Dockerfile,2.4/stretch/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/10/02 00:24,2019/10/02 00:24,2017/08/05 04:41,2020/04/14 05:24,1,787 days 19:43:00.000000000,0:00:00
26,"docker-library
ruby",https://github.com/docker-library/ruby,0011ab1a6a0d7452d81e5e7dde02ac0753e466aa,2.4/Dockerfile,2.4/buster/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/05/20 02:03,2016/12/29 04:02,2016/12/06 03:31,2020/04/14 05:24,1,164 days 22:32:00.000000000,"-142 days, 1:59:00"
27,"docker-library
ruby",https://github.com/docker-library/ruby,ee2df55c3abd3d0eccea5733f7041b733f8a5a62,2.4/alpine3.7/Dockerfile,2.4/alpine3.11/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/12/07 20:22,2017/12/07 20:22,2017/12/07 20:22,2020/04/14 05:24,1,0 days 00:00:00.000000000,0:00:00
28,"docker-library
ruby",https://github.com/docker-library/ruby,a7a74d43ec21a6e589113be56024df083ff320ab,2.4/alpine3.6/Dockerfile,2.4/alpine3.6/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/08/05 04:42,2017/08/20 08:03,2017/08/05 04:42,2018/10/20 06:01,1,0 days 00:00:00.000000000,"15 days, 3:21:00"
29,"docker-library
ruby",https://github.com/docker-library/ruby,98d971fb71e696bf6783388d0e2c4171c97f0459,2.4/stretch/Dockerfile,2.4/stretch/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/08/05 04:41,2018/10/25 14:03,2017/08/05 04:41,2020/04/14 05:24,1,0 days 00:00:00.000000000,"446 days, 9:22:00"
30,"docker-library
ruby",https://github.com/docker-library/ruby,94c61b83026af46f7909aed29269a56247110485,2.5/stretch/slim/Dockerfile,2.5/stretch/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/10/25 14:03,2018/10/25 14:03,2017/10/22 08:56,,1,368 days 05:07:00.000000000,0:00:00
31,"docker-library
ruby",https://github.com/docker-library/ruby,94c61b83026af46f7909aed29269a56247110485,2.5/alpine3.7/Dockerfile,2.5/alpine3.11/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/10/25 14:03,2018/10/25 14:03,2017/12/07 20:22,,1,321 days 17:41:00.000000000,0:00:00
32,"docker-library
ruby",https://github.com/docker-library/ruby,94c61b83026af46f7909aed29269a56247110485,2.5/alpine3.8/Dockerfile,2.5/alpine3.12/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/10/25 14:03,2018/10/25 14:03,2018/10/19 04:00,,1,6 days 10:03:00.000000000,0:00:00
33,"docker-library
ruby",https://github.com/docker-library/ruby,94c61b83026af46f7909aed29269a56247110485,2.5/stretch/Dockerfile,2.5/stretch/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/10/25 14:03,2018/10/25 14:03,2017/10/22 08:56,,1,368 days 05:07:00.000000000,0:00:00
34,"docker-library
ruby",https://github.com/docker-library/ruby,7c4fcc4ac15d1471be0622c001728b14d8ea266f,2.7-rc/buster/Dockerfile,2.7/buster/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/10/28 08:05,2019/10/30 14:03,2019/05/31 05:23,,1,150 days 02:42:00.000000000,"2 days, 5:58:00"
35,"docker-library
ruby",https://github.com/docker-library/ruby,7c4fcc4ac15d1471be0622c001728b14d8ea266f,2.7-rc/alpine3.10/Dockerfile,2.7/alpine3.12/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/10/28 08:05,2019/10/30 14:03,2019/06/20 22:15,,1,129 days 09:50:00.000000000,"2 days, 5:58:00"
36,"docker-library
ruby",https://github.com/docker-library/ruby,a6918175fd506b46bf2d8f899f4faa40e72296fb,Dockerfile-slim.template,Dockerfile-slim.template,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/08/01 08:48,2016/09/21 02:14,2016/02/04 05:11,,1,544 days 03:37:00.000000000,"-315 days, 17:26:00"
37,"docker-library
ruby",https://github.com/docker-library/ruby,89bfa0ef37445f7069a70a960af9e2731cceac6f,2.6/alpine3.10/Dockerfile,2.6/alpine3.12/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/07/10 08:03,2019/04/18 02:03,2018/09/14 02:30,,1,299 days 05:33:00.000000000,"-84 days, 18:00:00"
38,"docker-library
ruby",https://github.com/docker-library/ruby,a6918175fd506b46bf2d8f899f4faa40e72296fb,Dockerfile-alpine.template,Dockerfile-alpine.template,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/08/01 08:48,2016/09/21 02:14,2016/02/04 05:11,,1,544 days 03:37:00.000000000,"-315 days, 17:26:00"
39,"docker-library
ruby",https://github.com/docker-library/ruby,57801cf4e9a2506e9c66380ab9e3ff9f63a669a7,2.6-rc/stretch/slim/Dockerfile,2.6/stretch/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/07/17 14:03,2019/04/18 02:03,2018/03/29 20:41,,1,109 days 17:22:00.000000000,"274 days, 12:00:00"
40,"docker-library
ruby",https://github.com/docker-library/ruby,7c4fcc4ac15d1471be0622c001728b14d8ea266f,2.7-rc/buster/slim/Dockerfile,2.7/buster/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/10/28 08:05,2019/06/26 04:40,2019/05/31 05:23,,1,150 days 02:42:00.000000000,"-125 days, 20:35:00"
41,"docker-library
ruby",https://github.com/docker-library/ruby,5d977ba3d1c509e3e094f8e98650c6ce25603f71,Dockerfile-debian.template,Dockerfile-debian.template,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/04/05 02:16,2016/09/21 02:14,2016/02/04 05:11,,1,1155 days 21:05:00.000000000,"-927 days, 23:58:00"
42,"docker-library
ruby",https://github.com/docker-library/ruby,89bfa0ef37445f7069a70a960af9e2731cceac6f,2.6/alpine3.9/Dockerfile,2.6/alpine3.11/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/07/10 08:03,2019/04/18 02:03,2018/03/29 20:41,,1,467 days 11:22:00.000000000,"-84 days, 18:00:00"
43,"docker-library
ruby",https://github.com/docker-library/ruby,57801cf4e9a2506e9c66380ab9e3ff9f63a669a7,2.6-rc/stretch/Dockerfile,2.6/stretch/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/07/17 14:03,2019/04/18 02:03,2018/03/29 20:41,,1,109 days 17:22:00.000000000,"274 days, 12:00:00"
44,"docker-library
ruby",https://github.com/docker-library/ruby,06192e37c6daec1d2f2a516c04c7bcc97174b1e2,2.4/alpine3.8/Dockerfile,2.4/alpine3.10/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/10/19 04:00,2019/10/01 23:06,2018/10/19 04:00,2020/04/14 05:24,1,0 days 00:00:00.000000000,"347 days, 19:06:00"
45,"docker-library
ruby",https://github.com/docker-library/ruby,bffb6ff1fbe37874ed506a15eb1bb7faffca589b,2.5/buster/slim/Dockerfile,2.5/buster/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/07/12 23:20,2019/07/12 23:20,2019/07/11 01:33,,1,1 days 21:47:00.000000000,0:00:00
46,"docker-library
ruby",https://github.com/docker-library/ruby,6a7df7a72b4a3d1b3e06ead303841b3fdaca560e,2.6/buster/Dockerfile,2.6/buster/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/08/28 20:03,2019/08/28 20:03,2019/07/11 01:33,,1,48 days 18:30:00.000000000,0:00:00
47,"docker-library
ruby",https://github.com/docker-library/ruby,6a7df7a72b4a3d1b3e06ead303841b3fdaca560e,2.6/buster/slim/Dockerfile,2.6/buster/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/08/28 20:03,2019/08/28 20:03,2019/07/11 01:33,,1,48 days 18:30:00.000000000,0:00:00
48,"docker-library
ruby",https://github.com/docker-library/ruby,defb10adcd6dd2178be3cd9c884fd035b52d42fb,2.7/alpine3.11/Dockerfile,2.7/alpine3.11/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2020/01/03 06:41,2020/01/03 06:41,2020/01/03 06:41,,1,0 days 00:00:00.000000000,0:00:00
49,"docker-library
ruby",https://github.com/docker-library/ruby,bf0e16e7511c97fdf351fdfc2e7e17478a4eaf16,2.5/buster/Dockerfile,2.5/buster/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/10/01 23:03,2019/10/01 23:03,2019/07/11 01:33,,1,82 days 21:30:00.000000000,0:00:00
50,"docker-library
ruby",https://github.com/docker-library/ruby,bb5c7101e13cfa3632dfc21245b172c205d90353,2.3/alpine3.8/Dockerfile,2.3/alpine3.8/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2018/09/14 02:30,2018/09/14 02:30,2018/09/14 02:30,2019/04/05 02:16,1,0 days 00:00:00.000000000,0:00:00
51,"docker-library
ruby",https://github.com/docker-library/ruby,0008d79b1285efd2c6b0b1c271c8b8362594b65b,2.3/stretch/Dockerfile,2.3/stretch/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/10/26 03:38,2017/10/26 03:38,2017/10/26 03:12,2019/04/05 02:16,1,0 days 00:26:00.000000000,0:00:00
52,"docker-library
ruby",https://github.com/docker-library/ruby,0008d79b1285efd2c6b0b1c271c8b8362594b65b,2.3/stretch/slim/Dockerfile,2.3/stretch/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/10/26 03:38,2017/10/26 03:38,2017/10/26 03:12,2019/04/05 02:16,1,0 days 00:26:00.000000000,0:00:00
53,"docker-library
ruby",https://github.com/docker-library/ruby,0011ab1a6a0d7452d81e5e7dde02ac0753e466aa,2.4/alpine/Dockerfile,2.4/alpine3.4/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/05/20 02:03,2018/03/29 08:03,2016/12/06 03:31,2018/05/23 06:13,1,164 days 22:32:00.000000000,"313 days, 6:00:00"
54,"docker-library
ruby",https://github.com/docker-library/ruby,e383b900db2f146d9436e08f7600e9eca9da7a44,2.1/Dockerfile,2.1/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/10/15 20:03,2016/10/14 14:03,2014/08/13 05:16,2017/07/06 03:06,1,794 days 14:47:00.000000000,"-2 days, 18:00:00"
55,"docker-library
ruby",https://github.com/docker-library/ruby,f0d425c10d680eecb9845db709005eb276bb1860,2.2/jessie/Dockerfile,2.2/jessie/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/11/02 20:03,2017/11/02 20:03,2014/12/18 06:50,2018/05/23 06:05,1,1050 days 13:13:00.000000000,0:00:00
56,"docker-library
ruby",https://github.com/docker-library/ruby,f0d425c10d680eecb9845db709005eb276bb1860,2.2/alpine3.4/Dockerfile,2.2/alpine3.4/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/11/02 20:03,2017/11/02 20:03,2016/01/30 03:39,2018/05/23 06:05,1,642 days 16:24:00.000000000,0:00:00
57,"docker-library
ruby",https://github.com/docker-library/ruby,f0d425c10d680eecb9845db709005eb276bb1860,2.2/jessie/slim/Dockerfile,2.2/jessie/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/11/02 20:03,2017/11/02 20:03,2015/01/24 08:59,2018/05/23 06:05,1,1013 days 11:04:00.000000000,0:00:00
58,"docker-library
ruby",https://github.com/docker-library/ruby,e383b900db2f146d9436e08f7600e9eca9da7a44,2.1/alpine/Dockerfile,2.1/alpine/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/10/15 20:03,2017/07/06 03:06,2016/01/30 03:39,2017/07/06 03:06,1,259 days 16:24:00.000000000,"263 days, 7:03:00"
59,"docker-library
ruby",https://github.com/docker-library/ruby,e383b900db2f146d9436e08f7600e9eca9da7a44,2.1/slim/Dockerfile,2.1/slim/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2016/10/15 20:03,2017/07/06 03:06,2015/01/17 10:29,2017/07/06 03:06,1,637 days 09:34:00.000000000,"263 days, 7:03:00"
60,"docker-library
ruby",https://github.com/docker-library/ruby,f528306dffdc55fd082c3ec0d483777a9c046ef0,2.5-rc/alpine3.6/Dockerfile,2.5-rc/alpine3.6/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2017/11/02 20:03,2017/11/09 03:03,2017/10/22 08:56,2017/12/09 08:30,1,11 days 11:07:00.000000000,"6 days, 7:00:00"
61,"docker-library
ruby",https://github.com/docker-library/ruby,b0c1b3c89142267912d8d0b532e206463c7d8ee0,2.7-rc/alpine3.9/Dockerfile,2.7-rc/alpine3.9/Dockerfile,"# hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
#   warning: Insecure world writable dir
",2019/05/31 05:23,2019/06/25 07:09,2019/05/31 05:23,2019/06/25 07:09,1,0 days 00:00:00.000000000,"25 days, 1:46:00"
62,"moby
moby",https://github.com/moby/moby,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/08/01 22:26,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,634 days 22:48:00.000000000,"-559 days, 8:59:00"
63,"moby
moby",https://github.com/moby/moby,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/03/24 00:28,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,504 days 00:50:00.000000000,"-428 days, 6:57:00"
64,"moby
moby",https://github.com/moby/moby,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",2018/02/27 15:28,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,844 days 15:50:00.000000000,"-769 days, 15:57:00"
65,"moby
moby",https://github.com/moby/moby,dbec45fa7a97ff62be279d67f52d734da3fae55f,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/10/05 08:22,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,334 days 08:44:00.000000000,"-259 days, 23:03:00"
66,"moby
moby",https://github.com/moby/moby,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/08 06:42,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,307 days 07:04:00.000000000,"-231 days, 0:43:00"
67,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/11/05 23:38,2018/03/09 15:17,1,348 days 08:52:00.000000000,20:28:00
68,"moby
moby",https://github.com/moby/moby,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/03/11 22:01,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,126 days 22:23:00.000000000,"439 days, 12:10:00"
69,"moby
moby",https://github.com/moby/moby,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/21 07:25,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"490 days, 2:46:00"
70,"moby
moby",https://github.com/moby/moby,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/21 07:25,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"490 days, 2:46:00"
71,"moby
moby",https://github.com/moby/moby,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/21 07:25,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"490 days, 2:46:00"
72,"moby
moby",https://github.com/moby/moby,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/21 07:25,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"490 days, 2:46:00"
73,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,323 days 01:42:00.000000000,"-247 days, 6:05:00"
74,"moby
moby",https://github.com/moby/moby,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",2016/04/26 02:21,2016/10/20 04:58,2015/11/05 23:38,2018/03/09 15:17,1,172 days 02:43:00.000000000,"177 days, 2:37:00"
75,"moby
moby",https://github.com/moby/moby,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/01/27 09:14,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,448 days 09:36:00.000000000,"-373 days, 22:11:00"
76,"moby
moby",https://github.com/moby/moby,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,364 days 23:25:00.000000000,"-289 days, 8:22:00"
77,"moby
moby",https://github.com/moby/moby,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/21 07:25,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,0:00:00
78,"moby
moby",https://github.com/moby/moby,ae7d7db985ea11a5613261e2450cd6fbc3ad108f,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/14 09:46,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,69 days 10:08:00.000000000,"6 days, 21:39:00"
79,"moby
moby",https://github.com/moby/moby,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,349 days 05:20:00.000000000,"-273 days, 2:27:00"
80,"moby
moby",https://github.com/moby/moby,dbec45fa7a97ff62be279d67f52d734da3fae55f,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/10/05 08:22,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,334 days 08:44:00.000000000,"-259 days, 23:03:00"
81,"moby
moby",https://github.com/moby/moby,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/27 15:28,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,844 days 15:50:00.000000000,"-769 days, 15:57:00"
82,"moby
moby",https://github.com/moby/moby,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,75 days 21:15:00.000000000,10:32:00
83,"moby
moby",https://github.com/moby/moby,43ee5643261f9b8741ab23a1749b3d55e13171c5,Dockerfile.arm,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/12/17 07:01,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,41 days 07:23:00.000000000,"35 days, 0:24:00"
84,"moby
moby",https://github.com/moby/moby,7ffae3d51a452a63c49f8544953a8b0f9781a5e0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/12/05 07:45,2015/10/29 01:56,2013/06/22 11:42,,1,1626 days 20:03:00.000000000,"-769 days, 18:11:00"
85,"moby
moby",https://github.com/moby/moby,7ffae3d51a452a63c49f8544953a8b0f9781a5e0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/12/05 07:45,2015/10/29 01:56,2013/06/22 11:42,,1,1626 days 20:03:00.000000000,"-769 days, 18:11:00"
86,"moby
moby",https://github.com/moby/moby,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
87,"moby
moby",https://github.com/moby/moby,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
88,"moby
moby",https://github.com/moby/moby,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",2018/03/23 15:01,2015/10/29 01:56,2013/06/22 11:42,,1,1735 days 03:19:00.000000000,"-877 days, 10:55:00"
89,"moby
moby",https://github.com/moby/moby,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
90,"moby
moby",https://github.com/moby/moby,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
91,"moby
moby",https://github.com/moby/moby,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
92,"moby
moby",https://github.com/moby/moby,f5af9b9738892b5988f987ce5fbce6e31a10e768,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/21 06:26,2015/10/29 01:56,2013/06/22 11:42,,1,1277 days 18:44:00.000000000,"-420 days, 19:30:00"
93,"moby
moby",https://github.com/moby/moby,d8fef66b03c1ea8715470690efbd950033f7f628,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/05/12 23:52,2015/10/29 01:56,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"-197 days, 2:04:00"
94,"moby
moby",https://github.com/moby/moby,1cfcce5e210ad7a0296fe341b3dda40a0af06c12,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",2019/10/06 05:46,2015/10/29 01:56,2013/06/22 11:42,,1,2296 days 18:04:00.000000000,"-1439 days, 20:10:00"
95,"moby
moby",https://github.com/moby/moby,7260adfff98ff46230ede3c2b3fbad1b607ebf5c,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",2020/01/18 04:55,2015/10/29 01:56,2013/06/22 11:42,,1,2400 days 17:13:00.000000000,"-1543 days, 21:01:00"
96,"moby
moby",https://github.com/moby/moby,7260adfff98ff46230ede3c2b3fbad1b607ebf5c,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",2020/01/18 04:55,2015/10/29 01:56,2013/06/22 11:42,,1,2400 days 17:13:00.000000000,"-1543 days, 21:01:00"
97,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2015/10/29 01:56,2013/06/22 11:42,,1,1214 days 20:48:00.000000000,"-357 days, 17:26:00"
98,"moby
moby",https://github.com/moby/moby,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",2018/01/17 03:49,2015/03/10 06:44,2013/06/22 11:42,,1,1669 days 16:07:00.000000000,"-1044 days, 2:55:00"
99,"moby
moby",https://github.com/moby/moby,8db141049f5323d754584f265b267e52ee5d9e17,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/10/29 01:56,2015/10/29 01:56,2013/06/22 11:42,,1,858 days 14:14:00.000000000,0:00:00
100,"moby
moby",https://github.com/moby/moby,8db141049f5323d754584f265b267e52ee5d9e17,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/10/29 01:56,2015/10/29 01:56,2013/06/22 11:42,,1,858 days 14:14:00.000000000,0:00:00
101,"moby
moby",https://github.com/moby/moby,645f8a32df3b5b22e5e194664a9f0733709714c9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/03/10 06:44,2015/03/10 06:44,2013/06/22 11:42,,1,625 days 19:02:00.000000000,0:00:00
102,"moby
moby",https://github.com/moby/moby,645f8a32df3b5b22e5e194664a9f0733709714c9,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2015/03/10 06:44,2015/03/10 06:44,2013/06/22 11:42,,1,625 days 19:02:00.000000000,0:00:00
103,"moby
moby",https://github.com/moby/moby,645f8a32df3b5b22e5e194664a9f0733709714c9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",2015/03/10 06:44,2015/03/10 06:44,2013/06/22 11:42,,1,625 days 19:02:00.000000000,0:00:00
104,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2015/03/10 06:44,2013/06/22 11:42,,1,1189 days 13:38:00.000000000,"-564 days, 5:24:00"
105,"moby
moby",https://github.com/moby/moby,d245a8a706558c4a66498cb8d1a1d8fe38dd67ee,Dockerfile,Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",2015/01/31 04:45,2015/10/29 01:56,2013/06/22 11:42,,1,587 days 17:03:00.000000000,"270 days, 21:11:00"
106,"moby
moby",https://github.com/moby/moby,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/03/23 15:01,2015/03/10 06:44,2013/06/22 11:42,,1,1735 days 03:19:00.000000000,"-1110 days, 15:43:00"
107,"moby
moby",https://github.com/moby/moby,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",2016/04/26 02:21,2015/10/29 01:56,2013/06/22 11:42,,1,1038 days 14:39:00.000000000,"-181 days, 23:35:00"
108,"moby
moby",https://github.com/moby/moby,f5af9b9738892b5988f987ce5fbce6e31a10e768,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/21 06:26,2015/10/29 01:56,2013/06/22 11:42,,1,1277 days 18:44:00.000000000,"-420 days, 19:30:00"
109,"moby
moby",https://github.com/moby/moby,fa1e390cad4fd36683e9667795967c711a4867e3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/05/02 05:51,2015/10/29 01:56,2013/06/22 11:42,,1,313 days 18:09:00.000000000,"544 days, 20:05:00"
110,"moby
moby",https://github.com/moby/moby,484a75f3549239d0489cb0ad518d79ed6783584a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2013/12/25 12:40,2015/10/29 01:56,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"672 days, 13:16:00"
111,"moby
moby",https://github.com/moby/moby,5c4abd107a4e50b9f2d29f98275a5b5b86c5f50f,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 02:15,2015/10/29 01:56,2013/06/22 11:42,,1,1230 days 14:33:00.000000000,"-373 days, 23:41:00"
112,"moby
moby",https://github.com/moby/moby,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2015/10/29 01:56,2013/06/22 11:42,,1,1215 days 17:16:00.000000000,"-358 days, 20:58:00"
113,"moby
moby",https://github.com/moby/moby,72df48d1ad417401a5ce0a7ee82a3c8ba33e091c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/14 10:17,2015/10/29 01:56,2013/06/22 11:42,,1,1482 days 22:35:00.000000000,"-625 days, 15:39:00"
114,"moby
moby",https://github.com/moby/moby,7edbdd9c5cdbdaa7c7fe810468b63eab2a565e71,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/30 02:58,2015/10/29 01:56,2013/06/22 11:42,,1,1195 days 15:16:00.000000000,"-338 days, 22:58:00"
115,"moby
moby",https://github.com/moby/moby,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2015/03/10 06:44,2013/06/22 11:42,,1,1700 days 16:09:00.000000000,"-1075 days, 2:53:00"
116,"moby
moby",https://github.com/moby/moby,5a076d7589d7a30cc0a1e45eff6674a2c8fa1cb0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/04/18 04:18,2015/10/29 01:56,2013/06/22 11:42,,1,1395 days 16:36:00.000000000,"-538 days, 21:38:00"
117,"moby
moby",https://github.com/moby/moby,e37dcd726fe415193eaed18729251d293a018909,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/10 07:05,2015/03/10 06:44,2013/06/22 11:42,,1,79 days 19:23:00.000000000,"545 days, 23:39:00"
118,"moby
moby",https://github.com/moby/moby,06d0843a61843e6b16a56d518e21032a5652098b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/01 12:14,2015/10/29 01:56,2013/06/22 11:42,,1,101 days 00:32:00.000000000,"757 days, 13:42:00"
119,"moby
moby",https://github.com/moby/moby,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile,Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2015/10/29 01:56,2013/06/22 11:42,,1,942 days 09:11:00.000000000,"-84 days, 5:03:00"
120,"moby
moby",https://github.com/moby/moby,484a75f3549239d0489cb0ad518d79ed6783584a,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",2013/12/25 12:40,2015/10/29 01:56,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"672 days, 13:16:00"
121,"moby
moby",https://github.com/moby/moby,24dd838aeefcf4ea1f5a950a9fe0af075f00e2bf,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/11/05 07:39,2015/03/10 06:44,2013/06/22 11:42,,1,135 days 19:57:00.000000000,"489 days, 23:05:00"
122,"moby
moby",https://github.com/moby/moby,47838051be695a4e74c80690ceef811dcd3ef62c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/07 12:14,2015/03/10 06:44,2013/06/22 11:42,,1,77 days 00:32:00.000000000,"548 days, 18:30:00"
123,"moby
moby",https://github.com/moby/moby,fa806f26aff927eb0d98b41e79786ae98987da5b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",2013/09/07 11:58,2015/03/10 06:44,2013/06/22 11:42,,1,77 days 00:16:00.000000000,"548 days, 18:46:00"
124,"moby
moby",https://github.com/moby/moby,7fc697eb0b62557b4abaa3b9fc0cd44b5c1652ac,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/12/12 14:47,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,696 days 15:22:00.000000000,"-678 days, 6:22:00"
125,"moby
moby",https://github.com/moby/moby,7fc697eb0b62557b4abaa3b9fc0cd44b5c1652ac,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/12/12 14:47,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,696 days 15:22:00.000000000,"-678 days, 6:22:00"
126,"moby
moby",https://github.com/moby/moby,7fc697eb0b62557b4abaa3b9fc0cd44b5c1652ac,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",2017/12/12 14:47,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,696 days 15:22:00.000000000,"-678 days, 6:22:00"
127,"moby
moby",https://github.com/moby/moby,cdf17e6943b15103b37fd57da7c2729a26ecb674,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/02/21 03:24,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,402 days 03:59:00.000000000,"294 days, 11:23:00"
128,"moby
moby",https://github.com/moby/moby,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/08 06:42,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,236 days 07:17:00.000000000,"460 days, 8:05:00"
129,"moby
moby",https://github.com/moby/moby,ad06e3fba368041e57c419894752621f840c9715,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/28 09:32,2016/10/20 04:58,2016/01/15 23:25,2018/03/09 15:17,1,286 days 10:07:00.000000000,"-9 days, 19:26:00"
130,"moby
moby",https://github.com/moby/moby,7d80d64ca5a185db8b498eecadfed215bdc3bffb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/15 19:11,2017/05/25 10:11,2016/01/15 23:25,2018/03/09 15:17,1,30 days 19:46:00.000000000,"464 days, 15:00:00"
131,"moby
moby",https://github.com/moby/moby,7d80d64ca5a185db8b498eecadfed215bdc3bffb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/02/15 19:11,2017/05/25 10:11,2016/01/15 23:25,2018/03/09 15:17,1,30 days 19:46:00.000000000,"464 days, 15:00:00"
132,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,252 days 01:55:00.000000000,"444 days, 13:27:00"
133,"moby
moby",https://github.com/moby/moby,cdf17e6943b15103b37fd57da7c2729a26ecb674,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/02/21 03:24,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,402 days 03:59:00.000000000,"-384 days, 17:45:00"
134,"moby
moby",https://github.com/moby/moby,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,293 days 23:38:00.000000000,"402 days, 15:44:00"
135,"moby
moby",https://github.com/moby/moby,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,278 days 05:33:00.000000000,"418 days, 9:49:00"
136,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,250 days 11:50:00.000000000,"446 days, 3:32:00"
137,"moby
moby",https://github.com/moby/moby,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/27 15:28,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,773 days 16:03:00.000000000,"-78 days, 23:19:00"
138,"moby
moby",https://github.com/moby/moby,d8d47f428d3a37dd758e3bd714024f6be4df3707,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/03 21:09,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,18 days 21:44:00.000000000,0:00:00
139,"moby
moby",https://github.com/moby/moby,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/08/01 22:26,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,888 days 18:53:00.000000000,"-559 days, 8:31:00"
140,"moby
moby",https://github.com/moby/moby,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/03/24 00:28,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,757 days 20:55:00.000000000,"-428 days, 6:29:00"
141,"moby
moby",https://github.com/moby/moby,150a519a0b267cccaacb4b8038787e2b512fe17e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",2016/11/30 01:06,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,643 days 21:33:00.000000000,"-314 days, 5:51:00"
142,"moby
moby",https://github.com/moby/moby,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/21 06:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,0:00:00
143,"moby
moby",https://github.com/moby/moby,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/08 06:42,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,561 days 03:09:00.000000000,"-231 days, 0:15:00"
144,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
145,"moby
moby",https://github.com/moby/moby,a83cedddc6d3e0fe1df352ec54245090df641ab8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/05/24 07:19,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,454 days 03:46:00.000000000,"-62 days, 17:52:00"
146,"moby
moby",https://github.com/moby/moby,7f0ca59ec2696c960b7c7d2fa9e24f7ded694881,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",2016/02/18 19:57,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,358 days 16:24:00.000000000,"34 days, 5:14:00"
147,"moby
moby",https://github.com/moby/moby,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/21 06:57,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,"62 days, 18:14:00"
148,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"-247 days, 5:37:00"
149,"moby
moby",https://github.com/moby/moby,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/03/24 00:28,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,757 days 20:55:00.000000000,"-428 days, 6:29:00"
150,"moby
moby",https://github.com/moby/moby,150a519a0b267cccaacb4b8038787e2b512fe17e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/30 01:06,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,643 days 21:33:00.000000000,"-314 days, 5:51:00"
151,"moby
moby",https://github.com/moby/moby,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,618 days 19:30:00.000000000,"-289 days, 7:54:00"
152,"moby
moby",https://github.com/moby/moby,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/21 06:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,0:00:00
153,"moby
moby",https://github.com/moby/moby,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",2016/01/21 06:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,0:00:00
154,"moby
moby",https://github.com/moby/moby,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",2016/03/29 16:35,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,398 days 13:02:00.000000000,"-69 days, 14:22:00"
155,"moby
moby",https://github.com/moby/moby,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,603 days 01:25:00.000000000,"-273 days, 1:59:00"
156,"moby
moby",https://github.com/moby/moby,6a014a0d33e1618642403b47ead8017626d07fe2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/27 01:03,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,579 days 21:30:00.000000000,"-250 days, 5:54:00"
157,"moby
moby",https://github.com/moby/moby,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/27 15:28,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,1098 days 11:55:00.000000000,"-769 days, 15:29:00"
158,"moby
moby",https://github.com/moby/moby,7f0ca59ec2696c960b7c7d2fa9e24f7ded694881,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/02/18 19:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,358 days 16:24:00.000000000,"-29 days, 11:00:00"
159,"moby
moby",https://github.com/moby/moby,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 07:21,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,336 days 03:48:00.000000000,"-7 days, 23:36:00"
160,"moby
moby",https://github.com/moby/moby,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 04:51,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,336 days 01:18:00.000000000,"-6 days, 2:06:00"
161,"moby
moby",https://github.com/moby/moby,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/21 06:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,0:00:00
162,"moby
moby",https://github.com/moby/moby,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/08/01 22:26,2016/07/20 22:35,2015/02/25 03:33,2018/03/09 15:17,1,888 days 18:53:00.000000000,"-377 days, 0:09:00"
163,"moby
moby",https://github.com/moby/moby,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/03/24 00:28,2016/07/20 22:35,2015/02/25 03:33,2018/03/09 15:17,1,757 days 20:55:00.000000000,"-247 days, 22:07:00"
164,"moby
moby",https://github.com/moby/moby,1bd6836a4249210090ed99c4e281374e9e16e138,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/15 18:40,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,659 days 15:07:00.000000000,0:00:00
165,"moby
moby",https://github.com/moby/moby,47f13d3b84fb0ee867c6b6c2a213d78b471754bf,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/09 02:47,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,561 days 23:14:00.000000000,"97 days, 15:53:00"
166,"moby
moby",https://github.com/moby/moby,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
167,"moby
moby",https://github.com/moby/moby,241898d136e41f80ab2dda95078f971a8248675d,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/04/19 01:49,2017/05/25 10:11,2015/02/25 03:33,2018/03/09 15:17,1,418 days 22:16:00.000000000,"401 days, 8:22:00"
168,"moby
moby",https://github.com/moby/moby,241898d136e41f80ab2dda95078f971a8248675d,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/04/19 01:49,2017/05/25 10:11,2015/02/25 03:33,2018/03/09 15:17,1,418 days 22:16:00.000000000,"401 days, 8:22:00"
169,"moby
moby",https://github.com/moby/moby,241898d136e41f80ab2dda95078f971a8248675d,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/04/19 01:49,2017/05/25 10:11,2015/02/25 03:33,2018/03/09 15:17,1,418 days 22:16:00.000000000,"401 days, 8:22:00"
170,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"82 days, 17:20:00"
171,"moby
moby",https://github.com/moby/moby,1bd6836a4249210090ed99c4e281374e9e16e138,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/15 18:40,2016/07/20 22:35,2015/02/25 03:33,2018/03/09 15:17,1,659 days 15:07:00.000000000,"-148 days, 3:55:00"
172,"moby
moby",https://github.com/moby/moby,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,618 days 19:30:00.000000000,"40 days, 19:37:00"
173,"moby
moby",https://github.com/moby/moby,6b09413f6bf309ad8103a0161dc826fc36af2a56,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/30 04:42,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,339 days 01:09:00.000000000,"320 days, 13:58:00"
174,"moby
moby",https://github.com/moby/moby,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2016/09/09 02:47,2015/02/25 03:33,2018/03/09 15:17,1,603 days 01:25:00.000000000,"-42 days, 21:49:00"
175,"moby
moby",https://github.com/moby/moby,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/09 02:47,2015/02/25 03:33,2018/03/09 15:17,1,575 days 07:42:00.000000000,"-14 days, 15:32:00"
176,"moby
moby",https://github.com/moby/moby,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/27 15:28,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,1098 days 11:55:00.000000000,"-439 days, 3:12:00"
177,"moby
moby",https://github.com/moby/moby,20262688df290f1196c5620112488f6445b7eb26,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2019/04/19 23:13,2018/02/27 15:28,2017/09/08 23:43,,1,587 days 23:30:00.000000000,"-417 days, 16:15:00"
178,"moby
moby",https://github.com/moby/moby,66720189e04d50ef06c12d1ffbbfebf41caa2ae3,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",2018/04/11 07:46,2015/03/18 14:08,2015/02/28 14:37,,1,1137 days 17:09:00.000000000,"-1120 days, 6:22:00"
179,"moby
moby",https://github.com/moby/moby,66720189e04d50ef06c12d1ffbbfebf41caa2ae3,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/04/11 07:46,2015/03/18 14:08,2015/02/28 14:37,,1,1137 days 17:09:00.000000000,"-1120 days, 6:22:00"
180,"moby
moby",https://github.com/moby/moby,b5763f8fa7309f95e21271fca99d0a71c05d0fef,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/03/18 14:08,2018/04/11 07:46,2015/02/28 14:37,,1,17 days 23:31:00.000000000,"1119 days, 17:38:00"
181,"moby
moby",https://github.com/moby/moby,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2016/10/20 04:58,2015/02/28 14:37,,1,615 days 08:26:00.000000000,"-16 days, 5:55:00"
182,"moby
moby",https://github.com/moby/moby,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2018/04/11 07:46,2015/02/28 14:37,,1,573 days 10:43:00.000000000,"564 days, 6:26:00"
183,"moby
moby",https://github.com/moby/moby,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/08/01 22:26,2018/04/11 07:46,2015/02/28 14:37,,1,885 days 07:49:00.000000000,"252 days, 9:20:00"
184,"moby
moby",https://github.com/moby/moby,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2018/04/11 07:46,2015/02/28 14:37,,1,599 days 14:21:00.000000000,"538 days, 2:48:00"
185,"moby
moby",https://github.com/moby/moby,5118f1431c9cae757d5e7c193ed85fc8fca3ae85,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/02/28 14:37,2018/04/11 07:46,2015/02/28 14:37,,1,0 days 00:00:00.000000000,"1137 days, 17:09:00"
186,"moby
moby",https://github.com/moby/moby,dffa5d6df2e51556edfbcebc4695fdbc0bcc1a90,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/08/19 23:23,2016/03/02 02:05,2015/12/01 17:47,,1,627 days 05:36:00.000000000,"-536 days, 2:42:00"
187,"moby
moby",https://github.com/moby/moby,83fd212f2cb71aae2f4a5a60c893c2bd01e59b72,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/09/26 18:59,2020/06/25 04:50,2015/12/01 17:47,,1,1395 days 01:12:00.000000000,"272 days, 9:51:00"
188,"moby
moby",https://github.com/moby/moby,db3351ae379bdaba0b863d52b9d9280836fd75c7,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/06/02 09:41,2019/09/26 18:59,2015/12/01 17:47,,1,183 days 15:54:00.000000000,"1211 days, 9:18:00"
189,"moby
moby",https://github.com/moby/moby,38e4ae3bca76b9558eb44993c4208b41114c4597,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/17 21:37,,2015/12/01 17:47,,1,1324 days 03:50:00.000000000,削除されていません
190,"moby
moby",https://github.com/moby/moby,f7b4d6544506f882f3168ab6a2ccb75f0ad0794e,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/06 07:01,2019/09/26 18:59,2015/12/01 17:47,,1,370 days 13:14:00.000000000,"1024 days, 11:58:00"
191,"moby
moby",https://github.com/moby/moby,3e75c5b68e8d311f4a29cca285560d2e49eae769,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/06 13:05,2019/09/26 18:59,2015/12/01 17:47,,1,340 days 19:18:00.000000000,"1054 days, 5:54:00"
192,"moby
moby",https://github.com/moby/moby,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/05/25 10:11,2019/09/26 18:59,2015/12/01 17:47,,1,540 days 16:24:00.000000000,"854 days, 8:48:00"
193,"moby
moby",https://github.com/moby/moby,fa362e47e03e7b9b50e3642f50a4478d8b8f1243,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",2016/03/02 02:05,2019/09/26 18:59,2015/12/01 17:47,,1,91 days 08:18:00.000000000,"1303 days, 16:54:00"
194,"moby
moby",https://github.com/moby/moby,c5bd6e3dc7680d6c683496f63dafb1f30f87eaa7,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/20 19:46,2019/09/26 18:59,2015/12/01 17:47,,1,1327 days 01:59:00.000000000,"67 days, 23:13:00"
195,"moby
moby",https://github.com/moby/moby,f6ecfd620a48751124d3d1e590e9e83a437996ca,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/11 05:45,2019/09/26 18:59,2015/12/01 17:47,,1,345 days 11:58:00.000000000,"1049 days, 13:14:00"
196,"moby
moby",https://github.com/moby/moby,929fa9ff8075d91624a90ecaae9c1fd31e50c294,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/22 11:56,2019/09/26 18:59,2015/12/01 17:47,,1,325 days 18:09:00.000000000,"1069 days, 7:03:00"
197,"moby
moby",https://github.com/moby/moby,83809de7d45d3465977b2f7a7cf585863cec445c,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/06 08:25,2016/03/02 02:05,2015/12/01 17:47,,1,126 days 14:38:00.000000000,"-36 days, 17:40:00"
198,"moby
moby",https://github.com/moby/moby,155435b6ceeb05b2927ecc726216666b898b6459,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/11/18 06:54,2019/09/26 18:59,2015/12/01 17:47,,1,352 days 13:07:00.000000000,"1042 days, 12:05:00"
199,"moby
moby",https://github.com/moby/moby,eacd2fd4daa03b1161d879e835705f7d35b871e3,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",2016/01/21 11:51,2020/06/25 04:50,2015/12/01 17:47,,1,50 days 18:04:00.000000000,"1616 days, 16:59:00"
200,"moby
moby",https://github.com/moby/moby,9a19bd1b450a4f514d194d8a5571ab5be921464a,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/21 09:02,2019/09/26 18:59,2015/12/01 17:47,,1,324 days 15:15:00.000000000,"1070 days, 9:57:00"
201,"moby
moby",https://github.com/moby/moby,b6d55ebcbc93ce66aa9906aa87e1081f21ba1650,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",2015/04/02 04:20,2015/04/02 04:20,2013/08/30 08:49,2016/10/12 04:14,1,579 days 19:31:00.000000000,0:00:00
202,"moby
moby",https://github.com/moby/moby,b6d55ebcbc93ce66aa9906aa87e1081f21ba1650,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",2015/04/02 04:20,2015/04/02 04:20,2013/08/30 08:49,2016/10/12 04:14,1,579 days 19:31:00.000000000,0:00:00
203,"moby
moby",https://github.com/moby/moby,3e84b9e56abdff7230e84a1830085c79c73aa3b7,docs/Dockerfile,docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/18 13:20,2015/02/25 21:35,2013/08/30 08:49,2016/10/12 04:14,1,537 days 04:31:00.000000000,"7 days, 8:15:00"
204,"moby
moby",https://github.com/moby/moby,eaa9c85511620aa82f1876e1503604f591f00d23,docs/Dockerfile,docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",2014/01/15 11:23,2015/04/02 04:20,2013/08/30 08:49,2016/10/12 04:14,1,138 days 02:34:00.000000000,"441 days, 16:57:00"
205,"moby
moby",https://github.com/moby/moby,2c435ab8beba93509b957e4ac5e5801b86b5e8f1,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/04/19 06:44,2014/10/21 14:59,2014/08/06 05:17,2018/06/03 01:46,1,987 days 01:27:00.000000000,"-911 days, 8:15:00"
206,"moby
moby",https://github.com/moby/moby,2c435ab8beba93509b957e4ac5e5801b86b5e8f1,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2017/04/19 06:44,2014/10/21 14:59,2014/08/06 05:17,2018/06/03 01:46,1,987 days 01:27:00.000000000,"-911 days, 8:15:00"
207,"moby
moby",https://github.com/moby/moby,cd44018856be421497a35d96f88dd0eec42fae43,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/06/14 01:21,2018/06/03 01:46,2014/08/06 05:17,2018/06/03 01:46,1,311 days 20:04:00.000000000,"1085 days, 0:25:00"
208,"moby
moby",https://github.com/moby/moby,22c46af4b358cf3ec4f7af47c701064c00cf7de4,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/08/06 05:17,2017/04/19 06:44,2014/08/06 05:17,2018/06/03 01:46,1,0 days 00:00:00.000000000,"987 days, 1:27:00"
209,"moby
moby",https://github.com/moby/moby,b6eed3dca2e57705cb75895cad0b5337c79686d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/28 11:21,2017/04/19 06:44,2014/08/06 05:17,2018/06/03 01:46,1,1210 days 06:04:00.000000000,"-224 days, 19:23:00"
210,"moby
moby",https://github.com/moby/moby,80bc8b4766cc808186af91930152d78afb22aef8,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2017/04/19 06:44,2014/08/06 05:17,2018/06/03 01:46,1,1381 days 22:11:00.000000000,"-395 days, 3:16:00"
211,"moby
moby",https://github.com/moby/moby,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.solaris,Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",2017/06/21 05:39,2017/10/25 03:32,2016/06/07 16:45,2017/10/25 03:32,1,378 days 12:54:00.000000000,"125 days, 21:53:00"
212,"moby
moby",https://github.com/moby/moby,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,Dockerfile.buildkit,Dockerfile.buildkit,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,"15 days, 17:21:00"
213,"moby
moby",https://github.com/moby/moby,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,Dockerfile.buildkit,Dockerfile.buildkit,"# Options for hack/validate/gometalinter
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,"15 days, 17:21:00"
214,"moby
moby",https://github.com/moby/moby,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.gccgo,Dockerfile.gccgo,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/08/24 19:09,2015/08/17 18:20,2016/08/24 19:09,1,156 days 02:33:00.000000000,"216 days, 22:16:00"
215,"moby
moby",https://github.com/moby/moby,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/10/29 08:51,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,51 days 06:21:00.000000000,"9 days, 4:14:00"
216,"moby
moby",https://github.com/moby/moby,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.6
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/11/07 13:05,2014/02/15 13:50,2013/09/08 02:30,2014/02/15 13:50,1,60 days 10:35:00.000000000,"100 days, 0:45:00"
217,"moby
moby",https://github.com/moby/moby,6e3068700fb32299cf733acd74785e29609b1974,testing/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",2013/09/22 04:14,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,14 days 01:44:00.000000000,"46 days, 8:51:00"
218,"moby
moby",https://github.com/moby/moby,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/29 08:51,2013/09/22 04:14,2013/09/08 02:30,2014/02/15 13:50,1,51 days 06:21:00.000000000,"-38 days, 19:23:00"
219,"moby
moby",https://github.com/moby/moby,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.4
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/11/07 13:05,2014/02/15 13:50,2013/10/19 14:33,2014/02/15 13:50,1,18 days 22:32:00.000000000,"100 days, 0:45:00"
220,"moby
moby",https://github.com/moby/moby,95f3f77fc417bbc55f03e869136deec27e26bc51,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/10/19 14:33,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,0 days 00:00:00.000000000,"18 days, 22:32:00"
221,"moby
moby",https://github.com/moby/moby,efb4c800a7c8167cf2202466a720c0fad7001a5d,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/30 11:37,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,10 days 21:04:00.000000000,"8 days, 1:28:00"
222,"moby
moby",https://github.com/moby/moby,878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30,Dockerfile.centos,Dockerfile.centos,"# Wrap all commands in the ""docker-in-docker"" script to allow nested containers
#ENTRYPOINT [""hack/dind""]
",2015/04/01 05:58,2015/05/01 07:30,2015/04/01 05:58,2015/05/01 07:30,1,0 days 00:00:00.000000000,"30 days, 1:32:00"
223,"docker
docker-ce",https://github.com/docker/docker-ce,06c4880d2c3c45789084188624fe7fb65e238d3a,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"#COPY hack/dockerfile/binaries-commits /

",2018/08/21 02:11,2018/08/21 02:11,2018/07/11 09:04,2019/12/05 22:55,1,40 days 17:07:00.000000000,0:00:00
224,"docker
docker-ce",https://github.com/docker/docker-ce,06c4880d2c3c45789084188624fe7fb65e238d3a,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",2018/08/21 02:11,2018/08/21 02:11,2018/07/11 09:04,2019/12/05 22:55,1,40 days 17:07:00.000000000,0:00:00
225,"docker
docker-ce",https://github.com/docker/docker-ce,06c4880d2c3c45789084188624fe7fb65e238d3a,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",2018/08/21 02:11,2018/08/21 02:11,2018/07/11 09:04,2019/12/05 22:55,1,40 days 17:07:00.000000000,0:00:00
226,"docker
docker-ce",https://github.com/docker/docker-ce,06c4880d2c3c45789084188624fe7fb65e238d3a,components/packaging/image/Dockerfile.engine,components/packaging/image/Dockerfile.engine,"# docker-init - TODO move this out, last time we bumped was 2016!
",2018/08/21 02:11,2018/08/21 02:11,2018/07/11 09:04,2019/12/05 22:55,1,40 days 17:07:00.000000000,0:00:00
227,"docker
docker-ce",https://github.com/docker/docker-ce,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile.e2e,components/engine/Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2019/01/24 07:44,2019/01/24 07:44,2017/09/08 23:43,,1,502 days 08:01:00.000000000,0:00:00
228,"docker
docker-ce",https://github.com/docker/docker-ce,5673991eabce2b88553eb00ea112b872aa183843,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2018/12/19 17:45,2020/06/25 04:50,2015/12/01 17:47,,1,1113 days 23:58:00.000000000,"553 days, 11:05:00"
229,"docker
docker-ce",https://github.com/docker/docker-ce,a75b486d924fd46ee42dcbec3607de61a084041d,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/09/08 06:42,2019/09/11 16:36,2015/12/01 17:47,,1,281 days 12:55:00.000000000,"1098 days, 9:54:00"
230,"docker
docker-ce",https://github.com/docker/docker-ce,da964dbf5841c6622b70fb36f7f7f523238f8cbb,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",2016/01/21 11:51,2020/06/25 04:50,2015/12/01 17:47,,1,50 days 18:04:00.000000000,"1616 days, 16:59:00"
231,"docker
docker-ce",https://github.com/docker/docker-ce,eefab16f39d22d5a8727de04156b1a663b1aa175,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2020/06/25 04:50,2020/06/25 04:50,2015/12/01 17:47,,1,1667 days 11:03:00.000000000,0:00:00
232,"docker
docker-ce",https://github.com/docker/docker-ce,bb56a95461183e6713f49f70cee2a8babb42504a,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/06 07:01,2016/12/06 07:01,2015/12/01 17:47,,1,370 days 13:14:00.000000000,0:00:00
233,"docker
docker-ce",https://github.com/docker/docker-ce,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/01/24 07:44,2020/06/25 04:50,2015/12/01 17:47,,1,1149 days 13:57:00.000000000,"517 days, 21:06:00"
234,"docker
docker-ce",https://github.com/docker/docker-ce,d59617c5ea5eeb806584d50fefccb2cf96d55bd7,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",2016/01/31 13:50,2020/06/25 04:50,2015/12/01 17:47,,1,60 days 20:03:00.000000000,"1606 days, 15:00:00"
235,"docker
docker-ce",https://github.com/docker/docker-ce,65f0de5a38b9ee4836d27d874134d76f06e4b690,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/22 11:56,2016/12/06 07:01,2015/12/01 17:47,,1,325 days 18:09:00.000000000,"44 days, 19:05:00"
236,"docker
docker-ce",https://github.com/docker/docker-ce,678dc675ed61a5c9dc39a8aeb56a1683e09f4655,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/02/05 16:28,2020/06/25 04:50,2015/12/01 17:47,,1,431 days 22:41:00.000000000,"1235 days, 12:22:00"
237,"docker
docker-ce",https://github.com/docker/docker-ce,05a05baa0e6c5464c512c08d8577a342e682b91c,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/11/18 06:54,2020/06/25 04:50,2015/12/01 17:47,,1,352 days 13:07:00.000000000,"1314 days, 21:56:00"
238,"docker
docker-ce",https://github.com/docker/docker-ce,1c00388b8a51103ea224beee5d4ce4c6070bab63,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/31 05:57,2020/06/25 04:50,2015/12/01 17:47,,1,334 days 12:10:00.000000000,"1332 days, 22:53:00"
239,"docker
docker-ce",https://github.com/docker/docker-ce,8afc09fa08b4fb45d4bb115d8d1f8d99b225038f,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/11 05:45,2020/06/25 04:50,2015/12/01 17:47,,1,345 days 11:58:00.000000000,"1321 days, 23:05:00"
240,"docker
docker-ce",https://github.com/docker/docker-ce,fe75864cf817ed77fe119af2db6f40e2c88141a0,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/17 21:37,2020/06/25 04:50,2015/12/01 17:47,,1,1324 days 03:50:00.000000000,"343 days, 7:13:00"
241,"docker
docker-ce",https://github.com/docker/docker-ce,3d85a4f2409198283337355316bd24d838f4a308,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/06 08:25,2020/06/25 04:50,2015/12/01 17:47,,1,126 days 14:38:00.000000000,"1540 days, 20:25:00"
242,"docker
docker-ce",https://github.com/docker/docker-ce,87b7e2db815407d1f55fe8b929164c7ee4de73a6,components/engine/Dockerfile.windows,components/engine/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/21 09:02,2020/06/25 04:50,2015/12/01 17:47,,1,324 days 15:15:00.000000000,"1342 days, 19:48:00"
243,"docker
docker-ce",https://github.com/docker/docker-ce,15165b99b621a27c0c50c372bc849f80e2c1aa89,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",2018/01/12 03:02,2019/01/24 07:44,2015/02/28 14:37,,1,1048 days 12:25:00.000000000,"377 days, 4:42:00"
244,"docker
docker-ce",https://github.com/docker/docker-ce,f78d40dbbf93bfcc0004b62f2af5504f88f1de8b,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2019/01/24 07:44,2019/01/24 07:44,2015/02/28 14:37,,1,1425 days 17:07:00.000000000,0:00:00
245,"docker
docker-ce",https://github.com/docker/docker-ce,92a488b33b8016f4223f2669d2912507c0d2c849,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/03/18 14:08,2015/03/18 14:08,2015/02/28 14:37,,1,17 days 23:31:00.000000000,0:00:00
246,"docker
docker-ce",https://github.com/docker/docker-ce,6e5d016ba60c4baa4931a603c3c7a407ca69b4bc,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/30 03:02,2019/09/11 16:36,2015/02/28 14:37,,1,579 days 12:25:00.000000000,"1076 days, 13:34:00"
247,"docker
docker-ce",https://github.com/docker/docker-ce,15165b99b621a27c0c50c372bc849f80e2c1aa89,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2018/01/12 03:02,2019/01/24 07:44,2015/02/28 14:37,,1,1048 days 12:25:00.000000000,"377 days, 4:42:00"
248,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2015/03/18 14:08,2015/02/28 14:37,,1,611 days 12:45:00.000000000,"-594 days, 10:46:00"
249,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2015/03/18 14:08,2015/02/28 14:37,,1,573 days 10:43:00.000000000,"-556 days, 12:48:00"
250,"docker
docker-ce",https://github.com/docker/docker-ce,7e8cf8c782dd824f71cc9ae0b16f42fbd884e4da,components/engine/Dockerfile.simple,components/engine/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/02/28 14:37,2015/03/18 14:08,2015/02/28 14:37,,1,0 days 00:00:00.000000000,"17 days, 23:31:00"
251,"docker
docker-ce",https://github.com/docker/docker-ce,1269ee770f5b7b39a654dd622766296e4e7e8761,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/02/27 17:16,2014/11/27 03:46,2013/06/22 11:42,,1,1711 days 05:34:00.000000000,"-1189 days, 10:30:00"
252,"docker
docker-ce",https://github.com/docker/docker-ce,56843d431965a86f92ba1869819c00f6c8eaca5b,components/engine/Dockerfile,components/engine/Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",2018/03/09 15:09,2014/11/27 03:46,2013/06/22 11:42,,1,1721 days 03:27:00.000000000,"-1199 days, 12:37:00"
253,"docker
docker-ce",https://github.com/docker/docker-ce,1269ee770f5b7b39a654dd622766296e4e7e8761,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",2018/02/27 17:16,2014/11/27 03:46,2013/06/22 11:42,,1,1711 days 05:34:00.000000000,"-1189 days, 10:30:00"
254,"docker
docker-ce",https://github.com/docker/docker-ce,24a81e1245fa2b4601c36e9634bfd28f7af016c7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2020/01/18 04:55,2014/11/27 03:46,2013/06/22 11:42,,1,2400 days 17:13:00.000000000,"-1879 days, 22:51:00"
255,"docker
docker-ce",https://github.com/docker/docker-ce,232bc92f3e9d9f898d6fddb72a81aee26a19e947,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",2019/06/18 06:50,2014/11/27 03:46,2013/06/22 11:42,,1,2186 days 19:08:00.000000000,"-1665 days, 20:56:00"
256,"docker
docker-ce",https://github.com/docker/docker-ce,232bc92f3e9d9f898d6fddb72a81aee26a19e947,components/engine/Dockerfile,components/engine/Dockerfile,"# Options for hack/validate/gometalinter
",2019/06/18 06:50,2014/11/27 03:46,2013/06/22 11:42,,1,2186 days 19:08:00.000000000,"-1665 days, 20:56:00"
257,"docker
docker-ce",https://github.com/docker/docker-ce,f716752c81799255e4e53d6ab5801525304ab7bf,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/01/07 21:06,2014/11/27 03:46,2013/06/22 11:42,,1,1295 days 09:24:00.000000000,"-773 days, 6:40:00"
258,"docker
docker-ce",https://github.com/docker/docker-ce,ac2b82954f8a6ca82ef155d4fc3df0760605b3d2,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/30 02:58,2014/11/27 03:46,2013/06/22 11:42,,1,1195 days 15:16:00.000000000,"-673 days, 0:48:00"
259,"docker
docker-ce",https://github.com/docker/docker-ce,f716752c81799255e4e53d6ab5801525304ab7bf,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/01/07 21:06,2014/11/27 03:46,2013/06/22 11:42,,1,1295 days 09:24:00.000000000,"-773 days, 6:40:00"
260,"docker
docker-ce",https://github.com/docker/docker-ce,391556ba38c94b792431ee57d6c0bf7dc4d6ea4a,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/04/18 04:18,2017/01/07 21:06,2013/06/22 11:42,,1,1395 days 16:36:00.000000000,"-101 days, 16:48:00"
261,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2015/09/23 18:27,2013/06/22 11:42,,1,1187 days 20:36:00.000000000,"-365 days, 10:09:00"
262,"docker
docker-ce",https://github.com/docker/docker-ce,bb9f4fa0e8724d6f70d4f2c8afb5cad50b87c02e,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/11/15 11:01,2014/11/27 03:46,2013/06/22 11:42,,1,875 days 23:19:00.000000000,"-354 days, 16:45:00"
263,"docker
docker-ce",https://github.com/docker/docker-ce,bb9f4fa0e8724d6f70d4f2c8afb5cad50b87c02e,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/11/15 11:01,2014/11/27 03:46,2013/06/22 11:42,,1,875 days 23:19:00.000000000,"-354 days, 16:45:00"
264,"docker
docker-ce",https://github.com/docker/docker-ce,56750f8076cf3e0a5ead21c903e150861d6cb862,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2013/11/20 12:25,2014/04/08 05:29,2013/06/22 11:42,,1,151 days 00:43:00.000000000,"138 days, 17:04:00"
265,"docker
docker-ce",https://github.com/docker/docker-ce,f0b2c345c00f5711d18de141ebd7e318ee6bd7d3,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2014/04/08 05:29,2014/04/08 05:29,2013/06/22 11:42,,1,289 days 17:47:00.000000000,0:00:00
266,"docker
docker-ce",https://github.com/docker/docker-ce,26d82a2984d6a5c6399fdff9a1624f18d0863df0,components/engine/Dockerfile,components/engine/Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",2016/03/15 12:12,2014/04/08 05:29,2013/06/22 11:42,,1,997 days 00:30:00.000000000,"-708 days, 17:17:00"
267,"docker
docker-ce",https://github.com/docker/docker-ce,2ee063b98ec171370da3ac0c59ebec23d5880d68,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/12/05 07:45,2014/11/27 03:46,2013/06/22 11:42,,1,1626 days 20:03:00.000000000,"-1105 days, 20:01:00"
268,"docker
docker-ce",https://github.com/docker/docker-ce,6dc61813df4675fbc6e82566558c72e776161270,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/06/21 06:04,2014/11/27 03:46,2013/06/22 11:42,,1,1459 days 18:22:00.000000000,"-938 days, 21:42:00"
269,"docker
docker-ce",https://github.com/docker/docker-ce,f0b2c345c00f5711d18de141ebd7e318ee6bd7d3,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/04/08 05:29,2014/11/27 03:46,2013/06/22 11:42,,1,289 days 17:47:00.000000000,"232 days, 22:17:00"
270,"docker
docker-ce",https://github.com/docker/docker-ce,24a81e1245fa2b4601c36e9634bfd28f7af016c7,components/engine/Dockerfile,components/engine/Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",2020/01/18 04:55,2014/11/27 03:46,2013/06/22 11:42,,1,2400 days 17:13:00.000000000,"-1879 days, 22:51:00"
271,"docker
docker-ce",https://github.com/docker/docker-ce,24a81e1245fa2b4601c36e9634bfd28f7af016c7,components/engine/Dockerfile,components/engine/Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",2020/01/18 04:55,2014/11/27 03:46,2013/06/22 11:42,,1,2400 days 17:13:00.000000000,"-1879 days, 22:51:00"
272,"docker
docker-ce",https://github.com/docker/docker-ce,24a81e1245fa2b4601c36e9634bfd28f7af016c7,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",2020/01/18 04:55,2014/11/27 03:46,2013/06/22 11:42,,1,2400 days 17:13:00.000000000,"-1879 days, 22:51:00"
273,"docker
docker-ce",https://github.com/docker/docker-ce,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",2018/02/15 16:43,2014/11/27 03:46,2013/06/22 11:42,,1,1699 days 05:01:00.000000000,"-1177 days, 11:03:00"
274,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2014/11/27 03:46,2013/06/22 11:42,,1,1227 days 15:40:00.000000000,"-705 days, 0:24:00"
275,"docker
docker-ce",https://github.com/docker/docker-ce,232bc92f3e9d9f898d6fddb72a81aee26a19e947,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2019/06/18 06:50,2014/11/27 03:46,2013/06/22 11:42,,1,2186 days 19:08:00.000000000,"-1665 days, 20:56:00"
276,"docker
docker-ce",https://github.com/docker/docker-ce,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile,components/engine/Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/27 07:21,2014/11/27 03:46,2013/06/22 11:42,,1,948 days 19:39:00.000000000,"-427 days, 20:25:00"
277,"docker
docker-ce",https://github.com/docker/docker-ce,5b0bbe7633691368b6d2ce5e29101f85851f2b0a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/19 08:02,2017/01/07 21:06,2013/06/22 11:42,,1,118 days 20:20:00.000000000,"1176 days, 13:04:00"
278,"docker
docker-ce",https://github.com/docker/docker-ce,33aa0c2b851e1b478f1e55dc5e4a45cc8ceeac41,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/01 04:57,2014/11/27 03:46,2013/06/22 11:42,,1,100 days 17:15:00.000000000,"421 days, 22:49:00"
279,"docker
docker-ce",https://github.com/docker/docker-ce,391556ba38c94b792431ee57d6c0bf7dc4d6ea4a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/04/18 04:18,2014/11/27 03:46,2013/06/22 11:42,,1,1395 days 16:36:00.000000000,"-874 days, 23:28:00"
280,"docker
docker-ce",https://github.com/docker/docker-ce,7bef93723c911971da6fbb12ad26697205d1a9e1,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/05/12 23:52,2014/11/27 03:46,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"-533 days, 3:54:00"
281,"docker
docker-ce",https://github.com/docker/docker-ce,bc16e560f9fab3d15d703e964c2048b77e3d71d5,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/11/27 03:46,2017/01/07 21:06,2013/06/22 11:42,,1,522 days 16:04:00.000000000,"772 days, 17:20:00"
282,"docker
docker-ce",https://github.com/docker/docker-ce,b16d50a307a74f4304a362fb2f837d1523ed04d9,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",2015/03/19 10:44,2014/11/27 03:46,2013/06/22 11:42,,1,634 days 23:02:00.000000000,"-113 days, 17:02:00"
283,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile,components/engine/Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2014/04/08 05:29,2013/06/22 11:42,,1,1189 days 13:38:00.000000000,"-900 days, 4:09:00"
284,"docker
docker-ce",https://github.com/docker/docker-ce,b6370d00a53aad8a0ef655791dd87932dae4e13b,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/10 07:05,2014/04/08 05:29,2013/06/22 11:42,,1,79 days 19:23:00.000000000,"209 days, 22:24:00"
285,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2015/09/23 18:27,2013/06/22 11:42,,1,1214 days 20:48:00.000000000,"-392 days, 9:57:00"
286,"docker
docker-ce",https://github.com/docker/docker-ce,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile,components/engine/Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/24 07:24,2014/04/08 05:29,2013/06/22 11:42,,1,1707 days 19:42:00.000000000,"-1419 days, 22:05:00"
287,"docker
docker-ce",https://github.com/docker/docker-ce,44958a29f2f2eb9a144b895146af552f1a3cd8d1,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",2015/01/23 07:42,2014/11/27 03:46,2013/06/22 11:42,,1,579 days 20:00:00.000000000,"-58 days, 20:04:00"
288,"docker
docker-ce",https://github.com/docker/docker-ce,3aa25b2dbebec1413512facabb8cbb22c9d70323,components/engine/Dockerfile,components/engine/Dockerfile,"# TODO add linux/386 and linux/arm
",2014/01/30 05:13,2014/11/27 03:46,2013/06/22 11:42,,1,221 days 17:31:00.000000000,"300 days, 22:33:00"
289,"docker
docker-ce",https://github.com/docker/docker-ce,742fb66041377fe472ebc29508c4ea7f2140cb11,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/07 12:14,2014/04/08 05:29,2013/06/22 11:42,,1,77 days 00:32:00.000000000,"212 days, 17:15:00"
290,"docker
docker-ce",https://github.com/docker/docker-ce,4d40f8afe3d3f7cdeee3f6ce2f4f8e725107508a,components/engine/Dockerfile,components/engine/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",2013/09/07 11:58,2014/04/08 05:29,2013/06/22 11:42,,1,77 days 00:16:00.000000000,"212 days, 17:31:00"
291,"docker
docker-ce",https://github.com/docker/docker-ce,618fd96ae81a91bebf8bb17984f98de028bc4699,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",2016/09/27 01:03,2016/07/06 00:54,2015/02/25 03:33,2018/03/09 15:17,1,579 days 21:30:00.000000000,"-84 days, 23:51:00"
292,"docker
docker-ce",https://github.com/docker/docker-ce,618fd96ae81a91bebf8bb17984f98de028bc4699,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/27 01:03,2016/07/06 00:54,2015/02/25 03:33,2018/03/09 15:17,1,579 days 21:30:00.000000000,"-84 days, 23:51:00"
293,"docker
docker-ce",https://github.com/docker/docker-ce,0fbaab526fa7cd020f5132cc02ce09883af21775,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/03/23 06:45,2016/07/06 00:54,2015/02/25 03:33,2018/03/09 15:17,1,757 days 03:12:00.000000000,"-261 days, 18:09:00"
294,"docker
docker-ce",https://github.com/docker/docker-ce,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/14 10:56,2016/07/06 00:54,2015/02/25 03:33,2018/03/09 15:17,1,870 days 07:23:00.000000000,"-374 days, 13:58:00"
295,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2017/09/14 06:32,2015/02/25 03:33,2018/03/09 15:17,1,575 days 04:45:00.000000000,"356 days, 22:14:00"
296,"docker
docker-ce",https://github.com/docker/docker-ce,36a2f2d0be0e7ffdade82e024a4895a21ef0d500,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/05/24 07:19,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,454 days 03:46:00.000000000,"-62 days, 17:52:00"
297,"docker
docker-ce",https://github.com/docker/docker-ce,36a2f2d0be0e7ffdade82e024a4895a21ef0d500,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/05/24 07:19,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,454 days 03:46:00.000000000,"-62 days, 17:52:00"
298,"docker
docker-ce",https://github.com/docker/docker-ce,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/02/15 16:43,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,1086 days 13:10:00.000000000,"-694 days, 8:28:00"
299,"docker
docker-ce",https://github.com/docker/docker-ce,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/14 03:37,2016/05/24 07:19,2015/02/25 03:33,2018/03/09 15:17,1,323 days 00:04:00.000000000,"131 days, 3:42:00"
300,"docker
docker-ce",https://github.com/docker/docker-ce,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",2016/01/14 03:37,2016/05/24 07:19,2015/02/25 03:33,2018/03/09 15:17,1,323 days 00:04:00.000000000,"131 days, 3:42:00"
301,"docker
docker-ce",https://github.com/docker/docker-ce,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/14 03:37,2016/05/24 07:19,2015/02/25 03:33,2018/03/09 15:17,1,323 days 00:04:00.000000000,"131 days, 3:42:00"
302,"docker
docker-ce",https://github.com/docker/docker-ce,0fbaab526fa7cd020f5132cc02ce09883af21775,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/03/23 06:45,2016/05/24 07:19,2015/02/25 03:33,2018/03/09 15:17,1,757 days 03:12:00.000000000,"-303 days, 0:34:00"
303,"docker
docker-ce",https://github.com/docker/docker-ce,bdefe38d03c242dc3a095e5643a87f23703773b5,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",2016/03/24 01:11,2016/07/06 00:54,2015/02/25 03:33,2018/03/09 15:17,1,392 days 21:38:00.000000000,"103 days, 23:43:00"
304,"docker
docker-ce",https://github.com/docker/docker-ce,0e8ffb200ceea9e020ed40374db0d25ed6195204,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/02/09 19:24,2016/07/06 00:54,2015/02/25 03:33,2018/03/09 15:17,1,349 days 15:51:00.000000000,"147 days, 5:30:00"
305,"docker
docker-ce",https://github.com/docker/docker-ce,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/24 07:24,2016/07/06 00:54,2015/02/25 03:33,2018/03/09 15:17,1,1095 days 03:51:00.000000000,"-599 days, 17:30:00"
306,"docker
docker-ce",https://github.com/docker/docker-ce,37e5d77defe9377894fc3834775aa79216a4bbe6,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/14 03:37,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,323 days 00:04:00.000000000,"69 days, 21:34:00"
307,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/05/24 07:19,2015/02/25 03:33,2018/03/09 15:17,1,614 days 23:49:00.000000000,"-161 days, 3:57:00"
308,"docker
docker-ce",https://github.com/docker/docker-ce,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/13 02:38,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,565 days 23:05:00.000000000,"-174 days, 22:33:00"
309,"docker
docker-ce",https://github.com/docker/docker-ce,3b9321568d823fda6056789bfcd6aa022318841a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",2016/03/25 01:18,2016/05/24 07:19,2015/02/25 03:33,2018/03/09 15:17,1,393 days 21:45:00.000000000,"60 days, 6:01:00"
310,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/05/24 07:19,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"-123 days, 5:59:00"
311,"docker
docker-ce",https://github.com/docker/docker-ce,65cf98bf38f98ec09d8baf0de18ddbb3432a6040,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 07:21,2016/07/06 00:54,2015/02/25 03:33,2018/03/09 15:17,1,336 days 03:48:00.000000000,"160 days, 17:33:00"
312,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2017/09/14 06:32,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,"329 days, 22:02:00"
313,"docker
docker-ce",https://github.com/docker/docker-ce,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.ppc64le,components/engine/Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 04:51,2016/07/06 00:54,2015/02/25 03:33,2018/03/09 15:17,1,336 days 01:18:00.000000000,"160 days, 20:03:00"
314,"docker
docker-ce",https://github.com/docker/docker-ce,9298102f4681f71922d9213f253ae044e4b21955,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/02/09 19:48,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,390 days 20:23:00.000000000,"305 days, 18:59:00"
315,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,250 days 11:50:00.000000000,"446 days, 3:32:00"
316,"docker
docker-ce",https://github.com/docker/docker-ce,9298102f4681f71922d9213f253ae044e4b21955,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/02/09 19:48,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,390 days 20:23:00.000000000,"305 days, 18:59:00"
317,"docker
docker-ce",https://github.com/docker/docker-ce,d81d63c977a7909528468dca8fcd7ddf6bbc8725,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/12/12 14:47,2017/02/09 19:48,2016/01/15 23:25,2018/03/09 15:17,1,696 days 15:22:00.000000000,"-306 days, 5:01:00"
318,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2017/09/14 06:32,2016/01/15 23:25,2018/03/09 15:17,1,250 days 08:53:00.000000000,"356 days, 22:14:00"
319,"docker
docker-ce",https://github.com/docker/docker-ce,da6e134d1aed703534bc1c87a82a115fef29e8da,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/15 19:11,2016/07/07 01:48,2016/01/15 23:25,2018/03/09 15:17,1,30 days 19:46:00.000000000,"142 days, 6:37:00"
320,"docker
docker-ce",https://github.com/docker/docker-ce,da6e134d1aed703534bc1c87a82a115fef29e8da,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/02/15 19:11,2016/07/07 01:48,2016/01/15 23:25,2018/03/09 15:17,1,30 days 19:46:00.000000000,"142 days, 6:37:00"
321,"docker
docker-ce",https://github.com/docker/docker-ce,d81d63c977a7909528468dca8fcd7ddf6bbc8725,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/12/12 14:47,2016/07/07 01:48,2016/01/15 23:25,2018/03/09 15:17,1,696 days 15:22:00.000000000,"-524 days, 11:01:00"
322,"docker
docker-ce",https://github.com/docker/docker-ce,d81d63c977a7909528468dca8fcd7ddf6bbc8725,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",2017/12/12 14:47,2016/07/07 01:48,2016/01/15 23:25,2018/03/09 15:17,1,696 days 15:22:00.000000000,"-524 days, 11:01:00"
323,"docker
docker-ce",https://github.com/docker/docker-ce,4030bbc684dc21272124af1e2ee7686de85ea342,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/15 23:25,2016/07/07 01:48,2016/01/15 23:25,2018/03/09 15:17,1,0 days 00:00:00.000000000,"173 days, 2:23:00"
324,"docker
docker-ce",https://github.com/docker/docker-ce,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/24 07:24,2016/06/28 15:31,2016/01/15 23:25,2018/03/09 15:17,1,770 days 07:59:00.000000000,"-606 days, 8:07:00"
325,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2017/02/09 19:48,2016/01/15 23:25,2018/03/09 15:17,1,290 days 03:57:00.000000000,"100 days, 16:26:00"
326,"docker
docker-ce",https://github.com/docker/docker-ce,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/13 02:38,2016/07/07 01:48,2016/01/15 23:25,2018/03/09 15:17,1,241 days 03:13:00.000000000,"-69 days, 23:10:00"
327,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2017/02/09 19:48,2016/01/15 23:25,2018/03/09 15:17,1,277 days 09:05:00.000000000,"113 days, 11:18:00"
328,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.aarch64,components/engine/Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2017/02/09 19:48,2016/01/15 23:25,2018/03/09 15:17,1,252 days 01:55:00.000000000,"138 days, 18:28:00"
329,"docker
docker-ce",https://github.com/docker/docker-ce,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/14 10:56,2015/12/17 07:01,2015/11/05 23:38,2018/03/09 15:17,1,616 days 11:18:00.000000000,"-576 days, 20:05:00"
330,"docker
docker-ce",https://github.com/docker/docker-ce,64a1b4f929c078ce1cc7dc979c197dc188579334,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/10/05 08:22,2015/12/17 07:01,2015/11/05 23:38,2018/03/09 15:17,1,334 days 08:44:00.000000000,"-294 days, 22:39:00"
331,"docker
docker-ce",https://github.com/docker/docker-ce,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/11/10 05:45,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,735 days 06:07:00.000000000,0:00:00
332,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2017/09/14 06:32,2015/11/05 23:38,2018/03/09 15:17,1,321 days 08:40:00.000000000,"356 days, 22:14:00"
333,"docker
docker-ce",https://github.com/docker/docker-ce,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/04/15 13:45,2015/12/17 07:01,2015/11/05 23:38,2018/03/09 15:17,1,161 days 14:07:00.000000000,"-121 days, 17:16:00"
334,"docker
docker-ce",https://github.com/docker/docker-ce,bd0f152278ef6dc330dab9cae74ad71a5346510e,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/12/17 07:01,2015/12/17 07:01,2015/11/05 23:38,2018/03/09 15:17,1,41 days 07:23:00.000000000,0:00:00
335,"docker
docker-ce",https://github.com/docker/docker-ce,a91eed9e9dfd596c72b6f5eafe915bb28d7cb931,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",2016/04/15 13:45,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,161 days 14:07:00.000000000,"573 days, 16:00:00"
336,"docker
docker-ce",https://github.com/docker/docker-ce,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/10 05:45,2015/12/17 07:01,2015/11/05 23:38,2018/03/09 15:17,1,735 days 06:07:00.000000000,"-694 days, 1:16:00"
337,"docker
docker-ce",https://github.com/docker/docker-ce,366ab9966ca70f381df2809686c81af07e8a6de5,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Options for hack/validate/gometalinter
",2017/11/10 05:45,2015/12/17 07:01,2015/11/05 23:38,2018/03/09 15:17,1,735 days 06:07:00.000000000,"-694 days, 1:16:00"
338,"docker
docker-ce",https://github.com/docker/docker-ce,eb437391da197986d4e781e47e60ad88829cb867,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/21 07:25,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"658 days, 22:20:00"
339,"docker
docker-ce",https://github.com/docker/docker-ce,819eda81428c6968c2224c503773158f8b7fb2a8,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/05 14:50,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,60 days 15:12:00.000000000,"674 days, 14:55:00"
340,"docker
docker-ce",https://github.com/docker/docker-ce,eb437391da197986d4e781e47e60ad88829cb867,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/21 07:25,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"658 days, 22:20:00"
341,"docker
docker-ce",https://github.com/docker/docker-ce,eb437391da197986d4e781e47e60ad88829cb867,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/21 07:25,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"658 days, 22:20:00"
342,"docker
docker-ce",https://github.com/docker/docker-ce,515ebb7b5cb98dec83a7333059b6178ceb5fab78,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/25 07:18,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,354 days 07:40:00.000000000,"380 days, 22:27:00"
343,"docker
docker-ce",https://github.com/docker/docker-ce,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/24 07:24,2015/12/17 07:01,2015/11/05 23:38,2018/03/09 15:17,1,841 days 07:46:00.000000000,"-801 days, 23:37:00"
344,"docker
docker-ce",https://github.com/docker/docker-ce,eb437391da197986d4e781e47e60ad88829cb867,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/21 07:25,2017/09/14 06:32,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"601 days, 23:07:00"
345,"docker
docker-ce",https://github.com/docker/docker-ce,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/27 04:51,2017/09/14 06:32,2015/11/05 23:38,2018/03/09 15:17,1,82 days 05:13:00.000000000,"596 days, 1:41:00"
346,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,361 days 03:44:00.000000000,"374 days, 2:23:00"
347,"docker
docker-ce",https://github.com/docker/docker-ce,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/13 02:38,2015/12/17 07:01,2015/11/05 23:38,2018/03/09 15:17,1,312 days 03:00:00.000000000,"-271 days, 4:23:00"
348,"docker
docker-ce",https://github.com/docker/docker-ce,bd0f152278ef6dc330dab9cae74ad71a5346510e,components/engine/Dockerfile.arm,components/engine/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/12/17 07:01,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,41 days 07:23:00.000000000,"693 days, 22:44:00"
349,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2017/11/10 05:45,2015/11/05 23:38,2018/03/09 15:17,1,323 days 01:42:00.000000000,"412 days, 4:25:00"
350,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.armhf,components/engine/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2017/09/14 06:32,2015/11/05 23:38,2018/03/09 15:17,1,348 days 08:52:00.000000000,"329 days, 22:02:00"
351,"docker
docker-ce",https://github.com/docker/docker-ce,64dd08bc1d5cb3ddde563582be6f15cb7af8c45b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/15 18:40,2016/05/31 22:27,2015/02/25 03:33,2018/03/09 15:17,1,659 days 15:07:00.000000000,"-198 days, 3:47:00"
352,"docker
docker-ce",https://github.com/docker/docker-ce,d08760316a8b777b01850352d326617c1c75b7ce,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/05/31 22:27,2015/02/25 03:33,2018/03/09 15:17,1,575 days 07:42:00.000000000,"-114 days, 11:12:00"
353,"docker
docker-ce",https://github.com/docker/docker-ce,8061bcd2a73c0753ef09d8e30c52e9b5ec3d9c25,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/14 10:56,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,870 days 07:23:00.000000000,"-211 days, 7:44:00"
354,"docker
docker-ce",https://github.com/docker/docker-ce,58bc04a76a6821834e956fbce23b5c52ecfac918,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/22 08:18,2017/09/14 06:32,2015/02/25 03:33,2018/03/09 15:17,1,575 days 04:45:00.000000000,"356 days, 22:14:00"
355,"docker
docker-ce",https://github.com/docker/docker-ce,1fe350f74d17e47ca43123ecb07f5b6403900983,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/04/09 02:03,2016/05/31 22:27,2015/02/25 03:33,2018/03/09 15:17,1,408 days 22:30:00.000000000,"52 days, 20:24:00"
356,"docker
docker-ce",https://github.com/docker/docker-ce,1fe350f74d17e47ca43123ecb07f5b6403900983,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/04/09 02:03,2016/05/31 22:27,2015/02/25 03:33,2018/03/09 15:17,1,408 days 22:30:00.000000000,"52 days, 20:24:00"
357,"docker
docker-ce",https://github.com/docker/docker-ce,1fe350f74d17e47ca43123ecb07f5b6403900983,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/04/09 02:03,2016/05/31 22:27,2015/02/25 03:33,2018/03/09 15:17,1,408 days 22:30:00.000000000,"52 days, 20:24:00"
358,"docker
docker-ce",https://github.com/docker/docker-ce,d80026fd7e8bd7f8902508b7bb2e8d299076c628,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/02/15 16:43,2017/09/14 06:32,2015/02/25 03:33,2018/03/09 15:17,1,1086 days 13:10:00.000000000,"-155 days, 13:49:00"
359,"docker
docker-ce",https://github.com/docker/docker-ce,81922b0d60f11309a91b709751532e0d05af6f96,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/27 04:51,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,336 days 01:18:00.000000000,"323 days, 13:49:00"
360,"docker
docker-ce",https://github.com/docker/docker-ce,64dd08bc1d5cb3ddde563582be6f15cb7af8c45b,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/15 18:40,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,659 days 15:07:00.000000000,0:00:00
361,"docker
docker-ce",https://github.com/docker/docker-ce,a52b825c7e46c44395fd336762450ac13c410eda,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/24 07:24,2016/05/31 22:27,2015/02/25 03:33,2018/03/09 15:17,1,1095 days 03:51:00.000000000,"-634 days, 15:03:00"
362,"docker
docker-ce",https://github.com/docker/docker-ce,61646d77af8af895590b2069eefe76586bd48988,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/01 03:22,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,614 days 23:49:00.000000000,"44 days, 15:18:00"
363,"docker
docker-ce",https://github.com/docker/docker-ce,99577ad8e26bde4a5c4b5d76f96d45a287bc5360,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/13 02:38,2016/05/31 22:27,2015/02/25 03:33,2018/03/09 15:17,1,565 days 23:05:00.000000000,"-105 days, 19:49:00"
364,"docker
docker-ce",https://github.com/docker/docker-ce,75e7ddadb0fc7a072bf1f95a336ee7b4bcb40e7f,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"82 days, 17:20:00"
365,"docker
docker-ce",https://github.com/docker/docker-ce,44e77a4b4f79be08a5f353adfa2533a6aa8c845a,components/engine/Dockerfile.s390x,components/engine/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2017/09/14 06:32,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,"329 days, 22:02:00"
366,"docker
docker-ce",https://github.com/docker/docker-ce,18e1b423ee3c8b845feadbccb7f52c5a242d15a7,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",2015/04/22 10:36,2015/02/25 09:37,2013/08/30 08:49,2016/10/12 04:14,1,600 days 01:47:00.000000000,"-57 days, 23:01:00"
367,"docker
docker-ce",https://github.com/docker/docker-ce,824b119187656e9475e2a02cd33d44f946f9d17b,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/18 13:20,2015/02/25 09:37,2013/08/30 08:49,2016/10/12 04:14,1,537 days 04:31:00.000000000,"6 days, 20:17:00"
368,"docker
docker-ce",https://github.com/docker/docker-ce,18e1b423ee3c8b845feadbccb7f52c5a242d15a7,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",2015/04/22 10:36,2015/04/22 10:36,2013/08/30 08:49,2016/10/12 04:14,1,600 days 01:47:00.000000000,0:00:00
369,"docker
docker-ce",https://github.com/docker/docker-ce,1c3b8811eaf8c2bc3384402784f1a1fddfe8f4e4,components/engine/docs/Dockerfile,components/engine/docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",2014/01/21 04:29,2015/02/25 09:37,2013/08/30 08:49,2016/10/12 04:14,1,143 days 19:40:00.000000000,"400 days, 5:08:00"
370,"docker
docker-ce",https://github.com/docker/docker-ce,10a4963c2cf50e0867c5c95d18cbd93f1e113d52,components/engine/Dockerfile.solaris,components/engine/Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",2017/06/21 05:39,2017/10/25 03:32,2016/06/07 16:45,2017/10/25 03:32,1,378 days 12:54:00.000000000,"125 days, 21:53:00"
371,"docker
docker-ce",https://github.com/docker/docker-ce,4edafc3bc120137c52da71f041df222fcf88cb3d,components/engine/Dockerfile.gccgo,components/engine/Dockerfile.gccgo,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/08/24 19:09,2015/08/17 18:20,2016/08/24 19:09,1,156 days 02:33:00.000000000,"216 days, 22:16:00"
372,"docker
docker-ce",https://github.com/docker/docker-ce,75f7edc9b6d3db48e524810599193656c42b7a27,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# TODO The way we set the version could easily be simplified not to depend on hack/...
",2018/08/24 07:53,2019/12/05 22:55,2018/08/24 07:53,2019/12/05 22:55,1,0 days 00:00:00.000000000,"468 days, 15:02:00"
373,"docker
docker-ce",https://github.com/docker/docker-ce,75f7edc9b6d3db48e524810599193656c42b7a27,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-proxy
# TODO if libnetwork folds into the docker tree this can be combined above
",2018/08/24 07:53,2019/12/05 22:55,2018/08/24 07:53,2019/12/05 22:55,1,0 days 00:00:00.000000000,"468 days, 15:02:00"
374,"docker
docker-ce",https://github.com/docker/docker-ce,75f7edc9b6d3db48e524810599193656c42b7a27,components/packaging/image/Dockerfile.engine-dm,components/packaging/image/Dockerfile.engine-dm,"# docker-init - TODO move this out, last time we bumped was 2016!
",2018/08/24 07:53,2019/12/05 22:55,2018/08/24 07:53,2019/12/05 22:55,1,0 days 00:00:00.000000000,"468 days, 15:02:00"
375,"docker
docker-ce",https://github.com/docker/docker-ce,57eb64c9c05d84f5c98a381a0d497a23b5a1792a,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/06/14 01:21,2018/06/03 01:46,2014/08/06 05:17,2018/06/03 01:46,1,311 days 20:04:00.000000000,"1085 days, 0:25:00"
376,"docker
docker-ce",https://github.com/docker/docker-ce,68301c38288c1554119f272cd8e44b6342965cac,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2014/08/06 05:17,2018/06/03 01:46,2014/08/06 05:17,2018/06/03 01:46,1,0 days 00:00:00.000000000,"1396 days, 20:29:00"
377,"docker
docker-ce",https://github.com/docker/docker-ce,e3d2b9b31445212cc0ef3ca4a1437835a4e59d32,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/04/19 06:44,2014/10/21 14:59,2014/08/06 05:17,2018/06/03 01:46,1,987 days 01:27:00.000000000,"-911 days, 8:15:00"
378,"docker
docker-ce",https://github.com/docker/docker-ce,94ae8f10c7281c0b5bd8f0945ac9ce250dbd55db,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/28 11:21,2014/08/06 05:17,2014/08/06 05:17,2018/06/03 01:46,1,1210 days 06:04:00.000000000,"-1211 days, 17:56:00"
379,"docker
docker-ce",https://github.com/docker/docker-ce,68301c38288c1554119f272cd8e44b6342965cac,components/engine/builder/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/08/06 05:17,2014/08/06 05:17,2014/08/06 05:17,2018/06/03 01:46,1,0 days 00:00:00.000000000,0:00:00
380,"docker
docker-ce",https://github.com/docker/docker-ce,7a1680b13a4d40f402fb54bfef604e8539c37662,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2014/08/06 05:17,2014/08/06 05:17,2018/06/03 01:46,1,1381 days 22:11:00.000000000,"-1382 days, 1:49:00"
381,"docker
docker-ce",https://github.com/docker/docker-ce,2b328bedc5fca0ed02aa342a787c98f841de34a0,components/cli/dockerfiles/Dockerfile.dev,components/cli/dockerfiles/Dockerfile.dev,"# FIXME(vdemeester) only used for e2e, could be in e2e special image in the future
",2018/05/24 16:39,,2017/04/19 08:12,,1,400 days 08:27:00.000000000,削除されていません
382,"docker
docker-ce",https://github.com/docker/docker-ce,ae45d9cbead510f527a8882333d5b40be40c1352,components/engine/Dockerfile.centos,components/engine/Dockerfile.centos,"# Wrap all commands in the ""docker-in-docker"" script to allow nested containers
#ENTRYPOINT [""hack/dind""]
",2015/04/01 05:58,2015/05/01 07:30,2015/04/01 05:58,2015/05/01 07:30,1,0 days 00:00:00.000000000,"30 days, 1:32:00"
383,"docker
docker-ce",https://github.com/docker/docker-ce,736b960e2df15e35aca9abec3ef6a9bc64ead7b3,components/engine/testing/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",2013/09/22 04:14,2013/10/28 04:13,2013/09/08 02:30,2014/02/15 13:50,1,14 days 01:44:00.000000000,"35 days, 23:59:00"
384,"docker
docker-ce",https://github.com/docker/docker-ce,ba4e682cde6ad56a7fe88c5e61c976e1db93338b,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.6
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/11/07 13:05,2014/02/15 13:50,2013/09/08 02:30,2014/02/15 13:50,1,60 days 10:35:00.000000000,"100 days, 0:45:00"
385,"docker
docker-ce",https://github.com/docker/docker-ce,7a7c9f0f1d41534dd4afd66f7d8fa56e38ed94e1,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/10/29 08:51,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,51 days 06:21:00.000000000,"9 days, 4:14:00"
386,"docker
docker-ce",https://github.com/docker/docker-ce,7a7c9f0f1d41534dd4afd66f7d8fa56e38ed94e1,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/29 08:51,2013/10/28 04:13,2013/09/08 02:30,2014/02/15 13:50,1,51 days 06:21:00.000000000,"-2 days, 19:22:00"
387,"docker
docker-ce",https://github.com/docker/docker-ce,ba4e682cde6ad56a7fe88c5e61c976e1db93338b,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.4
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/11/07 13:05,2014/02/15 13:50,2013/10/19 14:33,2014/02/15 13:50,1,18 days 22:32:00.000000000,"100 days, 0:45:00"
388,"docker
docker-ce",https://github.com/docker/docker-ce,837c6b480c6859db6bf3f3fb044b070afb3f336d,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/10/30 11:37,2013/10/30 11:37,2013/10/19 14:33,2014/02/15 13:50,1,10 days 21:04:00.000000000,0:00:00
389,"docker
docker-ce",https://github.com/docker/docker-ce,837c6b480c6859db6bf3f3fb044b070afb3f336d,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,components/engine/hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/30 11:37,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,10 days 21:04:00.000000000,"8 days, 1:28:00"
390,"docker
docker-ce",https://github.com/docker/docker-ce,dd52c68ae4d8dbcbb34a4ba7983eb160dbfe37fc,components/engine/Dockerfile.buildkit,components/engine/Dockerfile.buildkit,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,"15 days, 17:21:00"
391,"docker
docker-ce",https://github.com/docker/docker-ce,dd52c68ae4d8dbcbb34a4ba7983eb160dbfe37fc,components/engine/Dockerfile.buildkit,components/engine/Dockerfile.buildkit,"# Options for hack/validate/gometalinter
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,"15 days, 17:21:00"
392,"docker
docker-ce",https://github.com/docker/docker-ce,71ca4e1c02659ee103cbd47d3f1deb32fe8a178c,components/cli/dockerfiles/osx-cross.sh,components/cli/dockerfiles/osx-cross.sh,"#!/usr/bin/env bash
#
# Install dependencies required to cross compile osx, then cleanup
#
# TODO: this should be a separate build stage when CI supports it


",2017/05/13 01:07,2017/06/16 07:00,2017/05/13 01:07,2017/06/16 07:00,1,0 days 00:00:00.000000000,"34 days, 5:53:00"
393,"docker
docker-ce",https://github.com/docker/docker-ce,bbd6e1dedb484b23dad3e888ce2bbd6fccc4366b,components/cli/dockerfiles/Dockerfile.e2e,components/cli/dockerfiles/Dockerfile.e2e,"# TODO - consider replacing with an official image and a multi-stage build to pluck the binaries out
#ARG CONTAINERD_VERSION=v1.1.2
#ARG CONTAINERD_VERSION=47a128d
#ARG CONTAINERD_VERSION=6c3e782f
",2018/08/28 19:08,2018/08/28 19:08,2018/05/17 20:11,,1,102 days 22:57:00.000000000,0:00:00
394,"docker
docker-ce",https://github.com/docker/docker-ce,bbd6e1dedb484b23dad3e888ce2bbd6fccc4366b,components/cli/dockerfiles/Dockerfile.e2e,components/cli/dockerfiles/Dockerfile.e2e,"# TODO - consider replacing with an official image and a multi-stage build to pluck the binaries out
",2018/08/28 19:08,2018/08/28 19:08,2018/05/17 20:11,,1,102 days 22:57:00.000000000,0:00:00
395,"nodejs
docker-iojs",https://github.com/nodejs/docker-iojs,b1c0af6449717fd1487d00c3c99b722d9ebfc5a8,Dockerfile,0.10/Dockerfile,"# TODO verify gpg and sha256: http://nodejs.org/dist/v0.10.30/SHASUMS256.txt.asc
",2014/08/12 06:27,2015/01/15 08:41,2014/08/12 06:27,2015/01/15 08:41,1,0 days 00:00:00.000000000,"156 days, 2:14:00"
396,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,5.0/alpine/Dockerfile,5.0/alpine/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,2020/07/21 12:59,2016/05/06 21:48,,1,1557 days 04:17:00.000000000,"-21 days, 10:54:00"
397,"docker-library
redis",https://github.com/docker-library/redis,d3a0f3d95ac768db44dbcb87ecf88cfc436581d5,5.0/alpine/Dockerfile,5.0/alpine/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/04/18 00:03,2019/09/26 00:03,2016/05/06 21:48,,1,1442 days 02:15:00.000000000,"-205 days, 0:00:00"
398,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,Dockerfile-alpine.template,Dockerfile-alpine.template,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,2020/07/21 12:59,2019/12/28 05:58,,1,226 days 20:07:00.000000000,"-21 days, 10:54:00"
399,"docker-library
redis",https://github.com/docker-library/redis,bfd904a808cf68d4b5ecc267bb4d4a1a0ca5f921,Dockerfile-alpine.template,Dockerfile-alpine.template,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/07/21 12:59,2020/06/04 03:50,2019/12/28 05:58,,1,206 days 07:01:00.000000000,"-48 days, 14:51:00"
400,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,5.0/Dockerfile,5.0/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,2019/08/02 06:14,2018/06/22 04:14,,1,780 days 21:51:00.000000000,"-375 days, 4:09:00"
401,"docker-library
redis",https://github.com/docker-library/redis,d3a0f3d95ac768db44dbcb87ecf88cfc436581d5,5.0/Dockerfile,5.0/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/04/18 00:03,2019/09/26 00:03,2018/06/22 04:14,,1,665 days 19:49:00.000000000,"-205 days, 0:00:00"
402,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,Dockerfile.template,Dockerfile.template,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,2020/04/16 16:32,2019/12/28 05:58,,1,226 days 20:07:00.000000000,"-117 days, 14:27:00"
403,"docker-library
redis",https://github.com/docker-library/redis,a12431fe712de586182cdf0ef4fd191b8e0bd196,Dockerfile.template,Dockerfile.template,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/04/16 16:32,,2019/12/28 05:58,,1,110 days 10:34:00.000000000,削除されていません
404,"docker-library
redis",https://github.com/docker-library/redis,85937fb903e1c0e0f97a79efac8f340e982398ce,6.0/Dockerfile,6.0/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/09/01 18:03,2020/04/01 03:22,2019/12/20 02:26,,1,256 days 15:37:00.000000000,"-154 days, 9:19:00"
405,"docker-library
redis",https://github.com/docker-library/redis,886e71565ce748fd265c262d782b6c22c7540173,6.0-rc/Dockerfile,6.0/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/04/01 03:22,2020/04/01 03:22,2019/12/20 02:26,,1,103 days 00:56:00.000000000,0:00:00
406,"docker-library
redis",https://github.com/docker-library/redis,1b36753550afda4dd1227e883ddb2bb50b30c810,5.0/32bit/Dockerfile,5.0/32bit/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/08/11 02:05,2019/08/02 06:14,2018/06/22 04:14,,1,780 days 21:51:00.000000000,"-375 days, 4:09:00"
407,"docker-library
redis",https://github.com/docker-library/redis,d3a0f3d95ac768db44dbcb87ecf88cfc436581d5,5.0/32bit/Dockerfile,5.0/32bit/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/04/18 00:03,2019/09/26 00:03,2018/06/22 04:14,,1,665 days 19:49:00.000000000,"-205 days, 0:00:00"
408,"docker-library
redis",https://github.com/docker-library/redis,85937fb903e1c0e0f97a79efac8f340e982398ce,6.0/alpine/Dockerfile,6.0/alpine/Dockerfile,"# TODO https://github.com/redis/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/09/01 18:03,2020/04/01 03:22,2019/12/20 02:26,,1,256 days 15:37:00.000000000,"-154 days, 9:19:00"
409,"docker-library
redis",https://github.com/docker-library/redis,886e71565ce748fd265c262d782b6c22c7540173,6.0-rc/alpine/Dockerfile,6.0/alpine/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2020/04/01 03:22,2020/04/01 03:22,2019/12/20 02:26,,1,103 days 00:56:00.000000000,0:00:00
410,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,4.0/32bit/Dockerfile,4.0/32bit/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/05/01 00:20,2015/07/16 05:59,2020/05/01 00:20,1,1478 days 00:15:00.000000000,"272 days, 18:06:00"
411,"docker-library
redis",https://github.com/docker-library/redis,0b2910f292fa6ac32318cb2acc84355b11aa8a7a,4.0/Dockerfile,4.0/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/08/02 06:14,2020/05/01 00:20,2015/04/02 02:26,2020/05/01 00:20,1,1583 days 03:48:00.000000000,"272 days, 18:06:00"
412,"docker-library
redis",https://github.com/docker-library/redis,d875ae032d7fdcf380a5506c714b2844af3cd2a1,6.0-rc/32bit/Dockerfile,6.0-rc/32bit/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/28 05:58,2020/01/01 09:50,2019/12/20 02:26,2020/01/01 09:50,1,8 days 03:32:00.000000000,"4 days, 3:52:00"
413,"docker-library
redis",https://github.com/docker-library/redis,b70b2f74e40cd85a224d7872c49b798e47fb5e1c,4.0/alpine/Dockerfile,4.0/alpine/Dockerfile,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/20 08:56,2020/05/01 00:20,2017/07/15 00:10,2020/05/01 00:20,1,888 days 08:46:00.000000000,"132 days, 15:24:00"
414,"docker-library
redis",https://github.com/docker-library/redis,d875ae032d7fdcf380a5506c714b2844af3cd2a1,Dockerfile-32bit.template,Dockerfile-32bit.template,"# TODO https://github.com/antirez/redis/pull/3494 (deduplicate ""redis-server"" copies)
",2019/12/28 05:58,2020/01/01 08:01,2019/12/28 05:58,2020/01/01 08:01,1,0 days 00:00:00.000000000,"4 days, 2:03:00"
415,"tianon
gosu",https://github.com/tianon/gosu,5fb235fb1f30d3fbbacd516033b1546dd246fef5,Dockerfile,Dockerfile,"# TODO pin specific commit

# cache-fill
",2014/11/05 09:30,,2014/07/15 04:52,,1,113 days 04:38:00.000000000,削除されていません
416,"31z4
zookeeper-docker",https://github.com/31z4/zookeeper-docker,15b6f73b9f36a8bf4960c661427ac41de49cf534,3.5.3-beta/Dockerfile,3.5.8/Dockerfile,"    # TODO: the distribution given by apache is not gzipped correctly - unzip correctly when fixed
",2017/10/24 14:12,,2017/10/24 14:12,,1,0 days 00:00:00.000000000,削除されていません
417,"vmware
photon",https://github.com/vmware/photon,a765f0a0375e07e7cad850cf374e748ed92d7420,support/dockerfiles/photon/make-docker-image.sh,support/dockerfiles/photon/make-docker-image.sh,"# TODO: remove this line after updating photon-build image with new
# versions of sqlite and rpm with -libs subpackages
",2016/11/23 08:17,2015/07/31 10:06,2015/04/16 03:00,,1,587 days 05:17:00.000000000,"-481 days, 1:49:00"
418,"vmware
photon",https://github.com/vmware/photon,7d00a1d5c2800d659e4842ba257e37e32cc7de1d,support/dockerfiles/photon/make-docker-image.sh,support/dockerfiles/photon/make-docker-image.sh,"# reinstalling inside to make sure rpmdb is created for tdnf.
# TODO find better solution.
",2015/07/31 10:06,2015/07/31 10:06,2015/04/16 03:00,,1,106 days 07:06:00.000000000,0:00:00
419,"vmware
photon",https://github.com/vmware/photon,f093864e3c1f22c6bf990f1c9cd35546ed8d6097,support/dockerfiles/photon/make-docker-image.sh,support/dockerfiles/photon/make-docker-image.sh,"# # reinstalling inside to make sure rpmdb is created for tdnf.
# # TODO find better solution.
# chroot $TEMP_CHROOT bash -c \
#    ""tdnf install -y filesystem; \
#     tdnf install -y glibc ; \
#     tdnf install -y bash ; \
#     tdnf install -y coreutils ; \
#     tdnf install -y rpm-ostree ; \
#     tdnf install -y photon-release; \
#     rpm -e --nodeps perl; \
#     rpm -e --nodeps perl-DBD-SQLite; \
#     rpm -e --nodeps perl-Module-ScanDeps; \
#     rpm -e --nodeps perl-DBIx-Simple; \
#     rpm -e --nodeps perl-DBI; \
#     rpm -e --nodeps perl-WWW-Curl;""

",2015/08/04 11:25,2015/07/02 00:41,2015/04/16 03:00,,1,110 days 08:25:00.000000000,"-34 days, 13:16:00"
420,"vmware
photon",https://github.com/vmware/photon,332d24faf833ec812b5f749e3e999445a6261018,support/dockerfiles/photon/make-docker-image.sh,support/dockerfiles/photon/make-docker-image.sh,"# # reinstalling inside to make sure rpmdb is created for tdnf.
# # TODO find better solution.
",2015/11/13 04:44,2015/07/31 10:06,2015/04/16 03:00,,1,211 days 01:44:00.000000000,"-105 days, 5:22:00"
421,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,ea74a292933d020f6d59f6013a7b24f48f65950f,Dockerfile,Dockerfile,"## Start Hack
## All of this needed because of missing 8.11.x tag.  Once we update to 8.15 we can resume using Dockerfile.old or remove hack and use FROM node:8.15-slim

## Installing Node.js

# gpg keys listed at https://github.com/nodejs/node
",2019/02/28 06:44,2019/05/01 10:02,2015/07/10 18:04,2020/03/05 22:09,1,1328 days 12:40:00.000000000,"62 days, 3:18:00"
422,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,ea74a292933d020f6d59f6013a7b24f48f65950f,Dockerfile,Dockerfile," ## End Hack

## Actual Rocket.Chat stuff
",2019/02/28 06:44,2019/05/01 10:02,2015/07/10 18:04,2020/03/05 22:09,1,1328 days 12:40:00.000000000,"62 days, 3:18:00"
423,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,ce9eb5644998ef22ed4980b79a0543bd9998df71,Dockerfile,Dockerfile,"## Start Hack
",2019/08/14 16:02,2019/08/14 16:02,2015/07/10 18:04,2020/03/05 22:09,1,1495 days 21:58:00.000000000,0:00:00
424,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,ce9eb5644998ef22ed4980b79a0543bd9998df71,Dockerfile,Dockerfile,"## All of this needed because of missing 8.11.x tag.  Once we update to 8.15+ we can resume using Dockerfile.old or remove hack and use FROM node:8-slim

## Installing Node.js
",2019/08/14 16:02,2019/08/14 16:02,2015/07/10 18:04,2020/03/05 22:09,1,1495 days 21:58:00.000000000,0:00:00
425,"RocketChat
Docker.Official.Image",https://github.com/RocketChat/Docker.Official.Image,ce9eb5644998ef22ed4980b79a0543bd9998df71,Dockerfile,Dockerfile,"## End Hack

## Actual Rocket.Chat stuff
",2019/08/14 16:02,2019/08/14 16:02,2015/07/10 18:04,2020/03/05 22:09,1,1495 days 21:58:00.000000000,0:00:00
426,"docker
compose",https://github.com/docker/compose,e8424d5ae0de01fae98fa7aaff3c79cbb1dfcf2b,Dockerfile,Dockerfile,"# FIXME(chris-crone): virtualenv 16.3.0 breaks build, force 16.2.0 until fixed
",2019/11/19 22:47,2019/11/19 22:47,2014/01/17 02:28,,1,2132 days 20:19:00.000000000,0:00:00
427,"docker-library
redmine",https://github.com/docker-library/redmine,0ca74edc277862714856657aa9df3b7fab4d4b6f,3.4/alpine/Dockerfile,3.4/alpine/Dockerfile,"# Todo: remove build dependencies
#	runDeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $runDeps; \
#	apk del .build-deps

",2019/04/05 01:29,2020/04/15 06:05,2019/04/05 01:29,2020/04/15 06:05,1,0 days 00:00:00.000000000,"376 days, 4:36:00"
428,"docker-library
redmine",https://github.com/docker-library/redmine,0ca74edc277862714856657aa9df3b7fab4d4b6f,4.0/alpine/Dockerfile,4.0/alpine/Dockerfile,"# Todo: remove build dependencies
#	runDeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $runDeps; \
#	apk del .build-deps

",2019/04/05 01:29,,2019/04/05 01:29,,1,0 days 00:00:00.000000000,削除されていません
429,"docker-library
redmine",https://github.com/docker-library/redmine,0ca74edc277862714856657aa9df3b7fab4d4b6f,Dockerfile-alpine.template,Dockerfile-alpine.template,"# Todo: remove build dependencies
#	runDeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $runDeps; \
#	apk del .build-deps

",2019/04/05 01:29,,2019/04/05 01:29,,1,0 days 00:00:00.000000000,削除されていません
430,"containous
traefik",https://github.com/containous/traefik,a5a8d6929e793f6c3a70b1b84f68973c506deced,build.Dockerfile,build.Dockerfile,"# This is a hack (see libcompose#32) - will be removed when libcompose will be fixed
# (i.e go get able)
",2015/09/27 22:56,,2015/09/16 04:38,,1,11 days 18:18:00.000000000,削除されていません
431,"corretto
corretto-8-docker",https://github.com/corretto/corretto-8-docker,5e34c9377e6590699469d8087af24363250599af,Dockerfile-debian,contrib/debian/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/06/28 01:58,2019/06/28 01:58,2019/06/28 01:58,2020/05/28 07:18,1,0 days 00:00:00.000000000,0:00:00
432,"docker-library
golang",https://github.com/docker-library/golang,dc0571dad14fc6ca163dbab21b88e51b3031b84c,1.4/cross/Dockerfile,1.4/cross/Dockerfile,"# TODO gcc: error: unrecognized command line option '-marm'
#	android/arm \

# ls src/runtime/defs_*_*.h | sed -r 's!^.*/defs_([^_]+)_([^_]+)[.]h$!\1/\2!'

# (set an explicit GOARM of 5 for maximum ARM compatibility)
",2014/12/12 03:33,2015/02/19 01:30,2014/11/15 15:46,2016/02/18 07:10,1,26 days 11:47:00.000000000,"68 days, 21:57:00"
433,"docker-library
hello-world",https://github.com/docker-library/hello-world,7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87,Dockerfile.build,Dockerfile.build,"# TODO TARGET_ARCH='i386' (heinous package conflicts trying to get ""gcc -m32""/""gcc-multilib"" to work with all the cross-compiling gccs)

",2017/06/14 07:55,,2015/06/19 07:48,,1,726 days 00:07:00.000000000,削除されていません
434,"docker-library
wordpress",https://github.com/docker-library/wordpress,591388696848f29bfa627ab38f78678135096f15,php7.2/fpm/Dockerfile,php7.2/fpm/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/12/09 05:43,,2017/12/09 05:43,,1,0 days 00:00:00.000000000,削除されていません
435,"docker-library
wordpress",https://github.com/docker-library/wordpress,591388696848f29bfa627ab38f78678135096f15,php7.2/apache/Dockerfile,php7.2/apache/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/12/09 05:43,,2017/12/09 05:43,,1,0 days 00:00:00.000000000,削除されていません
436,"docker-library
wordpress",https://github.com/docker-library/wordpress,0966763fa39385f2eaddd5b35ee91c40d3a1f4ac,php5.6/fpm/Dockerfile,php5.6/fpm/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/01/12 05:04,2017/01/12 05:04,2015/01/31 03:39,2019/01/05 09:06,1,712 days 01:25:00.000000000,0:00:00
437,"docker-library
wordpress",https://github.com/docker-library/wordpress,0966763fa39385f2eaddd5b35ee91c40d3a1f4ac,php7.1/apache/Dockerfile,php7.1/apache/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/01/12 05:04,2017/01/12 05:04,2017/01/05 09:59,2019/12/02 18:52,1,6 days 19:05:00.000000000,0:00:00
438,"docker-library
wordpress",https://github.com/docker-library/wordpress,0966763fa39385f2eaddd5b35ee91c40d3a1f4ac,php5.6/apache/Dockerfile,php5.6/apache/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/01/12 05:04,2017/01/12 05:04,2014/08/12 06:32,2019/01/05 09:06,1,883 days 22:32:00.000000000,0:00:00
439,"docker-library
wordpress",https://github.com/docker-library/wordpress,0966763fa39385f2eaddd5b35ee91c40d3a1f4ac,php7.0/fpm/Dockerfile,php7.0/fpm/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/01/12 05:04,2017/01/12 05:04,2016/10/07 04:29,2019/01/05 09:06,1,97 days 00:35:00.000000000,0:00:00
440,"docker-library
wordpress",https://github.com/docker-library/wordpress,0966763fa39385f2eaddd5b35ee91c40d3a1f4ac,php7.0/apache/Dockerfile,php7.0/apache/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/01/12 05:04,2017/01/12 05:04,2016/10/07 04:29,2019/01/05 09:06,1,97 days 00:35:00.000000000,0:00:00
441,"docker-library
wordpress",https://github.com/docker-library/wordpress,0966763fa39385f2eaddd5b35ee91c40d3a1f4ac,php7.1/fpm/Dockerfile,php7.1/fpm/Dockerfile,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/01/12 05:04,2017/01/12 05:04,2017/01/05 09:59,2019/12/02 18:52,1,6 days 19:05:00.000000000,0:00:00
442,"docker-library
wordpress",https://github.com/docker-library/wordpress,54a2bbb62edf0b2ddba14bcb3ab532c6186c9737,Dockerfile-debian.template,Dockerfile-debian.template,"# TODO consider removing the *-dev deps and only keeping the necessary lib* packages

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
",2017/07/26 06:18,,2016/10/07 04:29,,1,292 days 01:49:00.000000000,削除されていません
443,"docker-library
tomcat",https://github.com/docker-library/tomcat,749fadf61fa96e5a6b6d95bb70624e5a5b37080a,6/jre7/Dockerfile,6/jre7/Dockerfile,"# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2016/10/19 05:23,2016/10/19 05:23,2014/10/23 08:32,2017/08/04 06:36,1,726 days 20:51:00.000000000,0:00:00
444,"docker-library
tomcat",https://github.com/docker-library/tomcat,0e18eab4234afbff617aee84e7156ac1b4fd67d5,6/jre7/Dockerfile,6/jre7/Dockerfile,"#!/bin/sh$|#!/usr/bin/env bash|' '{}' +

# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2017/07/29 03:16,2016/10/19 05:23,2014/10/23 08:32,2017/08/04 06:36,1,1009 days 18:44:00.000000000,"-283 days, 2:07:00"
445,"docker-library
tomcat",https://github.com/docker-library/tomcat,749fadf61fa96e5a6b6d95bb70624e5a5b37080a,6/jre8/Dockerfile,6/jre8/Dockerfile,"# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2016/10/19 05:23,2016/10/19 05:23,2014/11/21 07:04,2017/08/04 06:36,1,697 days 22:19:00.000000000,0:00:00
446,"docker-library
tomcat",https://github.com/docker-library/tomcat,0e18eab4234afbff617aee84e7156ac1b4fd67d5,6/jre8/Dockerfile,6/jre8/Dockerfile,"#!/bin/sh$|#!/usr/bin/env bash|' '{}' +

# TODO find a simple hacky way to verify Tomcat Native is working properly
# (the way we use in 7+ doesn't work here because we have no ""configtest"")

",2017/07/29 03:16,2016/10/19 05:23,2014/11/21 07:04,2017/08/04 06:36,1,980 days 20:12:00.000000000,"-283 days, 2:07:00"
447,"docker-library
tomcat",https://github.com/docker-library/tomcat,ac840829bd52309030c8811d292776888109df63,8.5/jdk13/openjdk-oracle/Dockerfile,8.5/jdk14/openjdk-oraclelinux7/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/11/22 00:03,,2019/07/03 06:41,,1,141 days 17:22:00.000000000,削除されていません
448,"docker-library
tomcat",https://github.com/docker-library/tomcat,5a8577af736ff76ade0afe2f46d03fc6aed43ce1,9.0/jdk13/openjdk-oracle/Dockerfile,9.0/jdk14/openjdk-oraclelinux7/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/03/16 23:04,,2019/07/03 06:41,,1,257 days 16:23:00.000000000,削除されていません
449,"docker-library
tomcat",https://github.com/docker-library/tomcat,5a8577af736ff76ade0afe2f46d03fc6aed43ce1,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/03/16 23:04,,2019/06/25 09:08,,1,265 days 13:56:00.000000000,削除されていません
450,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2020/03/16 23:04,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"265 days, 13:56:00"
451,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2020/03/16 23:04,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"265 days, 13:56:00"
452,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk8/corretto/Dockerfile,9.0/jdk8/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2020/03/16 23:04,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"265 days, 13:56:00"
453,"docker-library
tomcat",https://github.com/docker-library/tomcat,8f1471772b7c1c0fbbaa7c759e1ccdeef2863940,8.5/jdk12/openjdk-oracle/Dockerfile,8.5/jdk12/openjdk-oracle/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/08/21 23:03,2019/09/20 04:49,2019/07/03 06:41,2019/09/20 04:49,1,49 days 16:22:00.000000000,"29 days, 5:46:00"
454,"docker-library
tomcat",https://github.com/docker-library/tomcat,53eda0cc852c3478aeda35c9ab174903178f9b77,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/03/20 05:03,,2019/06/25 09:08,,1,268 days 19:55:00.000000000,削除されていません
455,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2020/03/20 05:03,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"268 days, 19:55:00"
456,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2020/03/20 05:03,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"268 days, 19:55:00"
457,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,7/jdk8/corretto/Dockerfile,7/jdk8/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2020/03/20 05:03,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"268 days, 19:55:00"
458,"docker-library
tomcat",https://github.com/docker-library/tomcat,73156213c57edd31b78b99bb991382dd3c12d2a9,9.0/jdk12/openjdk-oracle/Dockerfile,9.0/jdk12/openjdk-oracle/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/08/18 05:03,2019/09/20 04:49,2019/07/03 06:41,2019/09/20 04:49,1,45 days 22:22:00.000000000,"32 days, 23:46:00"
459,"docker-library
tomcat",https://github.com/docker-library/tomcat,ac840829bd52309030c8811d292776888109df63,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/11/22 00:03,,2019/06/25 09:08,,1,149 days 14:55:00.000000000,削除されていません
460,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/11/22 00:03,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"149 days, 14:55:00"
461,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/11/22 00:03,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"149 days, 14:55:00"
462,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk11/corretto/Dockerfile,8.5/jdk11/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/11/22 00:03,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"149 days, 14:55:00"
463,"docker-library
tomcat",https://github.com/docker-library/tomcat,5a8577af736ff76ade0afe2f46d03fc6aed43ce1,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/03/16 23:04,,2019/06/25 09:08,,1,265 days 13:56:00.000000000,削除されていません
464,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2020/03/16 23:04,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"265 days, 13:56:00"
465,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2020/03/16 23:04,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"265 days, 13:56:00"
466,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,9.0/jdk11/corretto/Dockerfile,9.0/jdk11/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2020/03/16 23:04,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"265 days, 13:56:00"
467,"docker-library
tomcat",https://github.com/docker-library/tomcat,ac840829bd52309030c8811d292776888109df63,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2019/11/22 00:03,,2019/06/25 09:08,,1,149 days 14:55:00.000000000,削除されていません
468,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2019/11/22 00:03,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"149 days, 14:55:00"
469,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2019/11/22 00:03,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"149 days, 14:55:00"
470,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,8.5/jdk8/corretto/Dockerfile,8.5/jdk8/corretto/Dockerfile,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2019/11/22 00:03,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"149 days, 14:55:00"
471,"docker-library
tomcat",https://github.com/docker-library/tomcat,d2f3c19c20ca845c517ae5956d4d6a88531e220b,Dockerfile-yum.template,Dockerfile-yum.template,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/05/12 07:35,,2019/06/25 09:08,,1,321 days 22:27:00.000000000,削除されていません
472,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,Dockerfile-yum.template,Dockerfile-yum.template,"# TODO should we leave these installed, or remove them too?
",2019/06/25 09:08,2020/05/12 07:35,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"321 days, 22:27:00"
473,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,Dockerfile-yum.template,Dockerfile-yum.template,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed
",2019/06/25 09:08,2020/05/12 07:35,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"321 days, 22:27:00"
474,"docker-library
tomcat",https://github.com/docker-library/tomcat,58c79694a83a12077150ad57b8dd46296548b958,Dockerfile-yum.template,Dockerfile-yum.template,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?
",2019/06/25 09:08,2020/05/12 07:35,2019/06/25 09:08,,1,0 days 00:00:00.000000000,"321 days, 22:27:00"
475,"docker-library
tomcat",https://github.com/docker-library/tomcat,19bdd962a61b69e3a35ddc0a8936854cc2e405f6,8.5/jre8/Dockerfile,8.5/jdk11/openjdk-buster/Dockerfile,"# http://tomcat.10.x6.nabble.com/VOTE-Release-Apache-Tomcat-8-0-32-tp5046007p5048274.html (ie, HACK HACK HACK)
",2016/05/17 02:47,2016/05/17 02:47,2016/04/02 01:43,,1,45 days 01:04:00.000000000,0:00:00
476,"docker-library
tomcat",https://github.com/docker-library/tomcat,19bdd962a61b69e3a35ddc0a8936854cc2e405f6,9.0/jre8/Dockerfile,9.0/jdk11/openjdk-buster/Dockerfile,"# http://tomcat.10.x6.nabble.com/VOTE-Release-Apache-Tomcat-8-0-32-tp5046007p5048274.html (ie, HACK HACK HACK)
",2016/05/17 02:47,2016/05/17 02:47,2016/04/02 03:02,,1,44 days 23:45:00.000000000,0:00:00
477,"docker-library
tomcat",https://github.com/docker-library/tomcat,19bdd962a61b69e3a35ddc0a8936854cc2e405f6,8.0/jre8/Dockerfile,9.0/jdk8/openjdk-buster/Dockerfile,"# http://tomcat.10.x6.nabble.com/VOTE-Release-Apache-Tomcat-8-0-32-tp5046007p5048274.html (ie, HACK HACK HACK)
",2016/05/17 02:47,2016/05/17 02:47,2014/11/21 07:04,,1,542 days 19:43:00.000000000,0:00:00
478,"docker-library
tomcat",https://github.com/docker-library/tomcat,19bdd962a61b69e3a35ddc0a8936854cc2e405f6,8.0/jre7/Dockerfile,8.5/jdk8/openjdk-slim-buster/Dockerfile,"# http://tomcat.10.x6.nabble.com/VOTE-Release-Apache-Tomcat-8-0-32-tp5046007p5048274.html (ie, HACK HACK HACK)
",2016/05/17 02:47,2016/05/17 02:47,2014/10/23 08:32,,1,571 days 18:15:00.000000000,0:00:00
479,"docker-library
tomcat",https://github.com/docker-library/tomcat,da50a652f7be08ed67a5620c43fe310d4289fc91,10.0/jdk8/corretto/Dockerfile,10.0/jdk8/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/06/08 05:03,2020/06/08 05:03,2020/04/23 09:23,,1,45 days 19:40:00.000000000,0:00:00
480,"docker-library
tomcat",https://github.com/docker-library/tomcat,da50a652f7be08ed67a5620c43fe310d4289fc91,10.0/jdk14/openjdk-oracle/Dockerfile,10.0/jdk14/openjdk-oraclelinux7/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/06/08 05:03,2020/06/08 05:03,2020/04/23 09:23,,1,45 days 19:40:00.000000000,0:00:00
481,"docker-library
tomcat",https://github.com/docker-library/tomcat,da50a652f7be08ed67a5620c43fe310d4289fc91,10.0/jdk11/corretto/Dockerfile,10.0/jdk11/corretto/Dockerfile,"# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
",2020/06/08 05:03,2020/06/08 05:03,2020/04/23 09:23,,1,45 days 19:40:00.000000000,0:00:00
482,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,27652b7a4e814e2701c2e08f01823659a651ae1f,2018.0/7.2/Dockerfile,2018.0/7.2/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2018/06/18 21:15,2019/04/24 21:20,2018/06/18 18:44,2020/03/19 19:57,1,0 days 02:31:00.000000000,"310 days, 0:05:00"
483,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,3106ce731d05cafdf680bf09ebe5bfe9ba5e141c,9.1/7.1/Dockerfile,9.1/7.1/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2018/05/29 20:52,2019/10/16 18:34,2017/04/13 22:52,,1,410 days 22:00:00.000000000,"504 days, 21:42:00"
484,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,883effe6f3c1b3a149c2c5c636c8a003a9e3cc34,8.5/5.6/Dockerfile,8.5/5.6/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2019/11/13 23:18,2019/11/13 23:18,2015/10/11 19:18,,1,1494 days 04:00:00.000000000,0:00:00
485,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,82bba8cc44febcc6d7f31e25373fd323a1b54bfc,8.5/5.6/Dockerfile,8.5/5.6/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2015/10/11 19:18,2019/11/13 23:18,2015/10/11 19:18,,1,0 days 00:00:00.000000000,"1494 days, 4:00:00"
486,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,bb3303d34a3e86a4bc9eb1d652c5cce6ad441a6e,7.0/5.5/Dockerfile,7.0/5.5/Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/21 17:15,2014/10/21 17:15,2014/10/21 17:15,2018/04/30 21:42,1,0 days 00:00:00.000000000,0:00:00
487,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,bb3303d34a3e86a4bc9eb1d652c5cce6ad441a6e,7.0/5.4/Dockerfile,7.0/5.4/Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/21 17:15,2014/10/21 17:15,2014/10/21 17:15,2018/04/30 21:42,1,0 days 00:00:00.000000000,0:00:00
488,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,180e262b7df6df3a8dfe0d94ec92ea3e1e01ac15,2019.0/Dockerfile,2019.0/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2020/03/20 01:10,2020/03/20 01:10,2019/07/22 17:45,,1,241 days 07:25:00.000000000,0:00:00
489,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,f90edb3b170eb3fd4b63af528096a70139c1078d,8.0/5.5/Dockerfile,8.0/5.5/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2014/12/15 00:47,2014/12/10 22:53,2014/12/10 22:53,2016/08/01 18:35,1,4 days 01:54:00.000000000,"-5 days, 22:06:00"
490,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,4c3dda9854934f9bfa6893b286dd7532d08e39b9,8.0/openshift/Dockerfile,8.0/openshift/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2014/12/21 19:44,2015/01/11 21:51,2014/12/21 19:44,2015/01/11 21:51,1,0 days 00:00:00.000000000,"21 days, 2:07:00"
491,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,02589bb6fc80d04e9c1056b00314286e46f549bc,8.0/5.6/Dockerfile,8.0/5.6/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2015/06/04 22:39,2015/06/04 22:39,2014/12/10 22:53,2016/08/01 18:35,1,175 days 23:46:00.000000000,0:00:00
492,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,82bba8cc44febcc6d7f31e25373fd323a1b54bfc,8.5/5.5/Dockerfile,8.5/5.5/Dockerfile,"# Zend Server
#
# Version 0.2

# TODO:

",2015/10/11 19:18,2018/04/30 21:42,2015/10/11 19:18,2018/04/30 21:42,1,0 days 00:00:00.000000000,"932 days, 2:24:00"
493,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,571a4032a3645d26df1690629f1c0551bae4822a,Dockerfile,Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/19 23:21,2014/10/20 22:46,2014/10/19 23:21,2014/10/20 22:46,1,0 days 00:00:00.000000000,23:25:00
494,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,b3ff26b9a50d7cc80a23646d86bc5817a6d78d10,5.4/Dockerfile,5.4/Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/20 22:47,2014/10/21 17:15,2014/10/20 22:47,2014/10/21 17:15,1,0 days 00:00:00.000000000,18:28:00
495,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,b3ff26b9a50d7cc80a23646d86bc5817a6d78d10,5.5/Dockerfile,5.5/Dockerfile,"# Zend Server
#
# Version 0.1

# TODO:
# - version as a variable (both php and ZS)

",2014/10/20 22:47,2014/10/21 17:15,2014/10/20 22:47,2014/10/21 17:15,1,0 days 00:00:00.000000000,18:28:00
496,"zendtech
php-zendserver-docker",https://github.com/zendtech/php-zendserver-docker,408fe81249d365ca7e7bac96a137c9e2b453fc6e,nightly/7.2/Dockerfile,nightly/7.2/Dockerfile,"#Copy Zray docker plugin
#TODO: Integrate Zray docker plugin into Zend Server
",2018/08/07 17:55,,2018/08/07 17:55,,1,0 days 00:00:00.000000000,削除されていません
497,"docker-library
busybox",https://github.com/docker-library/busybox,14748bcd103df873fd389d630dae9a0d6c8a7048,upstream/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
",2015/12/08 09:35,2019/02/15 03:09,2015/02/03 15:02,,1,307 days 18:33:00.000000000,"1164 days, 17:34:00"
498,"docker-library
busybox",https://github.com/docker-library/busybox,4bede2d8a0805ac73ce3c04f430a03bccb8f88e9,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO ppc64el ? (needs BR2_TOOLCHAIN_BUILDROOT_UCLIBC support)
",2017/07/02 02:11,2015/12/08 09:35,2015/02/03 15:02,,1,879 days 11:09:00.000000000,"-572 days, 7:24:00"
499,"docker-library
busybox",https://github.com/docker-library/busybox,4bede2d8a0805ac73ce3c04f430a03bccb8f88e9,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO s390x ? (needs BR2_TOOLCHAIN_BUILDROOT_UCLIBC support)
",2017/07/02 02:11,2015/12/08 09:35,2015/02/03 15:02,,1,879 days 11:09:00.000000000,"-572 days, 7:24:00"
500,"docker-library
busybox",https://github.com/docker-library/busybox,d6cd10e0dbda3a4251978c102a280ff41190ae4f,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
",2017/05/13 05:26,2020/01/23 09:27,2015/02/03 15:02,,1,829 days 14:24:00.000000000,"985 days, 4:01:00"
501,"docker-library
busybox",https://github.com/docker-library/busybox,8b0d96682de7f70e9a67bc9ab1a488da289ede38,uclibc/Dockerfile.builder,uclibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now; 1.27+)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
",2017/05/16 05:19,2017/07/02 02:11,2015/02/03 15:02,,1,832 days 14:17:00.000000000,"46 days, 20:52:00"
502,"docker-library
busybox",https://github.com/docker-library/busybox,a9c111f3b6dc830dc300003f9e7432a6d1a29def,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# hack hack hack hack hack
# with glibc, static busybox uses libnss for DNS resolution :(
",2020/06/02 06:32,2020/06/02 06:32,2016/01/08 03:46,,1,1607 days 02:46:00.000000000,0:00:00
503,"docker-library
busybox",https://github.com/docker-library/busybox,ea04699096c1d2808bef857f161e8d7b8c88e199,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# As long as we rely on libnss, we have to have libc.so anyhow, so
# we've removed CONFIG_STATIC here for now... :cry:
",2016/10/08 03:13,2019/09/05 01:51,2016/01/08 03:46,,1,273 days 23:27:00.000000000,"1061 days, 22:38:00"
504,"docker-library
busybox",https://github.com/docker-library/busybox,ebf4c7186e834ee9e420ed6b71e4f3fd7001fb60,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# As long as we rely on libnss, we have to have libc.so anyhow, so
# we've removed CONFIG_STATIC here for now... :cry:
",2016/01/13 06:50,2020/06/02 06:32,2016/01/08 03:46,,1,5 days 03:04:00.000000000,"1601 days, 23:42:00"
505,"docker-library
busybox",https://github.com/docker-library/busybox,8b0d96682de7f70e9a67bc9ab1a488da289ede38,glibc/Dockerfile.builder,glibc/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now; 1.27+)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# As long as we rely on libnss, we have to have libc.so anyhow, so
# we've removed CONFIG_STATIC here for now... :cry:
",2017/05/16 05:19,2019/02/15 03:09,2016/01/08 03:46,,1,494 days 01:33:00.000000000,"639 days, 21:50:00"
506,"docker-library
busybox",https://github.com/docker-library/busybox,3542d4e519a1acbf9902a6bca25f4287696fe155,musl/Dockerfile.builder,musl/Dockerfile.builder,"# see http://wiki.musl-libc.org/wiki/Building_Busybox
# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
",2016/01/13 05:01,2017/03/09 08:35,2016/01/08 03:46,,1,5 days 01:15:00.000000000,"421 days, 3:34:00"
507,"docker-library
busybox",https://github.com/docker-library/busybox,712b93df203ac10301c2f387e539c079bb9ca4a2,musl/Dockerfile.builder,musl/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# see http://wiki.musl-libc.org/wiki/Building_Busybox
",2017/03/09 08:35,2017/03/09 08:35,2016/01/08 03:46,,1,426 days 04:49:00.000000000,0:00:00
508,"docker-library
busybox",https://github.com/docker-library/busybox,8b0d96682de7f70e9a67bc9ab1a488da289ede38,musl/Dockerfile.builder,musl/Dockerfile.builder,"# TODO remove CONFIG_FEATURE_SYNC_FANCY from this explicit list after the next release of busybox (since it's disabled by default upstream now; 1.27+)
# CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)
# see http://wiki.musl-libc.org/wiki/Building_Busybox
",2017/05/16 05:19,2017/03/09 08:35,2016/01/08 03:46,,1,494 days 01:33:00.000000000,"-68 days, 3:16:00"
509,"docker-library
busybox",https://github.com/docker-library/busybox,c28aca6a64e108187f75d573e680cea20893615a,ubuntu/Dockerfile.builder,ubuntu/Dockerfile.builder,"# hack hack hack hack hack
# with glibc, static busybox uses libnss for DNS resolution :(
",2015/10/20 03:07,2016/01/08 03:46,2015/09/15 08:25,2016/01/08 03:46,1,34 days 18:42:00.000000000,"80 days, 0:39:00"
510,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,8ad0891b1e2eebc2948423f8292d69711f7d7ae2,Dockerfile,7.8/Dockerfile,"## haskell package versions; can be overriden via context hacks
",2014/07/27 07:28,2014/07/27 07:28,2014/05/29 11:51,,1,58 days 19:37:00.000000000,0:00:00
511,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,a6e46b15a834d3d70335918adbac954c3a238c2d,7.8/Dockerfile,7.8/Dockerfile,"## install additional libs typically needed by hackage packages
",2014/10/07 10:10,,2014/05/29 11:51,,1,130 days 22:19:00.000000000,削除されていません
512,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,3d147020c8d2beb5a52cb3b9ef89712f9e2c1939,7.8/Dockerfile,7.8/Dockerfile,"## install additional libs typically needed by hackage packages
#RUN apt-get update && \
#    apt-get install ${OPTS_APT} zlib1g-dev libtinfo-dev

## run ghci by default unless a command is specified
",2015/03/28 01:31,2014/10/07 10:10,2014/05/29 11:51,,1,302 days 13:40:00.000000000,"-172 days, 8:39:00"
513,"haskell
docker-haskell",https://github.com/haskell/docker-haskell,3d147020c8d2beb5a52cb3b9ef89712f9e2c1939,7.10/Dockerfile,7.10/Dockerfile,"## install additional libs typically needed by hackage packages
#RUN apt-get update && \
#    apt-get install ${OPTS_APT} zlib1g-dev libtinfo-dev

## run ghci by default unless a command is specified
",2015/03/28 01:31,,2015/03/28 01:31,,1,0 days 00:00:00.000000000,削除されていません
514,"docker-library
memcached",https://github.com/docker-library/memcached,802d97fcb5663f9fcf40163ef174234944b43f2b,alpine/Dockerfile,alpine/Dockerfile,"# TODO https://github.com/memcached/memcached/issues/382 ""t/chunked-extstore.t is flaky on arm32v6""
",2020/01/23 06:59,2020/01/23 06:59,2016/01/18 20:51,,1,1465 days 10:08:00.000000000,0:00:00
515,"docker-library
memcached",https://github.com/docker-library/memcached,2620ba5e65c6b606966f71f6e95e29c7a36b487c,debian/Dockerfile,debian/Dockerfile,"# TODO https://github.com/memcached/memcached/issues/382 ""t/chunked-extstore.t is flaky on arm32v6""
",2020/03/24 03:54,2020/03/17 15:54,2015/01/01 06:36,,1,1908 days 21:18:00.000000000,"-7 days, 12:00:00"
516,"cloudbees
jenkins-ci.org-docker",https://github.com/cloudbees/jenkins-ci.org-docker,ae123feaec324dc35350a8bd9ab2704597857f38,Dockerfile-alpine,Dockerfile-alpine,"# FIXME(oleg_nenashev): This is not an official AdoptOpenJDK Docker Image.
# There is no official Alpine images at the moment.
# Needs upgrade when/if there is an official alpine image.
",2020/08/13 18:42,,2017/07/20 18:53,,1,1119 days 23:49:00.000000000,削除されていません
517,"cloudbees
jenkins-ci.org-docker",https://github.com/cloudbees/jenkins-ci.org-docker,d83eaf18a01f6ac49f76dc55be59e168b08c1911,Dockerfile-jdk11,Dockerfile-jdk11,"# TODO: revert before the GA release of Java 11 support (JENKINS-55087)
",2019/01/05 06:42,2019/01/05 06:42,2015/03/17 19:24,,1,1389 days 11:18:00.000000000,0:00:00
518,"therealprologic
docker-crux",https://github.com/therealprologic/docker-crux,299c12353440fbd3ba7d199bb1b3f59d42522c23,build/aarch64/Dockerfile,build/aarch64/Dockerfile,"# Creates an image to build the CRUX filesystem

# TODO: Once bootstrapped, use 'crux:latest'
",2018/11/08 21:30,2018/11/08 21:30,2018/10/22 21:01,2018/11/14 22:29,1,17 days 00:29:00.000000000,0:00:00
519,"docker-library
docs",https://github.com/docker-library/docs,1a40a541519d2181c6f8c5e47e35711b7a023722,.template-helpers/generate-dockerfile-links-partial.tmpl,.template-helpers/generate-dockerfile-links-partial.tmpl,/* TODO decide what to do (if anything) about non-GitHub repos with respect to URL */,2018/10/26 05:27,2017/11/23 07:30,2016/06/07 02:56,,1,871 days 02:31:00.000000000,"-337 days, 2:03:00"
520,"docker-library
docs",https://github.com/docker-library/docs,38bcca7ba339b2f4cbf2c7ff74382db5a7d94dfc,Dockerfile,Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
",2015/04/11 02:40,,2014/10/22 13:29,,1,170 days 13:11:00.000000000,削除されていません
521,"docker-library
docs",https://github.com/docker-library/docs,38bcca7ba339b2f4cbf2c7ff74382db5a7d94dfc,Dockerfile,Dockerfile,"# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
",2015/04/11 02:40,,2014/10/22 13:29,,1,170 days 13:11:00.000000000,削除されていません
522,"docker-library
kibana",https://github.com/docker-library/kibana,f1e01a0c5d64b1eea3c9d90a2cba93d9f3924bd0,5.0/Dockerfile,5/Dockerfile,"# TODO figure out what's going on here and what it'll settle to for 5.0 GA

",2016/08/11 01:35,2016/08/11 01:35,2016/04/19 01:22,2019/04/23 04:53,1,114 days 00:13:00.000000000,0:00:00
523,"RocketChat
Rocket.Chat",https://github.com/RocketChat/Rocket.Chat,2c1d0fac9362a8c9c43b2ed194bf04d0ffd97322,.docker/Dockerfile.rhel,.docker/Dockerfile.rhel,"# This is ugly... But for some reason npm and node aren't available at this stage.
",2020/02/05 06:51,2020/06/11 02:40,2018/04/11 05:09,,1,665 days 01:42:00.000000000,"126 days, 19:49:00"
524,"RocketChat
Rocket.Chat",https://github.com/RocketChat/Rocket.Chat,2c1d0fac9362a8c9c43b2ed194bf04d0ffd97322,.docker/Dockerfile.rhel,.docker/Dockerfile.rhel,"# Hack needed to force use of bundled library instead of system level outdated library
# https://github.com/lovell/sharp/issues/892
",2020/02/05 06:51,2020/06/11 02:40,2018/04/11 05:09,,1,665 days 01:42:00.000000000,"126 days, 19:49:00"
525,"ibm-messaging
mq-container",https://github.com/ibm-messaging/mq-container,cc0f07290850ff8de287625bc6882d819f6ef4cf,incubating/Dockerfile-sfbridge,incubating/Dockerfile-sfbridge,"# TODO: Create configuration file from environment variables?
# TODO: Add entrypoint to run the bridge
",2019/02/26 00:44,2019/02/26 00:44,2017/09/07 21:39,,1,536 days 03:05:00.000000000,0:00:00
526,"rocker-org
rocker",https://github.com/rocker-org/rocker,a35c1df7e3dced0956cc4c33fd32ef71a443d8c4,rstudio/testing/Dockerfile,rstudio/testing/Dockerfile,"  ## hack to avoid RStudio-bug in detecting build-dependencies         
  # && ln -s&& ln -s ln -s /usr/local/bin/R /usr/bin/R \
  # && ln -s&& ln -s ln -s /usr/local/lib/R /usr/lib/R

",2016/12/22 03:57,,2016/11/12 15:45,,1,39 days 12:12:00.000000000,削除されていません
527,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,c519005062569b28237e613ab3ffe4b2cef2c352,official/javaee8/java11/openj9/Dockerfile,official/latest/javaee8/java11/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/05/29 04:49,2019/05/29 04:49,2019/05/29 02:14,2019/10/24 04:35,1,0 days 02:35:00.000000000,0:00:00
528,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,c519005062569b28237e613ab3ffe4b2cef2c352,official/kernel/java11/openj9/Dockerfile,official/latest/kernel/java11/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/05/29 04:49,2019/05/29 04:49,2019/05/29 02:14,2019/10/24 04:35,1,0 days 02:35:00.000000000,0:00:00
529,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,c519005062569b28237e613ab3ffe4b2cef2c352,official/webProfile8/java11/openj9/Dockerfile,official/latest/webProfile8/java11/openj9/Dockerfile,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/05/29 04:49,2019/05/29 04:49,2019/05/29 02:14,2019/10/24 04:35,1,0 days 02:35:00.000000000,0:00:00
530,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,c4254e224ba32adf7bdf55e5c51d80bb0506379c,official/19.0.0.6/kernel/java11/openj9/Dockerfile,releases/19.0.0.6/kernel/Dockerfile.ubuntu.adoptopenjdk11,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/08/16 21:52,2019/12/12 01:36,2019/06/21 23:02,2019/12/12 01:36,1,55 days 22:50:00.000000000,"117 days, 3:44:00"
531,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,2c9acecae083e1a45873df87b7b0de7a14c4ee20,official/19.0.0.x/javaee8/java12/openj9/Dockerfile,official/latest/javaee8/java12/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/06/05 04:45,2019/06/05 04:45,2019/06/05 04:45,2019/10/24 04:35,1,0 days 00:00:00.000000000,0:00:00
532,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,2c9acecae083e1a45873df87b7b0de7a14c4ee20,official/19.0.0.x/webProfile8/java12/openj9/Dockerfile,official/latest/webProfile8/java12/openj9/Dockerfile,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/06/05 04:45,2019/06/05 04:45,2019/06/05 04:45,2019/10/24 04:35,1,0 days 00:00:00.000000000,0:00:00
533,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,2c9acecae083e1a45873df87b7b0de7a14c4ee20,official/19.0.0.x/kernel/java12/openj9/Dockerfile,official/latest/kernel/java12/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/06/05 04:45,2019/06/05 04:45,2019/06/05 04:45,2019/10/24 04:35,1,0 days 00:00:00.000000000,0:00:00
534,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,c4254e224ba32adf7bdf55e5c51d80bb0506379c,official/19.0.0.6/javaee8/java11/openj9/Dockerfile,releases/19.0.0.6/javaee8/Dockerfile.ubuntu.adoptopenjdk11,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/08/16 21:52,2019/12/12 01:36,2019/06/21 23:02,2019/12/12 01:36,1,55 days 22:50:00.000000000,"117 days, 3:44:00"
535,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,c4254e224ba32adf7bdf55e5c51d80bb0506379c,official/19.0.0.6/webProfile8/java11/openj9/Dockerfile,releases/19.0.0.6/webProfile8/Dockerfile.ubuntu.adoptopenjdk11,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/08/16 21:52,2019/12/12 01:36,2019/06/21 23:02,2019/12/12 01:36,1,55 days 22:50:00.000000000,"117 days, 3:44:00"
536,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,official/19.0.0.9/webProfile8/java11/openj9/Dockerfile,releases/19.0.0.9/webProfile8/Dockerfile.ubuntu.adoptopenjdk11,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2020/03/17 04:29,2019/09/16 23:28,2020/03/17 04:29,1,0 days 00:00:00.000000000,"182 days, 5:01:00"
537,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,official/19.0.0.9/javaee8/java11/openj9/Dockerfile,releases/19.0.0.9/javaee8/Dockerfile.ubuntu.adoptopenjdk11,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2020/03/17 04:29,2019/09/16 23:28,2020/03/17 04:29,1,0 days 00:00:00.000000000,"182 days, 5:01:00"
538,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,official/19.0.0.9/kernel/java11/openj9/Dockerfile,releases/19.0.0.9/kernel/Dockerfile.ubuntu.adoptopenjdk11,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2020/03/17 04:29,2019/09/16 23:28,2020/03/17 04:29,1,0 days 00:00:00.000000000,"182 days, 5:01:00"
539,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,official/19.0.0.9/javaee8/java12/openj9/Dockerfile,official/19.0.0.9/javaee8/java12/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2019/11/14 04:36,2019/09/16 23:28,2019/11/14 04:36,1,0 days 00:00:00.000000000,"58 days, 5:08:00"
540,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,official/19.0.0.9/webProfile8/java12/openj9/Dockerfile,official/19.0.0.9/webProfile8/java12/openj9/Dockerfile,"#These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2019/11/14 04:36,2019/09/16 23:28,2019/11/14 04:36,1,0 days 00:00:00.000000000,"58 days, 5:08:00"
541,"openliberty
ci.docker",https://github.com/openliberty/ci.docker,5ccbc0792c730cae1f5b31070201f3286cd8ce03,official/19.0.0.9/kernel/java12/openj9/Dockerfile,official/19.0.0.9/kernel/java12/openj9/Dockerfile,"# These settings are needed so that we can run as a different user than 1001 after server warmup
# TODO: Eventually convert this to OPENJ9_JAVA_OPTIONS once the Liberty server script honors it
",2019/09/16 23:28,2019/11/14 04:36,2019/09/16 23:28,2019/11/14 04:36,1,0 days 00:00:00.000000000,"58 days, 5:08:00"
542,"nginxinc
docker-nginx",https://github.com/nginxinc/docker-nginx,0501f0b73fd7fbfb139d1e98a7fd3b63426b16a1,stable/alpine-perl/Dockerfile,stable/alpine-perl/Dockerfile,"# fixme: needs to check out a tag on the next 1.14 release
",2019/03/11 23:46,,2017/04/13 22:07,,1,697 days 01:39:00.000000000,削除されていません
543,"nginxinc
docker-nginx",https://github.com/nginxinc/docker-nginx,0501f0b73fd7fbfb139d1e98a7fd3b63426b16a1,stable/alpine/Dockerfile,stable/alpine/Dockerfile,"# fixme: needs to check out a tag on the next 1.14 release
",2019/03/11 23:46,,2016/02/17 02:10,,1,1118 days 21:36:00.000000000,削除されていません
544,"influxdata
influxdb",https://github.com/influxdata/influxdb,1a5bcd29daa8df8a09113cd71b4d47da2e8332a2,Dockerfile_build_ubuntu64_go1.11,Dockerfile_build_ubuntu64_go1.11,"# TODO(edd) this needs to be updated to 1.11 when the branch is available.
",2018/08/21 23:49,2019/01/12 03:38,2017/07/22 02:51,2019/01/12 03:38,1,395 days 20:58:00.000000000,"143 days, 3:49:00"
545,"cruxlinux
docker-crux",https://github.com/cruxlinux/docker-crux,299c12353440fbd3ba7d199bb1b3f59d42522c23,build/aarch64/Dockerfile,build/aarch64/Dockerfile,"# Creates an image to build the CRUX filesystem

# TODO: Once bootstrapped, use 'crux:latest'
",2018/11/08 21:30,2018/11/08 21:30,2018/10/22 21:01,2018/11/14 22:29,1,17 days 00:29:00.000000000,0:00:00
546,"docker-library
pypy",https://github.com/docker-library/pypy,669ca6492e33303a5f4770fd2ffa009b8b47ced9,3.6/Dockerfile,3.6/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/06/22 19:07,2020/01/22 02:07,2019/02/12 09:21,,1,130 days 09:46:00.000000000,"213 days, 7:00:00"
547,"docker-library
pypy",https://github.com/docker-library/pypy,cb0fa7e73f2f66b40fbcedc9f24c48cf50964f37,2.7/slim/Dockerfile,2.7/slim/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2020/01/22 02:07,2020/01/22 02:07,2014/12/20 07:57,,1,1858 days 18:10:00.000000000,0:00:00
548,"docker-library
pypy",https://github.com/docker-library/pypy,669ca6492e33303a5f4770fd2ffa009b8b47ced9,3.6/slim/Dockerfile,3.6/slim/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/06/22 19:07,2020/01/22 02:07,2014/12/20 07:57,,1,1645 days 11:10:00.000000000,"213 days, 7:00:00"
549,"docker-library
pypy",https://github.com/docker-library/pypy,cb0fa7e73f2f66b40fbcedc9f24c48cf50964f37,2.7/Dockerfile,2.7/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2020/01/22 02:07,2020/01/22 02:07,2014/12/17 08:36,,1,1861 days 17:31:00.000000000,0:00:00
550,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,Dockerfile-slim.template,Dockerfile-slim.template,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,2019/03/28 07:11,2017/08/25 08:16,,1,579 days 22:55:00.000000000,0:00:00
551,"docker-library
pypy",https://github.com/docker-library/pypy,8e525772078fd0386619644a00021937a86b63bd,3.5/slim/Dockerfile,3.5/slim/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/04/24 13:07,2019/04/24 13:07,2019/02/12 09:21,2019/10/15 04:35,1,71 days 03:46:00.000000000,0:00:00
552,"docker-library
pypy",https://github.com/docker-library/pypy,8e525772078fd0386619644a00021937a86b63bd,3.5/Dockerfile,3.5/Dockerfile,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/04/24 13:07,2019/10/15 04:35,2014/12/17 08:36,2019/10/15 04:35,1,1589 days 04:31:00.000000000,"173 days, 15:28:00"
553,"docker-library
pypy",https://github.com/docker-library/pypy,d54416e2be73520a490eb0dd2819d8a2b4df3652,Dockerfile.template,Dockerfile.template,"# TODO rebuild other cffi modules here too? (other _*_build.py files)
",2019/03/28 07:11,2019/03/28 07:11,2017/08/25 08:16,,1,579 days 22:55:00.000000000,0:00:00
554,"docker-library
drupal",https://github.com/docker-library/drupal,7e4cad355f3ccf8daaaf4645e6d6488b0318ee3f,8.6/fpm/Dockerfile,8.8/fpm-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/11/14 13:27,2020/03/05 07:27,2017/08/04 22:07,,1,831 days 15:20:00.000000000,"111 days, 18:00:00"
555,"docker-library
drupal",https://github.com/docker-library/drupal,7e4cad355f3ccf8daaaf4645e6d6488b0318ee3f,8.6/apache/Dockerfile,8.8/apache-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/11/14 13:27,2020/03/05 07:27,2017/02/02 13:15,,1,1015 days 00:12:00.000000000,"111 days, 18:00:00"
556,"docker-library
drupal",https://github.com/docker-library/drupal,1433ab4554bad2fba7c16f6ce5965ccf771bf88a,8.7/fpm/Dockerfile,8.9/apache-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:50,2019/09/05 00:28,2018/01/19 12:49,,1,546 days 17:01:00.000000000,"46 days, 18:38:00"
557,"docker-library
drupal",https://github.com/docker-library/drupal,1433ab4554bad2fba7c16f6ce5965ccf771bf88a,8.7/apache/Dockerfile,8.9/fpm-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:50,2019/09/05 00:28,2018/01/19 12:49,,1,546 days 17:01:00.000000000,"46 days, 18:38:00"
558,"docker-library
drupal",https://github.com/docker-library/drupal,1a27bd281c2cf80b754be7bde16ca009b50681b8,7/fpm/Dockerfile,7/fpm-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2020/06/03 18:27,2020/06/03 18:27,2016/01/22 08:03,,1,1594 days 10:24:00.000000000,0:00:00
559,"docker-library
drupal",https://github.com/docker-library/drupal,1a27bd281c2cf80b754be7bde16ca009b50681b8,7/apache/Dockerfile,7/apache-buster/Dockerfile,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2020/06/03 18:27,2015/04/15 09:43,2015/04/15 08:20,,1,1876 days 10:07:00.000000000,"-1877 days, 15:16:00"
560,"docker-library
drupal",https://github.com/docker-library/drupal,9118999d003541ecbb0ab72dddad9ef5be11ec0e,Dockerfile,7/apache-buster/Dockerfile,"# TODO use this MD5
",2015/04/15 09:43,2015/04/15 09:43,2015/04/15 08:20,,1,0 days 01:23:00.000000000,0:00:00
561,"docker-library
drupal",https://github.com/docker-library/drupal,b05d762e4fa8ff852649ed6673c5653d9bb18401,Dockerfile-debian.template,Dockerfile-debian.template,"# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)

# install the PHP extensions we need
",2019/07/20 05:48,,2018/02/15 10:09,,1,519 days 19:39:00.000000000,削除されていません
562,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,3ac27af45d795159657be78012fd3ac1e9be56d2,0.X/Dockerfile,0.X/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2018/04/11 01:26,2018/04/11 01:26,2017/09/20 01:09,,1,203 days 00:17:00.000000000,0:00:00
563,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,6c95f9d0c010291289d26a7a4ffe52bcba3f1685,0.6/Dockerfile,0.6/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM, exposes a web UI, and bootstraps itself. Don't use this configuration
# for production.
",2016/02/09 16:43,2016/02/10 03:58,2016/01/30 04:18,2017/10/06 01:40,1,10 days 12:25:00.000000000,11:15:00
564,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,64003edf3c1105161340bc7fe1b364d5fb3f5b57,0.6/Dockerfile,0.6/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/07/06 06:12,2016/03/17 01:57,2016/01/30 04:18,2017/10/06 01:40,1,158 days 01:54:00.000000000,"-112 days, 19:45:00"
565,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,70ec3a24d5f8bc77291f5367ef487303f9716d33,0.7.3/Dockerfile,0.7.3/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/06/08 05:15,2017/06/08 05:15,2017/06/08 05:15,2017/10/06 01:40,1,0 days 00:00:00.000000000,0:00:00
566,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,9b8dfaaf3738b16b4b2afbbdbc41f3419986b394,0.7.2/Dockerfile,0.7.2/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/05/16 00:26,2017/05/16 00:26,2017/05/16 00:26,2017/10/06 01:40,1,0 days 00:00:00.000000000,0:00:00
567,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,67f88c6cea8da71a9803a401e7a7c950dd884b02,0.7.0/Dockerfile,0.7.0/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/03/28 23:33,2017/03/28 23:33,2017/03/28 23:33,2017/10/06 01:40,1,0 days 00:00:00.000000000,0:00:00
568,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,638047d80dc87b97f7bda67c758f54b2826959ce,0.8.0-rc1/Dockerfile,0.8.0-rc1/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/08/04 04:16,2017/10/06 01:40,2017/08/04 04:16,2017/10/06 01:40,1,0 days 00:00:00.000000000,"62 days, 21:24:00"
569,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,c087a27b5ec93445e89dc46f25af973f114f1399,0.6.5/Dockerfile,0.6.5/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/02/08 11:01,2017/10/06 01:40,2017/02/08 11:01,2017/10/06 01:40,1,0 days 00:00:00.000000000,"239 days, 14:39:00"
570,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,3d3957180d689ecddb537aa799a878171280e8a3,0.6.2/Dockerfile,0.6.2/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/10/06 05:37,2016/10/06 05:37,2016/10/06 05:37,2017/10/06 01:40,1,0 days 00:00:00.000000000,0:00:00
571,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,296309e4e40be197e89b9f063463fe02c4c5c3e2,0.6.1/Dockerfile,0.6.1/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/08/21 04:50,2017/10/06 01:40,2016/08/21 04:50,2017/10/06 01:40,1,0 days 00:00:00.000000000,"410 days, 20:50:00"
572,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,889cea1e8b1e07c3ace52dd1d9a50a0bb497add9,0.6.3/Dockerfile,0.6.3/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/12/17 02:27,2017/10/06 01:40,2016/12/06 01:35,2017/10/06 01:40,1,11 days 00:52:00.000000000,"292 days, 23:13:00"
573,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,7bbdde58de683a2bb6e384e4c20e30308b4ff882,0.6.4/Dockerfile,0.6.4/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2016/12/17 05:52,2017/10/06 01:40,2016/12/17 05:52,2017/10/06 01:40,1,0 days 00:00:00.000000000,"292 days, 19:48:00"
574,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,20c626ab1c89a17c24f370ae18cfe6cbc0eb8d33,0.8.0-beta1/Dockerfile,0.8.0-beta1/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/07/26 10:02,2017/10/06 01:40,2017/07/26 10:02,2017/10/06 01:40,1,0 days 00:00:00.000000000,"71 days, 15:38:00"
575,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,d1cbdce2b531e9223356efb14e828afa556e1f70,0.8.0/Dockerfile,0.8.0/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/08/09 22:39,2017/10/06 01:40,2017/08/09 22:39,2017/10/06 01:40,1,0 days 00:00:00.000000000,"57 days, 3:01:00"
576,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,9ddc187d94f68f2572e4d3b1e733c98c661d628b,0.8.1/Dockerfile,0.8.1/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/08/17 21:30,2017/10/06 01:40,2017/08/17 21:30,2017/10/06 01:40,1,0 days 00:00:00.000000000,"49 days, 4:10:00"
577,"hashicorp
docker-vault",https://github.com/hashicorp/docker-vault,0cbe9598ea742e5227a20012332400b0f96a0327,0.8.2/Dockerfile,0.8.2/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2017/09/07 04:52,2017/10/06 01:40,2017/09/07 04:52,2017/10/06 01:40,1,0 days 00:00:00.000000000,"28 days, 20:48:00"
578,"docker-library
postgres",https://github.com/docker-library/postgres,d21499fa3f55639c6751423e55ff630516bf34e3,10/Dockerfile,10/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2020/02/14 16:02,2018/08/22 06:39,2017/06/22 08:03,,1,967 days 07:59:00.000000000,"-542 days, 14:37:00"
579,"docker-library
postgres",https://github.com/docker-library/postgres,88341a435106ea0c9a805ff305bf486f81f56e0c,11/Dockerfile,11/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2018/10/19 01:03,2018/08/22 06:39,2018/05/26 04:46,,1,145 days 20:17:00.000000000,"-58 days, 5:36:00"
580,"docker-library
postgres",https://github.com/docker-library/postgres,a9610d18de51c189c9d4b0197c408e2e3bfb7917,9.6/Dockerfile,9.6/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2019/02/15 08:42,2018/08/22 06:39,2016/05/13 06:01,,1,1008 days 02:41:00.000000000,"-178 days, 21:57:00"
581,"docker-library
postgres",https://github.com/docker-library/postgres,04626521017c8f1daa3839e3e5d36a606ec98f80,9.5/Dockerfile,9.5/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2019/06/21 15:02,2018/08/22 06:39,2015/07/09 01:47,,1,1443 days 13:15:00.000000000,"-304 days, 15:37:00"
582,"docker-library
postgres",https://github.com/docker-library/postgres,682ff83c5c83f1b6f2b02caf7aa3e17a491b403a,Dockerfile-debian.template,Dockerfile-debian.template,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2020/05/22 06:26,2018/08/22 06:39,2014/08/02 06:15,,1,2120 days 00:11:00.000000000,"-639 days, 0:13:00"
583,"docker-library
postgres",https://github.com/docker-library/postgres,0e8afe8b6a5db91d575ea8fcd2b57920d178f215,9.4/Dockerfile,9.4/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2019/05/10 03:02,2018/08/22 06:39,2014/07/16 09:14,2020/02/15 06:32,1,1758 days 17:48:00.000000000,"-261 days, 3:37:00"
584,"docker-library
postgres",https://github.com/docker-library/postgres,90ba599a267562442a1b3e2e058c620ede70624b,12/Dockerfile,12/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2019/09/27 03:02,2019/09/27 03:02,2019/05/24 03:35,,1,125 days 23:27:00.000000000,0:00:00
585,"docker-library
postgres",https://github.com/docker-library/postgres,64bec4b1617291e3646e4e7dbbae1174404c3fd9,9.3/Dockerfile,9.3/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2018/11/09 01:43,2018/12/05 07:37,2014/06/24 01:03,2018/12/05 07:37,1,1599 days 00:40:00.000000000,"26 days, 5:54:00"
586,"docker-library
postgres",https://github.com/docker-library/postgres,682ff83c5c83f1b6f2b02caf7aa3e17a491b403a,13/Dockerfile,13/Dockerfile,"# https://github.com/docker-library/postgres/issues/484 (clang-6.0 required, only available in stretch-backports)
# TODO remove this once we hit buster+
",2020/05/22 06:26,2020/05/22 06:26,2020/05/22 00:26,,1,0 days 06:00:00.000000000,0:00:00
587,"docker-library
repo-info",https://github.com/docker-library/repo-info,bdc1ec69eaeffb190f5543403e25d9424d2e1ef2,Dockerfile.local,Dockerfile.local,"# TODO convert ""dpkg --print-architecture"" to Alpine architecture for downloading the correct architecture binary
",2019/04/09 07:52,,2016/07/23 08:16,,1,989 days 23:36:00.000000000,削除されていません
588,"docker-library
repo-info",https://github.com/docker-library/repo-info,b0c6ece2c866344053e306b6f88cdddf32fbd7ee,Dockerfile.remote,Dockerfile.remote,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
",2019/01/03 09:21,2019/01/03 09:21,2016/08/06 05:07,,1,880 days 04:14:00.000000000,0:00:00
589,"docker-library
repo-info",https://github.com/docker-library/repo-info,b0c6ece2c866344053e306b6f88cdddf32fbd7ee,Dockerfile.remote,Dockerfile.remote,"# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
",2019/01/03 09:21,2019/01/03 09:21,2016/08/06 05:07,,1,880 days 04:14:00.000000000,0:00:00
590,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,325614c1a285bc049f7bb0a18aef33a9e409c9f2,Dockerfile,1.23/Dockerfile,"    # Extensions
    # TODO: make submodules shallow clones?
",2017/06/13 04:22,2017/06/09 04:54,2014/10/11 03:48,2015/08/14 06:24,1,976 days 00:34:00.000000000,"-4 days, 0:32:00"
591,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,1828584c75e34ee08f12427e64d907f469cbab7c,Dockerfile,1.23/Dockerfile,"    # VisualEditor
    # TODO: make submodules shallow clones?
",2015/12/19 13:28,2017/06/13 04:22,2014/10/11 03:48,2015/08/14 06:24,1,434 days 09:40:00.000000000,"541 days, 14:54:00"
592,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,8b6397888af7e165e1e1494c6be823a151b616c2,Dockerfile,1.23/Dockerfile,"# TODO: Switch to debian sid

",2015/12/19 10:39,2017/06/13 04:22,2014/10/11 03:48,2015/08/14 06:24,1,434 days 06:51:00.000000000,"541 days, 17:43:00"
593,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,9bdcc59dc6ae7bf40eb7d23c6c0d3b133f174146,dev/Dockerfile,dev/Dockerfile,"	# Extensions
	# TODO: make submodules shallow clones?
",2019/06/28 06:31,2017/12/21 02:08,2017/12/21 02:08,,1,554 days 04:23:00.000000000,"-555 days, 19:37:00"
594,"wikimedia
mediawiki-docker",https://github.com/wikimedia/mediawiki-docker,d254f8c01cd0bbbed38bc0c71d0d70066d6fbbb4,dev/Dockerfile,dev/Dockerfile,"    # Extensions
    # TODO: make submodules shallow clones?
",2017/12/21 02:08,,2017/12/21 02:08,,1,0 days 00:00:00.000000000,削除されていません
595,"hashicorp
docker-consul",https://github.com/hashicorp/docker-consul,af95a2ec9c44fea90458ede561984b2366c57887,0.X/Dockerfile,0.X/Dockerfile,"# By default you'll get an insecure single-node development server that stores
# everything in RAM, exposes a web UI and HTTP endpoints, and bootstraps itself.
# Don't use this configuration for production.
",2018/12/20 01:38,2018/12/20 01:38,2016/01/30 04:18,,1,1054 days 21:20:00.000000000,0:00:00
596,"hashicorp
docker-consul",https://github.com/hashicorp/docker-consul,6c95f9d0c010291289d26a7a4ffe52bcba3f1685,0.6/Dockerfile,0.X/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM, exposes a web UI, and bootstraps itself. Don't use this configuration
# for production.
",2016/02/09 16:43,2018/12/20 01:38,2016/01/30 04:18,,1,10 days 12:25:00.000000000,"1044 days, 8:55:00"
597,"docker-library
gcc",https://github.com/docker-library/gcc,aab71caeb1be048b44fd140a102cb7f17f995276,7/Dockerfile,7/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2019/11/15 00:26,2017/11/29 12:25,2017/05/03 01:38,2020/05/08 13:19,1,925 days 22:48:00.000000000,"-716 days, 11:59:00"
598,"docker-library
gcc",https://github.com/docker-library/gcc,3ccb804e330766ba05abe7fe990512f152a08254,7/Dockerfile,7/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/08/15 11:25,2019/11/15 00:26,2017/05/03 01:38,2020/05/08 13:19,1,104 days 09:47:00.000000000,"821 days, 13:01:00"
599,"docker-library
gcc",https://github.com/docker-library/gcc,3ccb804e330766ba05abe7fe990512f152a08254,7/Dockerfile,7/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/08/15 11:25,2019/11/15 00:26,2017/05/03 01:38,2020/05/08 13:19,1,104 days 09:47:00.000000000,"821 days, 13:01:00"
600,"docker-library
gcc",https://github.com/docker-library/gcc,c1fe37de30fbe69e83f042b4a9426b11cb624bca,6/Dockerfile,6/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2017/07/06 05:25,2018/11/15 05:31,2016/09/17 05:48,2020/05/07 22:15,1,291 days 23:37:00.000000000,"497 days, 0:06:00"
601,"docker-library
gcc",https://github.com/docker-library/gcc,c1fe37de30fbe69e83f042b4a9426b11cb624bca,6/Dockerfile,6/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/07/06 05:25,2017/07/06 05:25,2016/09/17 05:48,2020/05/07 22:15,1,291 days 23:37:00.000000000,0:00:00
602,"docker-library
gcc",https://github.com/docker-library/gcc,c1fe37de30fbe69e83f042b4a9426b11cb624bca,6/Dockerfile,6/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/07/06 05:25,2017/07/06 05:25,2016/09/17 05:48,2020/05/07 22:15,1,291 days 23:37:00.000000000,0:00:00
603,"docker-library
gcc",https://github.com/docker-library/gcc,385480d4ecab90262f2a69156bac15676fa65be4,Dockerfile.template,Dockerfile.template,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2017/07/06 02:54,2018/11/15 05:31,2017/06/16 01:40,,1,20 days 01:14:00.000000000,"497 days, 2:37:00"
604,"docker-library
gcc",https://github.com/docker-library/gcc,385480d4ecab90262f2a69156bac15676fa65be4,Dockerfile.template,Dockerfile.template,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/07/06 02:54,2017/07/06 02:54,2017/06/16 01:40,,1,20 days 01:14:00.000000000,0:00:00
605,"docker-library
gcc",https://github.com/docker-library/gcc,385480d4ecab90262f2a69156bac15676fa65be4,Dockerfile.template,Dockerfile.template,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/07/06 02:54,2017/07/06 02:54,2017/06/16 01:40,,1,20 days 01:14:00.000000000,0:00:00
606,"docker-library
gcc",https://github.com/docker-library/gcc,b6ad93a00a6d2fea84b578506712247217294200,5/Dockerfile,5/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2017/10/18 08:20,2018/11/15 05:31,2015/12/15 08:34,2017/09/30 03:05,1,672 days 23:46:00.000000000,"392 days, 21:11:00"
607,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,5/Dockerfile,5/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/10/18 08:20,2015/12/15 08:34,2017/09/30 03:05,1,549 days 18:11:00.000000000,"123 days, 5:35:00"
608,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,5/Dockerfile,5/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/10/18 08:20,2015/12/15 08:34,2017/09/30 03:05,1,549 days 18:11:00.000000000,"123 days, 5:35:00"
609,"docker-library
gcc",https://github.com/docker-library/gcc,f3db0f591ce42dd2ac3aec240ca47c87762bc385,8/Dockerfile,8/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2020/03/04 18:25,2018/11/15 05:31,2018/05/03 04:26,,1,671 days 13:59:00.000000000,"-476 days, 11:06:00"
610,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,4.9/Dockerfile,4.9/Dockerfile,"# TODO get enough builders to test and verify arm32v5 O:)
",2017/06/17 02:45,2017/09/29 02:35,2014/08/26 07:40,2016/07/08 06:03,1,1025 days 19:05:00.000000000,"103 days, 23:50:00"
611,"docker-library
gcc",https://github.com/docker-library/gcc,3b33871fe9558262cb5ed6253d358f76710e9ccb,4.9/Dockerfile,4.9/Dockerfile,"# TODO make[2]: *** No rule to make target '/usr/src/gcc/gcc/sync-builtinsndef', needed by 'tree-ssa-loop-prefetch.o'.  Stop.
# (which the builds takes _forever_ to get to)
",2017/06/17 02:45,2017/09/29 02:35,2014/08/26 07:40,2016/07/08 06:03,1,1025 days 19:05:00.000000000,"103 days, 23:50:00"
612,"docker-library
gcc",https://github.com/docker-library/gcc,1539ed62d45cbd1e2a4d0c3e94c07ca2acdb914a,4.9/Dockerfile,4.9/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2017/09/29 02:35,2017/09/29 02:35,2014/08/26 07:40,2016/07/08 06:03,1,1129 days 18:55:00.000000000,0:00:00
613,"docker-library
gcc",https://github.com/docker-library/gcc,067197794df278e6be14a76a3e0ec80e9ad86941,9/Dockerfile,9/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2019/05/04 07:11,2019/05/04 07:11,2019/05/04 07:11,,1,0 days 00:00:00.000000000,0:00:00
614,"docker-library
gcc",https://github.com/docker-library/gcc,36c1ff6d7b44428b35fa8b61787c76b225d8184a,10/Dockerfile,10/Dockerfile,"# TODO for some reason, libgo + i386 fails on https://github.com/gcc-mirror/gcc/blob/gcc-7_1_0-release/libgo/runtime/proc.c#L154
# ""error unknown case for SETCONTEXT_CLOBBERS_TLS""
",2020/07/23 17:25,,2020/05/08 05:24,,1,76 days 12:01:00.000000000,削除されていません
615,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,f9ea39bf92b32b3a66e204c089e5a014f89f6b30,docker-master/Dockerfile,docker-master/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2019/05/29 05:13,2019/05/29 05:13,2015/08/28 07:47,,1,1369 days 21:26:00.000000000,0:00:00
616,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,e8ff394e8f8040bb55d0d34f1df6a2ebac60be38,qemu/Dockerfile,qemu/Dockerfile,"# TODO verify signature
",2018/01/04 05:44,2018/01/04 05:44,2014/09/20 16:00,2019/01/18 07:41,1,1201 days 13:44:00.000000000,0:00:00
617,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,af013103ede09d56f60d0c4287402f767ab4dc12,containerd/Dockerfile,containerd/Dockerfile,"# TODO .asc / .sha256sum
",2020/08/05 06:09,2020/05/21 08:06,2020/03/27 08:17,,1,130 days 21:52:00.000000000,"-76 days, 1:57:00"
618,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,45d8e4ab5b00616f531c93c0bc835a60357a6e8a,docker/master/dind/Dockerfile,docker-master/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/03/11 16:12,2015/11/19 02:09,2015/08/28 07:47,,1,561 days 08:25:00.000000000,"-479 days, 9:57:00"
619,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,870730a2f53f72bccc4b16a98907ef8070f888e3,docker/master/dind/Dockerfile,docker-master/dind/Dockerfile,"# TODO aufs-tools

",2017/02/14 06:32,2015/11/19 02:09,2015/08/28 07:47,,1,535 days 22:45:00.000000000,"-454 days, 19:37:00"
620,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,019e3dafeac4116b4547194b6452de9de76610dd,docker-master/dind/Dockerfile,docker-master/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/30 02:40,2018/05/30 02:40,2015/08/28 07:47,,1,1005 days 18:53:00.000000000,0:00:00
621,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,2e37f527a42e05e8b9e62a84ec34355edae69e47,ruby-passenger/Dockerfile,ruby-passenger/Dockerfile,"# TODO find a clean way to do this here in such a way that gems like rmagick can install cleanly without first installing libmagickcore-dev
#ONBUILD ADD Gemfile /apps/rails/Gemfile
#ONBUILD ADD Gemfile.lock /apps/rails/Gemfile.lock
#ONBUILD RUN cd /apps/rails && bundle install --deployment
#ONBUILD ADD . /apps/rails
#ONBUILD RUN chown -R www-data:www-data /apps/rails
",2014/03/29 08:19,2019/09/14 06:33,2014/03/29 08:19,2019/09/14 06:33,1,0 days 00:00:00.000000000,"1994 days, 22:14:00"
622,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,6f3b2ee0f98d1abde53cf49b7bb47bba0e466cfd,ruby-unicorn/Dockerfile,ruby-unicorn/Dockerfile,"# TODO find a clean way to do this here in such a way that gems like rmagick can install cleanly without first installing libmagickcore-dev
#ONBUILD ADD Gemfile /apps/rails/Gemfile
#ONBUILD ADD Gemfile.lock /apps/rails/Gemfile.lock
#ONBUILD RUN bundle install --deployment
#ONBUILD ADD . /apps/rails
",2014/03/29 08:29,2014/04/03 02:56,2014/03/29 08:29,2019/09/14 06:33,1,0 days 00:00:00.000000000,"4 days, 18:27:00"
623,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,225bfed7e35bf9123f0e6c48fcb2df7964ee37bf,docker/experimental/dind/Dockerfile,docker/experimental/dind/Dockerfile,"# TODO aufs-tools

",2015/11/19 02:09,2015/11/19 02:09,2015/08/28 07:47,2016/11/13 01:12,1,82 days 18:22:00.000000000,0:00:00
624,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,baf2dfc13afcee35d9b2e8e5779b79947ba6bf31,nylas/sync-engine/Dockerfile,nylas/sync-engine/Dockerfile," # TODO inbox-api or inbox-start
",2017/12/28 06:49,2017/12/28 06:49,2016/01/29 08:18,2016/02/02 02:32,1,698 days 22:31:00.000000000,0:00:00
625,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,e3872662187caddf9bf72536532a2e197df12b51,makemkv/Dockerfile,makemkv/Dockerfile,"# TODO find some way to include ccextractor (currently buster-only)

# FPL_MainFeature detection only seemed to work with OpenJDK 9 (8 was insufficient)
",2019/06/21 23:30,2019/03/27 14:51,2017/04/02 15:53,,1,810 days 07:37:00.000000000,"-87 days, 15:21:00"
626,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,41fba5a095a778acf05150e538b08246b9354f8f,zoom/Dockerfile,zoom/Dockerfile,"# TODO copy/steal ""browser.sh"" stuff from slack

",2020/09/10 02:13,,2020/09/10 02:13,,1,0 days 00:00:00.000000000,削除されていません
627,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,87b99df183f09b842b49ea7009ba7b6e2c1894f2,xen-orchestra/Dockerfile,xen-orchestra/Dockerfile,"#RUN cd /xo/xo-server/public/http && for e in ../../../xo-web/public/*; do ln -s ""$e""; done

# TODO use links to get a redis server/database instead (since that's where configuration actually goes)
",2014/02/08 13:56,2014/01/05 05:59,2013/11/02 14:34,,1,97 days 23:22:00.000000000,"-35 days, 16:03:00"
628,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,bf73c530da22ad7985bbf9ade5d23be68a903fbb,xen-orchestra/Dockerfile,xen-orchestra/Dockerfile,"# TODO see note above about redis
",2014/01/05 05:59,2014/01/05 05:59,2013/11/02 14:34,,1,63 days 15:25:00.000000000,0:00:00
629,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,bf73c530da22ad7985bbf9ade5d23be68a903fbb,xen-orchestra/Dockerfile,xen-orchestra/Dockerfile,"# TODO use links to get a redis server/database instead (since that's where configuration actually goes)
",2014/01/05 05:59,2014/01/05 05:59,2013/11/02 14:34,,1,63 days 15:25:00.000000000,0:00:00
630,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,800f9dedfdae89fa514be56c37adeb1376132c5d,docker-tianon/Dockerfile,docker-tianon/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
#ENV DIND_COMMIT 130b0bc6032cc675d064e1cc62626cacc9c07a57

#RUN set -eux; \
#	wget -O /usr/local/bin/dind ""https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind""; \
#	chmod +x /usr/local/bin/dind

",2020/07/22 04:07,2020/07/22 04:07,2017/09/19 02:59,,1,1037 days 01:08:00.000000000,0:00:00
631,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,5ec89c6f5ac25040733739f34bab266c1618f83b,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.9 (if it makes it out of edge for 3.9)

",2018/08/13 06:26,,2016/09/08 06:32,,1,703 days 23:54:00.000000000,削除されていません
632,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,ddf64adf1a6c26d5adf9c8fa1c895d01da9834ca,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.12 (if it makes it out of edge)
# https://pkgs.alpinelinux.org/packages?name=nbtscan&branch=edge&arch=x86_64

",2020/02/15 10:49,2019/04/24 05:58,2016/09/08 06:32,,1,1255 days 04:17:00.000000000,"-298 days, 19:09:00"
633,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,4bc9e1a50ee138a12cef4333288ef4d8a1c16344,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.10 (if it makes it out of edge for 3.10)

",2019/04/24 05:58,2019/10/20 05:37,2016/09/08 06:32,,1,957 days 23:26:00.000000000,"178 days, 23:39:00"
634,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,bfed2767f3e52dde34a62f03294d71346859a7b5,network-toolbox/alpine/Dockerfile,network-toolbox/alpine/Dockerfile,"# TODO add ""nbtscan"" when we get to Alpine 3.11 (if it makes it out of edge)
# https://pkgs.alpinelinux.org/packages?name=nbtscan&branch=edge&arch=x86_64

",2019/10/20 05:37,2018/07/04 10:52,2016/09/08 06:32,,1,1136 days 23:05:00.000000000,"-473 days, 5:15:00"
635,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,5b58c47c7bda28d60a4391360a51eb4d7236b408,familysearch-indexing/Dockerfile,familysearch-indexing/Dockerfile,"# TODO add a very lightweight browser for opening help and/or registration
",2017/06/21 23:55,2017/06/21 23:55,2014/02/23 15:47,2019/08/02 14:47,1,1214 days 08:08:00.000000000,0:00:00
636,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,16243eae94d9f611d158fb2dc03a0393630c47cc,speedtest/Dockerfile,speedtest/Dockerfile,"# TODO verify that ookla's ""armhf"" really is armv6
",2020/04/30 08:18,2020/04/30 08:18,2014/07/12 10:24,,1,2118 days 21:54:00.000000000,0:00:00
637,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,16243eae94d9f611d158fb2dc03a0393630c47cc,speedtest/Dockerfile,speedtest/Dockerfile,"# TODO figure out what ookla means by their bare ""arm"" arch
",2020/04/30 08:18,2020/04/30 08:18,2014/07/12 10:24,,1,2118 days 21:54:00.000000000,0:00:00
638,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,1d2040c390a50eca1338d03c4db5ec2db56ef3e2,grafana/Dockerfile,grafana/Dockerfile,"# TODO verify sha256 values! (add "".sha256"" to the end of this URL)
",2018/11/27 11:59,,2017/01/05 01:50,,1,691 days 10:09:00.000000000,削除されていません
639,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,f0d65439bd223b132372d38065596db6b06e0eb3,caff/Dockerfile,caff/Dockerfile,"# TODO move this down when COPY adheres to USER (and remove chown)
",2014/09/05 00:48,,2014/08/27 02:29,,1,8 days 22:19:00.000000000,削除されていません
640,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c78f832ae94573371d899944c706a08b92de4924,sbin-init/ubuntu/upstart/14.10/Dockerfile,sbin-init/ubuntu/upstart/14.10/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/11/22 17:17,2014/11/22 17:17,2014/01/12 00:56,2019/06/15 05:03,1,314 days 16:21:00.000000000,0:00:00
641,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c4f86111caa8c8eab8e1b3a58cdebcf86807169c,sbin-init/ubuntu/upstart/13.10/Dockerfile,sbin-init/ubuntu/upstart/13.10/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/06/06 16:45,2014/09/25 13:05,2014/01/12 00:56,2014/09/25 13:05,1,145 days 15:49:00.000000000,"110 days, 20:20:00"
642,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c4f86111caa8c8eab8e1b3a58cdebcf86807169c,sbin-init/ubuntu/upstart/13.04/Dockerfile,sbin-init/ubuntu/upstart/13.04/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/06/06 16:45,2014/09/25 13:05,2014/01/12 00:56,2014/09/25 13:05,1,145 days 15:49:00.000000000,"110 days, 20:20:00"
643,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c78f832ae94573371d899944c706a08b92de4924,sbin-init/ubuntu/upstart/12.04/Dockerfile,sbin-init/ubuntu/upstart/12.04/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/11/22 17:17,2014/11/22 17:17,2014/01/12 00:56,2019/06/15 05:03,1,314 days 16:21:00.000000000,0:00:00
644,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c78f832ae94573371d899944c706a08b92de4924,sbin-init/ubuntu/upstart/14.04/Dockerfile,sbin-init/ubuntu/upstart/14.04/Dockerfile,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/11/22 17:17,2014/11/22 17:17,2014/05/13 06:16,2019/06/15 05:03,1,193 days 11:01:00.000000000,0:00:00
645,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,c78f832ae94573371d899944c706a08b92de4924,sbin-init/ubuntu/upstart/Dockerfile.template,sbin-init/ubuntu/upstart/Dockerfile.template,"# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
",2014/11/22 17:17,2014/11/22 17:17,2014/02/12 08:56,2019/06/15 05:03,1,283 days 08:21:00.000000000,0:00:00
646,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,848b89e8272c2689af1499cc7642d3f3c9a31337,toybox/Dockerfile,toybox/Dockerfile,"# TODO set ""TARGET"" appropriately based on ""apk --print-arch"" to avoid ""uname -m"" detection
",2020/09/04 06:28,,2020/09/04 06:23,,1,0 days 00:05:00.000000000,削除されていません
647,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,217170cf047605cd6919b5382a8af6476431d607,mojo/Dockerfile,mojo/Dockerfile,"# TODO pin a version
",2019/04/26 13:41,,2014/02/23 16:19,,1,1887 days 21:22:00.000000000,削除されていません
648,"tianon
dockerfiles",https://github.com/tianon/dockerfiles,217170cf047605cd6919b5382a8af6476431d607,mojo/Dockerfile,mojo/Dockerfile,"# TODO pin versions
",2019/04/26 13:41,,2014/02/23 16:19,,1,1887 days 21:22:00.000000000,削除されていません
649,"osrf
docker_images",https://github.com/osrf/docker_images,835a06baca14649c7e1d46fb27deb4231990d2a7,ros2/nightly/nightly/Dockerfile,ros2/nightly/nightly/Dockerfile,"# FIXME This is a workaround for pytest not found causing builds to fail
# Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
",2019/12/23 01:49,2019/09/04 07:15,2018/10/20 13:18,,1,428 days 12:31:00.000000000,"-110 days, 5:26:00"
650,"osrf
docker_images",https://github.com/osrf/docker_images,9210d0d9992df92f34b6b0450f803521b5483789,ros2/nightly/nightly/Dockerfile,ros2/nightly/nightly/Dockerfile,"# FIXME Remove this once rosdep detects ROS 2 packages https://github.com/ros-infrastructure/rosdep/issues/660
# ignore installed rosdep keys
",2019/03/22 09:35,2019/09/04 07:15,2018/10/20 13:18,,1,152 days 20:17:00.000000000,"165 days, 21:40:00"
651,"osrf
docker_images",https://github.com/osrf/docker_images,b075c7dbe56055d862f331f19e1e74ba653e181a,ros2/nightly/nightly/Dockerfile,ros2/nightly/nightly/Dockerfile,"# FIXME Remove this once ament_export_interfaces respects COLCON_CURRENT_PREFIX https://github.com/ament/ament_cmake/issues/173
#Workaround hard coded paths in nightly tarball setup scripts
",2020/01/31 09:42,2019/12/23 01:49,2018/10/20 13:18,,1,467 days 20:24:00.000000000,"-40 days, 16:07:00"
652,"osrf
docker_images",https://github.com/osrf/docker_images,1eb48f1275f0a9153d0b0ed088bed338f1a79ead,ros2/source/devel/Dockerfile,ros2/source/devel/Dockerfile,"# FIXME This is a workaround for pytest not found causing builds to fail
# Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
",2019/09/04 07:15,2019/09/04 07:15,2019/03/22 08:56,,1,165 days 22:19:00.000000000,0:00:00
653,"osrf
docker_images",https://github.com/osrf/docker_images,cd8fa087f87323a4768a1cab6878bea25d125718,sros/kinetic/Dockerfile,sros/kinetic/Dockerfile,"# HACK, replacing shell with bash for later docker build commands
",2016/08/12 10:08,2016/08/12 10:08,2016/08/12 02:31,,1,0 days 07:37:00.000000000,0:00:00
654,"osrf
docker_images",https://github.com/osrf/docker_images,802c63f18487abd4e9b0fc95c095b2bf9f0835a0,sros/kinetic/Dockerfile,sros/kinetic/Dockerfile,"# FIXME renaming manifest.xml is a workaround for rosdep misbehaving when both
# manifest.xml and package.xml are present
# install dependencies
",2019/12/26 23:57,,2016/08/12 02:31,,1,1231 days 21:26:00.000000000,削除されていません
655,"Nexenta
nexentastor-csi-driver",https://github.com/Nexenta/nexentastor-csi-driver,b478a76cdfe3c01623a7c671db01a260e3cb599b,Dockerfile.csi-sanity,Dockerfile.csi-sanity,"# other csi-sanity options: --ginkgo.v -ginkgo.noColor
#TODO remove ""--ginkgo.skip"" option after fixing volume paginatin by token:
",2020/02/13 02:48,2020/02/13 02:48,2018/11/28 11:14,,1,441 days 15:34:00.000000000,0:00:00
656,"Nexenta
nexentastor-csi-driver",https://github.com/Nexenta/nexentastor-csi-driver,b99c6dfd96570909122af1351ed0b1a472176493,Dockerfile.csi-sanity,Dockerfile.csi-sanity,"# other csi-sanity options: --ginkgo.v -ginkgo.noColor
#TODO remove ""--ginkgo.skip"" option after switching from v2.0.1 to the next release,
# after releasing this https://github.com/kubernetes-csi/csi-test/pull/205/files
",2019/07/19 07:50,2020/02/13 02:48,2018/11/28 11:14,,1,232 days 20:36:00.000000000,"208 days, 18:58:00"
657,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,4747ccb2c2f6d1a75a7590094be016f1a4ce3ddb,alpine/Dockerfile,2.0/alpine/Dockerfile,"# TODO: alter filename after v2 release (version will be taken out of name)
",2020/03/25 09:10,2020/03/25 09:10,2019/10/19 05:34,2020/06/28 02:37,1,158 days 03:36:00.000000000,0:00:00
658,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,dbdd5294d5172438253ed6b5793b26e26ef30eb5,alpine/Dockerfile,2.0/alpine/Dockerfile,"# TODO: alter filename after v2 relese (version will be taken out of name)
",2020/03/11 10:24,2020/03/25 09:10,2019/10/19 05:34,2020/06/28 02:37,1,144 days 04:50:00.000000000,"13 days, 22:46:00"
659,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,e57e714a75e86e3ba872b0d3885056155f25a237,Dockerfile.tmpl,Dockerfile.tmpl,"# TODO: alter filename after v2 release (version will be taken out of name)
",2020/03/15 20:54,2020/03/15 20:54,2020/02/05 10:08,,1,39 days 10:46:00.000000000,0:00:00
660,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,e57e714a75e86e3ba872b0d3885056155f25a237,Dockerfile.tmpl,Dockerfile.tmpl,/** TODO: support other architectures here **/,2020/03/15 20:54,2020/03/15 20:54,2020/02/05 10:08,,1,39 days 10:46:00.000000000,0:00:00
661,"caddyserver
caddy-docker",https://github.com/caddyserver/caddy-docker,dbdd5294d5172438253ed6b5793b26e26ef30eb5,Dockerfile.tmpl,Dockerfile.tmpl,"# TODO: alter filename after v2 relese (version will be taken out of name)
",2020/03/11 10:24,2020/03/15 21:37,2020/02/05 10:08,,1,35 days 00:16:00.000000000,"4 days, 11:13:00"
662,"docker
docker",https://github.com/docker/docker,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/08/01 22:26,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,634 days 22:48:00.000000000,"-559 days, 8:59:00"
663,"docker
docker",https://github.com/docker/docker,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/03/24 00:28,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,504 days 00:50:00.000000000,"-428 days, 6:57:00"
664,"docker
docker",https://github.com/docker/docker,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.armhf,Dockerfile.armhf,"# Options for hack/validate/gometalinter
",2018/02/27 15:28,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,844 days 15:50:00.000000000,"-769 days, 15:57:00"
665,"docker
docker",https://github.com/docker/docker,dbec45fa7a97ff62be279d67f52d734da3fae55f,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/10/05 08:22,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,334 days 08:44:00.000000000,"-259 days, 23:03:00"
666,"docker
docker",https://github.com/docker/docker,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/08 06:42,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,307 days 07:04:00.000000000,"-231 days, 0:43:00"
667,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/11/05 23:38,2018/03/09 15:17,1,348 days 08:52:00.000000000,20:28:00
668,"docker
docker",https://github.com/docker/docker,68bda672dc0fb53c5247047104e09c7f8346e24e,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/03/11 22:01,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,126 days 22:23:00.000000000,"439 days, 12:10:00"
669,"docker
docker",https://github.com/docker/docker,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.3
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/21 07:25,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"490 days, 2:46:00"
670,"docker
docker",https://github.com/docker/docker,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

#ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/21 07:25,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"490 days, 2:46:00"
671,"docker
docker",https://github.com/docker/docker,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# Grab Go's lint tool
#ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
# TODO update this sha when we upgrade to Go 1.5+
",2016/01/21 07:25,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"490 days, 2:46:00"
672,"docker
docker",https://github.com/docker/docker,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/21 07:25,2017/05/25 10:11,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,"490 days, 2:46:00"
673,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.armhf,Dockerfile.armhf,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,323 days 01:42:00.000000000,"-247 days, 6:05:00"
674,"docker
docker",https://github.com/docker/docker,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
# TODO Update to 1.5.4 once available, or build from source, as these builds
# are marked ""end of life"", see http://dave.cheney.net/unofficial-arm-tarballs
",2016/04/26 02:21,2016/10/20 04:58,2015/11/05 23:38,2018/03/09 15:17,1,172 days 02:43:00.000000000,"177 days, 2:37:00"
675,"docker
docker",https://github.com/docker/docker,b6e2703230c9262b14df22d4a865f140a897740d,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/01/27 09:14,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,448 days 09:36:00.000000000,"-373 days, 22:11:00"
676,"docker
docker",https://github.com/docker/docker,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,364 days 23:25:00.000000000,"-289 days, 8:22:00"
677,"docker
docker",https://github.com/docker/docker,11a51649cf1fe677fd54e277c2530020fcfbe84b,Dockerfile.armhf,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/21 07:25,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,76 days 07:47:00.000000000,0:00:00
678,"docker
docker",https://github.com/docker/docker,ae7d7db985ea11a5613261e2450cd6fbc3ad108f,Dockerfile.armhf,Dockerfile.armhf,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# Install Go
#ENV GO_VERSION 1.5.2
# TODO update GO_TOOLS_COMMIT below when this updates to 1.5+
",2016/01/14 09:46,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,69 days 10:08:00.000000000,"6 days, 21:39:00"
679,"docker
docker",https://github.com/docker/docker,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,349 days 05:20:00.000000000,"-273 days, 2:27:00"
680,"docker
docker",https://github.com/docker/docker,dbec45fa7a97ff62be279d67f52d734da3fae55f,Dockerfile.armhf,Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/10/05 08:22,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,334 days 08:44:00.000000000,"-259 days, 23:03:00"
681,"docker
docker",https://github.com/docker/docker,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.armhf,Dockerfile.armhf,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/27 15:28,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,844 days 15:50:00.000000000,"-769 days, 15:57:00"
682,"docker
docker",https://github.com/docker/docker,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.armhf,Dockerfile.armhf,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,75 days 21:15:00.000000000,10:32:00
683,"docker
docker",https://github.com/docker/docker,43ee5643261f9b8741ab23a1749b3d55e13171c5,Dockerfile.arm,Dockerfile.armhf,"# This file describes the standard way to build Docker on ARM, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.arm .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/12/17 07:01,2016/01/21 07:25,2015/11/05 23:38,2018/03/09 15:17,1,41 days 07:23:00.000000000,"35 days, 0:24:00"
684,"docker
docker",https://github.com/docker/docker,7ffae3d51a452a63c49f8544953a8b0f9781a5e0,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/12/05 07:45,2015/10/29 01:56,2013/06/22 11:42,,1,1626 days 20:03:00.000000000,"-769 days, 18:11:00"
685,"docker
docker",https://github.com/docker/docker,7ffae3d51a452a63c49f8544953a8b0f9781a5e0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/12/05 07:45,2015/10/29 01:56,2013/06/22 11:42,,1,1626 days 20:03:00.000000000,"-769 days, 18:11:00"
686,"docker
docker",https://github.com/docker/docker,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# Options for hack/validate/gometalinter
",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
687,"docker
docker",https://github.com/docker/docker,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
688,"docker
docker",https://github.com/docker/docker,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# FIXME(vdemeester) this is kept for other script depending on it to not fail right away
# Remove this once the other scripts uses something else to detect the version
",2018/03/23 15:01,2015/10/29 01:56,2013/06/22 11:42,,1,1735 days 03:19:00.000000000,"-877 days, 10:55:00"
689,"docker
docker",https://github.com/docker/docker,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
690,"docker
docker",https://github.com/docker/docker,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
691,"docker
docker",https://github.com/docker/docker,ec87479b7e2bf6f1b5bcc657a377c6e6a847574f,Dockerfile,Dockerfile,"# TODO: This is for the docker-py tests, which shouldn't really be needed for
# this image, but currently CI is expecting to run this image. This should be
# split out into a separate image, including all the `python-*` deps installed
# above.
",2018/10/15 16:52,2015/10/29 01:56,2013/06/22 11:42,,1,1941 days 05:10:00.000000000,"-1083 days, 9:04:00"
692,"docker
docker",https://github.com/docker/docker,f5af9b9738892b5988f987ce5fbce6e31a10e768,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/21 06:26,2015/10/29 01:56,2013/06/22 11:42,,1,1277 days 18:44:00.000000000,"-420 days, 19:30:00"
693,"docker
docker",https://github.com/docker/docker,d8fef66b03c1ea8715470690efbd950033f7f628,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/05/12 23:52,2015/10/29 01:56,2013/06/22 11:42,,1,1055 days 12:10:00.000000000,"-197 days, 2:04:00"
694,"docker
docker",https://github.com/docker/docker,1cfcce5e210ad7a0296fe341b3dda40a0af06c12,Dockerfile,Dockerfile,"# Install go-swagger for validating swagger.yaml
# This is https://github.com/kolyshkin/go-swagger/tree/golang-1.13-fix
# TODO: move to under moby/ or fix upstream go-swagger to work for us.
",2019/10/06 05:46,2015/10/29 01:56,2013/06/22 11:42,,1,2296 days 18:04:00.000000000,"-1439 days, 20:10:00"
695,"docker
docker",https://github.com/docker/docker,7260adfff98ff46230ede3c2b3fbad1b607ebf5c,Dockerfile,Dockerfile,"# Switch to use iptables instead of nftables (to match the CI hosts)
# TODO use some kind of runtime auto-detection instead if/when nftables is supported (https://github.com/moby/moby/issues/26824)
",2020/01/18 04:55,2015/10/29 01:56,2013/06/22 11:42,,1,2400 days 17:13:00.000000000,"-1543 days, 21:01:00"
696,"docker
docker",https://github.com/docker/docker,7260adfff98ff46230ede3c2b3fbad1b607ebf5c,Dockerfile,Dockerfile,"# TODO: This is here because hack/make.sh binary copies these extras binaries
# from $PATH into the bundles dir.
# It would be nice to handle this in a different way.
",2020/01/18 04:55,2015/10/29 01:56,2013/06/22 11:42,,1,2400 days 17:13:00.000000000,"-1543 days, 21:01:00"
697,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2015/10/29 01:56,2013/06/22 11:42,,1,1214 days 20:48:00.000000000,"-357 days, 17:26:00"
698,"docker
docker",https://github.com/docker/docker,fd35494a251a497c359f706f61f33e689e2af678,Dockerfile,Dockerfile,"# TODO: when issue #35963 fixed, we can upgrade the busybox to multi-arch
",2018/01/17 03:49,2015/03/10 06:44,2013/06/22 11:42,,1,1669 days 16:07:00.000000000,"-1044 days, 2:55:00"
699,"docker
docker",https://github.com/docker/docker,8db141049f5323d754584f265b267e52ee5d9e17,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/10/29 01:56,2015/10/29 01:56,2013/06/22 11:42,,1,858 days 14:14:00.000000000,0:00:00
700,"docker
docker",https://github.com/docker/docker,8db141049f5323d754584f265b267e52ee5d9e17,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2015/10/29 01:56,2015/10/29 01:56,2013/06/22 11:42,,1,858 days 14:14:00.000000000,0:00:00
701,"docker
docker",https://github.com/docker/docker,645f8a32df3b5b22e5e194664a9f0733709714c9,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/03/10 06:44,2015/03/10 06:44,2013/06/22 11:42,,1,625 days 19:02:00.000000000,0:00:00
702,"docker
docker",https://github.com/docker/docker,645f8a32df3b5b22e5e194664a9f0733709714c9,Dockerfile,Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2015/03/10 06:44,2015/03/10 06:44,2013/06/22 11:42,,1,625 days 19:02:00.000000000,0:00:00
703,"docker
docker",https://github.com/docker/docker,645f8a32df3b5b22e5e194664a9f0733709714c9,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install man page generator
",2015/03/10 06:44,2015/03/10 06:44,2013/06/22 11:42,,1,625 days 19:02:00.000000000,0:00:00
704,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile,Dockerfile,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2015/03/10 06:44,2013/06/22 11:42,,1,1189 days 13:38:00.000000000,"-564 days, 5:24:00"
705,"docker
docker",https://github.com/docker/docker,d245a8a706558c4a66498cb8d1a1d8fe38dd67ee,Dockerfile,Dockerfile,"# TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above
#	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
",2015/01/31 04:45,2015/10/29 01:56,2013/06/22 11:42,,1,587 days 17:03:00.000000000,"270 days, 21:11:00"
706,"docker
docker",https://github.com/docker/docker,803a756941f5e4b68429a3642d52585c8ea6dbaa,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Use make to build a development environment image and run it in a container.
# # This is slow the first time.
# make BIND_DIR=. shell
#
# The following commands are executed inside the running container.

# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/03/23 15:01,2015/03/10 06:44,2013/06/22 11:42,,1,1735 days 03:19:00.000000000,"-1110 days, 15:43:00"
707,"docker
docker",https://github.com/docker/docker,88c6675ed2d61dfb56434dd15391f01147abc5e6,Dockerfile,Dockerfile,"# !!! TEMPORARY HACK !!!
# Because of https://github.com/golang/go/issues/15286 we have to revert to Go 1.5.3 for windows/amd64 in master
# To change which version of Go to compile with, simply prepend PATH with /usr/local/go1.5.3/bin
# and set GOROOT to /usr/local/go1.5.3
",2016/04/26 02:21,2015/10/29 01:56,2013/06/22 11:42,,1,1038 days 14:39:00.000000000,"-181 days, 23:35:00"
708,"docker
docker",https://github.com/docker/docker,f5af9b9738892b5988f987ce5fbce6e31a10e768,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/21 06:26,2015/10/29 01:56,2013/06/22 11:42,,1,1277 days 18:44:00.000000000,"-420 days, 19:30:00"
709,"docker
docker",https://github.com/docker/docker,fa1e390cad4fd36683e9667795967c711a4867e3,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/05/02 05:51,2015/10/29 01:56,2013/06/22 11:42,,1,313 days 18:09:00.000000000,"544 days, 20:05:00"
710,"docker
docker",https://github.com/docker/docker,484a75f3549239d0489cb0ad518d79ed6783584a,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -i -t docker bash
#
# # Run the test suite:
# docker run -privileged docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2013/12/25 12:40,2015/10/29 01:56,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"672 days, 13:16:00"
711,"docker
docker",https://github.com/docker/docker,5c4abd107a4e50b9f2d29f98275a5b5b86c5f50f,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 02:15,2015/10/29 01:56,2013/06/22 11:42,,1,1230 days 14:33:00.000000000,"-373 days, 23:41:00"
712,"docker
docker",https://github.com/docker/docker,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2015/10/29 01:56,2013/06/22 11:42,,1,1215 days 17:16:00.000000000,"-358 days, 20:58:00"
713,"docker
docker",https://github.com/docker/docker,72df48d1ad417401a5ce0a7ee82a3c8ba33e091c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/14 10:17,2015/10/29 01:56,2013/06/22 11:42,,1,1482 days 22:35:00.000000000,"-625 days, 15:39:00"
714,"docker
docker",https://github.com/docker/docker,7edbdd9c5cdbdaa7c7fe810468b63eab2a565e71,Dockerfile,Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/30 02:58,2015/10/29 01:56,2013/06/22 11:42,,1,1195 days 15:16:00.000000000,"-338 days, 22:58:00"
715,"docker
docker",https://github.com/docker/docker,b529d1b0936b90ae14d584c73f7332919f8d76b7,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/17 03:51,2015/03/10 06:44,2013/06/22 11:42,,1,1700 days 16:09:00.000000000,"-1075 days, 2:53:00"
716,"docker
docker",https://github.com/docker/docker,5a076d7589d7a30cc0a1e45eff6674a2c8fa1cb0,Dockerfile,Dockerfile,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/04/18 04:18,2015/10/29 01:56,2013/06/22 11:42,,1,1395 days 16:36:00.000000000,"-538 days, 21:38:00"
717,"docker
docker",https://github.com/docker/docker,e37dcd726fe415193eaed18729251d293a018909,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/10 07:05,2015/03/10 06:44,2013/06/22 11:42,,1,79 days 19:23:00.000000000,"545 days, 23:39:00"
718,"docker
docker",https://github.com/docker/docker,06d0843a61843e6b16a56d518e21032a5652098b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/10/01 12:14,2015/10/29 01:56,2013/06/22 11:42,,1,101 days 00:32:00.000000000,"757 days, 13:42:00"
719,"docker
docker",https://github.com/docker/docker,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile,Dockerfile,"# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2015/10/29 01:56,2013/06/22 11:42,,1,942 days 09:11:00.000000000,"-84 days, 5:03:00"
720,"docker
docker",https://github.com/docker/docker,484a75f3549239d0489cb0ad518d79ed6783584a,Dockerfile,Dockerfile,"# TODO add linux/386 and linux/arm
",2013/12/25 12:40,2015/10/29 01:56,2013/06/22 11:42,,1,186 days 00:58:00.000000000,"672 days, 13:16:00"
721,"docker
docker",https://github.com/docker/docker,24dd838aeefcf4ea1f5a950a9fe0af075f00e2bf,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#

",2013/11/05 07:39,2015/03/10 06:44,2013/06/22 11:42,,1,135 days 19:57:00.000000000,"489 days, 23:05:00"
722,"docker
docker",https://github.com/docker/docker,47838051be695a4e74c80690ceef811dcd3ef62c,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# 

",2013/09/07 12:14,2015/03/10 06:44,2013/06/22 11:42,,1,77 days 00:32:00.000000000,"548 days, 18:30:00"
723,"docker
docker",https://github.com/docker/docker,fa806f26aff927eb0d98b41e79786ae98987da5b,Dockerfile,Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release/release.sh
# 

",2013/09/07 11:58,2015/03/10 06:44,2013/06/22 11:42,,1,77 days 00:16:00.000000000,"548 days, 18:46:00"
724,"docker
docker",https://github.com/docker/docker,7fc697eb0b62557b4abaa3b9fc0cd44b5c1652ac,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/12/12 14:47,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,696 days 15:22:00.000000000,"-678 days, 6:22:00"
725,"docker
docker",https://github.com/docker/docker,7fc697eb0b62557b4abaa3b9fc0cd44b5c1652ac,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/12/12 14:47,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,696 days 15:22:00.000000000,"-678 days, 6:22:00"
726,"docker
docker",https://github.com/docker/docker,7fc697eb0b62557b4abaa3b9fc0cd44b5c1652ac,Dockerfile.aarch64,Dockerfile.aarch64,"# Options for hack/validate/gometalinter
",2017/12/12 14:47,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,696 days 15:22:00.000000000,"-678 days, 6:22:00"
727,"docker
docker",https://github.com/docker/docker,cdf17e6943b15103b37fd57da7c2729a26ecb674,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/02/21 03:24,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,402 days 03:59:00.000000000,"294 days, 11:23:00"
728,"docker
docker",https://github.com/docker/docker,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/08 06:42,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,236 days 07:17:00.000000000,"460 days, 8:05:00"
729,"docker
docker",https://github.com/docker/docker,ad06e3fba368041e57c419894752621f840c9715,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/28 09:32,2016/10/20 04:58,2016/01/15 23:25,2018/03/09 15:17,1,286 days 10:07:00.000000000,"-9 days, 19:26:00"
730,"docker
docker",https://github.com/docker/docker,7d80d64ca5a185db8b498eecadfed215bdc3bffb,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/15 19:11,2017/05/25 10:11,2016/01/15 23:25,2018/03/09 15:17,1,30 days 19:46:00.000000000,"464 days, 15:00:00"
731,"docker
docker",https://github.com/docker/docker,7d80d64ca5a185db8b498eecadfed215bdc3bffb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/02/15 19:11,2017/05/25 10:11,2016/01/15 23:25,2018/03/09 15:17,1,30 days 19:46:00.000000000,"464 days, 15:00:00"
732,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.aarch64,Dockerfile.aarch64,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,252 days 01:55:00.000000000,"444 days, 13:27:00"
733,"docker
docker",https://github.com/docker/docker,cdf17e6943b15103b37fd57da7c2729a26ecb674,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/02/21 03:24,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,402 days 03:59:00.000000000,"-384 days, 17:45:00"
734,"docker
docker",https://github.com/docker/docker,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,293 days 23:38:00.000000000,"402 days, 15:44:00"
735,"docker
docker",https://github.com/docker/docker,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,278 days 05:33:00.000000000,"418 days, 9:49:00"
736,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,250 days 11:50:00.000000000,"446 days, 3:32:00"
737,"docker
docker",https://github.com/docker/docker,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.aarch64,Dockerfile.aarch64,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
#

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/27 15:28,2017/12/12 14:47,2016/01/15 23:25,2018/03/09 15:17,1,773 days 16:03:00.000000000,"-78 days, 23:19:00"
738,"docker
docker",https://github.com/docker/docker,d8d47f428d3a37dd758e3bd714024f6be4df3707,Dockerfile.aarch64,Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/02/03 21:09,2016/02/03 21:09,2016/01/15 23:25,2018/03/09 15:17,1,18 days 21:44:00.000000000,0:00:00
739,"docker
docker",https://github.com/docker/docker,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/08/01 22:26,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,888 days 18:53:00.000000000,"-559 days, 8:31:00"
740,"docker
docker",https://github.com/docker/docker,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/03/24 00:28,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,757 days 20:55:00.000000000,"-428 days, 6:29:00"
741,"docker
docker",https://github.com/docker/docker,150a519a0b267cccaacb4b8038787e2b512fe17e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

# ppc64le/golang is a debian:jessie based image with golang installed
",2016/11/30 01:06,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,643 days 21:33:00.000000000,"-314 days, 5:51:00"
742,"docker
docker",https://github.com/docker/docker,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/01/21 06:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,0:00:00
743,"docker
docker",https://github.com/docker/docker,1668894d0400f1b6446ce0db2d92ad14ea97014d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/08 06:42,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,561 days 03:09:00.000000000,"-231 days, 0:15:00"
744,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
745,"docker
docker",https://github.com/docker/docker,a83cedddc6d3e0fe1df352ec54245090df641ab8,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/05/24 07:19,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,454 days 03:46:00.000000000,"-62 days, 17:52:00"
746,"docker
docker",https://github.com/docker/docker,7f0ca59ec2696c960b7c7d2fa9e24f7ded694881,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.6
",2016/02/18 19:57,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,358 days 16:24:00.000000000,"34 days, 5:14:00"
747,"docker
docker",https://github.com/docker/docker,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/01/21 06:57,2016/03/24 01:11,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,"62 days, 18:14:00"
748,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"-247 days, 5:37:00"
749,"docker
docker",https://github.com/docker/docker,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/03/24 00:28,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,757 days 20:55:00.000000000,"-428 days, 6:29:00"
750,"docker
docker",https://github.com/docker/docker,150a519a0b267cccaacb4b8038787e2b512fe17e,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/30 01:06,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,643 days 21:33:00.000000000,"-314 days, 5:51:00"
751,"docker
docker",https://github.com/docker/docker,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,618 days 19:30:00.000000000,"-289 days, 7:54:00"
752,"docker
docker",https://github.com/docker/docker,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/21 06:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,0:00:00
753,"docker
docker",https://github.com/docker/docker,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

",2016/01/21 06:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,0:00:00
754,"docker
docker",https://github.com/docker/docker,a7e9bf6cb70117005dbcd4a987a7f30e3c605656,Dockerfile.ppc64le,Dockerfile.ppc64le,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# TODO install Go, using gccgo as GOROOT_BOOTSTRAP (Go 1.5+ supports ppc64le properly)
# possibly a ppc64le/golang image?

## BUILD GOLANG 1.5.3
",2016/03/29 16:35,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,398 days 13:02:00.000000000,"-69 days, 14:22:00"
755,"docker
docker",https://github.com/docker/docker,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,603 days 01:25:00.000000000,"-273 days, 1:59:00"
756,"docker
docker",https://github.com/docker/docker,6a014a0d33e1618642403b47ead8017626d07fe2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/27 01:03,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,579 days 21:30:00.000000000,"-250 days, 5:54:00"
757,"docker
docker",https://github.com/docker/docker,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.ppc64le,Dockerfile.ppc64le,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/27 15:28,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,1098 days 11:55:00.000000000,"-769 days, 15:29:00"
758,"docker
docker",https://github.com/docker/docker,7f0ca59ec2696c960b7c7d2fa9e24f7ded694881,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-5
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/02/18 19:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,358 days 16:24:00.000000000,"-29 days, 11:00:00"
759,"docker
docker",https://github.com/docker/docker,8fd2c8791d9c7cf0dd28b77565f0a04349a8c9a2,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-4
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 07:21,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,336 days 03:48:00.000000000,"-7 days, 23:36:00"
760,"docker
docker",https://github.com/docker/docker,589c8a879fea758007a36bd0f00d07aa1000d0cb,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_VERSION docker-v1.10-3
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/27 04:51,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,336 days 01:18:00.000000000,"-6 days, 2:06:00"
761,"docker
docker",https://github.com/docker/docker,3aa778d6a0744eda32931353144738ae07ae9a75,Dockerfile.ppc64le,Dockerfile.ppc64le,"# TODO update this when we upgrade to Go 1.5.1+
# Install notary server
#ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7
#RUN set -x \
#	&& export GOPATH=""$(mktemp -d)"" \
#	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
#	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_COMMIT"") \
#	&& GOPATH=""$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH"" \
#		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
#	&& rm -rf ""$GOPATH""

# Get the ""docker-py"" source so we can run their integration tests
",2016/01/21 06:57,2016/01/21 06:57,2015/02/25 03:33,2018/03/09 15:17,1,330 days 03:24:00.000000000,0:00:00
762,"docker
docker",https://github.com/docker/docker,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/08/01 22:26,2016/07/20 22:35,2015/02/25 03:33,2018/03/09 15:17,1,888 days 18:53:00.000000000,"-377 days, 0:09:00"
763,"docker
docker",https://github.com/docker/docker,f257f77c6c13ee851d3b899f8d51628a5dec92db,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/03/24 00:28,2016/07/20 22:35,2015/02/25 03:33,2018/03/09 15:17,1,757 days 20:55:00.000000000,"-247 days, 22:07:00"
764,"docker
docker",https://github.com/docker/docker,1bd6836a4249210090ed99c4e281374e9e16e138,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/12/15 18:40,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,659 days 15:07:00.000000000,0:00:00
765,"docker
docker",https://github.com/docker/docker,47f13d3b84fb0ee867c6b6c2a213d78b471754bf,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/09 02:47,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,561 days 23:14:00.000000000,"97 days, 15:53:00"
766,"docker
docker",https://github.com/docker/docker,3996975b0840033bda3919440d122d734a4bc66b,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/19 08:30,2016/10/20 04:58,2015/02/25 03:33,2018/03/09 15:17,1,602 days 04:57:00.000000000,20:28:00
767,"docker
docker",https://github.com/docker/docker,241898d136e41f80ab2dda95078f971a8248675d,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/04/19 01:49,2017/05/25 10:11,2015/02/25 03:33,2018/03/09 15:17,1,418 days 22:16:00.000000000,"401 days, 8:22:00"
768,"docker
docker",https://github.com/docker/docker,241898d136e41f80ab2dda95078f971a8248675d,Dockerfile.s390x,Dockerfile.s390x,"# This has been commented out and kept as reference because we don't support compiling with older Go anymore.
# ENV GOFMT_VERSION 1.3.3
# RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt

# TODO update this sha when we upgrade to Go 1.5+
",2016/04/19 01:49,2017/05/25 10:11,2015/02/25 03:33,2018/03/09 15:17,1,418 days 22:16:00.000000000,"401 days, 8:22:00"
769,"docker
docker",https://github.com/docker/docker,241898d136e41f80ab2dda95078f971a8248675d,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download man page generator
",2016/04/19 01:49,2017/05/25 10:11,2015/02/25 03:33,2018/03/09 15:17,1,418 days 22:16:00.000000000,"401 days, 8:22:00"
770,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.s390x,Dockerfile.s390x,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,576 days 21:47:00.000000000,"82 days, 17:20:00"
771,"docker
docker",https://github.com/docker/docker,1bd6836a4249210090ed99c4e281374e9e16e138,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/12/15 18:40,2016/07/20 22:35,2015/02/25 03:33,2018/03/09 15:17,1,659 days 15:07:00.000000000,"-148 days, 3:55:00"
772,"docker
docker",https://github.com/docker/docker,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, grimes, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,618 days 19:30:00.000000000,"40 days, 19:37:00"
773,"docker
docker",https://github.com/docker/docker,6b09413f6bf309ad8103a0161dc826fc36af2a56,Dockerfile.s390x,Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2016/01/30 04:42,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,339 days 01:09:00.000000000,"320 days, 13:58:00"
774,"docker
docker",https://github.com/docker/docker,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2016/09/09 02:47,2015/02/25 03:33,2018/03/09 15:17,1,603 days 01:25:00.000000000,"-42 days, 21:49:00"
775,"docker
docker",https://github.com/docker/docker,bd31b24336ff2da098e62a375552586434a012b0,Dockerfile.s390x,Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Download toml validator
",2016/09/22 11:15,2016/09/09 02:47,2015/02/25 03:33,2018/03/09 15:17,1,575 days 07:42:00.000000000,"-14 days, 15:32:00"
776,"docker
docker",https://github.com/docker/docker,3ae45c5f173d88ba621116f9e1b5611fe687e050,Dockerfile.s390x,Dockerfile.s390x,"# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)

# Install tomlv, vndr, runc, containerd, tini, proxy dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/02/27 15:28,2016/12/15 18:40,2015/02/25 03:33,2018/03/09 15:17,1,1098 days 11:55:00.000000000,"-439 days, 3:12:00"
777,"docker
docker",https://github.com/docker/docker,20262688df290f1196c5620112488f6445b7eb26,Dockerfile.e2e,Dockerfile.e2e,"# Install dockercli
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2019/04/19 23:13,2018/02/27 15:28,2017/09/08 23:43,,1,587 days 23:30:00.000000000,"-417 days, 16:15:00"
778,"docker
docker",https://github.com/docker/docker,66720189e04d50ef06c12d1ffbbfebf41caa2ae3,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration

# This represents the bare minimum required to build and test Docker.

",2018/04/11 07:46,2015/03/18 14:08,2015/02/28 14:37,,1,1137 days 17:09:00.000000000,"-1120 days, 6:22:00"
779,"docker
docker",https://github.com/docker/docker,66720189e04d50ef06c12d1ffbbfebf41caa2ae3,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install/<name>.installer to update them.
",2018/04/11 07:46,2015/03/18 14:08,2015/02/28 14:37,,1,1137 days 17:09:00.000000000,"-1120 days, 6:22:00"
780,"docker
docker",https://github.com/docker/docker,b5763f8fa7309f95e21271fca99d0a71c05d0fef,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/03/18 14:08,2018/04/11 07:46,2015/02/28 14:37,,1,17 days 23:31:00.000000000,"1119 days, 17:38:00"
781,"docker
docker",https://github.com/docker/docker,732d1035d2f1d8f0b6f3410035fa393431b93d89,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, grimes and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/11/04 23:03,2016/10/20 04:58,2015/02/28 14:37,,1,615 days 08:26:00.000000000,"-16 days, 5:55:00"
782,"docker
docker",https://github.com/docker/docker,1b41125ad9f1a3881b71bd044d76fd285170addb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd.and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/09/24 01:20,2018/04/11 07:46,2015/02/28 14:37,,1,573 days 10:43:00.000000000,"564 days, 6:26:00"
783,"docker
docker",https://github.com/docker/docker,e89a5e5e91476102a471797fc2a81aa2f0f2b3fb,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/08/01 22:26,2018/04/11 07:46,2015/02/28 14:37,,1,885 days 07:49:00.000000000,"252 days, 9:20:00"
784,"docker
docker",https://github.com/docker/docker,7d8831c0914b8016daee5c0b90496b581d61522d,Dockerfile.simple,Dockerfile.simple,"# Install runc, containerd and grimes
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2016/10/20 04:58,2018/04/11 07:46,2015/02/28 14:37,,1,599 days 14:21:00.000000000,"538 days, 2:48:00"
785,"docker
docker",https://github.com/docker/docker,5118f1431c9cae757d5e7c193ed85fc8fca3ae85,Dockerfile.simple,Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/make.sh test-unit
# docker run --rm --privileged docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2015/02/28 14:37,2018/04/11 07:46,2015/02/28 14:37,,1,0 days 00:00:00.000000000,"1137 days, 17:09:00"
786,"docker
docker",https://github.com/docker/docker,dffa5d6df2e51556edfbcebc4695fdbc0bcc1a90,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/08/19 23:23,2016/03/02 02:05,2015/12/01 17:47,,1,627 days 05:36:00.000000000,"-536 days, 2:42:00"
787,"docker
docker",https://github.com/docker/docker,83fd212f2cb71aae2f4a5a60c893c2bd01e59b72,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/kevpar/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/09/26 18:59,2020/06/25 04:50,2015/12/01 17:47,,1,1395 days 01:12:00.000000000,"272 days, 9:51:00"
788,"docker
docker",https://github.com/docker/docker,db3351ae379bdaba0b863d52b9d9280836fd75c7,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!!
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/06/02 09:41,2019/09/26 18:59,2015/12/01 17:47,,1,183 days 15:54:00.000000000,"1211 days, 9:18:00"
789,"docker
docker",https://github.com/docker/docker,38e4ae3bca76b9558eb44993c4208b41114c4597,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\gopath\src\github.com\docker\docker
#    >>   Cloning into 'C:\gopath\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\gopath\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/17 21:37,,2015/12/01 17:47,,1,1324 days 03:50:00.000000000,削除されていません
790,"docker
docker",https://github.com/docker/docker,f7b4d6544506f882f3168ab6a2ccb75f0ad0794e,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/12/06 07:01,2019/09/26 18:59,2015/12/01 17:47,,1,370 days 13:14:00.000000000,"1024 days, 11:58:00"
791,"docker
docker",https://github.com/docker/docker,3e75c5b68e8d311f4a29cca285560d2e49eae769,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/06 13:05,2019/09/26 18:59,2015/12/01 17:47,,1,340 days 19:18:00.000000000,"1054 days, 5:54:00"
792,"docker
docker",https://github.com/docker/docker,0c7c900e9e66335a6bd486be008af43ae83a5a37,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/05/25 10:11,2019/09/26 18:59,2015/12/01 17:47,,1,540 days 16:24:00.000000000,"854 days, 8:48:00"
793,"docker
docker",https://github.com/docker/docker,fa362e47e03e7b9b50e3642f50a4478d8b8f1243,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# 'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance (TP4 is slow on commit)

",2016/03/02 02:05,2019/09/26 18:59,2015/12/01 17:47,,1,91 days 08:18:00.000000000,"1303 days, 16:54:00"
794,"docker
docker",https://github.com/docker/docker,c5bd6e3dc7680d6c683496f63dafb1f30f87eaa7,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can only run directly on the host. This is because they calculate
#  information from the git repo, but the .git directory is not passed into the image as
#  it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt
#  (elevation is not required): (Note Go must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat


# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run unit tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly).
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.

# Extremely important - do not change the following line to reference a ""specific"" image, 
# such as `mcr.microsoft.com/windows/servercore:ltsc2019`. If using this Dockerfile in process
# isolated containers, the kernel of the host must match the container image, and hence
# would fail between Windows Server 2016 (aka RS1) and Windows Server 2019 (aka RS5).
# It is expected that the image `microsoft/windowsservercore:latest` is present, and matches
# the hosts kernel version before doing a build. 
",2019/07/20 19:46,2019/09/26 18:59,2015/12/01 17:47,,1,1327 days 01:59:00.000000000,"67 days, 23:13:00"
795,"docker
docker",https://github.com/docker/docker,f6ecfd620a48751124d3d1e590e9e83a437996ca,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 with all Windows updates applied. Pre-release versions
#    of Windows are not supported (eg Windows Server 2016 TP5). The build number
#    must be at least 14393. This can be confirmed, for example, by running the
#    following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe C:\HostPath\dockerd.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe C:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1
#
# As of October 2016, this does not work on Windows 10 client, just Windows Server 2016,
# and only with the default isolation mode (process). It does not work with isolation mode
# set to Hyper-V containers (hyperv).

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/11/11 05:45,2019/09/26 18:59,2015/12/01 17:47,,1,345 days 11:58:00.000000000,"1049 days, 13:14:00"
796,"docker
docker",https://github.com/docker/docker,929fa9ff8075d91624a90ecaae9c1fd31e50c294,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#
# The GIT installer isn't very good at unattended install. We use techniques described
# at the links below to force it to set the path and other options accordingly. 
# >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments 
# and follow through to installer at
# >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1


# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/22 11:56,2019/09/26 18:59,2015/12/01 17:47,,1,325 days 18:09:00.000000000,"1069 days, 7:03:00"
797,"docker
docker",https://github.com/docker/docker,83809de7d45d3465977b2f7a7cf585863cec445c,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# The posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.
#
# The steps are minimised dramatically to improve performance

",2016/04/06 08:25,2016/03/02 02:05,2015/12/01 17:47,,1,126 days 14:38:00.000000000,"-36 days, 17:40:00"
798,"docker
docker",https://github.com/docker/docker,155435b6ceeb05b2927ecc726216666b898b6459,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run the following
#  from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
# run the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2016/11/18 06:54,2019/09/26 18:59,2015/12/01 17:47,,1,352 days 13:07:00.000000000,"1042 days, 12:05:00"
799,"docker
docker",https://github.com/docker/docker,eacd2fd4daa03b1161d879e835705f7d35b871e3,Dockerfile.windows,Dockerfile.windows,"# This file describes the standard way to build Docker, using a docker container on Windows 
# Server 2016
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time. Run this from
# # a directory containing the sources you are validating. For example from 
# # c:\go\src\github.com\docker\docker
#
# docker build -t docker -f Dockerfile.windows .
#
#
# # Build docker in a container. Run the following from a Windows cmd command prommpt,
# # replacing c:\built with the directory you want the binaries to be placed on the
# # host system.
#
# docker run --rm -v ""c:\built:c:\target"" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'
#
# Important notes:
# ---------------
#
# Multiple commands in a single powershell RUN command are deliberately not done. This is
# because PS doesn't have a concept quite like set -e in bash. It would be possible to use 
# try-catch script blocks, but that would make this file unreadable. The problem is that
# if there are two commands eg ""RUN powershell -command fail; succeed"", as far as docker
# would be concerned, the return code from the overall RUN is succeed. This doesn't apply to
# RUN which uses cmd as the command interpreter such as ""RUN fail; succeed"".
#
# 'sleep 5' is a deliberate workaround for a current problem on containers in Windows 
# Server 2016. It ensures that the network is up and available for when the command is
# network related. This bug is being tracked internally at Microsoft and exists in TP4.
# Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file
# as bullet proof as possible. This isn't a big deal as this only runs the first time.
#
# The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run!!! 
#
# Don't try to use a volume for passing the source through. The cygwin posix utilities will
# balk at reparse points. Again, see the example at the top of this file on how use a volume
# to get the built binary out of the container.

",2016/01/21 11:51,2020/06/25 04:50,2015/12/01 17:47,,1,50 days 18:04:00.000000000,"1616 days, 16:59:00"
800,"docker
docker",https://github.com/docker/docker,9a19bd1b450a4f514d194d8a5571ab5be921464a,Dockerfile.windows,Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release
#    versions of Windows are not supported (eg Windows Server 2016 TP5). The build
#    number must be at least 14393. This can be confirmed, for example, by running
#    the following from an elevated PowerShell prompt - this sample output is from a 
#    fully up to date machine as at late October 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md


# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git c:\go\src\github.com\docker\docker
#    >>   Cloning into 'c:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd c:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .
#
#
# 4. Build the docker executable binaries in a container:
#
#    >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'
#
#
# 5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   $v=$(Get-Content "".\VERSION"" -raw).ToString().Replace(""`n"","""").Trim()
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-client\docker-$v.exe c:\HostPath\docker.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\dockerd.exe c:\HostPath\dockerd.exe
#    >>   docker cp binaries:c:\go\src\github.com\docker\docker\bundles\$v\binary-daemon\docker-proxy-$v.exe c:\HostPath\docker-proxy.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage


# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# The posix utilities from git aren't usable interactively as at October 2016. This
# is because they require a console window which isn't present in a container in Windows.
# See the example at the top of this file. Do NOT use -it in that docker run. It will not work.
#
# Don't attempt to use a volume for passing the source through to the container. The posix utilities will
# balk at reparse points. 
#
# The downloaded files are not cleared from the image. go.zip is used by the Windows
# CI servers to ensure the host and image are running consistent versions of go.
#

# -----------------------------------------------------------------------------------------

# The number of build steps below are explicitly minimised to improve performance.
",2016/10/21 09:02,2019/09/26 18:59,2015/12/01 17:47,,1,324 days 15:15:00.000000000,"1070 days, 9:57:00"
801,"docker
docker",https://github.com/docker/docker,b6d55ebcbc93ce66aa9906aa87e1081f21ba1650,docs/Dockerfile,docs/Dockerfile,"# TODO: need the full repo source to get the git version info
",2015/04/02 04:20,2015/04/02 04:20,2013/08/30 08:49,2016/10/12 04:14,1,579 days 19:31:00.000000000,0:00:00
802,"docker
docker",https://github.com/docker/docker,b6d55ebcbc93ce66aa9906aa87e1081f21ba1650,docs/Dockerfile,docs/Dockerfile,"# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
",2015/04/02 04:20,2015/04/02 04:20,2013/08/30 08:49,2016/10/12 04:14,1,579 days 19:31:00.000000000,0:00:00
803,"docker
docker",https://github.com/docker/docker,3e84b9e56abdff7230e84a1830085c79c73aa3b7,docs/Dockerfile,docs/Dockerfile,"# TODO: don't do this - look at merging the yml file in build.sh
",2015/02/18 13:20,2015/02/25 21:35,2013/08/30 08:49,2016/10/12 04:14,1,537 days 04:31:00.000000000,"7 days, 8:15:00"
804,"docker
docker",https://github.com/docker/docker,eaa9c85511620aa82f1876e1503604f591f00d23,docs/Dockerfile,docs/Dockerfile,"#
#    docker build -t docker:docs . && docker run -p 8000:8000 docker:docs
#

# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released

",2014/01/15 11:23,2015/04/02 04:20,2013/08/30 08:49,2016/10/12 04:14,1,138 days 02:34:00.000000000,"441 days, 16:57:00"
805,"docker
docker",https://github.com/docker/docker,2c435ab8beba93509b957e4ac5e5801b86b5e8f1,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/04/19 06:44,2014/10/21 14:59,2014/08/06 05:17,2018/06/03 01:46,1,987 days 01:27:00.000000000,"-911 days, 8:15:00"
806,"docker
docker",https://github.com/docker/docker,2c435ab8beba93509b957e4ac5e5801b86b5e8f1,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# TODO replace FPM with some very minimal debhelper stuff
",2017/04/19 06:44,2014/10/21 14:59,2014/08/06 05:17,2018/06/03 01:46,1,987 days 01:27:00.000000000,"-911 days, 8:15:00"
807,"docker
docker",https://github.com/docker/docker,cd44018856be421497a35d96f88dd0eec42fae43,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2015/06/14 01:21,2018/06/03 01:46,2014/08/06 05:17,2018/06/03 01:46,1,311 days 20:04:00.000000000,"1085 days, 0:25:00"
808,"docker
docker",https://github.com/docker/docker,22c46af4b358cf3ec4f7af47c701064c00cf7de4,builder/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2014/08/06 05:17,2017/04/19 06:44,2014/08/06 05:17,2018/06/03 01:46,1,0 days 00:00:00.000000000,"987 days, 1:27:00"
809,"docker
docker",https://github.com/docker/docker,b6eed3dca2e57705cb75895cad0b5337c79686d9,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/11/28 11:21,2017/04/19 06:44,2014/08/06 05:17,2018/06/03 01:46,1,1210 days 06:04:00.000000000,"-224 days, 19:23:00"
810,"docker
docker",https://github.com/docker/docker,80bc8b4766cc808186af91930152d78afb22aef8,builder/dockerfile/parser/testfiles/docker/Dockerfile,builder/dockerfile/parser/testfiles/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2018/05/19 03:28,2017/04/19 06:44,2014/08/06 05:17,2018/06/03 01:46,1,1381 days 22:11:00.000000000,"-395 days, 3:16:00"
811,"docker
docker",https://github.com/docker/docker,b877fc31c51baaf1ec42501ab366dd05a5b6bb21,Dockerfile.solaris,Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",2017/06/21 05:39,2017/10/25 03:32,2016/06/07 16:45,2017/10/25 03:32,1,378 days 12:54:00.000000000,"125 days, 21:53:00"
812,"docker
docker",https://github.com/docker/docker,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,Dockerfile.buildkit,Dockerfile.buildkit,"# TODO: Some of this is only really needed for testing, it would be nice to split this up
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,"15 days, 17:21:00"
813,"docker
docker",https://github.com/docker/docker,82c56755ea9e6c0ce197fbdfd41d0c5d1724b50c,Dockerfile.buildkit,Dockerfile.buildkit,"# Options for hack/validate/gometalinter
",2019/05/23 08:49,2019/06/08 02:10,2019/05/23 08:49,2019/06/08 02:10,1,0 days 00:00:00.000000000,"15 days, 17:21:00"
814,"docker
docker",https://github.com/docker/docker,4357ed4a7363a1032edf93cf03232953c805184f,Dockerfile.gccgo,Dockerfile.gccgo,"# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

# install seccomp
# TODO: switch to libseccomp-dev since dockerinit is gone
",2016/01/20 20:53,2016/08/24 19:09,2015/08/17 18:20,2016/08/24 19:09,1,156 days 02:33:00.000000000,"216 days, 22:16:00"
815,"docker
docker",https://github.com/docker/docker,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.5
# DOCKER-VERSION  0.6.4
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/10/29 08:51,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,51 days 06:21:00.000000000,"9 days, 4:14:00"
816,"docker
docker",https://github.com/docker/docker,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"# VERSION:        1.6
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Build docker nightly release using Docker in Docker.
# REFERENCES:     This code reuses the excellent implementation of docker in docker
#                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
# COMMENTS:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
#         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
#         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
# TO_BUILD:       docker build -t dockerbuilder .
# TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh

",2013/11/07 13:05,2014/02/15 13:50,2013/09/08 02:30,2014/02/15 13:50,1,60 days 10:35:00.000000000,"100 days, 0:45:00"
817,"docker
docker",https://github.com/docker/docker,6e3068700fb32299cf733acd74785e29609b1974,testing/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker with proper apparmor handling
",2013/09/22 04:14,2013/11/07 13:05,2013/09/08 02:30,2014/02/15 13:50,1,14 days 01:44:00.000000000,"46 days, 8:51:00"
818,"docker
docker",https://github.com/docker/docker,0cbeda73910d6d1d3336da93c5f94df0bdd5fa44,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,hack/infrastructure/docker-ci/nightlyrelease/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/29 08:51,2013/09/22 04:14,2013/09/08 02:30,2014/02/15 13:50,1,51 days 06:21:00.000000000,"-38 days, 19:23:00"
819,"docker
docker",https://github.com/docker/docker,249f76bebdb3c24ae0a59e3be7ae73fd1d88c065,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.4
# DOCKER-VERSION  0.6.6
# AUTHOR:         Daniel Mizyrycki <daniel@docker.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/11/07 13:05,2014/02/15 13:50,2013/10/19 14:33,2014/02/15 13:50,1,18 days 22:32:00.000000000,"100 days, 0:45:00"
820,"docker
docker",https://github.com/docker/docker,95f3f77fc417bbc55f03e869136deec27e26bc51,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"# VERSION:        0.3
# DOCKER-VERSION  0.6.3
# AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
# DESCRIPTION:    Testing docker PRs and commits on top of master using
# REFERENCES:     This code reuses the excellent implementation of
#                 Docker in Docker made by Jerome Petazzoni.
#                 https://github.com/jpetazzo/dind
# COMMENTS:
#   This Dockerfile adapts /Dockerfile to enable docker PRs and commits testing
#   Optional arguments:
#       [commit]  (default: 'HEAD')
#       [repo]    (default: 'http://github.com/dotcloud/docker')
#       [branch]  (default: 'master')
# TO_BUILD:       docker build -t test_docker .
# TO_RUN:         docker run -privileged test_docker hack/dind test_docker.sh [commit] [repo] [branch]

",2013/10/19 14:33,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,0 days 00:00:00.000000000,"18 days, 22:32:00"
821,"docker
docker",https://github.com/docker/docker,efb4c800a7c8167cf2202466a720c0fad7001a5d,hack/infrastructure/docker-ci/docker-test/Dockerfile,hack/infrastructure/docker-ci/docker-test/Dockerfile,"#### FIXME. Temporarily install docker and dind with proper apparmor handling
",2013/10/30 11:37,2013/11/07 13:05,2013/10/19 14:33,2014/02/15 13:50,1,10 days 21:04:00.000000000,"8 days, 1:28:00"
822,"docker
docker",https://github.com/docker/docker,878dcb89f38e8eb7bb07ccd4a4e5ce622252ff30,Dockerfile.centos,Dockerfile.centos,"# Wrap all commands in the ""docker-in-docker"" script to allow nested containers
#ENTRYPOINT [""hack/dind""]
",2015/04/01 05:58,2015/05/01 07:30,2015/04/01 05:58,2015/05/01 07:30,1,0 days 00:00:00.000000000,"30 days, 1:32:00"
823,"docker-library
mongo",https://github.com/docker-library/mongo,1d6a0ebd2b52045b2b9389c2e8a043ed66e0ca57,4.2/windows/windowsservercore-1809/Dockerfile,4.2/windows/windowsservercore-1809/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/03/14 04:52,2019/12/04 02:26,2019/12/04 02:26,,1,101 days 02:26:00.000000000,"-102 days, 21:34:00"
824,"docker-library
mongo",https://github.com/docker-library/mongo,1d6a0ebd2b52045b2b9389c2e8a043ed66e0ca57,4.2/windows/windowsservercore-ltsc2016/Dockerfile,4.2/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/03/14 04:52,2019/05/30 19:01,2018/07/18 05:51,,1,604 days 23:01:00.000000000,"-289 days, 14:09:00"
825,"docker-library
mongo",https://github.com/docker-library/mongo,95be7b40a25fdf699af4e2b04b7de7e6e107b7e9,4.1/Dockerfile,4.2/Dockerfile,"# TODO some sort of download verification here
",2018/09/15 01:01,2019/12/10 08:01,2018/07/18 05:51,,1,58 days 19:10:00.000000000,"451 days, 7:00:00"
826,"docker-library
mongo",https://github.com/docker-library/mongo,ebd79727e4e77210272ec55c8b22b17877bfd29a,3.4/Dockerfile,3.4/Dockerfile,"# TODO some sort of download verification here
",2019/07/31 19:01,2019/07/31 19:01,2016/11/02 05:59,2020/01/08 09:38,1,1001 days 13:02:00.000000000,0:00:00
827,"docker-library
mongo",https://github.com/docker-library/mongo,ebd79727e4e77210272ec55c8b22b17877bfd29a,3.4/windows/windowsservercore-ltsc2016/Dockerfile,3.4/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/07/31 19:01,2019/07/31 19:01,2017/11/23 07:25,2020/01/08 09:38,1,615 days 11:36:00.000000000,0:00:00
828,"docker-library
mongo",https://github.com/docker-library/mongo,ee34922c3e5e6f1b4f7c02dc633744c349ee8ace,3.4/windows/windowsservercore/Dockerfile,3.4/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/08/08 07:02,2017/09/07 07:01,2016/08/18 07:14,2019/04/12 08:17,1,354 days 23:48:00.000000000,"29 days, 23:59:00"
829,"docker-library
mongo",https://github.com/docker-library/mongo,e0735c07abced69a5d8945aace9285288d013a83,3.6/Dockerfile,3.6/Dockerfile,"# TODO some sort of download verification here
",2018/07/10 19:01,2019/08/21 19:01,2017/11/23 09:40,,1,229 days 09:21:00.000000000,"407 days, 0:00:00"
830,"docker-library
mongo",https://github.com/docker-library/mongo,fddc16475e53f0640f7ea46c98096baa297da1e2,4.0-rc/Dockerfile,4.0/Dockerfile,"# TODO some sort of download verification here
",2018/06/08 01:01,2019/05/29 07:01,2018/05/23 00:17,,1,16 days 00:44:00.000000000,"355 days, 6:00:00"
831,"docker-library
mongo",https://github.com/docker-library/mongo,9ab7383589df65a7ad12f143d1db4731214ec518,4.2-rc/Dockerfile,4.2-rc/Dockerfile,"# TODO some sort of download verification here
",2019/07/18 19:01,2019/06/26 19:01,2019/06/13 08:19,2019/08/14 01:19,1,35 days 10:42:00.000000000,"-22 days, 0:00:00"
832,"docker-library
mongo",https://github.com/docker-library/mongo,3f117ac35a947ddff307aee85ecd5abe9e3a0fe1,Dockerfile-linux.template,Dockerfile-linux.template,"# TODO some sort of download verification here
",2019/07/04 00:04,2019/07/04 00:04,2018/12/25 04:14,,1,190 days 19:50:00.000000000,0:00:00
833,"docker-library
mongo",https://github.com/docker-library/mongo,692ec82754bde8d6d4e663462669b3be2a6f8b2b,3.7/windows/windowsservercore-1709/Dockerfile,4.0/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/01/17 02:12,2018/01/17 02:12,2018/01/17 02:12,2019/04/12 08:17,1,0 days 00:00:00.000000000,0:00:00
834,"docker-library
mongo",https://github.com/docker-library/mongo,40d62a73bbd4e20d90ec859a8af483f70b1e5fd4,3.0/windows/windowsservercore/Dockerfile,3.0/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/05/11 13:01,2017/05/11 13:01,2016/08/18 07:14,2018/05/10 02:02,1,266 days 05:47:00.000000000,0:00:00
835,"docker-library
mongo",https://github.com/docker-library/mongo,7276b14c1e9b5f83b37f5f452e6a9f293aea2d8b,3.6/windows/windowsservercore-1709/Dockerfile,3.6/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/03/01 20:01,2017/11/23 09:40,2017/11/23 09:40,2019/04/12 08:17,1,463 days 10:21:00.000000000,"-464 days, 13:39:00"
836,"docker-library
mongo",https://github.com/docker-library/mongo,daeeeccd0edd110e6341ba3ee2d699caf885fbce,3.0/windows/windowsservercore-ltsc2016/Dockerfile,3.0/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/11/23 07:25,2017/11/23 07:25,2017/11/23 07:25,2018/05/10 02:02,1,0 days 00:00:00.000000000,0:00:00
837,"docker-library
mongo",https://github.com/docker-library/mongo,1af403f9d70fed1da9502b6f486a5f68f384eef7,3.2/windows/windowsservercore-ltsc2016/Dockerfile,3.2/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/11/28 08:01,2018/09/05 19:01,2017/11/23 07:25,2018/12/25 03:19,1,5 days 00:36:00.000000000,"281 days, 11:00:00"
838,"docker-library
mongo",https://github.com/docker-library/mongo,6d62baeef7bd92bd0b676859c16ff3bba26d89bc,3.6/windows/windowsservercore-ltsc2016/Dockerfile,3.6/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/01/24 20:01,2017/11/23 09:40,2017/11/23 09:40,,1,792 days 10:21:00.000000000,"-793 days, 13:39:00"
839,"docker-library
mongo",https://github.com/docker-library/mongo,333b2d1a5dae3d40e31da7459f6dfb8a1847e890,3.2/windows/windowsservercore/Dockerfile,3.2/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/06/14 13:01,2017/06/14 13:01,2016/08/18 07:14,2018/12/25 03:19,1,300 days 05:47:00.000000000,0:00:00
840,"docker-library
mongo",https://github.com/docker-library/mongo,692ec82754bde8d6d4e663462669b3be2a6f8b2b,3.7/windows/windowsservercore-ltsc2016/Dockerfile,4.0/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/01/17 02:12,2018/01/17 02:12,2018/01/17 02:12,,1,0 days 00:00:00.000000000,0:00:00
841,"docker-library
mongo",https://github.com/docker-library/mongo,3ad550a37fcde2739997d896e6a7b759a85498b6,3.5/windows/windowsservercore/Dockerfile,3.5/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/08/04 19:02,2017/09/13 01:01,2017/04/01 05:30,2017/12/06 10:55,1,125 days 13:32:00.000000000,"39 days, 5:59:00"
842,"docker-library
mongo",https://github.com/docker-library/mongo,d7084920a1d3db7f50fc352c1c879845e36e48a6,4.0-rc/windows/windowsservercore-ltsc2016/Dockerfile,4.0-rc/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/05/23 00:17,2018/06/28 01:51,2018/05/23 00:17,2018/06/28 01:51,1,0 days 00:00:00.000000000,"36 days, 1:34:00"
843,"docker-library
mongo",https://github.com/docker-library/mongo,d7084920a1d3db7f50fc352c1c879845e36e48a6,4.0-rc/windows/windowsservercore-1709/Dockerfile,4.0-rc/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/05/23 00:17,2018/06/28 01:51,2018/05/23 00:17,2018/06/28 01:51,1,0 days 00:00:00.000000000,"36 days, 1:34:00"
844,"docker-library
mongo",https://github.com/docker-library/mongo,daeeeccd0edd110e6341ba3ee2d699caf885fbce,3.5/windows/windowsservercore-ltsc2016/Dockerfile,3.5/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2017/11/23 07:25,2017/12/06 10:55,2017/11/23 07:25,2017/12/06 10:55,1,0 days 00:00:00.000000000,"13 days, 3:30:00"
845,"docker-library
mongo",https://github.com/docker-library/mongo,385d26429b42f0de1b97b1df48964af8b191f8fe,4.1/windows/windowsservercore-1803/Dockerfile,4.2/windows/windowsservercore-1803/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/05/30 19:01,2019/05/30 19:01,2018/07/18 05:51,2019/12/10 07:37,1,316 days 13:10:00.000000000,0:00:00
846,"docker-library
mongo",https://github.com/docker-library/mongo,ba0482d1a0906a5f3463b0e7411b66805e9489da,4.1/windows/windowsservercore-1709/Dockerfile,4.1/windows/windowsservercore-1709/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2018/09/14 13:01,2018/07/18 05:51,2018/07/18 05:51,2019/04/12 08:17,1,58 days 07:10:00.000000000,"-59 days, 16:50:00"
847,"docker-library
mongo",https://github.com/docker-library/mongo,68676f17120de67b6e35d94b12a276f781c18b71,4.4-rc/Dockerfile,4.4/Dockerfile,"# TODO some sort of download verification here
",2020/06/27 01:01,2020/07/23 07:01,2020/03/11 08:19,,1,107 days 16:42:00.000000000,"26 days, 6:00:00"
848,"docker-library
mongo",https://github.com/docker-library/mongo,6f010d88a47b9a27d06babef251baca428b03b7f,4.0/windows/windowsservercore-1803/Dockerfile,4.0/windows/windowsservercore-1803/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/03/22 13:01,2018/10/03 19:01,2018/07/18 05:51,2019/12/10 07:37,1,247 days 07:10:00.000000000,"-170 days, 6:00:00"
849,"docker-library
mongo",https://github.com/docker-library/mongo,e4c4ecdbde6bd33d76021e341914d4f5849b27a5,4.4-rc/windows/windowsservercore-ltsc2016/Dockerfile,4.4/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/07/23 07:01,2020/07/23 07:01,2020/03/11 08:19,,1,133 days 22:42:00.000000000,0:00:00
850,"docker-library
mongo",https://github.com/docker-library/mongo,e4c4ecdbde6bd33d76021e341914d4f5849b27a5,4.4-rc/windows/windowsservercore-1809/Dockerfile,4.4/windows/windowsservercore-1809/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/07/23 07:01,2020/07/23 07:01,2020/03/11 08:19,,1,133 days 22:42:00.000000000,0:00:00
851,"docker-library
mongo",https://github.com/docker-library/mongo,a3a213fd2b4b2c26c71408761534fc7eaafe517f,4.2-rc/windows/windowsservercore-ltsc2016/Dockerfile,4.2-rc/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/08/08 19:01,2019/08/14 01:19,2019/06/13 08:19,2019/08/14 01:19,1,56 days 10:42:00.000000000,"5 days, 6:18:00"
852,"docker-library
mongo",https://github.com/docker-library/mongo,a3a213fd2b4b2c26c71408761534fc7eaafe517f,4.2-rc/windows/windowsservercore-1803/Dockerfile,4.2-rc/windows/windowsservercore-1803/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/08/08 19:01,2019/08/14 01:19,2019/06/13 08:19,2019/08/14 01:19,1,56 days 10:42:00.000000000,"5 days, 6:18:00"
853,"docker-library
mongo",https://github.com/docker-library/mongo,753d566a83a4e9734227f186e554c87b4f08be51,3.2/Dockerfile,3.2/Dockerfile,"# TODO some sort of download verification here
",2018/05/09 13:01,2018/09/05 19:01,2015/11/01 01:56,2018/12/25 03:19,1,920 days 11:05:00.000000000,"119 days, 6:00:00"
854,"docker-library
mongo",https://github.com/docker-library/mongo,48df1464cd062f431183c0447d08c720d1947ae6,Dockerfile-windows.template,Dockerfile-windows.template,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/09/12 01:42,2020/03/11 08:19,2018/12/25 04:14,,1,626 days 21:28:00.000000000,"-185 days, 6:37:00"
855,"docker-library
mongo",https://github.com/docker-library/mongo,9ba0d6f19538d7922f62a41cea6589e366b100d3,4.0/windows/windowsservercore-1809/Dockerfile,4.0/windows/windowsservercore-1809/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2019/12/04 02:26,2019/12/04 02:26,2019/12/04 02:26,,1,0 days 00:00:00.000000000,0:00:00
856,"docker-library
mongo",https://github.com/docker-library/mongo,1dfaca731681dba7e03d0d837fefa24aaf3078b6,3.7/Dockerfile,3.7/Dockerfile,"# TODO some sort of download verification here
",2018/04/25 07:01,2018/03/15 07:01,2018/01/17 02:12,2018/06/28 01:51,1,98 days 04:49:00.000000000,"-41 days, 0:00:00"
857,"docker-library
mongo",https://github.com/docker-library/mongo,32bf9f7905feb2b039c623e76e66d1602e73d277,3.0/Dockerfile,3.0/Dockerfile,"# TODO some sort of download verification here
",2017/09/01 01:47,2018/05/10 02:02,2015/01/26 04:48,2018/05/10 02:02,1,948 days 20:59:00.000000000,"251 days, 0:15:00"
858,"docker-library
mongo",https://github.com/docker-library/mongo,1fe97dd9ab8e8db7224a84345583bb415d83f602,3.6/windows/windowsservercore-1809/Dockerfile,3.6/windows/windowsservercore-1809/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2020/07/23 07:01,2020/07/23 07:01,2020/03/21 02:20,,1,124 days 04:41:00.000000000,0:00:00
859,"docker-library
mongo",https://github.com/docker-library/mongo,e3bc09e3a6fc447168d94a860caadc445b7364ba,3.4-rc/windows/windowsservercore/Dockerfile,3.4-rc/windows/windowsservercore/Dockerfile,"# TODO docker-entrypoint.ps1 ? (for ""docker run <image> --flag --flag --flag"")

",2016/11/22 02:25,2016/11/22 02:25,2016/11/02 05:59,2016/11/30 02:50,1,19 days 20:26:00.000000000,0:00:00
860,"jenkinsci
jenkins-ci.org-docker",https://github.com/jenkinsci/jenkins-ci.org-docker,ae123feaec324dc35350a8bd9ab2704597857f38,Dockerfile-alpine,Dockerfile-alpine,"# FIXME(oleg_nenashev): This is not an official AdoptOpenJDK Docker Image.
# There is no official Alpine images at the moment.
# Needs upgrade when/if there is an official alpine image.
",2020/08/13 18:42,,2017/07/20 18:53,,1,1119 days 23:49:00.000000000,削除されていません
861,"jenkinsci
jenkins-ci.org-docker",https://github.com/jenkinsci/jenkins-ci.org-docker,d83eaf18a01f6ac49f76dc55be59e168b08c1911,Dockerfile-jdk11,Dockerfile-jdk11,"# TODO: revert before the GA release of Java 11 support (JENKINS-55087)
",2019/01/05 06:42,2019/01/05 06:42,2015/03/17 19:24,,1,1389 days 11:18:00.000000000,0:00:00
862,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,681775258b37cf66655f486012f6cee7638b0ac0,docker/generate_dockerfile.sh,docker/generate_dockerfile.sh,"#TODO change branch to master
",2018/01/04 20:30,2018/01/04 20:30,2017/11/30 17:06,2018/04/25 23:31,1,35 days 03:24:00.000000000,0:00:00
863,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,01ca82c640815b54476c6820dc414e70f7e521f7,docker/generate_dockerfile_jtreg.sh,docker/generate_dockerfile_jtreg.sh,"#TODO change branch
",2018/01/03 15:49,2018/01/05 00:14,2018/01/03 15:49,2018/01/05 00:14,1,0 days 00:00:00.000000000,"1 day, 8:25:00"
864,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,01ca82c640815b54476c6820dc414e70f7e521f7,docker/generate_dockerfile_jtreg.sh,docker/generate_dockerfile_jtreg.sh,"# TODO. change branch
",2018/01/03 15:49,2018/01/03 16:06,2018/01/03 15:49,2018/01/05 00:14,1,0 days 00:00:00.000000000,0:17:00
865,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,3d8ad73910352940b35f2495024293c33c1c0ea2,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,"#>?7Eno#6aQis>7';?/u3u76%YmzrF""/)~*}r5a~K6j_GcRaPQ[nu\i|ۥ|*F2",2018/09/25 21:34,,2018/09/25 21:34,,1,0 days 00:00:00.000000000,削除されていません
866,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,3d8ad73910352940b35f2495024293c33c1c0ea2,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,"#&^#=MuwIS&撶6jƻ<rCeړT+zkkY/.؞(pۮʋ).7	brަ]_-[jh4]7""0U_gpRznk7p\JOwvK&+%75ziYLWVڱYUck%muŴ>!#/'sMVO-b漾#6$5EzC²jԘe3+`,Xz5}<w,3(K{f]FeYF|eVFDnS1JzVўTնPT(/уD$`]csD	OlĚ6a;3&Z 	!锉TAy`3LM~F@-,۳Bt6qQpmkN8l_Z9M\+5m3KmuM.4n",2018/09/25 21:34,,2018/09/25 21:34,,1,0 days 00:00:00.000000000,削除されていません
867,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,3d8ad73910352940b35f2495024293c33c1c0ea2,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,"#>9"">!>!}@voW/d+CRAp=S=VϷd?g>SSB=^G&&HC?cNUj7&pοR7K]'gG¿J<""gQM]>'s]d]T""}Q'{C~=}I'STsTKpcͮTwɾ""q}ˮ;d[u;J@r$[M;P7ԝ퀺Avvu4@jKcW+|d'*OdG[ܿ'~pOTܡ)`H
",2018/09/25 21:34,,2018/09/25 21:34,,1,0 days 00:00:00.000000000,削除されていません
868,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,a8b85553ce88b736db88ae64fe4c3478a1022b8f,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,"#[O5 7}2c#HWR4㗝N-߈AKUJn҄Q,'ry	R""XqmsW	HacK_WPl`|wZg!aap\7#+=Zp;U*Jwٞ	z(rQHGO\EwS$m]{KwS?ꔫg<h47L>0/tPOC}9׶OЪT(^4
",2018/09/25 21:34,,2018/09/25 21:34,,1,0 days 00:00:00.000000000,削除されていません
869,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,a8b85553ce88b736db88ae64fe4c3478a1022b8f,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,"# <xIdҼPշ-׵wNk!&X}VޯQ1v$]@cU,DbT$""?59Fz!O!431SklƎ8LlKů܏g`OQ<N:|ůxů-~.3'4'TNtɱw7J:{?ռ`&i/T|Q{UgLYVP.~cK^AUx`T.
",2018/09/25 21:34,,2018/09/25 21:34,,1,0 days 00:00:00.000000000,削除されていません
870,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,a8b85553ce88b736db88ae64fe4c3478a1022b8f,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,#z\}OuQABarfrvO7gj?:۩kҽC[]Ύ~?OUb5Mbԗ,2018/09/25 21:34,,2018/09/25 21:34,,1,0 days 00:00:00.000000000,削除されていません
871,"SAP
SapMachine-infrastructure",https://github.com/SAP/SapMachine-infrastructure,a8b85553ce88b736db88ae64fe4c3478a1022b8f,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,dockerfiles/ubuntu_14_04_x86_64/sysroot-sles11-x86_64.tgz,"#iV +6ȯWXH˟K+rj.,~>p2|av1~XM}!bVv]pFixMem|)5Ho,;h(GuêO?7焦{5$,T8ݾ2aH8m+S""Q{ci؏F<ej-QUQr4̂)M&(,>qЕG0zJNf:jkx(վ&O>^tULKdoߓ:egM<8nߓh1̈́BGNB6ۃ>Gi+ݬ`c5'ȼdo'Ll$g
",2018/09/25 21:34,,2018/09/25 21:34,,1,0 days 00:00:00.000000000,削除されていません
872,"docker-library
official-images",https://github.com/docker-library/official-images,f6cbc219978a8cb48e0735eb0d460125fb0dab4e,bashbrew/Dockerfile.release,bashbrew/Dockerfile.release,"# gpg: key 0F386284C03A1162: public key ""Philip Estes <estesp@gmail.com>"" imported
#ENV MANIFEST_TOOL_GPG_KEY 27F3EA268A97867EAF0BD05C0F386284C03A1162
# TODO consume Phil's releases again (once he fixes https://github.com/estesp/manifest-tool/issues/47 properly)

",2017/09/12 07:52,2017/05/03 06:36,2017/05/03 06:36,2020/04/25 06:51,1,132 days 01:16:00.000000000,"-133 days, 22:44:00"
873,"docker-library
official-images",https://github.com/docker-library/official-images,447e88b53d1636a4641a6917b1b6c24f8bbf70a4,bashbrew/Dockerfile.release,bashbrew/Dockerfile.release,"#$os/}""; \
# TODO GOARM
",2017/05/03 06:36,2020/04/25 06:51,2017/05/03 06:36,2020/04/25 06:51,1,0 days 00:00:00.000000000,"1088 days, 0:15:00"
874,"docker-library
official-images",https://github.com/docker-library/official-images,76e1068df5a4610b6f77c0fdb8874bcc10583a9f,bashbrew/Dockerfile.release,bashbrew/Dockerfile.release,"# TODO verify GPG signatures for manifest-tool releases
",2017/06/06 08:15,2020/04/25 06:51,2017/05/03 06:36,2020/04/25 06:51,1,34 days 01:39:00.000000000,"1053 days, 22:36:00"
875,"docker-library
official-images",https://github.com/docker-library/official-images,84aa9ed158196e09a9e68f34d6a2a02ce43a0f7e,bashbrew/put-multiarch/Dockerfile,bashbrew/put-multiarch/Dockerfile,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify

# reinstall cpanm itself, for good measure
",2019/05/10 08:53,2019/07/23 08:40,2019/05/10 08:53,2019/07/23 08:40,1,0 days 00:00:00.000000000,"73 days, 23:47:00"
876,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile,vendor/github.com/docker/docker/Dockerfile,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
877,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile,vendor/github.com/docker/docker/Dockerfile,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
878,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.armhf,vendor/github.com/docker/docker/Dockerfile.armhf,"# This file describes the standard way to build Docker on ARMv7, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.armhf .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
879,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.armhf,vendor/github.com/docker/docker/Dockerfile.armhf,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
880,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.aarch64,vendor/github.com/docker/docker/Dockerfile.aarch64,"# This file describes the standard way to build Docker on aarch64, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.aarch64 .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
881,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.aarch64,vendor/github.com/docker/docker/Dockerfile.aarch64,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
882,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.windows,vendor/github.com/docker/docker/Dockerfile.windows,"# escape=`

# -----------------------------------------------------------------------------------------
# This file describes the standard way to build Docker in a container on Windows
# Server 2016 or Windows 10.
#
# Maintainer: @jhowardmsft
# -----------------------------------------------------------------------------------------


# Prerequisites:
# --------------
#
# 1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major 
#    build number must be at least 14393. This can be confirmed, for example, by 
#    running the following from an elevated PowerShell prompt - this sample output 
#    is from a fully up to date machine as at mid-November 2016:
#
#    >> PS C:\> $(gin).WindowsBuildLabEx
#    >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100
#
# 2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.
#
# 3. The machine must be configured to run containers. For example, by following
#    the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or
#    https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md
#
# 4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server
#    containers as the default option, it is recommended you have at least 1GB 
#    of memory assigned; For Windows 10 where Hyper-V Containers are employed, you
#    should have at least 4GB of memory assigned. Note also, to run Hyper-V 
#    containers in a VM, it is necessary to configure the VM for nested virtualization.

# -----------------------------------------------------------------------------------------


# Usage:
# -----
#
#  The following steps should be run from an (elevated*) Windows PowerShell prompt. 
#
#  (*In a default installation of containers on Windows following the quick-start guidance at
#    https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,
#    the docker.exe client must run elevated to be able to connect to the daemon).
#
# 1. Clone the sources from github.com:
#
#    >>   git clone https://github.com/docker/docker.git C:\go\src\github.com\docker\docker
#    >>   Cloning into 'C:\go\src\github.com\docker\docker'...
#    >>   remote: Counting objects: 186216, done.
#    >>   remote: Compressing objects: 100% (21/21), done.
#    >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195
#    >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.
#    >>   Resolving deltas: 100% (123139/123139), done.
#    >>   Checking connectivity... done.
#    >>   Checking out files: 100% (3912/3912), done.
#    >>   PS C:\>
#
#
# 2. Change directory to the cloned docker sources:
#
#    >>   cd C:\go\src\github.com\docker\docker 
#
#
# 3. Build a docker image with the components required to build the docker binaries from source
#    by running one of the following:
#
#    >>   docker build -t nativebuildimage -f Dockerfile.windows .          
#    >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)
#
#
# 4. Build the docker executable binaries by running one of the following:
#
#    >>   docker run --name binaries nativebuildimage hack\make.ps1 -Binary
#    >>   docker run --name binaries -m 2GB nativebuildimage hack\make.ps1 -Binary    (if using Hyper-V containers)
#
#
# 5. Copy the binaries out of the container, replacing HostPath with an appropriate destination 
#    folder on the host system where you want the binaries to be located.
#
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\docker.exe C:\HostPath\docker.exe
#    >>   docker cp binaries:C:\go\src\github.com\docker\docker\bundles\dockerd.exe C:\HostPath\dockerd.exe
#
#
# 6. (Optional) Remove the interim container holding the built executable binaries:
#
#    >>    docker rm binaries
#
#
# 7. (Optional) Remove the image used for the container in which the executable
#    binaries are build. Tip - it may be useful to keep this image around if you need to
#    build multiple times. Then you can take advantage of the builder cache to have an
#    image which has all the components required to build the binaries already installed.
#
#    >>    docker rmi nativebuildimage
#

# -----------------------------------------------------------------------------------------


#  The validation tests can either run in a container, or directly on the host. To run in a
#  container, ensure you have created the nativebuildimage above. Then run one of the
#  following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -DCO -PkgImports -GoFormat    (if using Hyper-V containers)

# To run the validation tests on the host, from the root of the repository, run the
# following from a Windows PowerShell prompt (elevation is not required): (Note Go
# must be installed to run these tests)
#
#    >>   hack\make.ps1 -DCO -PkgImports -GoFormat

# -----------------------------------------------------------------------------------------


#  To run unit tests, ensure you have created the nativebuildimage above. Then run one of
#  the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run --rm nativebuildimage hack\make.ps1 -TestUnit
#    >>   docker run --rm -m 2GB nativebuildimage hack\make.ps1 -TestUnit    (if using Hyper-V containers)


# -----------------------------------------------------------------------------------------


#  To run all tests and binary build, ensure you have created the nativebuildimage above. Then 
#  run one of the following from an (elevated) Windows PowerShell prompt:
#
#    >>   docker run nativebuildimage hack\make.ps1 -All
#    >>   docker run -m 2GB nativebuildimage hack\make.ps1 -All    (if using Hyper-V containers)

# -----------------------------------------------------------------------------------------


# Important notes:
# ---------------
#
# Don't attempt to use a bind-mount to pass a local directory as the bundles target
# directory. It does not work (golang attempts for follow a mapped folder incorrectly). 
# Instead, use docker cp as per the example.
#
# go.zip is not removed from the image as it is used by the Windows CI servers
# to ensure the host and image are running consistent versions of go.
#
# Nanoserver support is a work in progress. Although the image will build if the 
# FROM statement is updated, it will not work when running autogen through hack\make.ps1. 
# It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently
# quit due to the use of console hooks which are not available.
#
# The docker integration tests do not currently run in a container on Windows, predominantly
# due to Windows not supporting privileged mode, so anything using a volume would fail.
# They (along with the rest of the docker CI suite) can be run using 
# https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.
#
# -----------------------------------------------------------------------------------------


# The number of build steps below are explicitly minimised to improve performance.
",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
883,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.solaris,vendor/github.com/docker/docker/Dockerfile.solaris,"# Defines an image that hosts a native Docker build environment for Solaris
# TODO: Improve stub

",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
884,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.ppc64le,vendor/github.com/docker/docker/Dockerfile.ppc64le,"# This file describes the standard way to build Docker on ppc64le, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.ppc64le .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
885,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.ppc64le,vendor/github.com/docker/docker/Dockerfile.ppc64le,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
886,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.s390x,vendor/github.com/docker/docker/Dockerfile.s390x,"# This file describes the standard way to build Docker on s390x, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker -f Dockerfile.s390x .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#

",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
887,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.s390x,vendor/github.com/docker/docker/Dockerfile.s390x,"# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)

# Install tomlv, vndr, runc, containerd, tini, docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
888,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.simple,vendor/github.com/docker/docker/Dockerfile.simple,"# docker build -t docker:simple -f Dockerfile.simple .
# docker run --rm docker:simple hack/make.sh dynbinary
# docker run --rm --privileged docker:simple hack/dind hack/make.sh test-unit
# docker run --rm --privileged -v /var/lib/docker docker:simple hack/dind hack/make.sh dynbinary test-integration-cli

# This represents the bare minimum required to build and test Docker.

",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
889,"influxdata
kapacitor",https://github.com/influxdata/kapacitor,5dd218345c6ac415de818984998112a9ecad5167,vendor/github.com/docker/docker/Dockerfile.simple,vendor/github.com/docker/docker/Dockerfile.simple,"# Install runc, containerd, tini and docker-proxy
# Please edit hack/dockerfile/install-binaries.sh to update them.
",2017/07/26 04:32,2018/03/17 04:23,2017/07/26 04:32,2018/03/17 04:23,1,0 days 00:00:00.000000000,"233 days, 23:51:00"
890,"docker-library
openjdk",https://github.com/docker-library/openjdk,52cb2ce3bda94b1c0229f11bfa176035ad41c9b8,11/jdk/slim-buster/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2020/08/29 01:53,2019/10/16 09:48,2018/04/15 01:18,,1,867 days 00:35:00.000000000,"-318 days, 7:55:00"
891,"docker-library
openjdk",https://github.com/docker-library/openjdk,52cb2ce3bda94b1c0229f11bfa176035ad41c9b8,11/jdk/slim-buster/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2020/08/29 01:53,2019/10/16 09:48,2018/04/15 01:18,,1,867 days 00:35:00.000000000,"-318 days, 7:55:00"
892,"docker-library
openjdk",https://github.com/docker-library/openjdk,e7c6ade3d9d636c39fbbfa30c144a93fbb038494,11/jdk/slim/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/07/17 07:40,2019/10/16 09:48,2018/04/15 01:18,,1,458 days 06:22:00.000000000,"91 days, 2:08:00"
893,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,11/jdk/slim/Dockerfile,11/jdk/slim-buster/Dockerfile,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/10/16 09:48,2018/04/15 01:18,,1,403 days 05:19:00.000000000,"146 days, 3:11:00"
894,"docker-library
openjdk",https://github.com/docker-library/openjdk,fb20f308cef5db398462495afd2f7bc60f51590a,11/jdk/windows/windowsservercore-ltsc2016/Dockerfile,11/jdk/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO signature? checksum?
",2019/10/16 09:48,2019/10/16 09:48,2018/09/06 07:03,2019/04/19 08:20,1,405 days 02:45:00.000000000,0:00:00
895,"docker-library
openjdk",https://github.com/docker-library/openjdk,52cb2ce3bda94b1c0229f11bfa176035ad41c9b8,11/jdk/buster/Dockerfile,11/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2020/08/29 01:53,2019/10/16 09:48,2018/04/15 01:18,,1,867 days 00:35:00.000000000,"-318 days, 7:55:00"
896,"docker-library
openjdk",https://github.com/docker-library/openjdk,52cb2ce3bda94b1c0229f11bfa176035ad41c9b8,11/jdk/buster/Dockerfile,11/jdk/buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2020/08/29 01:53,2019/10/16 09:48,2018/04/15 01:18,,1,867 days 00:35:00.000000000,"-318 days, 7:55:00"
897,"docker-library
openjdk",https://github.com/docker-library/openjdk,e7c6ade3d9d636c39fbbfa30c144a93fbb038494,11/jdk/Dockerfile,11/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/07/17 07:40,2019/10/16 09:48,2018/04/15 01:18,,1,458 days 06:22:00.000000000,"91 days, 2:08:00"
898,"docker-library
openjdk",https://github.com/docker-library/openjdk,fb20f308cef5db398462495afd2f7bc60f51590a,11/jre/slim/Dockerfile,11/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/10/16 09:48,2019/10/16 09:48,2018/04/15 01:18,,1,549 days 08:30:00.000000000,0:00:00
899,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,11/jre/slim/Dockerfile,11/jre/slim-buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/07/17 08:32,2019/10/16 09:48,2018/04/15 01:18,,1,458 days 07:14:00.000000000,"91 days, 1:16:00"
900,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,11/jre/slim/Dockerfile,11/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/07/17 08:32,2019/10/16 09:48,2018/04/15 01:18,,1,458 days 07:14:00.000000000,"91 days, 1:16:00"
901,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,11/jre/windows/windowsservercore-ltsc2016/Dockerfile,11/jre/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO signature? checksum?
",2019/07/17 08:32,2019/10/16 09:48,2019/07/17 08:32,,1,0 days 00:00:00.000000000,"91 days, 1:16:00"
902,"docker-library
openjdk",https://github.com/docker-library/openjdk,fb20f308cef5db398462495afd2f7bc60f51590a,11/jre/Dockerfile,11/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2019/10/16 09:48,2019/10/16 09:48,2018/04/15 01:18,,1,549 days 08:30:00.000000000,0:00:00
903,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,11/jre/Dockerfile,11/jre/buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2019/07/17 08:32,2019/10/16 09:48,2018/04/15 01:18,,1,458 days 07:14:00.000000000,"91 days, 1:16:00"
904,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,11/jre/Dockerfile,11/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/07/17 08:32,2019/10/16 09:48,2018/04/15 01:18,,1,458 days 07:14:00.000000000,"91 days, 1:16:00"
905,"docker-library
openjdk",https://github.com/docker-library/openjdk,fb20f308cef5db398462495afd2f7bc60f51590a,11/jdk/windows/windowsservercore-1809/Dockerfile,11/jdk/windows/windowsservercore-1809/Dockerfile,"# TODO signature? checksum?
",2019/10/16 09:48,2019/10/16 09:48,2019/01/15 17:49,2019/04/19 08:20,1,273 days 15:59:00.000000000,0:00:00
906,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,11/jre/windows/windowsservercore-1809/Dockerfile,11/jre/windows/windowsservercore-1809/Dockerfile,"# TODO signature? checksum?
",2019/07/17 08:32,2019/10/16 09:48,2019/07/17 08:32,,1,0 days 00:00:00.000000000,"91 days, 1:16:00"
907,"docker-library
openjdk",https://github.com/docker-library/openjdk,448901d68e2a32f49bda1a8789d4c56e821506aa,13/jdk/oracle/Dockerfile,13/jdk/oracle/Dockerfile,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2019/05/24 03:48,2019/05/24 03:48,2019/01/02 17:24,2020/03/18 06:09,1,141 days 10:24:00.000000000,0:00:00
908,"docker-library
openjdk",https://github.com/docker-library/openjdk,572682ed1cb951ab8d978e8015e4a910093db920,11/jre/windows/windowsservercore-1803/Dockerfile,11/jre/windows/windowsservercore-1803/Dockerfile,"# TODO signature? checksum?
",2019/07/17 08:32,2019/07/17 08:32,2019/07/17 08:32,2019/12/10 07:35,1,0 days 00:00:00.000000000,0:00:00
909,"docker-library
openjdk",https://github.com/docker-library/openjdk,e715db19b8abe216948ef5b81dcb352273bd69f3,Dockerfile-adopt-linux.template,Dockerfile-adopt-debian.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 08:34,2019/05/23 08:34,2019/05/23 06:37,,1,0 days 01:57:00.000000000,0:00:00
910,"docker-library
openjdk",https://github.com/docker-library/openjdk,52cb2ce3bda94b1c0229f11bfa176035ad41c9b8,Dockerfile-adopt-debian.template,Dockerfile-adopt-debian.template,"# TODO strip ""demo"" and ""man"" folders?
",2020/08/29 01:53,2019/05/23 08:34,2019/05/23 06:37,,1,463 days 19:16:00.000000000,"-464 days, 6:41:00"
911,"docker-library
openjdk",https://github.com/docker-library/openjdk,52cb2ce3bda94b1c0229f11bfa176035ad41c9b8,Dockerfile-adopt-debian.template,Dockerfile-adopt-debian.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2020/08/29 01:53,2019/05/23 08:34,2019/05/23 06:37,,1,463 days 19:16:00.000000000,"-464 days, 6:41:00"
912,"docker-library
openjdk",https://github.com/docker-library/openjdk,e715db19b8abe216948ef5b81dcb352273bd69f3,8/jre/Dockerfile,8/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 08:34,2019/05/23 08:34,2014/10/10 21:26,,1,1685 days 11:08:00.000000000,0:00:00
913,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jre/Dockerfile,8/jre/buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2020/07/17 03:48,2019/05/23 08:34,2014/10/10 21:26,,1,2106 days 06:22:00.000000000,"-421 days, 4:46:00"
914,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jre/Dockerfile,8/jre/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2020/07/17 03:48,2019/05/23 08:34,2014/10/10 21:26,,1,2106 days 06:22:00.000000000,"-421 days, 4:46:00"
915,"docker-library
openjdk",https://github.com/docker-library/openjdk,e715db19b8abe216948ef5b81dcb352273bd69f3,8/jdk/Dockerfile,8/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 08:34,2019/05/23 08:34,2014/07/19 08:19,,1,1769 days 00:15:00.000000000,0:00:00
916,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jdk/Dockerfile,8/jdk/buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2020/07/17 03:48,2019/05/23 08:34,2014/07/19 08:19,,1,2189 days 19:29:00.000000000,"-421 days, 4:46:00"
917,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jdk/Dockerfile,8/jdk/buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2020/07/17 03:48,2019/05/23 08:34,2014/07/19 08:19,,1,2189 days 19:29:00.000000000,"-421 days, 4:46:00"
918,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jre/windows/windowsservercore-ltsc2016/Dockerfile,8/jre/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO signature? checksum?
",2020/07/17 03:48,2019/10/16 09:48,2019/05/23 06:37,,1,420 days 21:11:00.000000000,"-275 days, 6:00:00"
919,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2020/07/17 03:48,2019/05/23 08:34,2017/07/22 02:20,,1,1091 days 01:28:00.000000000,"-421 days, 4:46:00"
920,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2020/07/17 03:48,2019/05/23 08:34,2017/07/22 02:20,,1,1091 days 01:28:00.000000000,"-421 days, 4:46:00"
921,"docker-library
openjdk",https://github.com/docker-library/openjdk,e715db19b8abe216948ef5b81dcb352273bd69f3,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 08:34,2019/05/23 08:34,2017/07/22 02:20,,1,670 days 06:14:00.000000000,0:00:00
922,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,8/jdk/slim/Dockerfile,8/jdk/slim-buster/Dockerfile,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2017/07/22 02:20,,1,670 days 04:17:00.000000000,1:57:00
923,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jdk/windows/windowsservercore-ltsc2016/Dockerfile,8/jdk/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO signature? checksum?
",2020/07/17 03:48,2019/10/16 09:48,2017/11/23 07:52,,1,966 days 19:56:00.000000000,"-275 days, 6:00:00"
924,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jre/windows/windowsservercore-1809/Dockerfile,8/jre/windows/windowsservercore-1809/Dockerfile,"# TODO signature? checksum?
",2020/07/17 03:48,2019/10/16 09:48,2019/05/23 06:37,,1,420 days 21:11:00.000000000,"-275 days, 6:00:00"
925,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jdk/windows/windowsservercore-1809/Dockerfile,8/jdk/windows/windowsservercore-1809/Dockerfile,"# TODO signature? checksum?
",2020/07/17 03:48,2019/10/16 09:48,2019/01/15 17:49,,1,548 days 09:59:00.000000000,"-275 days, 6:00:00"
926,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2020/07/17 03:48,2019/05/23 08:34,2017/07/22 02:20,,1,1091 days 01:28:00.000000000,"-421 days, 4:46:00"
927,"docker-library
openjdk",https://github.com/docker-library/openjdk,b5d14d9165fad693901c285d6e7bbc36d1cde41f,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO strip ""demo"" and ""man"" folders?
",2020/07/17 03:48,2019/05/23 08:34,2017/07/22 02:20,,1,1091 days 01:28:00.000000000,"-421 days, 4:46:00"
928,"docker-library
openjdk",https://github.com/docker-library/openjdk,e715db19b8abe216948ef5b81dcb352273bd69f3,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 08:34,2019/05/23 08:34,2017/07/22 02:20,,1,670 days 06:14:00.000000000,0:00:00
929,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,8/jre/slim/Dockerfile,8/jre/slim-buster/Dockerfile,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2017/07/22 02:20,,1,670 days 04:17:00.000000000,1:57:00
930,"docker-library
openjdk",https://github.com/docker-library/openjdk,7d6b0528da55c7b74feff4f565c9dbb8907b8c9a,Dockerfile-oracle.template,Dockerfile-oracle-oraclelinux.template,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2018/09/13 07:10,2018/09/13 07:10,2018/09/13 07:10,,1,0 days 00:00:00.000000000,0:00:00
931,"docker-library
openjdk",https://github.com/docker-library/openjdk,2ac692bcec79f6ffe1c26b3bfc79eb9b1beae885,11/jdk/oracle/Dockerfile,11/jdk/oracle/Dockerfile,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2019/01/19 04:48,2019/01/19 04:48,2018/09/13 07:10,2019/04/19 08:20,1,127 days 21:38:00.000000000,0:00:00
932,"docker-library
openjdk",https://github.com/docker-library/openjdk,0d60b6626ac530dfc39febf84416d96ca52aad8e,12/jdk/oracle/Dockerfile,12/jdk/oracle/Dockerfile,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2018/11/09 04:49,2018/11/09 04:49,2018/09/13 07:10,2019/09/18 08:59,1,56 days 21:39:00.000000000,0:00:00
933,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,Dockerfile-adopt-windows.template,Dockerfile-adopt-windows-servercore.template,"# TODO signature? checksum?
",2019/05/23 06:37,2019/05/23 06:37,2019/05/23 06:37,,1,0 days 00:00:00.000000000,0:00:00
934,"docker-library
openjdk",https://github.com/docker-library/openjdk,403960ed0b1f6dcb2f3194f7f3139bb954e28b77,8/jdk/windows/windowsservercore-1803/Dockerfile,8/jdk/windows/windowsservercore-1803/Dockerfile,"# TODO signature? checksum?
",2019/10/16 09:48,2019/10/16 09:48,2018/11/08 01:22,2019/12/10 07:35,1,342 days 08:26:00.000000000,0:00:00
935,"docker-library
openjdk",https://github.com/docker-library/openjdk,403960ed0b1f6dcb2f3194f7f3139bb954e28b77,8/jre/windows/windowsservercore-1803/Dockerfile,8/jre/windows/windowsservercore-1803/Dockerfile,"# TODO signature? checksum?
",2019/10/16 09:48,2019/10/16 09:48,2019/05/23 06:37,2019/12/10 07:35,1,146 days 03:11:00.000000000,0:00:00
936,"docker-library
openjdk",https://github.com/docker-library/openjdk,e715db19b8abe216948ef5b81dcb352273bd69f3,Dockerfile-adopt-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
",2019/05/23 08:34,2019/05/23 08:34,2019/05/23 06:37,,1,0 days 01:57:00.000000000,0:00:00
937,"docker-library
openjdk",https://github.com/docker-library/openjdk,52cb2ce3bda94b1c0229f11bfa176035ad41c9b8,Dockerfile-adopt-debian-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO strip ""demo"" and ""man"" folders?
",2020/08/29 01:53,2019/05/23 08:34,2019/05/23 06:37,,1,463 days 19:16:00.000000000,"-464 days, 6:41:00"
938,"docker-library
openjdk",https://github.com/docker-library/openjdk,52cb2ce3bda94b1c0229f11bfa176035ad41c9b8,Dockerfile-adopt-debian-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
",2020/08/29 01:53,2019/05/23 08:34,2019/05/23 06:37,,1,463 days 19:16:00.000000000,"-464 days, 6:41:00"
939,"docker-library
openjdk",https://github.com/docker-library/openjdk,3eb0351b208d739fac35345c85e3c6237c2114ec,Dockerfile-adopt-slim.template,Dockerfile-adopt-debian-slim.template,"# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
",2019/05/23 06:37,2019/05/23 08:34,2019/05/23 06:37,,1,0 days 00:00:00.000000000,1:57:00
940,"docker-library
openjdk",https://github.com/docker-library/openjdk,fb20f308cef5db398462495afd2f7bc60f51590a,11/jdk/windows/windowsservercore-1803/Dockerfile,11/jdk/windows/windowsservercore-1803/Dockerfile,"# TODO signature? checksum?
",2019/10/16 09:48,2019/10/16 09:48,2018/09/06 07:03,2019/04/19 08:20,1,405 days 02:45:00.000000000,0:00:00
941,"docker-library
openjdk",https://github.com/docker-library/openjdk,7d6b0528da55c7b74feff4f565c9dbb8907b8c9a,10/jdk/oracle/Dockerfile,10/jdk/oracle/Dockerfile,"# Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
# TODO oraclelinux doesn't have C.UTF-8 by default??

",2018/09/13 07:10,2018/12/07 01:27,2018/09/13 07:10,2018/12/07 01:27,1,0 days 00:00:00.000000000,"84 days, 18:17:00"
942,"docker-library
docker",https://github.com/docker-library/docker,1dc473d09158fb4752e1176f4ef26e1fcb6e2ad4,18.09-rc/Dockerfile,18.09/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2019/08/17 20:04,2019/05/02 02:04,2018/08/23 06:02,2019/09/05 12:01,1,359 days 14:02:00.000000000,"-108 days, 6:00:00"
943,"docker-library
docker",https://github.com/docker-library/docker,1dc473d09158fb4752e1176f4ef26e1fcb6e2ad4,18.09-rc/Dockerfile,18.09/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2019/08/17 20:04,2019/05/02 02:04,2018/08/23 06:02,2019/09/05 12:01,1,359 days 14:02:00.000000000,"-108 days, 6:00:00"
944,"docker-library
docker",https://github.com/docker-library/docker,70e698f1e2f12ed3de3a32e3f25b3c781f918aa0,18.02-rc/Dockerfile,18.02-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/02/02 01:55,2018/01/26 02:49,2018/01/26 02:44,2018/02/09 02:29,1,6 days 23:11:00.000000000,"-7 days, 0:54:00"
945,"docker-library
docker",https://github.com/docker-library/docker,70e698f1e2f12ed3de3a32e3f25b3c781f918aa0,18.02-rc/Dockerfile,18.02-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/02/02 01:55,2018/01/26 02:49,2018/01/26 02:44,2018/02/09 02:29,1,6 days 23:11:00.000000000,"-7 days, 0:54:00"
946,"docker-library
docker",https://github.com/docker-library/docker,bc5d62520258cacb230485ee96754f9f9aa117c4,18.03/dind/Dockerfile,18.03/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/05/09 03:09,2018/05/09 03:09,2018/01/26 02:44,2018/07/20 03:30,1,103 days 00:25:00.000000000,0:00:00
947,"docker-library
docker",https://github.com/docker-library/docker,bc5d62520258cacb230485ee96754f9f9aa117c4,18.03/dind/Dockerfile,18.03/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/09 03:09,2018/07/20 03:30,2018/01/26 02:44,2018/07/20 03:30,1,103 days 00:25:00.000000000,"72 days, 0:21:00"
948,"docker-library
docker",https://github.com/docker-library/docker,168a6d227d021c6d38c3986b7c668702ec172fa7,17.06/dind/Dockerfile,17.09/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/09/30 02:02,2015/10/14 23:05,2015/08/07 04:54,2018/02/09 02:29,1,784 days 21:08:00.000000000,"-717 days, 21:03:00"
949,"docker-library
docker",https://github.com/docker-library/docker,2e8569cf5c665ef955855e95be475f52a55c0720,1.7/dind/Dockerfile,17.09/dind/Dockerfile,"# TODO aufs-tools

",2015/10/14 23:05,2015/10/14 23:05,2015/08/07 04:54,2018/02/09 02:29,1,68 days 18:11:00.000000000,0:00:00
950,"docker-library
docker",https://github.com/docker-library/docker,7010262c44b136455559bffae26181f730d4de99,Dockerfile-dind.template,Dockerfile-dind.template,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/10/28 02:17,2017/11/02 12:13,2017/06/08 08:31,,1,141 days 17:46:00.000000000,"5 days, 9:56:00"
951,"docker-library
docker",https://github.com/docker-library/docker,6438624ec99b859db87dcef2cc75f5a961d1903c,Dockerfile-dind.template,Dockerfile-dind.template,"# https://github.com/docker/docker/tree/master/hack/dind
",2019/07/17 11:08,2017/11/02 12:13,2017/06/08 08:31,,1,769 days 02:37:00.000000000,"-622 days, 1:05:00"
952,"docker-library
docker",https://github.com/docker-library/docker,1c8b144ed9ec49ac8cc7ca75f8628fd8de6c82b5,1.10/dind/Dockerfile,17.12/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/07/01 02:09,2015/10/14 23:05,2015/08/07 04:54,2018/05/11 01:18,1,328 days 21:15:00.000000000,"-261 days, 20:56:00"
953,"docker-library
docker",https://github.com/docker-library/docker,bc5d62520258cacb230485ee96754f9f9aa117c4,17.12/dind/Dockerfile,17.12/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/09 03:09,2015/10/14 23:05,2015/08/07 04:54,2018/05/11 01:18,1,1005 days 22:15:00.000000000,"-938 days, 19:56:00"
954,"docker-library
docker",https://github.com/docker-library/docker,2e8569cf5c665ef955855e95be475f52a55c0720,1.8/dind/Dockerfile,17.12/dind/Dockerfile,"# TODO aufs-tools

",2015/10/14 23:05,2015/10/14 23:05,2015/08/07 04:54,2018/05/11 01:18,1,68 days 18:11:00.000000000,0:00:00
955,"docker-library
docker",https://github.com/docker-library/docker,fe9ffca05a3e29de69d7b2e8dd6c3d505e83412b,18.06-rc/dind/Dockerfile,18.06-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/08/14 04:55,2018/07/20 03:30,2018/07/03 02:02,2018/07/20 03:30,1,42 days 02:53:00.000000000,"-26 days, 22:35:00"
956,"docker-library
docker",https://github.com/docker-library/docker,fe9ffca05a3e29de69d7b2e8dd6c3d505e83412b,18.06-rc/dind/Dockerfile,18.06-rc/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/08/14 04:55,2018/07/20 03:30,2018/07/03 02:02,2018/07/20 03:30,1,42 days 02:53:00.000000000,"-26 days, 22:35:00"
957,"docker-library
docker",https://github.com/docker-library/docker,2d95875bb9c0ea81a04d9a7d3ddb26120fde17cd,18.06-rc/Dockerfile,18.06-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/08/15 14:04,2018/08/15 14:04,2018/07/03 02:02,2018/07/20 03:30,1,43 days 12:02:00.000000000,0:00:00
958,"docker-library
docker",https://github.com/docker-library/docker,2d95875bb9c0ea81a04d9a7d3ddb26120fde17cd,18.06-rc/Dockerfile,18.06-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/08/15 14:04,2018/08/15 14:04,2018/07/03 02:02,2018/07/20 03:30,1,43 days 12:02:00.000000000,0:00:00
959,"docker-library
docker",https://github.com/docker-library/docker,21b17056a748a279997729c7d26ddb23e4fe5d5e,19.03-rc/Dockerfile,19.03-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2019/10/30 14:04,2019/10/30 14:04,2019/04/06 08:09,,1,207 days 05:55:00.000000000,0:00:00
960,"docker-library
docker",https://github.com/docker-library/docker,21b17056a748a279997729c7d26ddb23e4fe5d5e,19.03-rc/Dockerfile,19.03-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2019/10/30 14:04,2019/10/30 14:04,2019/04/06 08:09,,1,207 days 05:55:00.000000000,0:00:00
961,"docker-library
docker",https://github.com/docker-library/docker,4dd3f3fe1f263ea74cdc8bed6091008cf62ab751,19.03/Dockerfile,19.03/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2019/10/19 14:04,2020/03/12 05:34,2019/07/23 05:16,,1,88 days 08:48:00.000000000,"144 days, 15:30:00"
962,"docker-library
docker",https://github.com/docker-library/docker,4dd3f3fe1f263ea74cdc8bed6091008cf62ab751,19.03/Dockerfile,19.03/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2019/10/19 14:04,2020/03/12 05:34,2019/07/23 05:16,,1,88 days 08:48:00.000000000,"144 days, 15:30:00"
963,"docker-library
docker",https://github.com/docker-library/docker,7a67842e7ff12c1426ae6a67ac1b7a701b51f3df,Dockerfile.template,Dockerfile.template,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2019/12/10 09:06,2017/10/12 06:31,2017/06/08 08:31,,1,915 days 00:35:00.000000000,"-790 days, 21:25:00"
964,"docker-library
docker",https://github.com/docker-library/docker,7a67842e7ff12c1426ae6a67ac1b7a701b51f3df,Dockerfile.template,Dockerfile.template,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2019/12/10 09:06,2017/10/12 06:31,2017/06/08 08:31,,1,915 days 00:35:00.000000000,"-790 days, 21:25:00"
965,"docker-library
docker",https://github.com/docker-library/docker,f4d3f30de26100deddd4afdc37dd04bb6d018b26,17.12-rc/Dockerfile,17.12-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/12/13 03:04,2017/12/13 03:04,2018/02/15 04:59,2017/12/28 08:29,1,-65 days +22:05:00.000000000,0:00:00
966,"docker-library
docker",https://github.com/docker-library/docker,f4d3f30de26100deddd4afdc37dd04bb6d018b26,17.12-rc/Dockerfile,17.12-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/12/13 03:04,2017/12/13 03:04,2018/02/15 04:59,2017/12/28 08:29,1,-65 days +22:05:00.000000000,0:00:00
967,"docker-library
docker",https://github.com/docker-library/docker,65fab2cd767c10f22ee66afa919eda80dbdc8872,18.09/dind/Dockerfile,18.09/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2019/01/11 09:15,2019/09/05 12:01,2018/08/23 06:02,2019/09/05 12:01,1,141 days 03:13:00.000000000,"237 days, 2:46:00"
968,"docker-library
docker",https://github.com/docker-library/docker,65fab2cd767c10f22ee66afa919eda80dbdc8872,18.09/dind/Dockerfile,18.09/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2019/01/11 09:15,2019/09/05 12:01,2018/08/23 06:02,2019/09/05 12:01,1,141 days 03:13:00.000000000,"237 days, 2:46:00"
969,"docker-library
docker",https://github.com/docker-library/docker,2f6926c4fb37274b90fae3ba6c3320619a8d0289,17.07/windows/windowsservercore/Dockerfile,17.10/windows/windowsservercore/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/13 08:46,2017/11/22 02:48,2017/10/13 08:46,2017/11/22 02:48,1,0 days 00:00:00.000000000,"39 days, 18:02:00"
970,"docker-library
docker",https://github.com/docker-library/docker,2aa6d388f205fc20ad22402bfed4ece715c7cb48,Dockerfile-windows-windowsservercore.template,Dockerfile-windows-windowsservercore.template,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/11/23 08:09,2017/11/23 08:09,2017/10/13 08:46,,1,40 days 23:23:00.000000000,0:00:00
971,"docker-library
docker",https://github.com/docker-library/docker,2f6926c4fb37274b90fae3ba6c3320619a8d0289,17.10-rc/windows/windowsservercore/Dockerfile,17.10-rc/windows/windowsservercore/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/13 08:46,2017/10/19 01:49,2017/10/13 08:46,2017/10/19 01:49,1,0 days 00:00:00.000000000,"5 days, 17:03:00"
972,"docker-library
docker",https://github.com/docker-library/docker,4e80fad160cf70fac2ad8920528b43870426a00c,17.09/windows/windowsservercore-1709/Dockerfile,17.09/windows/windowsservercore-1709/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/12/08 15:04,2017/12/09 03:24,2017/10/13 08:46,2017/12/09 03:24,1,56 days 06:18:00.000000000,12:20:00
973,"docker-library
docker",https://github.com/docker-library/docker,2f6926c4fb37274b90fae3ba6c3320619a8d0289,17.06/windows/windowsservercore/Dockerfile,17.06/windows/windowsservercore/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/10/13 08:46,2017/11/08 23:45,2017/10/13 08:46,2017/11/08 23:45,1,0 days 00:00:00.000000000,"26 days, 14:59:00"
974,"docker-library
docker",https://github.com/docker-library/docker,9fef62af4ad3a24c43894a16e06ba160b592e06a,18.03-rc/dind/Dockerfile,18.05-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/04/13 02:07,2018/05/11 01:18,2018/02/23 03:05,2018/05/11 01:18,1,48 days 23:02:00.000000000,"27 days, 23:11:00"
975,"docker-library
docker",https://github.com/docker-library/docker,bc5d62520258cacb230485ee96754f9f9aa117c4,18.05-rc/dind/Dockerfile,18.05-rc/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2018/05/09 03:09,2018/05/11 01:18,2018/02/23 03:05,2018/05/11 01:18,1,75 days 00:04:00.000000000,"1 day, 22:09:00"
976,"docker-library
docker",https://github.com/docker-library/docker,65fab2cd767c10f22ee66afa919eda80dbdc8872,18.06/dind/Dockerfile,18.06/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2019/01/11 09:15,2019/06/15 06:03,2018/04/04 02:45,2019/06/15 06:03,1,282 days 06:30:00.000000000,"154 days, 20:48:00"
977,"docker-library
docker",https://github.com/docker-library/docker,65fab2cd767c10f22ee66afa919eda80dbdc8872,18.06/dind/Dockerfile,18.06/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2019/01/11 09:15,2019/06/15 06:03,2018/04/04 02:45,2019/06/15 06:03,1,282 days 06:30:00.000000000,"154 days, 20:48:00"
978,"docker-library
docker",https://github.com/docker-library/docker,51a40fb6eed136282edaf32f45d469ac2c5fb6e4,17.11-rc/windows/windowsservercore/Dockerfile,17.11-rc/windows/windowsservercore/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/11/16 21:04,2017/11/09 00:14,2017/10/31 23:21,2017/11/01 06:04,1,15 days 21:43:00.000000000,"-8 days, 3:10:00"
979,"docker-library
docker",https://github.com/docker-library/docker,5235be1da9e2347f1efbbc2a6689726cb72569ce,17.11-rc/dind/Dockerfile,17.11-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/10/31 23:21,2017/10/31 23:21,2017/10/31 23:21,2017/11/01 06:04,1,0 days 00:00:00.000000000,0:00:00
980,"docker-library
docker",https://github.com/docker-library/docker,146b0d04de69f9aaace6a5a3c22ac4e8e9744fd3,17.11-rc/Dockerfile,17.11-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/11/08 23:41,2017/11/08 23:41,2017/10/31 23:21,2017/11/01 06:04,1,8 days 00:20:00.000000000,0:00:00
981,"docker-library
docker",https://github.com/docker-library/docker,146b0d04de69f9aaace6a5a3c22ac4e8e9744fd3,17.11-rc/Dockerfile,17.11-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/11/08 23:41,2017/11/08 23:41,2017/10/31 23:21,2017/11/01 06:04,1,8 days 00:20:00.000000000,0:00:00
982,"docker-library
docker",https://github.com/docker-library/docker,737f83092a47b012d09a0cbf0ed72759550301cb,1.13-rc/experimental/dind/Dockerfile,1.13-rc/experimental/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/11/12 10:36,2016/11/13 01:13,2016/11/12 10:36,2016/11/13 01:13,1,0 days 00:00:00.000000000,14:37:00
983,"docker-library
docker",https://github.com/docker-library/docker,737f83092a47b012d09a0cbf0ed72759550301cb,1.13-rc/dind/Dockerfile,1.13-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/11/12 10:36,2017/01/19 03:43,2016/11/12 10:36,2017/01/19 03:43,1,0 days 00:00:00.000000000,"67 days, 17:07:00"
984,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,1.2/dind/Dockerfile,1.2/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,"15 days, 7:28:00"
985,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,1.5/dind/Dockerfile,1.5/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,"15 days, 7:28:00"
986,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,1.1/dind/Dockerfile,1.1/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,"15 days, 7:28:00"
987,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,1.3/dind/Dockerfile,1.3/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,"15 days, 7:28:00"
988,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,1.0/dind/Dockerfile,1.0/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,"15 days, 7:28:00"
989,"docker-library
docker",https://github.com/docker-library/docker,f1341e1e9a099073463b1e8192c45435ce3e6760,1.4/dind/Dockerfile,1.4/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:56,2015/08/22 12:24,2015/08/07 04:56,2015/08/22 12:24,1,0 days 00:00:00.000000000,"15 days, 7:28:00"
990,"docker-library
docker",https://github.com/docker-library/docker,85ba25f3cc07e170c983f4c13947a2786d6bd33d,17.06-rc/Dockerfile,17.06/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/08/09 14:05,2017/08/09 14:05,2017/05/31 01:53,2017/09/28 01:49,1,70 days 12:12:00.000000000,0:00:00
991,"docker-library
docker",https://github.com/docker-library/docker,454a0ff9e99d4fde7112b25d64d25f940ab28a99,17.06/Dockerfile,17.06/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/10/12 06:31,2017/08/09 14:05,2017/05/31 01:53,2017/09/28 01:49,1,134 days 04:38:00.000000000,"-64 days, 7:34:00"
992,"docker-library
docker",https://github.com/docker-library/docker,e7e2e3119360567641d334f1d274952236632357,17.06-rc/Dockerfile,17.06/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/31 01:53,2017/08/09 14:05,2017/05/31 01:53,2017/09/28 01:49,1,0 days 00:00:00.000000000,"70 days, 12:12:00"
993,"docker-library
docker",https://github.com/docker-library/docker,4e80fad160cf70fac2ad8920528b43870426a00c,17.09/windows/windowsservercore-ltsc2016/Dockerfile,17.09/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/12/08 15:04,2017/12/09 03:24,2017/11/23 08:09,2017/12/09 03:24,1,15 days 06:55:00.000000000,12:20:00
994,"docker-library
docker",https://github.com/docker-library/docker,e7e2e3119360567641d334f1d274952236632357,17.06-rc/dind/Dockerfile,17.06-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/05/31 01:53,2017/05/31 01:53,2017/05/31 01:53,2017/06/29 09:41,1,0 days 00:00:00.000000000,0:00:00
995,"docker-library
docker",https://github.com/docker-library/docker,8fa02e5cb4249cf41263c29531566bd2ca99cf63,1.9-rc/dind/Dockerfile,1.9-rc/dind/Dockerfile,"# TODO aufs-tools

",2015/11/14 07:05,2015/11/04 06:37,2015/10/14 23:05,2015/11/04 06:37,1,30 days 08:00:00.000000000,"-11 days, 23:32:00"
996,"docker-library
docker",https://github.com/docker-library/docker,4f5b0cb5438527c6913a943ae07b4d2b1eaa8393,19.03-rc/dind/Dockerfile,19.03-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2020/07/31 20:04,2020/07/31 20:04,2019/04/06 08:09,,1,482 days 11:55:00.000000000,0:00:00
997,"docker-library
docker",https://github.com/docker-library/docker,4f5b0cb5438527c6913a943ae07b4d2b1eaa8393,19.03-rc/dind/Dockerfile,19.03-rc/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2020/07/31 20:04,2020/07/31 20:04,2019/04/06 08:09,,1,482 days 11:55:00.000000000,0:00:00
998,"docker-library
docker",https://github.com/docker-library/docker,454a0ff9e99d4fde7112b25d64d25f940ab28a99,17.09/Dockerfile,17.09/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/10/12 06:31,2017/09/21 20:04,2017/09/08 01:31,2018/02/09 02:29,1,34 days 05:00:00.000000000,"-21 days, 13:33:00"
999,"docker-library
docker",https://github.com/docker-library/docker,f7363cacd357b4bf6a550fb4abfa9faf911d1d71,17.09-rc/Dockerfile,17.09/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/09/21 20:04,2017/09/21 20:04,2017/09/08 01:31,2018/02/09 02:29,1,13 days 18:33:00.000000000,0:00:00
1000,"docker-library
docker",https://github.com/docker-library/docker,51ba3bdf3e104e8af01150daec9122c4fbeaa41e,17.12/Dockerfile,17.12/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/12/28 08:46,2017/12/28 08:46,2017/10/06 01:38,2018/05/11 01:18,1,83 days 07:08:00.000000000,0:00:00
1001,"docker-library
docker",https://github.com/docker-library/docker,51ba3bdf3e104e8af01150daec9122c4fbeaa41e,17.12/Dockerfile,17.12/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/12/28 08:46,2017/12/28 08:46,2017/10/06 01:38,2018/05/11 01:18,1,83 days 07:08:00.000000000,0:00:00
1002,"docker-library
docker",https://github.com/docker-library/docker,08e48bcb07e3edeff5399676924c42d18f894df6,18.06/Dockerfile,18.06/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2019/02/21 09:04,2018/01/05 04:48,2018/01/05 04:48,2019/06/15 06:03,1,412 days 04:16:00.000000000,"-413 days, 19:44:00"
1003,"docker-library
docker",https://github.com/docker-library/docker,08e48bcb07e3edeff5399676924c42d18f894df6,18.06/Dockerfile,18.06/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2019/02/21 09:04,2018/01/05 04:48,2018/01/05 04:48,2019/06/15 06:03,1,412 days 04:16:00.000000000,"-413 days, 19:44:00"
1004,"docker-library
docker",https://github.com/docker-library/docker,06717e6f2add8226068bec54abb23e646dea90e0,17.03-rc/dind/Dockerfile,17.03-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/02/23 06:49,2017/02/23 06:49,2017/02/23 06:49,2017/03/03 05:33,1,0 days 00:00:00.000000000,0:00:00
1005,"docker-library
docker",https://github.com/docker-library/docker,2c75eb72ab98b95256be008aa93efdec289d96e8,17.03-rc/Dockerfile,17.03-rc/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/31 03:18,2017/06/08 08:31,2017/02/23 06:49,2017/03/03 05:33,1,96 days 20:29:00.000000000,"8 days, 5:13:00"
1006,"docker-library
docker",https://github.com/docker-library/docker,dab211d7162038d6d595017e4fd01dad78057d0b,17.03-rc/Dockerfile,17.03-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/06/16 08:39,2017/03/03 05:33,2017/02/23 06:49,2017/03/03 05:33,1,113 days 01:50:00.000000000,"-106 days, 20:54:00"
1007,"docker-library
docker",https://github.com/docker-library/docker,f522868d85d70569fb3e90bd913efa1c3394a264,17.09-rc/windows/windowsservercore-1709/Dockerfile,17.09-rc/windows/windowsservercore-1709/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/12/03 23:02,2017/12/05 09:35,2017/12/03 23:02,2017/12/05 09:35,1,0 days 00:00:00.000000000,"1 day, 10:33:00"
1008,"docker-library
docker",https://github.com/docker-library/docker,f522868d85d70569fb3e90bd913efa1c3394a264,17.09-rc/windows/windowsservercore-ltsc2016/Dockerfile,17.09-rc/windows/windowsservercore-ltsc2016/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/12/03 23:02,2017/12/05 09:35,2017/12/03 23:02,2017/12/05 09:35,1,0 days 00:00:00.000000000,"1 day, 10:33:00"
1009,"docker-library
docker",https://github.com/docker-library/docker,56ff41e041f3bffbabaa9237421baa5ebe86ec74,17.12-rc/dind/Dockerfile,17.12-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/02/15 04:59,2018/02/15 04:59,2017/09/08 01:31,2017/12/28 08:29,1,160 days 03:28:00.000000000,0:00:00
1010,"docker-library
docker",https://github.com/docker-library/docker,ea685128f1db54d575ab464c66b73907e4838c8b,17.07-rc/Dockerfile,17.07/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/08/18 15:02,2017/10/12 06:31,2016/06/17 03:03,2017/10/19 01:49,1,427 days 11:59:00.000000000,"54 days, 15:29:00"
1011,"docker-library
docker",https://github.com/docker-library/docker,5a196cae40e2a0ab5050cf6d79b697e032352b24,17.03/Dockerfile,17.07/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/11 13:11,2017/10/12 06:31,2016/06/17 03:03,2017/10/19 01:49,1,328 days 10:08:00.000000000,"153 days, 17:20:00"
1012,"docker-library
docker",https://github.com/docker-library/docker,454a0ff9e99d4fde7112b25d64d25f940ab28a99,17.07/Dockerfile,17.07/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2017/10/12 06:31,2017/10/19 01:49,2016/06/17 03:03,2017/10/19 01:49,1,482 days 03:28:00.000000000,"6 days, 19:18:00"
1013,"docker-library
docker",https://github.com/docker-library/docker,dab211d7162038d6d595017e4fd01dad78057d0b,17.05/Dockerfile,17.05/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2017/06/16 08:39,2017/05/11 13:11,2016/03/31 06:43,2017/06/29 09:41,1,442 days 01:56:00.000000000,"-36 days, 4:32:00"
1014,"docker-library
docker",https://github.com/docker-library/docker,5a196cae40e2a0ab5050cf6d79b697e032352b24,17.05/Dockerfile,17.05/Dockerfile,"# TODO ENV DOCKER_SHA256

",2017/05/11 13:11,2017/06/29 09:41,2016/03/31 06:43,2017/06/29 09:41,1,406 days 06:28:00.000000000,"48 days, 20:30:00"
1015,"docker-library
docker",https://github.com/docker-library/docker,c7f43d116aa4a36ed630191442774e39a9c94cb6,18.03-rc/Dockerfile,18.05-rc/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/03/09 08:43,2018/03/09 08:43,2018/02/23 03:05,2018/05/11 01:18,1,14 days 05:38:00.000000000,0:00:00
1016,"docker-library
docker",https://github.com/docker-library/docker,c7f43d116aa4a36ed630191442774e39a9c94cb6,18.03-rc/Dockerfile,18.05-rc/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/03/09 08:43,2018/03/09 08:43,2018/02/23 03:05,2018/05/11 01:18,1,14 days 05:38:00.000000000,0:00:00
1017,"docker-library
docker",https://github.com/docker-library/docker,4975dca2dd357705c5613045348402ab664ccdf0,19.03/dind/Dockerfile,19.03/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2019/07/23 05:16,2019/07/23 05:16,2019/07/23 05:16,,1,0 days 00:00:00.000000000,0:00:00
1018,"docker-library
docker",https://github.com/docker-library/docker,4975dca2dd357705c5613045348402ab664ccdf0,19.03/dind/Dockerfile,19.03/dind/Dockerfile,"# https://github.com/docker/docker/tree/master/hack/dind
",2019/07/23 05:16,2019/07/23 05:16,2019/07/23 05:16,,1,0 days 00:00:00.000000000,0:00:00
1019,"docker-library
docker",https://github.com/docker-library/docker,fcbb33386d9cff655bbde45f0ecd532ea65cda9c,18.04-rc/Dockerfile,18.05/Dockerfile,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
",2018/04/05 20:04,2018/07/20 03:30,2018/04/04 02:45,2018/07/20 03:30,1,1 days 17:19:00.000000000,"105 days, 7:26:00"
1020,"docker-library
docker",https://github.com/docker-library/docker,fcbb33386d9cff655bbde45f0ecd532ea65cda9c,18.04-rc/Dockerfile,18.05/Dockerfile,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

",2018/04/05 20:04,2018/07/20 03:30,2018/04/04 02:45,2018/07/20 03:30,1,1 days 17:19:00.000000000,"105 days, 7:26:00"
1021,"docker-library
docker",https://github.com/docker-library/docker,a98e0c42a96497670c36f4b2dcad2bcc81f18f35,1.6/dind/Dockerfile,1.6/dind/Dockerfile,"# TODO aufs-tools

",2015/08/07 04:54,2015/08/22 12:24,2015/08/07 04:54,2015/08/22 12:24,1,0 days 00:00:00.000000000,"15 days, 7:30:00"
1022,"docker-library
docker",https://github.com/docker-library/docker,83b2eab8bdb5d35bf343313154ab55938fca3807,1.11-rc/dind/Dockerfile,1.11-rc/dind/Dockerfile,"# TODO aufs-tools

",2016/04/01 02:48,2016/04/14 05:33,2016/03/31 06:43,2016/04/14 05:33,1,0 days 20:05:00.000000000,"13 days, 2:45:00"
1023,"docker-library
docker",https://github.com/docker-library/docker,dba6c6279614ac0a7e520f0b7f7c027250488a4f,1.12-rc/dind/Dockerfile,1.12-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/09/29 05:18,2016/09/29 05:18,2016/06/17 03:03,2016/07/29 10:53,1,104 days 02:15:00.000000000,0:00:00
1024,"docker-library
docker",https://github.com/docker-library/docker,4d1f83ee6e25a5c2bb1c8a04de0643b1a964ba5e,1.12-rc/dind/Dockerfile,1.12-rc/dind/Dockerfile,"# TODO aufs-tools

",2016/06/17 03:03,2016/09/29 05:18,2016/06/17 03:03,2016/07/29 10:53,1,0 days 00:00:00.000000000,"104 days, 2:15:00"
1025,"docker-library
docker",https://github.com/docker-library/docker,56215ac49d9947e317154fad823410df1201089b,17.05-rc/dind/Dockerfile,17.05-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/04/14 02:58,2017/05/06 05:03,2017/04/14 02:58,2017/05/06 05:03,1,0 days 00:00:00.000000000,"22 days, 2:05:00"
1026,"docker-library
docker",https://github.com/docker-library/docker,dba6c6279614ac0a7e520f0b7f7c027250488a4f,1.12-rc/experimental/dind/Dockerfile,1.12-rc/experimental/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/09/29 05:18,2016/10/12 08:54,2016/09/29 05:18,2016/10/12 08:54,1,0 days 00:00:00.000000000,"13 days, 3:36:00"
1027,"docker-library
docker",https://github.com/docker-library/docker,8de8842b2fffc6bb43609c133b54207ffb7b4ce2,18.01-rc/dind/Dockerfile,18.01/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2018/01/05 04:48,2018/02/09 02:29,2018/01/05 04:48,2018/02/09 02:29,1,0 days 00:00:00.000000000,"34 days, 21:41:00"
1028,"docker-library
docker",https://github.com/docker-library/docker,eb714a73e7e3f87705f468c3c6e9f4e316136bf5,1.12/experimental/dind/Dockerfile,1.12/experimental/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2016/08/23 04:06,2017/03/03 05:33,2016/08/23 04:06,2017/03/03 05:33,1,0 days 00:00:00.000000000,"192 days, 1:27:00"
1029,"docker-library
docker",https://github.com/docker-library/docker,8ada62f762b30d09fd54664710c0ef3b64038f07,17.10-rc/dind/Dockerfile,17.10-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/10/06 01:38,2017/10/19 01:49,2017/10/06 01:38,2017/10/19 01:49,1,0 days 00:00:00.000000000,"13 days, 0:11:00"
1030,"docker-library
docker",https://github.com/docker-library/docker,e9c09260bfaea5199c6c053a83fc46564aa14990,17.04-rc/dind/Dockerfile,17.04-rc/dind/Dockerfile,"# TODO aufs-tools

# set up subuid/subgid so that ""--userns-remap=default"" works out-of-the-box
",2017/03/23 03:11,2017/04/07 01:25,2017/03/23 03:11,2017/04/07 01:25,1,0 days 00:00:00.000000000,"14 days, 22:14:00"
1031,"docker-library
docker",https://github.com/docker-library/docker,e53c4464ce262cba0f93109ea5b537b819bd13f7,1.10-rc/dind/Dockerfile,1.10-rc/dind/Dockerfile,"# TODO aufs-tools

",2016/02/20 17:34,2016/02/20 17:34,2016/01/16 06:50,2016/02/05 05:22,1,35 days 10:44:00.000000000,0:00:00
1032,"AdoptOpenJDK
openjdk-docker",https://github.com/AdoptOpenJDK/openjdk-docker,9698cd795177073e0af67060fb99b07e33641de3,dockerfile_functions.sh,dockerfile_functions.sh,"  # shellcheck disable=SC1083,SC2086 # TODO not sure about intention here
",2020/06/29 14:18,2020/07/01 07:54,2018/07/19 20:03,,1,710 days 18:15:00.000000000,"1 day, 17:36:00"
1033,"hashicorp
vault",https://github.com/hashicorp/vault,e6ec457488a5469e66a344720c4d237c4156d3e6,scripts/docker/Dockerfile.ui,scripts/docker/Dockerfile.ui,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2020/07/21 03:11,,2020/07/21 03:11,,1,0 days 00:00:00.000000000,削除されていません
1034,"hashicorp
vault",https://github.com/hashicorp/vault,e6ec457488a5469e66a344720c4d237c4156d3e6,scripts/docker/Dockerfile,scripts/docker/Dockerfile,"# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
",2020/07/21 03:11,,2020/07/21 03:11,,1,0 days 00:00:00.000000000,削除されていません
