,type,comment,diff
0,+, # TODO inbox-api or inbox-start,"diff --git a/nylas/sync-engine/Dockerfile b/nylas/sync-engine/Dockerfile
new file mode 100644
index 0000000..f1e6dff
--- /dev/null
+++ b/nylas/sync-engine/Dockerfile
@@ -0,0 +1,45 @@
+FROM buildpack-deps:jessie-curl
+
+RUN apt-get update && apt-get install -y --no-install-recommends \
+		file \
+		g++ \
+		gcc \
+		git \
+		libffi-dev \
+		liblua5.2-dev \
+		libmysqlclient-dev \
+		libpython-dev \
+		libsodium-dev \
+		libssl-dev \
+		libxslt1-dev \
+		pkg-config \
+		python-pip \
+	&& rm -rf /var/lib/apt/lists/*
+# tell pynacl to use system libsodium
+ENV SODIUM_INSTALL system
+
+WORKDIR /usr/src/sync-engine
+
+#ENV SYNC_VERSION v0.3.0 # 2014 :'(
+ENV SYNC_VERSION 9ed320220f292c0acb360d5ac0158e80ea8b6f03
+
+RUN curl -fSL ""https://github.com/nylas/sync-engine/archive/$SYNC_VERSION.tar.gz"" -o sync.tar.gz \
+	&& tar -xzf sync.tar.gz --strip-components=1 \
+	&& rm sync.tar.gz
+
+# https://github.com/eventable/vobject/issues/2
+RUN sed -i 's/^vobject==0.8.1c/vobject==0.8.2/' requirements.txt
+
+# ugh, NameError: name 'PROTOCOL_SSLv3' is not defined
+RUN sed -i 's/^gevent==1.0.1/gevent==1.1rc3/' requirements.txt
+
+RUN pip install -r requirements.txt
+
+RUN pip install .
+
+COPY config.json secrets.yml /etc/inboxapp/
+
+USER 1000:1000
+COPY entrypoint.sh /usr/local/bin/
+ENTRYPOINT [""entrypoint.sh""]
+CMD [""bash""] # TODO inbox-api or inbox-start
"
1,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/Dockerfile b/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
2,-,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)","diff --git a/Dockerfile b/Dockerfile
index c52476c637..27608c4f5f 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,254 +1,254 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri ""s/(httpredir|deb).debian.org/$APT_MIRROR/g"" /etc/apt/sources.list
 
 # Add zfs ppa
 COPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/
 RUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	cmake \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	less \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libnl-3-dev \
 	libprotobuf-c0-dev \
 	libprotobuf-dev \
 	libsystemd-journal-dev \
 	libtool \
 	libzfs-dev \
 	mercurial \
 	net-tools \
 	pkg-config \
 	protobuf-compiler \
 	protobuf-c-compiler \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	tar \
 	ubuntu-zfs \
 	vim \
 	vim-common \
 	xfsprogs \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # Install seccomp: the version shipped upstream is too old
 ENV SECCOMP_VERSION 2.3.2
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.7.5
 RUN curl -fsSL ""https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386 \
 	solaris/amd64
 
 # Dependency for golint
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT)
 
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install CRIU for checkpoint/restore support
 ENV CRIU_VERSION 2.12.1
 # Install dependancy packages specific to criu
 RUN apt-get install libnet-dev -y && \
 	mkdir -p /usr/src/criu \
 	&& curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \
 	&& cd /usr/src/criu \
 	&& make \
 	&& make install-criu
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.5.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
 ENV DOCKER_PY_COMMIT 4a08d04aef0595322e1b5ac7c52f28a931da85a5
 # To run integration tests docker-pycreds is required.
 # Before running the integration tests conftest.py is
 # loaded which results in loads auth.py that
 # imports the docker-pycreds module.
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install docker-pycreds==0.2.1 \
 	&& pip install -r test-requirements.txt
 
 # Install yamllint for validating swagger.yaml
 RUN pip install yamllint==1.5.0
 
 # Install go-swagger for validating swagger.yaml
 ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 RUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \
 	&& (cd /go/src/github.com/go-swagger/go-swagger && git checkout -q $GO_SWAGGER_COMMIT) \
 	&& go install -v github.com/go-swagger/go-swagger/cmd/swagger
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
-	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
-	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
-	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
-	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
-# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
+	buildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 \
+	busybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f \
+	debian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 \
+	hello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
+# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
 
 # Install tomlv, vndr, runc, containerd, tini, docker-proxy
 # Please edit hack/dockerfile/install-binaries.sh to update them.
 COPY hack/dockerfile/binaries-commits /tmp/binaries-commits
 COPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh
 RUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
3,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/components/engine/Dockerfile b/components/engine/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/components/engine/Dockerfile
+++ b/components/engine/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
4,-,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)","diff --git a/components/engine/Dockerfile b/components/engine/Dockerfile
index c52476c637..27608c4f5f 100644
--- a/components/engine/Dockerfile
+++ b/components/engine/Dockerfile
@@ -1,254 +1,254 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri ""s/(httpredir|deb).debian.org/$APT_MIRROR/g"" /etc/apt/sources.list
 
 # Add zfs ppa
 COPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/
 RUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	cmake \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	less \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libnl-3-dev \
 	libprotobuf-c0-dev \
 	libprotobuf-dev \
 	libsystemd-journal-dev \
 	libtool \
 	libzfs-dev \
 	mercurial \
 	net-tools \
 	pkg-config \
 	protobuf-compiler \
 	protobuf-c-compiler \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	tar \
 	ubuntu-zfs \
 	vim \
 	vim-common \
 	xfsprogs \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # Install seccomp: the version shipped upstream is too old
 ENV SECCOMP_VERSION 2.3.2
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.7.5
 RUN curl -fsSL ""https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386 \
 	solaris/amd64
 
 # Dependency for golint
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT)
 
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install CRIU for checkpoint/restore support
 ENV CRIU_VERSION 2.12.1
 # Install dependancy packages specific to criu
 RUN apt-get install libnet-dev -y && \
 	mkdir -p /usr/src/criu \
 	&& curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \
 	&& cd /usr/src/criu \
 	&& make \
 	&& make install-criu
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.5.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
 ENV DOCKER_PY_COMMIT 4a08d04aef0595322e1b5ac7c52f28a931da85a5
 # To run integration tests docker-pycreds is required.
 # Before running the integration tests conftest.py is
 # loaded which results in loads auth.py that
 # imports the docker-pycreds module.
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install docker-pycreds==0.2.1 \
 	&& pip install -r test-requirements.txt
 
 # Install yamllint for validating swagger.yaml
 RUN pip install yamllint==1.5.0
 
 # Install go-swagger for validating swagger.yaml
 ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 RUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \
 	&& (cd /go/src/github.com/go-swagger/go-swagger && git checkout -q $GO_SWAGGER_COMMIT) \
 	&& go install -v github.com/go-swagger/go-swagger/cmd/swagger
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
-	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
-	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
-	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
-	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
-# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
+	buildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 \
+	busybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f \
+	debian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 \
+	hello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
+# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
 
 # Install tomlv, vndr, runc, containerd, tini, docker-proxy
 # Please edit hack/dockerfile/install-binaries.sh to update them.
 COPY hack/dockerfile/binaries-commits /tmp/binaries-commits
 COPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh
 RUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
5,-,"    # VisualEditor
    # TODO: make submodules shallow clones?","diff --git a/Dockerfile b/Dockerfile
index 6b5ffb3..1051e1e 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,65 +1,67 @@
 FROM debian:sid
 MAINTAINER Gabriel Wicke <gwicke@wikimedia.org>
 
 ENV MEDIAWIKI_VERSION wmf/1.30.0-wmf.2
 
 # XXX: Consider switching to nginx.
 RUN set -x; \
     apt-get update \
     && apt-get install -y --no-install-recommends \
         ca-certificates \
         apache2 \
         libapache2-mod-php7.1 \
         php7.1-mysql \
         php7.1-cli \
         php7.1-gd \
         php7.1-curl \
         php7.1-mbstring \
         php7.1-xml \
         imagemagick \
         netcat \
         git \
     && rm -rf /var/lib/apt/lists/* \
     && rm -rf /var/cache/apt/archives/* \
     && a2enmod rewrite \
     && a2enmod proxy \
     && a2enmod proxy_http \
     # Remove the default Debian index page.
     && rm /var/www/html/index.html
 
 
 # MediaWiki setup
 RUN set -x; \
     mkdir -p /usr/src \
     && git clone \
         --depth 1 \
         -b $MEDIAWIKI_VERSION \
         https://gerrit.wikimedia.org/r/p/mediawiki/core.git \
         /usr/src/mediawiki \
     && cd /usr/src/mediawiki \
     && git submodule update --init skins \
     && git submodule update --init vendor \
     && cd extensions \
     # Extensions
     # TODO: make submodules shallow clones?
     && git submodule update --init --recursive VisualEditor \
     && git submodule update --init --recursive Math \
     && git submodule update --init --recursive EventBus \
     && git submodule update --init --recursive Scribunto \
     && git submodule update --init --recursive ParserFunctions \
     && git submodule update --init --recursive SyntaxHighlight_GeSHi \
     && git submodule update --init --recursive Cite \
     && git submodule update --init --recursive Echo \
-    && git submodule update --init --recursive Flow
+    && git submodule update --init --recursive Flow \
+    && git submodule update --init --recursive PageImages \
+    && git submodule update --init --recursive TextExtracts
 
 
 COPY php.ini /usr/local/etc/php/conf.d/mediawiki.ini
 
 COPY apache/mediawiki.conf /etc/apache2/
 RUN echo ""Include /etc/apache2/mediawiki.conf"" >> /etc/apache2/apache2.conf
 
 COPY docker-entrypoint.sh /entrypoint.sh
 
 EXPOSE 80 443
 ENTRYPOINT [""/entrypoint.sh""]
 CMD [""apachectl"", ""-e"", ""info"", ""-D"", ""FOREGROUND""]
"
6,-, # TODO inbox-api or inbox-start,"diff --git a/nylas/sync-engine/Dockerfile b/nylas/sync-engine/Dockerfile
deleted file mode 100644
index fb816bf..0000000
--- a/nylas/sync-engine/Dockerfile
+++ /dev/null
@@ -1,47 +0,0 @@
-FROM buildpack-deps:jessie-curl
-
-RUN apt-get update && apt-get install -y --no-install-recommends \
-		file \
-		g++ \
-		gcc \
-		git \
-		libffi-dev \
-		liblua5.2-dev \
-		libmysqlclient-dev \
-		libpython-dev \
-		libsodium-dev \
-		libssl-dev \
-		libxslt1-dev \
-		pkg-config \
-		python \
-	&& rm -rf /var/lib/apt/lists/*
-# install pip from upstream (since ""python-pip"" is too old)
-RUN wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \
-	&& python get-pip.py --no-cache-dir \
-	&& pip --version \
-	&& rm -f get-pip.py
-# tell pynacl to use system libsodium
-ENV SODIUM_INSTALL system
-
-WORKDIR /usr/src/sync-engine
-
-#ENV SYNC_VERSION v0.3.0 # 2014 :'(
-ENV SYNC_VERSION d715f4c7c2869b1e51f92af47908a9e011ae8aea
-
-RUN curl -fSL ""https://github.com/nylas/sync-engine/archive/$SYNC_VERSION.tar.gz"" -o sync.tar.gz \
-	&& tar -xzf sync.tar.gz --strip-components=1 \
-	&& rm sync.tar.gz
-
-# ugh, NameError: name 'PROTOCOL_SSLv3' is not defined
-RUN sed -i 's/^gevent==1.0.1/gevent==1.1rc3/' requirements.txt
-
-RUN pip install -r requirements.txt
-
-RUN pip install .
-
-COPY config.json secrets.yml /etc/inboxapp/
-
-USER 1000:1000
-COPY entrypoint.sh /usr/local/bin/
-ENTRYPOINT [""entrypoint.sh""]
-CMD [""bash""] # TODO inbox-api or inbox-start
"
7,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/Dockerfile b/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
8,-,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)","diff --git a/Dockerfile b/Dockerfile
index c52476c637..27608c4f5f 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,254 +1,254 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri ""s/(httpredir|deb).debian.org/$APT_MIRROR/g"" /etc/apt/sources.list
 
 # Add zfs ppa
 COPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/
 RUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	cmake \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	less \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libnl-3-dev \
 	libprotobuf-c0-dev \
 	libprotobuf-dev \
 	libsystemd-journal-dev \
 	libtool \
 	libzfs-dev \
 	mercurial \
 	net-tools \
 	pkg-config \
 	protobuf-compiler \
 	protobuf-c-compiler \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	tar \
 	ubuntu-zfs \
 	vim \
 	vim-common \
 	xfsprogs \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # Install seccomp: the version shipped upstream is too old
 ENV SECCOMP_VERSION 2.3.2
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.7.5
 RUN curl -fsSL ""https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386 \
 	solaris/amd64
 
 # Dependency for golint
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT)
 
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install CRIU for checkpoint/restore support
 ENV CRIU_VERSION 2.12.1
 # Install dependancy packages specific to criu
 RUN apt-get install libnet-dev -y && \
 	mkdir -p /usr/src/criu \
 	&& curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \
 	&& cd /usr/src/criu \
 	&& make \
 	&& make install-criu
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.5.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
 ENV DOCKER_PY_COMMIT 4a08d04aef0595322e1b5ac7c52f28a931da85a5
 # To run integration tests docker-pycreds is required.
 # Before running the integration tests conftest.py is
 # loaded which results in loads auth.py that
 # imports the docker-pycreds module.
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install docker-pycreds==0.2.1 \
 	&& pip install -r test-requirements.txt
 
 # Install yamllint for validating swagger.yaml
 RUN pip install yamllint==1.5.0
 
 # Install go-swagger for validating swagger.yaml
 ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 RUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \
 	&& (cd /go/src/github.com/go-swagger/go-swagger && git checkout -q $GO_SWAGGER_COMMIT) \
 	&& go install -v github.com/go-swagger/go-swagger/cmd/swagger
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
-	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
-	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
-	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
-	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
-# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
+	buildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 \
+	busybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f \
+	debian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 \
+	hello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
+# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
 
 # Install tomlv, vndr, runc, containerd, tini, docker-proxy
 # Please edit hack/dockerfile/install-binaries.sh to update them.
 COPY hack/dockerfile/binaries-commits /tmp/binaries-commits
 COPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh
 RUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
