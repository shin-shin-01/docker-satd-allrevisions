,type,comment,diff
0,-,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html",
1,-,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html",
2,-,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html",
3,-,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html",
4,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/Dockerfile b/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
5,-,# TODO replace FPM with some very minimal debhelper stuff,
6,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#",
7,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/components/engine/Dockerfile b/components/engine/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/components/engine/Dockerfile
+++ b/components/engine/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
8,-,# TODO replace FPM with some very minimal debhelper stuff,
9,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#",
10,-,"# TODO should we leave these installed, or remove them too?","diff --git a/9.0/jdk8/corretto/Dockerfile b/9.0/jdk8/corretto/Dockerfile
index 9e4304a..05c5ab7 100644
--- a/9.0/jdk8/corretto/Dockerfile
+++ b/9.0/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
11,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/9.0/jdk8/corretto/Dockerfile b/9.0/jdk8/corretto/Dockerfile
index 9e4304a..05c5ab7 100644
--- a/9.0/jdk8/corretto/Dockerfile
+++ b/9.0/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
12,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/7/jdk8/corretto/Dockerfile b/7/jdk8/corretto/Dockerfile
index 5dea29e..e652c5a 100644
--- a/7/jdk8/corretto/Dockerfile
+++ b/7/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 7
 ENV TOMCAT_VERSION 7.0.94
 ENV TOMCAT_SHA512 b16f4b08591199e15f953c34965389a80d5597c28626a51c71ce42695ddd3359dc4df7f333ef0e1a1e8f9b2b6245041d57607c46764f33e560246c119cdc0f7a
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
13,-,"# TODO should we leave these installed, or remove them too?","diff --git a/7/jdk8/corretto/Dockerfile b/7/jdk8/corretto/Dockerfile
index 5dea29e..e652c5a 100644
--- a/7/jdk8/corretto/Dockerfile
+++ b/7/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 7
 ENV TOMCAT_VERSION 7.0.94
 ENV TOMCAT_SHA512 b16f4b08591199e15f953c34965389a80d5597c28626a51c71ce42695ddd3359dc4df7f333ef0e1a1e8f9b2b6245041d57607c46764f33e560246c119cdc0f7a
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
14,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/8.5/jdk11/corretto/Dockerfile b/8.5/jdk11/corretto/Dockerfile
index 2675b83..4ce32de 100644
--- a/8.5/jdk11/corretto/Dockerfile
+++ b/8.5/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
15,-,"# TODO should we leave these installed, or remove them too?","diff --git a/8.5/jdk11/corretto/Dockerfile b/8.5/jdk11/corretto/Dockerfile
index 2675b83..4ce32de 100644
--- a/8.5/jdk11/corretto/Dockerfile
+++ b/8.5/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
16,-,"# TODO should we leave these installed, or remove them too?","diff --git a/9.0/jdk11/corretto/Dockerfile b/9.0/jdk11/corretto/Dockerfile
index f6cfa88..80a37ae 100644
--- a/9.0/jdk11/corretto/Dockerfile
+++ b/9.0/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
17,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/9.0/jdk11/corretto/Dockerfile b/9.0/jdk11/corretto/Dockerfile
index f6cfa88..80a37ae 100644
--- a/9.0/jdk11/corretto/Dockerfile
+++ b/9.0/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
18,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/8.5/jdk8/corretto/Dockerfile b/8.5/jdk8/corretto/Dockerfile
index f0abb76..782ad35 100644
--- a/8.5/jdk8/corretto/Dockerfile
+++ b/8.5/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
19,-,"# TODO should we leave these installed, or remove them too?","diff --git a/8.5/jdk8/corretto/Dockerfile b/8.5/jdk8/corretto/Dockerfile
index f0abb76..782ad35 100644
--- a/8.5/jdk8/corretto/Dockerfile
+++ b/8.5/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
20,-,"# FIXME This is a workaround for pytest not found causing builds to fail
# Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722","diff --git a/ros2/nightly/nightly/Dockerfile b/ros2/nightly/nightly/Dockerfile
index f3f5f37..a04e35c 100644
--- a/ros2/nightly/nightly/Dockerfile
+++ b/ros2/nightly/nightly/Dockerfile
@@ -1,121 +1,121 @@
 # This is an auto generated Dockerfile for ros:nightly
 # generated from docker_images_ros2/nightly/create_ros_image.Dockerfile.em
 FROM ubuntu:bionic
 
 # setup timezone
 RUN echo 'Etc/UTC' > /etc/timezone && \
     ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
     apt-get update && apt-get install -q -y tzdata && rm -rf /var/lib/apt/lists/*
 
 # install packages
 RUN apt-get update && apt-get install -q -y \
     bash-completion \
     cmake \
     dirmngr \
     git \
     gnupg2 \
     lsb-release \
     python3-pip \
     wget \
     && rm -rf /var/lib/apt/lists/*
 
 # setup ros2 keys
 RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
 
 # setup sources.list
 RUN echo ""deb http://packages.ros.org/ros2-testing/ubuntu `lsb_release -sc` main"" > /etc/apt/sources.list.d/ros2-testing.list
 
 # install bootstrap tools
 RUN apt-get update && apt-get install --no-install-recommends -y \
     git \
+    python3-colcon-common-extensions \
+    python3-colcon-mixin \
     python3-rosdep \
     python3-vcstool \
     && rm -rf /var/lib/apt/lists/*
 
 # setup environment
 ENV LANG C.UTF-8
 ENV LC_ALL C.UTF-8
 ENV ROSDISTRO_INDEX_URL https://raw.githubusercontent.com/osrf/docker_images/master/ros2/nightly/nightly/index-v4.yaml
 
 # install python packages
 RUN pip3 install -U \
     argcomplete \
-    colcon-common-extensions \
-    colcon-mixin \
     flake8 \
     flake8-blind-except \
     flake8-builtins \
     flake8-class-newline \
     flake8-comprehensions \
     flake8-deprecated \
     flake8-docstrings \
     flake8-import-order \
     flake8-quotes \
     pytest-repeat \
     pytest-rerunfailures
 # This is a workaround for pytest not found causing builds to fail
 # Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
 RUN pip3 freeze | grep pytest \
     && python3 -m pytest --version
 
 # install ros2 packages
 ENV ROS_DISTRO foxy
 RUN mkdir -p /opt/ros/$ROS_DISTRO
 ARG ROS2_BINARY_URL=https://ci.ros2.org/view/packaging/job/packaging_linux/lastSuccessfulBuild/artifact/ws/ros2-package-linux-x86_64.tar.bz2
 RUN wget -q $ROS2_BINARY_URL -O - | \
     tar -xj --strip-components=1 -C /opt/ros/$ROS_DISTRO
 
 # Overwrite setup scripts with ones that point to /opt/ros/$ROS_DISTRO
 RUN mkdir -p /tmp/dir/build \
  && cd /tmp/dir \
  && git clone --depth 1 https://github.com/ros2/ros_workspace.git -b latest \
  && cd /tmp/dir/build \
  && COLCON_CURRENT_PREFIX=/opt/ros/$ROS_DISTRO . /opt/ros/$ROS_DISTRO/local_setup.sh \
  && cmake -DCMAKE_INSTALL_PREFIX=/opt/ros/$ROS_DISTRO ../ros_workspace \
  && make install \
  && rm -r /tmp/dir
 
 # setup colcon mixin and metadata
 RUN colcon mixin add default \
       https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
     colcon mixin update && \
     colcon metadata add default \
       https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml && \
     colcon metadata update
 
 # bootstrap rosdep
 RUN rosdep init
 
 # add custom rosdep rule files
 COPY prereqs.yaml /etc/ros/rosdep/
 RUN echo ""yaml file:///etc/ros/rosdep/prereqs.yaml"" | \
     cat - /etc/ros/rosdep/sources.list.d/20-default.list > temp && \
     mv temp /etc/ros/rosdep/sources.list.d/20-default.list
 RUN rosdep update
 
 # install dependencies
 RUN . /opt/ros/$ROS_DISTRO/setup.sh \
     && apt-get update \
     && rosdep install -y \
     --from-paths /opt/ros/$ROS_DISTRO/share \
     --ignore-src \
     --skip-keys "" \
       cyclonedds \
       libopensplice69 \
       rti-connext-dds-5.3.1"" \
     && rm -rf /var/lib/apt/lists/*
 
 # FIXME Remove this once rosdep detects ROS 2 packages https://github.com/ros-infrastructure/rosdep/issues/660
 # ignore installed rosdep keys
 ENV ROS_PACKAGE_PATH /opt/ros/$ROS_DISTRO/share
 
 # FIXME Remove this once ament_export_interfaces respects COLCON_CURRENT_PREFIX https://github.com/ament/ament_cmake/issues/173
 #Workaround hard coded paths in nightly tarball setup scripts
 ARG UPSTREAM_CI_WS=/home/jenkins-agent/workspace/packaging_linux/ws
 RUN mkdir -p $UPSTREAM_CI_WS && ln -s /opt/ros/$ROS_DISTRO $UPSTREAM_CI_WS/install
 
 # setup entrypoint
 COPY ./ros_entrypoint.sh /
 
 ENTRYPOINT [""/ros_entrypoint.sh""]
 CMD [""bash""]
"
21,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/Dockerfile b/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
22,-,# TODO replace FPM with some very minimal debhelper stuff,
23,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#",
24,-,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify",
25,-,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf",
26,-,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)",
27,-,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)",
28,-,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf",
29,-,# TODO aufs-tools,
30,-,# https://github.com/docker/docker/tree/master/hack/dind,
31,-,# TODO aufs-tools,
32,-,# https://github.com/docker/docker/tree/master/hack/dind,
