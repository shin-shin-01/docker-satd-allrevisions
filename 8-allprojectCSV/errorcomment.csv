,type,comment,diff
0,+,"# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/Dockerfile b/Dockerfile
index c4651b7b50..4db75a6722 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,248 +1,240 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Use make to build a development environment image and run it in a container.
 # # This is slow the first time.
 # make BIND_DIR=. shell
 #
 # The following commands are executed inside the running container.
 
 # # Make a dockerd binary.
 # # hack/make.sh binary
 #
 # # Install dockerd to /usr/local/bin
 # # make install
 #
 # # Run unit tests
 # # hack/test/unit
 #
 # # Run tests e.g. integration, py
 # # hack/make.sh binary test-integration test-docker-py
 #
-# # Publish a release:
-# docker run --privileged \
-#  -e AWS_S3_BUCKET=baz \
-#  -e AWS_ACCESS_KEY=foo \
-#  -e AWS_SECRET_KEY=bar \
-#  -e GPG_PASSPHRASE=gloubiboulga \
-#  docker hack/release.sh
-#
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM golang:1.10.2 AS base
 # FIXME(vdemeester) this is kept for other script depending on it to not fail right away
 # Remove this once the other scripts uses something else to detect the version
 ENV GO_VERSION 1.10.2
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri ""s/(httpredir|deb).debian.org/$APT_MIRROR/g"" /etc/apt/sources.list
 
 FROM base AS criu
 # Install CRIU for checkpoint/restore support
 ENV CRIU_VERSION 3.6
 # Install dependancy packages specific to criu
 RUN apt-get update && apt-get install -y \
 	libnet-dev \
 	libprotobuf-c0-dev \
 	libprotobuf-dev \
 	libnl-3-dev \
 	libcap-dev \
 	protobuf-compiler \
 	protobuf-c-compiler \
 	python-protobuf \
 	&& mkdir -p /usr/src/criu \
 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 \
 	&& cd /usr/src/criu \
 	&& make \
 	&& make PREFIX=/build/ install-criu
 
 FROM base AS registry
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& case $(dpkg --print-architecture) in \
 		amd64|ppc64*|s390x) \
 		(cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1""); \
 		GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH""; \
 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; \
 		;; \
 	   esac \
 	&& rm -rf ""$GOPATH""
 
 
 
 FROM base AS docker-py
 # Get the ""docker-py"" source so we can run their integration tests
 ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 RUN git clone https://github.com/docker/docker-py.git /build \
 	&& cd /build \
 	&& git checkout -q $DOCKER_PY_COMMIT
 
 
 
 FROM base AS swagger
 # Install go-swagger for validating swagger.yaml
 ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/go-swagger/go-swagger.git ""$GOPATH/src/github.com/go-swagger/go-swagger"" \
 	&& (cd ""$GOPATH/src/github.com/go-swagger/go-swagger"" && git checkout -q ""$GO_SWAGGER_COMMIT"") \
 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger \
 	&& rm -rf ""$GOPATH""
 
 
 FROM base AS frozen-images
 RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /
 RUN /download-frozen-image-v2.sh /build \
 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 \
 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 \
 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 \
 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 \
 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 # See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
 
 # Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
 FROM base AS runtime-dev
 RUN apt-get update && apt-get install -y \
 	libapparmor-dev \
 	libseccomp-dev
 
 
 FROM base AS tomlv
 ENV INSTALL_BINARY_NAME=tomlv
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS vndr
 ENV INSTALL_BINARY_NAME=vndr
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS containerd
 RUN apt-get update && apt-get install -y btrfs-tools
 ENV INSTALL_BINARY_NAME=containerd
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS proxy
 ENV INSTALL_BINARY_NAME=proxy
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS gometalinter
 ENV INSTALL_BINARY_NAME=gometalinter
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS dockercli
 ENV INSTALL_BINARY_NAME=dockercli
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM runtime-dev AS runc
 ENV INSTALL_BINARY_NAME=runc
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS tini
 RUN apt-get update && apt-get install -y cmake vim-common
 COPY hack/dockerfile/install/install.sh ./install.sh
 ENV INSTALL_BINARY_NAME=tini
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 
 
 # TODO: Some of this is only really needed for testing, it would be nice to split this up
 FROM runtime-dev AS dev
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 # Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH
 RUN echo ""source /usr/share/bash-completion/bash_completion"" >> /etc/bash.bashrc
 RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 RUN ldconfig
 # This should only install packages that are specifically needed for the dev environment and nothing else
 # Do you really need to add another package here? Can it be done in a different build stage?
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	aufs-tools \
 	bash-completion \
 	btrfs-tools \
 	iptables \
 	jq \
 	libdevmapper-dev \
 	libudev-dev \
 	libsystemd-dev \
 	binutils-mingw-w64 \
 	g++-mingw-w64-x86-64 \
 	net-tools \
 	pigz \
 	python-backports.ssl-match-hostname \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-requests \
 	python-setuptools \
 	python-websocket \
 	python-wheel \
 	thin-provisioning-tools \
 	vim \
 	vim-common \
 	xfsprogs \
 	zip \
 	bzip2 \
 	xz-utils \
 	--no-install-recommends
 COPY --from=swagger /build/swagger* /usr/local/bin/
 COPY --from=frozen-images /build/ /docker-frozen-images
 COPY --from=gometalinter /build/ /usr/local/bin/
 COPY --from=tomlv /build/ /usr/local/bin/
 COPY --from=vndr /build/ /usr/local/bin/
 COPY --from=tini /build/ /usr/local/bin/
 COPY --from=runc /build/ /usr/local/bin/
 COPY --from=containerd /build/ /usr/local/bin/
 COPY --from=proxy /build/ /usr/local/bin/
 COPY --from=dockercli /build/ /usr/local/cli
 COPY --from=registry /build/registry* /usr/local/bin/
 COPY --from=criu /build/ /usr/local/
 COPY --from=docker-py /build/ /docker-py
 # TODO: This is for the docker-py tests, which shouldn't really be needed for
 # this image, but currently CI is expecting to run this image. This should be
 # split out into a separate image, including all the `python-*` deps installed
 # above.
 RUN cd /docker-py \
 	&& pip install docker-pycreds==0.2.1 \
 	&& pip install yamllint==1.5.0 \
 	&& pip install -r test-requirements.txt
 
 ENV PATH=/usr/local/cli:$PATH
 ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 # Options for hack/validate/gometalinter
 ENV GOMETALINTER_OPTS=""--deadline=2m""
 WORKDIR /go/src/github.com/docker/docker
 VOLUME /var/lib/docker
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
1,+,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/builder/dockerfile/parser/testfiles/docker/Dockerfile b/builder/dockerfile/parser/testfiles/docker/Dockerfile
index 77aecd9ba3..cd327aa499 100644
--- a/builder/dockerfile/parser/testfiles/docker/Dockerfile
+++ b/builder/dockerfile/parser/testfiles/docker/Dockerfile
@@ -1,102 +1,94 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
 #
-# # Publish a release:
-# docker run --privileged \
-#  -e AWS_S3_BUCKET=baz \
-#  -e AWS_ACCESS_KEY=foo \
-#  -e AWS_SECRET_KEY=bar \
-#  -e GPG_PASSPHRASE=gloubiboulga \
-#  docker hack/release.sh
-#
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM	ubuntu:14.04
 LABEL	maintainer	Tianon Gravi <admwiggin@gmail.com> (@tianon)
 
 # Packaged dependencies
 RUN	apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -yq \
 	apt-utils \
 	aufs-tools \
 	automake \
 	btrfs-tools \
 	build-essential \
 	curl \
 	dpkg-sig \
 	git \
 	iptables \
 	libapparmor-dev \
 	libcap-dev \
 	mercurial \
 	pandoc \
 	parallel \
 	reprepro \
 	ruby1.9.1 \
 	ruby1.9.1-dev \
 	s3cmd=1.1.0* \
 	--no-install-recommends
 
 # Get lvm2 source for compiling statically
 RUN	git clone --no-checkout https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2 && cd /usr/local/lvm2 && git checkout -q v2_02_103
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 # note: we don't use ""git clone -b"" above because it then spews big nasty warnings about 'detached HEAD' state that we can't silence as easily as we can silence them using ""git checkout"" directly
 
 # Compile and install lvm2
 RUN	cd /usr/local/lvm2 && ./configure --enable-static_link && make device-mapper && make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Install Go
 RUN	curl -sSL https://golang.org/dl/go1.3.src.tar.gz | tar -v -C /usr/local -xz
 ENV	PATH	/usr/local/go/bin:$PATH
 ENV	GOPATH	/go:/go/src/github.com/docker/docker/vendor
 RUN	cd /usr/local/go/src && ./make.bash --no-clean 2>&1
 
 # Compile Go for cross compilation
 ENV	DOCKER_CROSSPLATFORMS	\
 	linux/386 linux/arm \
 	darwin/amd64 darwin/386 \
 	freebsd/amd64 freebsd/386 freebsd/arm
 # (set an explicit GOARM of 5 for maximum compatibility)
 ENV	GOARM	5
 RUN	cd /usr/local/go/src && bash -xc 'for platform in $DOCKER_CROSSPLATFORMS; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean 2>&1; done'
 
 # Grab Go's cover tool for dead-simple code coverage testing
 RUN	go get golang.org/x/tools/cmd/cover
 
 # TODO replace FPM with some very minimal debhelper stuff
 RUN	gem install --no-rdoc --no-ri fpm --version 1.0.2
 
 # Get the ""busybox"" image source so we can build locally instead of pulling
 RUN	git clone -b buildroot-2014.02 https://github.com/jpetazzo/docker-busybox.git /docker-busybox
 
 # Setup s3cmd config
 RUN	/bin/echo -e '[default]\naccess_key=$AWS_ACCESS_KEY\nsecret_key=$AWS_SECRET_KEY' > /.s3cfg
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN	git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME	/var/lib/docker
 WORKDIR	/go/src/github.com/docker/docker
 ENV	DOCKER_BUILDTAGS	apparmor selinux
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT	[""hack/dind""]
 
 # Upload docker source
 COPY	.	/go/src/github.com/docker/docker
"
2,+,"# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/components/engine/Dockerfile b/components/engine/Dockerfile
index c4651b7b50..4db75a6722 100644
--- a/components/engine/Dockerfile
+++ b/components/engine/Dockerfile
@@ -1,248 +1,240 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Use make to build a development environment image and run it in a container.
 # # This is slow the first time.
 # make BIND_DIR=. shell
 #
 # The following commands are executed inside the running container.
 
 # # Make a dockerd binary.
 # # hack/make.sh binary
 #
 # # Install dockerd to /usr/local/bin
 # # make install
 #
 # # Run unit tests
 # # hack/test/unit
 #
 # # Run tests e.g. integration, py
 # # hack/make.sh binary test-integration test-docker-py
 #
-# # Publish a release:
-# docker run --privileged \
-#  -e AWS_S3_BUCKET=baz \
-#  -e AWS_ACCESS_KEY=foo \
-#  -e AWS_SECRET_KEY=bar \
-#  -e GPG_PASSPHRASE=gloubiboulga \
-#  docker hack/release.sh
-#
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM golang:1.10.2 AS base
 # FIXME(vdemeester) this is kept for other script depending on it to not fail right away
 # Remove this once the other scripts uses something else to detect the version
 ENV GO_VERSION 1.10.2
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri ""s/(httpredir|deb).debian.org/$APT_MIRROR/g"" /etc/apt/sources.list
 
 FROM base AS criu
 # Install CRIU for checkpoint/restore support
 ENV CRIU_VERSION 3.6
 # Install dependancy packages specific to criu
 RUN apt-get update && apt-get install -y \
 	libnet-dev \
 	libprotobuf-c0-dev \
 	libprotobuf-dev \
 	libnl-3-dev \
 	libcap-dev \
 	protobuf-compiler \
 	protobuf-c-compiler \
 	python-protobuf \
 	&& mkdir -p /usr/src/criu \
 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 \
 	&& cd /usr/src/criu \
 	&& make \
 	&& make PREFIX=/build/ install-criu
 
 FROM base AS registry
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& case $(dpkg --print-architecture) in \
 		amd64|ppc64*|s390x) \
 		(cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1""); \
 		GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH""; \
 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; \
 		;; \
 	   esac \
 	&& rm -rf ""$GOPATH""
 
 
 
 FROM base AS docker-py
 # Get the ""docker-py"" source so we can run their integration tests
 ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 RUN git clone https://github.com/docker/docker-py.git /build \
 	&& cd /build \
 	&& git checkout -q $DOCKER_PY_COMMIT
 
 
 
 FROM base AS swagger
 # Install go-swagger for validating swagger.yaml
 ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/go-swagger/go-swagger.git ""$GOPATH/src/github.com/go-swagger/go-swagger"" \
 	&& (cd ""$GOPATH/src/github.com/go-swagger/go-swagger"" && git checkout -q ""$GO_SWAGGER_COMMIT"") \
 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger \
 	&& rm -rf ""$GOPATH""
 
 
 FROM base AS frozen-images
 RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /
 RUN /download-frozen-image-v2.sh /build \
 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 \
 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 \
 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 \
 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 \
 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 # See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
 
 # Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
 FROM base AS runtime-dev
 RUN apt-get update && apt-get install -y \
 	libapparmor-dev \
 	libseccomp-dev
 
 
 FROM base AS tomlv
 ENV INSTALL_BINARY_NAME=tomlv
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS vndr
 ENV INSTALL_BINARY_NAME=vndr
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS containerd
 RUN apt-get update && apt-get install -y btrfs-tools
 ENV INSTALL_BINARY_NAME=containerd
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS proxy
 ENV INSTALL_BINARY_NAME=proxy
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS gometalinter
 ENV INSTALL_BINARY_NAME=gometalinter
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS dockercli
 ENV INSTALL_BINARY_NAME=dockercli
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM runtime-dev AS runc
 ENV INSTALL_BINARY_NAME=runc
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS tini
 RUN apt-get update && apt-get install -y cmake vim-common
 COPY hack/dockerfile/install/install.sh ./install.sh
 ENV INSTALL_BINARY_NAME=tini
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 
 
 # TODO: Some of this is only really needed for testing, it would be nice to split this up
 FROM runtime-dev AS dev
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 # Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH
 RUN echo ""source /usr/share/bash-completion/bash_completion"" >> /etc/bash.bashrc
 RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 RUN ldconfig
 # This should only install packages that are specifically needed for the dev environment and nothing else
 # Do you really need to add another package here? Can it be done in a different build stage?
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	aufs-tools \
 	bash-completion \
 	btrfs-tools \
 	iptables \
 	jq \
 	libdevmapper-dev \
 	libudev-dev \
 	libsystemd-dev \
 	binutils-mingw-w64 \
 	g++-mingw-w64-x86-64 \
 	net-tools \
 	pigz \
 	python-backports.ssl-match-hostname \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-requests \
 	python-setuptools \
 	python-websocket \
 	python-wheel \
 	thin-provisioning-tools \
 	vim \
 	vim-common \
 	xfsprogs \
 	zip \
 	bzip2 \
 	xz-utils \
 	--no-install-recommends
 COPY --from=swagger /build/swagger* /usr/local/bin/
 COPY --from=frozen-images /build/ /docker-frozen-images
 COPY --from=gometalinter /build/ /usr/local/bin/
 COPY --from=tomlv /build/ /usr/local/bin/
 COPY --from=vndr /build/ /usr/local/bin/
 COPY --from=tini /build/ /usr/local/bin/
 COPY --from=runc /build/ /usr/local/bin/
 COPY --from=containerd /build/ /usr/local/bin/
 COPY --from=proxy /build/ /usr/local/bin/
 COPY --from=dockercli /build/ /usr/local/cli
 COPY --from=registry /build/registry* /usr/local/bin/
 COPY --from=criu /build/ /usr/local/
 COPY --from=docker-py /build/ /docker-py
 # TODO: This is for the docker-py tests, which shouldn't really be needed for
 # this image, but currently CI is expecting to run this image. This should be
 # split out into a separate image, including all the `python-*` deps installed
 # above.
 RUN cd /docker-py \
 	&& pip install docker-pycreds==0.2.1 \
 	&& pip install yamllint==1.5.0 \
 	&& pip install -r test-requirements.txt
 
 ENV PATH=/usr/local/cli:$PATH
 ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 # Options for hack/validate/gometalinter
 ENV GOMETALINTER_OPTS=""--deadline=2m""
 WORKDIR /go/src/github.com/docker/docker
 VOLUME /var/lib/docker
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
3,+,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile b/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile
index 77aecd9ba3..cd327aa499 100644
--- a/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile
+++ b/components/engine/builder/dockerfile/parser/testfiles/docker/Dockerfile
@@ -1,102 +1,94 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
 #
-# # Publish a release:
-# docker run --privileged \
-#  -e AWS_S3_BUCKET=baz \
-#  -e AWS_ACCESS_KEY=foo \
-#  -e AWS_SECRET_KEY=bar \
-#  -e GPG_PASSPHRASE=gloubiboulga \
-#  docker hack/release.sh
-#
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM	ubuntu:14.04
 LABEL	maintainer	Tianon Gravi <admwiggin@gmail.com> (@tianon)
 
 # Packaged dependencies
 RUN	apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -yq \
 	apt-utils \
 	aufs-tools \
 	automake \
 	btrfs-tools \
 	build-essential \
 	curl \
 	dpkg-sig \
 	git \
 	iptables \
 	libapparmor-dev \
 	libcap-dev \
 	mercurial \
 	pandoc \
 	parallel \
 	reprepro \
 	ruby1.9.1 \
 	ruby1.9.1-dev \
 	s3cmd=1.1.0* \
 	--no-install-recommends
 
 # Get lvm2 source for compiling statically
 RUN	git clone --no-checkout https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2 && cd /usr/local/lvm2 && git checkout -q v2_02_103
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 # note: we don't use ""git clone -b"" above because it then spews big nasty warnings about 'detached HEAD' state that we can't silence as easily as we can silence them using ""git checkout"" directly
 
 # Compile and install lvm2
 RUN	cd /usr/local/lvm2 && ./configure --enable-static_link && make device-mapper && make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Install Go
 RUN	curl -sSL https://golang.org/dl/go1.3.src.tar.gz | tar -v -C /usr/local -xz
 ENV	PATH	/usr/local/go/bin:$PATH
 ENV	GOPATH	/go:/go/src/github.com/docker/docker/vendor
 RUN	cd /usr/local/go/src && ./make.bash --no-clean 2>&1
 
 # Compile Go for cross compilation
 ENV	DOCKER_CROSSPLATFORMS	\
 	linux/386 linux/arm \
 	darwin/amd64 darwin/386 \
 	freebsd/amd64 freebsd/386 freebsd/arm
 # (set an explicit GOARM of 5 for maximum compatibility)
 ENV	GOARM	5
 RUN	cd /usr/local/go/src && bash -xc 'for platform in $DOCKER_CROSSPLATFORMS; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean 2>&1; done'
 
 # Grab Go's cover tool for dead-simple code coverage testing
 RUN	go get golang.org/x/tools/cmd/cover
 
 # TODO replace FPM with some very minimal debhelper stuff
 RUN	gem install --no-rdoc --no-ri fpm --version 1.0.2
 
 # Get the ""busybox"" image source so we can build locally instead of pulling
 RUN	git clone -b buildroot-2014.02 https://github.com/jpetazzo/docker-busybox.git /docker-busybox
 
 # Setup s3cmd config
 RUN	/bin/echo -e '[default]\naccess_key=$AWS_ACCESS_KEY\nsecret_key=$AWS_SECRET_KEY' > /.s3cfg
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN	git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME	/var/lib/docker
 WORKDIR	/go/src/github.com/docker/docker
 ENV	DOCKER_BUILDTAGS	apparmor selinux
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT	[""hack/dind""]
 
 # Upload docker source
 COPY	.	/go/src/github.com/docker/docker
"
4,+,# TODO verify gpg and sha256: http://nodejs.org/dist/v0.10.30/SHASUMS256.txt.asc,
5,+,## Start Hack,"diff --git a/Dockerfile b/Dockerfile
index 024065d..685d09e 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,81 +1,63 @@
-FROM debian:jessie
-
 ## Start Hack
-## All of this needed because of missing 8.11.x tag.  Once we update to 8.15 we can resume using Dockerfile.old or remove hack and use FROM node:8.15-slim
+FROM debian:jessie-slim
+## All of this needed because of missing 8.11.x tag.  Once we update to 8.15+ we can resume using Dockerfile.old or remove hack and use FROM node:8-slim
 
 ## Installing Node.js
-
-# gpg keys listed at https://github.com/nodejs/node
-RUN set -ex \
- && for key in \
-      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
-      FD3A5288F042B6850C66B31F09FE44734EB7990E \
-      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
-      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
-      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
-      B9AE9905FFD7803F25714661B63B535A4C206CA9 \
-      56730D5401028683275BD23C23EFEFE93C4CFFFE \
-      77984A986EBC2AA786BC0F66B01FBB92821C587A \
-      8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
-    ; do \
-    gpg --keyserver pool.sks-keyservers.net --recv-keys ""$key""; \
-    done
-
+RUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys DD8F2338BAE7501E3DD5AC78C273792F7D83545D
 ENV NODE_VERSION 8.11.4
 ENV NODE_ENV production
-
-RUN set -x \
- && apt-get update && apt-get install -y curl ca-certificates imagemagick --no-install-recommends \
- && rm -rf /var/lib/apt/lists/* \
- && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"" \
- && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
- && gpg --verify SHASUMS256.txt.asc \
- && grep "" node-v$NODE_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt.asc | sha256sum -c - \
- && tar -xzf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
- && rm ""node-v$NODE_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc \
- && npm cache clear --force
-
- ## End Hack
+RUN set -eux; \
+	apt-get update; \
+	apt-get install -y --no-install-recommends ca-certificates curl; \
+	rm -rf /var/lib/apt/lists/*; \
+	curl -fsSLO --compressed ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz""; \
+	curl -fsSLO --compressed ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc""; \
+	gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc; \
+	grep "" node-v$NODE_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt | sha256sum -c -; \
+	tar -xf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 --no-same-owner; \
+	rm ""node-v$NODE_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc SHASUMS256.txt; \
+	npm cache clear --force
+## End Hack
 
 ## Actual Rocket.Chat stuff
 MAINTAINER buildmaster@rocket.chat
 
 RUN groupadd -r rocketchat \
 &&  useradd -r -g rocketchat rocketchat \
 &&  mkdir -p /app/uploads \
 &&  chown rocketchat.rocketchat /app/uploads
 
 VOLUME /app/uploads
 
 # gpg: key 4FD08014: public key ""Rocket.Chat Buildmaster <buildmaster@rocket.chat>"" imported
 RUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 0E163286C20D07B9787EBE9FD7F9D0414FD08104
 
 ENV RC_VERSION 0.74.3
 
 WORKDIR /app
 
 RUN curl -fSL ""https://releases.rocket.chat/${RC_VERSION}/download"" -o rocket.chat.tgz \
 &&  curl -fSL ""https://releases.rocket.chat/${RC_VERSION}/asc"" -o rocket.chat.tgz.asc \
 &&  gpg --batch --verify rocket.chat.tgz.asc rocket.chat.tgz \
 &&  tar zxvf rocket.chat.tgz \
 &&  rm rocket.chat.tgz rocket.chat.tgz.asc \
 &&  cd bundle/programs/server \
 &&  npm install \
 &&  npm cache clear --force \
 &&  chown -R rocketchat:rocketchat /app
 
 USER rocketchat
 
 WORKDIR /app/bundle
 
 # needs a mongoinstance - defaults to container linking with alias 'db'
 ENV DEPLOY_METHOD=docker-official \
     MONGO_URL=mongodb://db:27017/meteor \
     HOME=/tmp \
     PORT=3000 \
     ROOT_URL=http://localhost:3000 \
     Accounts_AvatarStorePath=/app/uploads
 
 EXPOSE 3000
 
-CMD [""node"", ""main.js""]
\ No newline at end of file
+CMD [""node"", ""main.js""]
"
6,+,"# TODO:
# - version as a variable (both php and ZS)",
7,+,# TODO use this MD5,
8,+,# TODO use links to get a redis server/database instead (since that's where configuration actually goes),
9,+,# TODO see note above about redis,
10,+,"# # Make a dockerd binary.
# # hack/make.sh binary
#
# # Install dockerd to /usr/local/bin
# # make install
#
# # Run unit tests
# # hack/test/unit
#
# # Run tests e.g. integration, py
# # hack/make.sh binary test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/Dockerfile b/Dockerfile
index c4651b7b50..4db75a6722 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,248 +1,240 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Use make to build a development environment image and run it in a container.
 # # This is slow the first time.
 # make BIND_DIR=. shell
 #
 # The following commands are executed inside the running container.
 
 # # Make a dockerd binary.
 # # hack/make.sh binary
 #
 # # Install dockerd to /usr/local/bin
 # # make install
 #
 # # Run unit tests
 # # hack/test/unit
 #
 # # Run tests e.g. integration, py
 # # hack/make.sh binary test-integration test-docker-py
 #
-# # Publish a release:
-# docker run --privileged \
-#  -e AWS_S3_BUCKET=baz \
-#  -e AWS_ACCESS_KEY=foo \
-#  -e AWS_SECRET_KEY=bar \
-#  -e GPG_PASSPHRASE=gloubiboulga \
-#  docker hack/release.sh
-#
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM golang:1.10.2 AS base
 # FIXME(vdemeester) this is kept for other script depending on it to not fail right away
 # Remove this once the other scripts uses something else to detect the version
 ENV GO_VERSION 1.10.2
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri ""s/(httpredir|deb).debian.org/$APT_MIRROR/g"" /etc/apt/sources.list
 
 FROM base AS criu
 # Install CRIU for checkpoint/restore support
 ENV CRIU_VERSION 3.6
 # Install dependancy packages specific to criu
 RUN apt-get update && apt-get install -y \
 	libnet-dev \
 	libprotobuf-c0-dev \
 	libprotobuf-dev \
 	libnl-3-dev \
 	libcap-dev \
 	protobuf-compiler \
 	protobuf-c-compiler \
 	python-protobuf \
 	&& mkdir -p /usr/src/criu \
 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 \
 	&& cd /usr/src/criu \
 	&& make \
 	&& make PREFIX=/build/ install-criu
 
 FROM base AS registry
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& case $(dpkg --print-architecture) in \
 		amd64|ppc64*|s390x) \
 		(cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1""); \
 		GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH""; \
 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; \
 		;; \
 	   esac \
 	&& rm -rf ""$GOPATH""
 
 
 
 FROM base AS docker-py
 # Get the ""docker-py"" source so we can run their integration tests
 ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 RUN git clone https://github.com/docker/docker-py.git /build \
 	&& cd /build \
 	&& git checkout -q $DOCKER_PY_COMMIT
 
 
 
 FROM base AS swagger
 # Install go-swagger for validating swagger.yaml
 ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/go-swagger/go-swagger.git ""$GOPATH/src/github.com/go-swagger/go-swagger"" \
 	&& (cd ""$GOPATH/src/github.com/go-swagger/go-swagger"" && git checkout -q ""$GO_SWAGGER_COMMIT"") \
 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger \
 	&& rm -rf ""$GOPATH""
 
 
 FROM base AS frozen-images
 RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /
 RUN /download-frozen-image-v2.sh /build \
 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 \
 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 \
 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 \
 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 \
 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 # See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
 
 # Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd
 FROM base AS runtime-dev
 RUN apt-get update && apt-get install -y \
 	libapparmor-dev \
 	libseccomp-dev
 
 
 FROM base AS tomlv
 ENV INSTALL_BINARY_NAME=tomlv
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS vndr
 ENV INSTALL_BINARY_NAME=vndr
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS containerd
 RUN apt-get update && apt-get install -y btrfs-tools
 ENV INSTALL_BINARY_NAME=containerd
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS proxy
 ENV INSTALL_BINARY_NAME=proxy
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS gometalinter
 ENV INSTALL_BINARY_NAME=gometalinter
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS dockercli
 ENV INSTALL_BINARY_NAME=dockercli
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM runtime-dev AS runc
 ENV INSTALL_BINARY_NAME=runc
 COPY hack/dockerfile/install/install.sh ./install.sh
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 FROM base AS tini
 RUN apt-get update && apt-get install -y cmake vim-common
 COPY hack/dockerfile/install/install.sh ./install.sh
 ENV INSTALL_BINARY_NAME=tini
 COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 
 
 
 # TODO: Some of this is only really needed for testing, it would be nice to split this up
 FROM runtime-dev AS dev
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 # Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH
 RUN echo ""source /usr/share/bash-completion/bash_completion"" >> /etc/bash.bashrc
 RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 RUN ldconfig
 # This should only install packages that are specifically needed for the dev environment and nothing else
 # Do you really need to add another package here? Can it be done in a different build stage?
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	aufs-tools \
 	bash-completion \
 	btrfs-tools \
 	iptables \
 	jq \
 	libdevmapper-dev \
 	libudev-dev \
 	libsystemd-dev \
 	binutils-mingw-w64 \
 	g++-mingw-w64-x86-64 \
 	net-tools \
 	pigz \
 	python-backports.ssl-match-hostname \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-requests \
 	python-setuptools \
 	python-websocket \
 	python-wheel \
 	thin-provisioning-tools \
 	vim \
 	vim-common \
 	xfsprogs \
 	zip \
 	bzip2 \
 	xz-utils \
 	--no-install-recommends
 COPY --from=swagger /build/swagger* /usr/local/bin/
 COPY --from=frozen-images /build/ /docker-frozen-images
 COPY --from=gometalinter /build/ /usr/local/bin/
 COPY --from=tomlv /build/ /usr/local/bin/
 COPY --from=vndr /build/ /usr/local/bin/
 COPY --from=tini /build/ /usr/local/bin/
 COPY --from=runc /build/ /usr/local/bin/
 COPY --from=containerd /build/ /usr/local/bin/
 COPY --from=proxy /build/ /usr/local/bin/
 COPY --from=dockercli /build/ /usr/local/cli
 COPY --from=registry /build/registry* /usr/local/bin/
 COPY --from=criu /build/ /usr/local/
 COPY --from=docker-py /build/ /docker-py
 # TODO: This is for the docker-py tests, which shouldn't really be needed for
 # this image, but currently CI is expecting to run this image. This should be
 # split out into a separate image, including all the `python-*` deps installed
 # above.
 RUN cd /docker-py \
 	&& pip install docker-pycreds==0.2.1 \
 	&& pip install yamllint==1.5.0 \
 	&& pip install -r test-requirements.txt
 
 ENV PATH=/usr/local/cli:$PATH
 ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 # Options for hack/validate/gometalinter
 ENV GOMETALINTER_OPTS=""--deadline=2m""
 WORKDIR /go/src/github.com/docker/docker
 VOLUME /var/lib/docker
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
11,+,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/builder/dockerfile/parser/testfiles/docker/Dockerfile b/builder/dockerfile/parser/testfiles/docker/Dockerfile
index 77aecd9ba3..cd327aa499 100644
--- a/builder/dockerfile/parser/testfiles/docker/Dockerfile
+++ b/builder/dockerfile/parser/testfiles/docker/Dockerfile
@@ -1,102 +1,94 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
 #
-# # Publish a release:
-# docker run --privileged \
-#  -e AWS_S3_BUCKET=baz \
-#  -e AWS_ACCESS_KEY=foo \
-#  -e AWS_SECRET_KEY=bar \
-#  -e GPG_PASSPHRASE=gloubiboulga \
-#  docker hack/release.sh
-#
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM	ubuntu:14.04
 LABEL	maintainer	Tianon Gravi <admwiggin@gmail.com> (@tianon)
 
 # Packaged dependencies
 RUN	apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -yq \
 	apt-utils \
 	aufs-tools \
 	automake \
 	btrfs-tools \
 	build-essential \
 	curl \
 	dpkg-sig \
 	git \
 	iptables \
 	libapparmor-dev \
 	libcap-dev \
 	mercurial \
 	pandoc \
 	parallel \
 	reprepro \
 	ruby1.9.1 \
 	ruby1.9.1-dev \
 	s3cmd=1.1.0* \
 	--no-install-recommends
 
 # Get lvm2 source for compiling statically
 RUN	git clone --no-checkout https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2 && cd /usr/local/lvm2 && git checkout -q v2_02_103
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 # note: we don't use ""git clone -b"" above because it then spews big nasty warnings about 'detached HEAD' state that we can't silence as easily as we can silence them using ""git checkout"" directly
 
 # Compile and install lvm2
 RUN	cd /usr/local/lvm2 && ./configure --enable-static_link && make device-mapper && make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Install Go
 RUN	curl -sSL https://golang.org/dl/go1.3.src.tar.gz | tar -v -C /usr/local -xz
 ENV	PATH	/usr/local/go/bin:$PATH
 ENV	GOPATH	/go:/go/src/github.com/docker/docker/vendor
 RUN	cd /usr/local/go/src && ./make.bash --no-clean 2>&1
 
 # Compile Go for cross compilation
 ENV	DOCKER_CROSSPLATFORMS	\
 	linux/386 linux/arm \
 	darwin/amd64 darwin/386 \
 	freebsd/amd64 freebsd/386 freebsd/arm
 # (set an explicit GOARM of 5 for maximum compatibility)
 ENV	GOARM	5
 RUN	cd /usr/local/go/src && bash -xc 'for platform in $DOCKER_CROSSPLATFORMS; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean 2>&1; done'
 
 # Grab Go's cover tool for dead-simple code coverage testing
 RUN	go get golang.org/x/tools/cmd/cover
 
 # TODO replace FPM with some very minimal debhelper stuff
 RUN	gem install --no-rdoc --no-ri fpm --version 1.0.2
 
 # Get the ""busybox"" image source so we can build locally instead of pulling
 RUN	git clone -b buildroot-2014.02 https://github.com/jpetazzo/docker-busybox.git /docker-busybox
 
 # Setup s3cmd config
 RUN	/bin/echo -e '[default]\naccess_key=$AWS_ACCESS_KEY\nsecret_key=$AWS_SECRET_KEY' > /.s3cfg
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN	git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME	/var/lib/docker
 WORKDIR	/go/src/github.com/docker/docker
 ENV	DOCKER_BUILDTAGS	apparmor selinux
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT	[""hack/dind""]
 
 # Upload docker source
 COPY	.	/go/src/github.com/docker/docker
"
12,-,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html",
13,-,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html",
14,-,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html",
15,-,"# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# http://erlang.org/pipermail/erlang-questions/2019-January/097067.html",
16,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# ","diff --git a/Dockerfile b/Dockerfile
index 0f04035ec4..122346c0dd 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,60 +1,64 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 # # Apparmor messes with privileged mode: disable it
 # /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
 #
+# # Mount your source in an interactive container for quick testing:
+# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
+#
+#
 # # Run the test suite:
 # docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
 #
 # # Publish a release:
 # docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
 # -e AWS_S3_BUCKET=baz \
 # -e AWS_ACCESS_KEY=foo \
 # -e AWS_SECRET_KEY=bar \
 # -e GPG_PASSPHRASE=gloubiboulga \
 # -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
 # 
 
 docker-version 0.6.1
 from	ubuntu:12.04
 maintainer	Solomon Hykes <solomon@dotcloud.com>
 # Build dependencies
 run	echo 'deb http://archive.ubuntu.com/ubuntu precise main universe' > /etc/apt/sources.list
 run	apt-get update
 run	apt-get install -y -q curl
 run	apt-get install -y -q git
 run	apt-get install -y -q mercurial
 # Install Go
 run	curl -s https://go.googlecode.com/files/go1.1.2.linux-amd64.tar.gz | tar -v -C /usr/local -xz
 env	PATH	/usr/local/go/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
 env	GOPATH	/go
 env	CGO_ENABLED 0
 run	cd /tmp && echo 'package main' > t.go && go test -a -i -v
 # Ubuntu stuff
 run	apt-get install -y -q ruby1.9.3 rubygems libffi-dev
 run	gem install fpm
 run	apt-get install -y -q reprepro dpkg-sig
 # Install s3cmd 1.0.1 (earlier versions don't support env variables in the config)
 run	apt-get install -y -q python-pip
 run	pip install s3cmd
 run	pip install python-magic
 run	/bin/echo -e '[default]\naccess_key=$AWS_ACCESS_KEY\nsecret_key=$AWS_SECRET_KEY\n' > /.s3cfg
 # Runtime dependencies
 run	apt-get install -y -q iptables
 run	apt-get install -y -q lxc
 # Download dependencies
 run	PKG=github.com/kr/pty REV=27435c699;		 git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=github.com/gorilla/context/ REV=708054d61e5; git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=github.com/gorilla/mux/ REV=9b36453141c;	 git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=github.com/dotcloud/tar/ REV=e5ea6bb21a3294;	 git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=code.google.com/p/go.net/ REV=84a4013f96e0;  hg  clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && hg  checkout    $REV
 volume	/var/lib/docker
 workdir	/go/src/github.com/dotcloud/docker
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 entrypoint [""hack/dind""]
 # Upload docker source
 add	.       /go/src/github.com/dotcloud/docker
"
17,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#",
18,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/Dockerfile b/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
19,-,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)","diff --git a/Dockerfile b/Dockerfile
index c52476c637..27608c4f5f 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,254 +1,254 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri ""s/(httpredir|deb).debian.org/$APT_MIRROR/g"" /etc/apt/sources.list
 
 # Add zfs ppa
 COPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/
 RUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	cmake \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	less \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libnl-3-dev \
 	libprotobuf-c0-dev \
 	libprotobuf-dev \
 	libsystemd-journal-dev \
 	libtool \
 	libzfs-dev \
 	mercurial \
 	net-tools \
 	pkg-config \
 	protobuf-compiler \
 	protobuf-c-compiler \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	tar \
 	ubuntu-zfs \
 	vim \
 	vim-common \
 	xfsprogs \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # Install seccomp: the version shipped upstream is too old
 ENV SECCOMP_VERSION 2.3.2
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.7.5
 RUN curl -fsSL ""https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386 \
 	solaris/amd64
 
 # Dependency for golint
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT)
 
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install CRIU for checkpoint/restore support
 ENV CRIU_VERSION 2.12.1
 # Install dependancy packages specific to criu
 RUN apt-get install libnet-dev -y && \
 	mkdir -p /usr/src/criu \
 	&& curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \
 	&& cd /usr/src/criu \
 	&& make \
 	&& make install-criu
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.5.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
 ENV DOCKER_PY_COMMIT 4a08d04aef0595322e1b5ac7c52f28a931da85a5
 # To run integration tests docker-pycreds is required.
 # Before running the integration tests conftest.py is
 # loaded which results in loads auth.py that
 # imports the docker-pycreds module.
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install docker-pycreds==0.2.1 \
 	&& pip install -r test-requirements.txt
 
 # Install yamllint for validating swagger.yaml
 RUN pip install yamllint==1.5.0
 
 # Install go-swagger for validating swagger.yaml
 ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 RUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \
 	&& (cd /go/src/github.com/go-swagger/go-swagger && git checkout -q $GO_SWAGGER_COMMIT) \
 	&& go install -v github.com/go-swagger/go-swagger/cmd/swagger
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
-	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
-	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
-	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
-	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
-# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
+	buildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 \
+	busybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f \
+	debian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 \
+	hello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
+# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
 
 # Install tomlv, vndr, runc, containerd, tini, docker-proxy
 # Please edit hack/dockerfile/install-binaries.sh to update them.
 COPY hack/dockerfile/binaries-commits /tmp/binaries-commits
 COPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh
 RUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
20,-,# TODO replace FPM with some very minimal debhelper stuff,
21,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#",
22,-,# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released,"diff --git a/docs/Dockerfile b/docs/Dockerfile
index caa291dffb..0b5b33b29f 100644
--- a/docs/Dockerfile
+++ b/docs/Dockerfile
@@ -1,43 +1,45 @@
 #
 # See the top level Makefile in https://github.com/docker/docker for usage.
 #
 FROM docs/base:latest
 MAINTAINER Sven Dowideit <SvenDowideit@docker.com> (@SvenDowideit)
 
 # TODO: need the full repo source to get the git version info
 COPY . /src
 
 # Reset the /docs dir so we can replace the theme meta with the new repo's git info
 RUN git reset --hard
 
 # Then copy the desired docs into the /docs/sources/ dir
-COPY ./docs/sources/ /docs/sources
+COPY ./sources/ /docs/sources
 
 COPY ./VERSION VERSION
 
-COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md
+# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
+#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md
+
 # TODO: don't do this - look at merging the yml file in build.sh
-COPY ./docs/mkdocs.yml mkdocs.yml
-COPY ./docs/s3_website.json s3_website.json
+COPY ./mkdocs.yml mkdocs.yml
+COPY ./s3_website.json s3_website.json
 
 # Docker Swarm
 ADD https://raw.githubusercontent.com/docker/swarm/master/docs/mkdocs.yml /docs/mkdocs-swarm.yml
 ADD https://raw.githubusercontent.com/docker/swarm/master/docs/index.md /docs/sources/swarm/index.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/discovery/README.md /docs/sources/swarm/discovery.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/api/README.md /docs/sources/swarm/API.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/filter/README.md /docs/sources/swarm/scheduler/filter.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/strategy/README.md /docs/sources/swarm/scheduler/strategy.md
 
 # Docker Machine
 ADD https://raw.githubusercontent.com/docker/machine/master/docs/mkdocs.yml /docs/mkdocs-machine.yml
 ADD https://raw.githubusercontent.com/docker/machine/master/docs/index.md /docs/sources/machine/index.md
 
 # Docker Compose
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/mkdocs.yml /docs/mkdocs-compose.yml
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/index.md /docs/sources/compose/index.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/install.md /docs/sources/compose/install.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/cli.md /docs/sources/compose/cli.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/yml.md /docs/sources/compose/yml.md
 
 # Then build everything together, ready for mkdocs
 RUN /docs/build.sh
"
23,-,#### FIXME. Temporarily install docker with proper apparmor handling,"diff --git a/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile b/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
index 953d7c11cc..6762cb4686 100644
--- a/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
+++ b/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
@@ -1,30 +1,35 @@
 # VERSION:        1.5
 # DOCKER-VERSION  0.6.4
 # AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
 # DESCRIPTION:    Build docker nightly release using Docker in Docker.
 # REFERENCES:     This code reuses the excellent implementation of docker in docker
 #                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
 # COMMENTS:
 #   release_credentials.json is a base64 json encoded file containing:
 #       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
 #         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
 #         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
 # TO_BUILD:       docker build -t dockerbuilder .
 # TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh
 
 from docker
 maintainer Daniel Mizyrycki <daniel@dotcloud.com>
 
 # Add docker dependencies and downloading packages
 run echo 'deb http://archive.ubuntu.com/ubuntu precise main universe' > /etc/apt/sources.list
 run apt-get update; apt-get install -y -q wget python2.7
 
 # Add production docker binary
 run wget -q -O /usr/bin/docker http://get.docker.io/builds/Linux/x86_64/docker-latest; chmod +x /usr/bin/docker
 
+#### FIXME. Temporarily install docker and dind with proper apparmor handling
+run wget -q -O /usr/bin/docker http://test.docker.io/test/docker; chmod +x /usr/bin/docker
+run wget -q -O /go/src/github.com/dotcloud/docker/hack/dind http://raw.github.com/jpetazzo/docker/escape-apparmor-confinement/hack/dind
+run chmod +x /go/src/github.com/dotcloud/docker/hack/dind
+
 # Add proto docker builder
 add ./dockerbuild.sh /usr/bin/dockerbuild.sh
 run chmod +x /usr/bin/dockerbuild.sh
 
 # Add release credentials
 add ./release_credentials.json /root/release_credentials.json
"
24,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# ","diff --git a/components/engine/Dockerfile b/components/engine/Dockerfile
index 0f04035ec4..122346c0dd 100644
--- a/components/engine/Dockerfile
+++ b/components/engine/Dockerfile
@@ -1,60 +1,64 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 # # Apparmor messes with privileged mode: disable it
 # /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
 #
+# # Mount your source in an interactive container for quick testing:
+# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
+#
+#
 # # Run the test suite:
 # docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
 #
 # # Publish a release:
 # docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
 # -e AWS_S3_BUCKET=baz \
 # -e AWS_ACCESS_KEY=foo \
 # -e AWS_SECRET_KEY=bar \
 # -e GPG_PASSPHRASE=gloubiboulga \
 # -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
 # 
 
 docker-version 0.6.1
 from	ubuntu:12.04
 maintainer	Solomon Hykes <solomon@dotcloud.com>
 # Build dependencies
 run	echo 'deb http://archive.ubuntu.com/ubuntu precise main universe' > /etc/apt/sources.list
 run	apt-get update
 run	apt-get install -y -q curl
 run	apt-get install -y -q git
 run	apt-get install -y -q mercurial
 # Install Go
 run	curl -s https://go.googlecode.com/files/go1.1.2.linux-amd64.tar.gz | tar -v -C /usr/local -xz
 env	PATH	/usr/local/go/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
 env	GOPATH	/go
 env	CGO_ENABLED 0
 run	cd /tmp && echo 'package main' > t.go && go test -a -i -v
 # Ubuntu stuff
 run	apt-get install -y -q ruby1.9.3 rubygems libffi-dev
 run	gem install fpm
 run	apt-get install -y -q reprepro dpkg-sig
 # Install s3cmd 1.0.1 (earlier versions don't support env variables in the config)
 run	apt-get install -y -q python-pip
 run	pip install s3cmd
 run	pip install python-magic
 run	/bin/echo -e '[default]\naccess_key=$AWS_ACCESS_KEY\nsecret_key=$AWS_SECRET_KEY\n' > /.s3cfg
 # Runtime dependencies
 run	apt-get install -y -q iptables
 run	apt-get install -y -q lxc
 # Download dependencies
 run	PKG=github.com/kr/pty REV=27435c699;		 git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=github.com/gorilla/context/ REV=708054d61e5; git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=github.com/gorilla/mux/ REV=9b36453141c;	 git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=github.com/dotcloud/tar/ REV=e5ea6bb21a3294;	 git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=code.google.com/p/go.net/ REV=84a4013f96e0;  hg  clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && hg  checkout    $REV
 volume	/var/lib/docker
 workdir	/go/src/github.com/dotcloud/docker
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 entrypoint [""hack/dind""]
 # Upload docker source
 add	.       /go/src/github.com/dotcloud/docker
"
25,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#",
26,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/components/engine/Dockerfile b/components/engine/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/components/engine/Dockerfile
+++ b/components/engine/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
27,-,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)","diff --git a/components/engine/Dockerfile b/components/engine/Dockerfile
index c52476c637..27608c4f5f 100644
--- a/components/engine/Dockerfile
+++ b/components/engine/Dockerfile
@@ -1,254 +1,254 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri ""s/(httpredir|deb).debian.org/$APT_MIRROR/g"" /etc/apt/sources.list
 
 # Add zfs ppa
 COPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/
 RUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	cmake \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	less \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libnl-3-dev \
 	libprotobuf-c0-dev \
 	libprotobuf-dev \
 	libsystemd-journal-dev \
 	libtool \
 	libzfs-dev \
 	mercurial \
 	net-tools \
 	pkg-config \
 	protobuf-compiler \
 	protobuf-c-compiler \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	tar \
 	ubuntu-zfs \
 	vim \
 	vim-common \
 	xfsprogs \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # Install seccomp: the version shipped upstream is too old
 ENV SECCOMP_VERSION 2.3.2
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.7.5
 RUN curl -fsSL ""https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386 \
 	solaris/amd64
 
 # Dependency for golint
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT)
 
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install CRIU for checkpoint/restore support
 ENV CRIU_VERSION 2.12.1
 # Install dependancy packages specific to criu
 RUN apt-get install libnet-dev -y && \
 	mkdir -p /usr/src/criu \
 	&& curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \
 	&& cd /usr/src/criu \
 	&& make \
 	&& make install-criu
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.5.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
 ENV DOCKER_PY_COMMIT 4a08d04aef0595322e1b5ac7c52f28a931da85a5
 # To run integration tests docker-pycreds is required.
 # Before running the integration tests conftest.py is
 # loaded which results in loads auth.py that
 # imports the docker-pycreds module.
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install docker-pycreds==0.2.1 \
 	&& pip install -r test-requirements.txt
 
 # Install yamllint for validating swagger.yaml
 RUN pip install yamllint==1.5.0
 
 # Install go-swagger for validating swagger.yaml
 ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 RUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \
 	&& (cd /go/src/github.com/go-swagger/go-swagger && git checkout -q $GO_SWAGGER_COMMIT) \
 	&& go install -v github.com/go-swagger/go-swagger/cmd/swagger
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
-	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
-	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
-	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
-	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
-# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
+	buildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 \
+	busybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f \
+	debian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 \
+	hello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
+# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
 
 # Install tomlv, vndr, runc, containerd, tini, docker-proxy
 # Please edit hack/dockerfile/install-binaries.sh to update them.
 COPY hack/dockerfile/binaries-commits /tmp/binaries-commits
 COPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh
 RUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
28,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#",
29,-,# TODO replace FPM with some very minimal debhelper stuff,
30,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#",
31,-,# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released,"diff --git a/components/engine/docs/Dockerfile b/components/engine/docs/Dockerfile
index caa291dffb..0b5b33b29f 100644
--- a/components/engine/docs/Dockerfile
+++ b/components/engine/docs/Dockerfile
@@ -1,43 +1,45 @@
 #
 # See the top level Makefile in https://github.com/docker/docker for usage.
 #
 FROM docs/base:latest
 MAINTAINER Sven Dowideit <SvenDowideit@docker.com> (@SvenDowideit)
 
 # TODO: need the full repo source to get the git version info
 COPY . /src
 
 # Reset the /docs dir so we can replace the theme meta with the new repo's git info
 RUN git reset --hard
 
 # Then copy the desired docs into the /docs/sources/ dir
-COPY ./docs/sources/ /docs/sources
+COPY ./sources/ /docs/sources
 
 COPY ./VERSION VERSION
 
-COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md
+# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
+#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md
+
 # TODO: don't do this - look at merging the yml file in build.sh
-COPY ./docs/mkdocs.yml mkdocs.yml
-COPY ./docs/s3_website.json s3_website.json
+COPY ./mkdocs.yml mkdocs.yml
+COPY ./s3_website.json s3_website.json
 
 # Docker Swarm
 ADD https://raw.githubusercontent.com/docker/swarm/master/docs/mkdocs.yml /docs/mkdocs-swarm.yml
 ADD https://raw.githubusercontent.com/docker/swarm/master/docs/index.md /docs/sources/swarm/index.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/discovery/README.md /docs/sources/swarm/discovery.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/api/README.md /docs/sources/swarm/API.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/filter/README.md /docs/sources/swarm/scheduler/filter.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/strategy/README.md /docs/sources/swarm/scheduler/strategy.md
 
 # Docker Machine
 ADD https://raw.githubusercontent.com/docker/machine/master/docs/mkdocs.yml /docs/mkdocs-machine.yml
 ADD https://raw.githubusercontent.com/docker/machine/master/docs/index.md /docs/sources/machine/index.md
 
 # Docker Compose
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/mkdocs.yml /docs/mkdocs-compose.yml
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/index.md /docs/sources/compose/index.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/install.md /docs/sources/compose/install.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/cli.md /docs/sources/compose/cli.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/yml.md /docs/sources/compose/yml.md
 
 # Then build everything together, ready for mkdocs
 RUN /docs/build.sh
"
32,-,"# Todo: remove build dependencies
#	runDeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $runDeps; \
#	apk del .build-deps","diff --git a/3.4/alpine/Dockerfile b/3.4/alpine/Dockerfile
index 2e9f1c5..23673d3 100644
--- a/3.4/alpine/Dockerfile
+++ b/3.4/alpine/Dockerfile
@@ -1,102 +1,103 @@
-FROM ruby:2.4-alpine
+FROM ruby:2.4-alpine3.10
 
 # add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
-RUN addgroup -S redmine && adduser -S -G redmine redmine
+RUN addgroup -S redmine && adduser -S -H -G redmine redmine
 
 RUN set -eux; \
 	apk add --no-cache \
 		bash \
 		ca-certificates \
 		su-exec \
 		tini \
 		tzdata \
 		wget \
 		\
 		bzr \
 		git \
 		mercurial \
 		openssh-client \
 		subversion \
 		\
 # https://github.com/docker-library/redmine/issues/132
 # (without ""ghostscript-fonts"" we get ""Magick::ImageMagickError (non-conforming drawing primitive definition `text' @ error/draw.c/DrawImage/3265):"")
 		ghostscript-fonts \
 		imagemagick6 \
 	;
 
 ENV RAILS_ENV production
 WORKDIR /usr/src/redmine
 
 # https://github.com/docker-library/redmine/issues/138#issuecomment-438834176
 # (bundler needs this for running as an arbitrary user)
 ENV HOME /home/redmine
 RUN set -eux; \
+	[ ! -d ""$HOME"" ]; \
 	mkdir -p ""$HOME""; \
 	chown redmine:redmine ""$HOME""; \
 	chmod 1777 ""$HOME""
 
 ENV REDMINE_VERSION 3.4.11
 ENV REDMINE_DOWNLOAD_MD5 796384ff56d335fe21da65acf4dba747
 
 RUN set -eux; \
 	wget -O redmine.tar.gz ""https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz""; \
 	echo ""$REDMINE_DOWNLOAD_MD5 *redmine.tar.gz"" | md5sum -c -; \
 	tar -xf redmine.tar.gz --strip-components=1; \
 	rm redmine.tar.gz files/delete.me log/delete.me; \
 	mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids; \
 	chown -R redmine:redmine ./; \
+# log to STDOUT (https://github.com/docker-library/redmine/issues/108)
+	echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb; \
 # fix permissions for running as an arbitrary user
 	chmod -R ugo=rwX config db sqlite; \
 	find log tmp -type d -exec chmod 1777 '{}' +
 
 RUN set -eux; \
 	\
 	apk add --no-cache --virtual .build-deps \
+		coreutils \
 		freetds-dev \
 		gcc \
 		imagemagick6-dev \
 		make \
 		mariadb-dev \
 		musl-dev \
 		patch \
 		postgresql-dev \
 		sqlite-dev \
 		ttf2ufm \
 		zlib-dev \
-		\
-# tiny_tds 1.0.x requires OpenSSL 1.0
-# see https://github.com/rails-sqlserver/tiny_tds/commit/3269dd3bcfbe4201ab51aa2870a6aaddfcbdfa5d (tiny_tds 1.2.x+ is required for OpenSSL 1.1 support)
-		openssl-dev \
 	; \
-#	su-exec redmine bundle config build.tiny_tds --enable-system-freetds; \
 	\
 	su-exec redmine bundle install --without development test; \
 	for adapter in mysql2 postgresql sqlserver sqlite3; do \
 		echo ""$RAILS_ENV:"" > ./config/database.yml; \
 		echo ""  adapter: $adapter"" >> ./config/database.yml; \
 		su-exec redmine bundle install --without development test; \
 		cp Gemfile.lock ""Gemfile.lock.${adapter}""; \
 	done; \
 	rm ./config/database.yml; \
 # fix permissions for running as an arbitrary user
 	chmod -R ugo=rwX Gemfile.lock ""$GEM_HOME""; \
-	chmod +x /usr/local/bundle/bin/*; \
+# this requires coreutils because ""chmod +X"" in busybox will remove +x on files (and coreutils leaves files alone with +X)
 	rm -rf ~redmine/.bundle; \
+	\
 # https://github.com/naitoh/rbpdf/issues/31
-	rm -f /usr/local/bundle/gems/rbpdf-font-1.19.*/lib/fonts/ttf2ufm/ttf2ufm; \
+	rm /usr/local/bundle/gems/rbpdf-font-1.19.*/lib/fonts/ttf2ufm/ttf2ufm; \
+	\
 	runDeps=""$( \
 		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
 		| tr ',' '\n' \
 		| sort -u \
 		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
 	)""; \
 	apk add --virtual .redmine-rundeps $runDeps; \
 	apk del .build-deps
 
 VOLUME /usr/src/redmine/files
 
 COPY docker-entrypoint.sh /
 ENTRYPOINT [""/docker-entrypoint.sh""]
 
 EXPOSE 3000
 CMD [""rails"", ""server"", ""-b"", ""0.0.0.0""]
"
33,-,"# Todo: remove build dependencies
#	runDeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $runDeps; \
#	apk del .build-deps","diff --git a/4.0/alpine/Dockerfile b/4.0/alpine/Dockerfile
index 7e256cb..2e3e03d 100644
--- a/4.0/alpine/Dockerfile
+++ b/4.0/alpine/Dockerfile
@@ -1,102 +1,103 @@
-FROM ruby:2.6-alpine
+FROM ruby:2.6-alpine3.10
 
 # add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
-RUN addgroup -S redmine && adduser -S -G redmine redmine
+RUN addgroup -S redmine && adduser -S -H -G redmine redmine
 
 RUN set -eux; \
 	apk add --no-cache \
 		bash \
 		ca-certificates \
 		su-exec \
 		tini \
 		tzdata \
 		wget \
 		\
 		bzr \
 		git \
 		mercurial \
 		openssh-client \
 		subversion \
 		\
 # https://github.com/docker-library/redmine/issues/132
 # (without ""ghostscript-fonts"" we get ""Magick::ImageMagickError (non-conforming drawing primitive definition `text' @ error/draw.c/DrawImage/3265):"")
 		ghostscript-fonts \
 		imagemagick6 \
 	;
 
 ENV RAILS_ENV production
 WORKDIR /usr/src/redmine
 
 # https://github.com/docker-library/redmine/issues/138#issuecomment-438834176
 # (bundler needs this for running as an arbitrary user)
 ENV HOME /home/redmine
 RUN set -eux; \
+	[ ! -d ""$HOME"" ]; \
 	mkdir -p ""$HOME""; \
 	chown redmine:redmine ""$HOME""; \
 	chmod 1777 ""$HOME""
 
 ENV REDMINE_VERSION 4.0.4
 ENV REDMINE_DOWNLOAD_MD5 35a4f60b35fed2b10d14cb12fc8aef50
 
 RUN set -eux; \
 	wget -O redmine.tar.gz ""https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz""; \
 	echo ""$REDMINE_DOWNLOAD_MD5 *redmine.tar.gz"" | md5sum -c -; \
 	tar -xf redmine.tar.gz --strip-components=1; \
 	rm redmine.tar.gz files/delete.me log/delete.me; \
 	mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids; \
 	chown -R redmine:redmine ./; \
+# log to STDOUT (https://github.com/docker-library/redmine/issues/108)
+	echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb; \
 # fix permissions for running as an arbitrary user
 	chmod -R ugo=rwX config db sqlite; \
 	find log tmp -type d -exec chmod 1777 '{}' +
 
 RUN set -eux; \
 	\
 	apk add --no-cache --virtual .build-deps \
+		coreutils \
 		freetds-dev \
 		gcc \
 		imagemagick6-dev \
 		make \
 		mariadb-dev \
 		musl-dev \
 		patch \
 		postgresql-dev \
 		sqlite-dev \
 		ttf2ufm \
 		zlib-dev \
-		\
-# tiny_tds 1.0.x requires OpenSSL 1.0
-# see https://github.com/rails-sqlserver/tiny_tds/commit/3269dd3bcfbe4201ab51aa2870a6aaddfcbdfa5d (tiny_tds 1.2.x+ is required for OpenSSL 1.1 support)
-		openssl-dev \
 	; \
-#	su-exec redmine bundle config build.tiny_tds --enable-system-freetds; \
 	\
 	su-exec redmine bundle install --without development test; \
 	for adapter in mysql2 postgresql sqlserver sqlite3; do \
 		echo ""$RAILS_ENV:"" > ./config/database.yml; \
 		echo ""  adapter: $adapter"" >> ./config/database.yml; \
 		su-exec redmine bundle install --without development test; \
 		cp Gemfile.lock ""Gemfile.lock.${adapter}""; \
 	done; \
 	rm ./config/database.yml; \
 # fix permissions for running as an arbitrary user
 	chmod -R ugo=rwX Gemfile.lock ""$GEM_HOME""; \
-	chmod +x /usr/local/bundle/bin/*; \
+# this requires coreutils because ""chmod +X"" in busybox will remove +x on files (and coreutils leaves files alone with +X)
 	rm -rf ~redmine/.bundle; \
+	\
 # https://github.com/naitoh/rbpdf/issues/31
-	rm -f /usr/local/bundle/gems/rbpdf-font-1.19.*/lib/fonts/ttf2ufm/ttf2ufm; \
+	rm /usr/local/bundle/gems/rbpdf-font-1.19.*/lib/fonts/ttf2ufm/ttf2ufm; \
+	\
 	runDeps=""$( \
 		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
 		| tr ',' '\n' \
 		| sort -u \
 		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
 	)""; \
 	apk add --virtual .redmine-rundeps $runDeps; \
 	apk del .build-deps
 
 VOLUME /usr/src/redmine/files
 
 COPY docker-entrypoint.sh /
 ENTRYPOINT [""/docker-entrypoint.sh""]
 
 EXPOSE 3000
 CMD [""rails"", ""server"", ""-b"", ""0.0.0.0""]
"
34,-,"# TODO should we leave these installed, or remove them too?","diff --git a/9.0/jdk8/corretto/Dockerfile b/9.0/jdk8/corretto/Dockerfile
index 9e4304a..05c5ab7 100644
--- a/9.0/jdk8/corretto/Dockerfile
+++ b/9.0/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
35,-,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed","diff --git a/9.0/jdk8/corretto/Dockerfile b/9.0/jdk8/corretto/Dockerfile
index 9e4304a..05c5ab7 100644
--- a/9.0/jdk8/corretto/Dockerfile
+++ b/9.0/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
36,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/9.0/jdk8/corretto/Dockerfile b/9.0/jdk8/corretto/Dockerfile
index 9e4304a..05c5ab7 100644
--- a/9.0/jdk8/corretto/Dockerfile
+++ b/9.0/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
37,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/7/jdk8/corretto/Dockerfile b/7/jdk8/corretto/Dockerfile
index 5dea29e..e652c5a 100644
--- a/7/jdk8/corretto/Dockerfile
+++ b/7/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 7
 ENV TOMCAT_VERSION 7.0.94
 ENV TOMCAT_SHA512 b16f4b08591199e15f953c34965389a80d5597c28626a51c71ce42695ddd3359dc4df7f333ef0e1a1e8f9b2b6245041d57607c46764f33e560246c119cdc0f7a
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
38,-,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed","diff --git a/7/jdk8/corretto/Dockerfile b/7/jdk8/corretto/Dockerfile
index 5dea29e..e652c5a 100644
--- a/7/jdk8/corretto/Dockerfile
+++ b/7/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 7
 ENV TOMCAT_VERSION 7.0.94
 ENV TOMCAT_SHA512 b16f4b08591199e15f953c34965389a80d5597c28626a51c71ce42695ddd3359dc4df7f333ef0e1a1e8f9b2b6245041d57607c46764f33e560246c119cdc0f7a
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
39,-,"# TODO should we leave these installed, or remove them too?","diff --git a/7/jdk8/corretto/Dockerfile b/7/jdk8/corretto/Dockerfile
index 5dea29e..e652c5a 100644
--- a/7/jdk8/corretto/Dockerfile
+++ b/7/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 7
 ENV TOMCAT_VERSION 7.0.94
 ENV TOMCAT_SHA512 b16f4b08591199e15f953c34965389a80d5597c28626a51c71ce42695ddd3359dc4df7f333ef0e1a1e8f9b2b6245041d57607c46764f33e560246c119cdc0f7a
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
40,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/8.5/jdk11/corretto/Dockerfile b/8.5/jdk11/corretto/Dockerfile
index 2675b83..4ce32de 100644
--- a/8.5/jdk11/corretto/Dockerfile
+++ b/8.5/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
41,-,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed","diff --git a/8.5/jdk11/corretto/Dockerfile b/8.5/jdk11/corretto/Dockerfile
index 2675b83..4ce32de 100644
--- a/8.5/jdk11/corretto/Dockerfile
+++ b/8.5/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
42,-,"# TODO should we leave these installed, or remove them too?","diff --git a/8.5/jdk11/corretto/Dockerfile b/8.5/jdk11/corretto/Dockerfile
index 2675b83..4ce32de 100644
--- a/8.5/jdk11/corretto/Dockerfile
+++ b/8.5/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
43,-,"# TODO should we leave these installed, or remove them too?","diff --git a/9.0/jdk11/corretto/Dockerfile b/9.0/jdk11/corretto/Dockerfile
index f6cfa88..80a37ae 100644
--- a/9.0/jdk11/corretto/Dockerfile
+++ b/9.0/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
44,-,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed","diff --git a/9.0/jdk11/corretto/Dockerfile b/9.0/jdk11/corretto/Dockerfile
index f6cfa88..80a37ae 100644
--- a/9.0/jdk11/corretto/Dockerfile
+++ b/9.0/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
45,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/9.0/jdk11/corretto/Dockerfile b/9.0/jdk11/corretto/Dockerfile
index f6cfa88..80a37ae 100644
--- a/9.0/jdk11/corretto/Dockerfile
+++ b/9.0/jdk11/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:11
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 9
 ENV TOMCAT_VERSION 9.0.21
 ENV TOMCAT_SHA512 a8788ba8187f940b55d3db6cb0108943b8b48aecc2d9a3307409d3cbf72fac9b19fa434baa97aa0d4ac552f7c13967932b8a36dbae5d582bc14ed13bb058ea9b
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
46,-,"# TODO handle ""$nativeBuildDeps"" in a similarly generic way?","diff --git a/8.5/jdk8/corretto/Dockerfile b/8.5/jdk8/corretto/Dockerfile
index f0abb76..782ad35 100644
--- a/8.5/jdk8/corretto/Dockerfile
+++ b/8.5/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
47,-,"# http://yum.baseurl.org/wiki/YumDB.html (updating ""reason"" to ""user"" for tomcat-native build dependencies)
# TODO find a better/cleaner way to generically interact with the yumdb for the purposes of marking things as automatically/manually installed","diff --git a/8.5/jdk8/corretto/Dockerfile b/8.5/jdk8/corretto/Dockerfile
index f0abb76..782ad35 100644
--- a/8.5/jdk8/corretto/Dockerfile
+++ b/8.5/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
48,-,"# TODO should we leave these installed, or remove them too?","diff --git a/8.5/jdk8/corretto/Dockerfile b/8.5/jdk8/corretto/Dockerfile
index f0abb76..782ad35 100644
--- a/8.5/jdk8/corretto/Dockerfile
+++ b/8.5/jdk8/corretto/Dockerfile
@@ -1,161 +1,149 @@
 FROM amazoncorretto:8
 
 ENV CATALINA_HOME /usr/local/tomcat
 ENV PATH $CATALINA_HOME/bin:$PATH
 RUN mkdir -p ""$CATALINA_HOME""
 WORKDIR $CATALINA_HOME
 
 # let ""Tomcat Native"" live somewhere isolated
 ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
 ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR
 
 # see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
 # see also ""update.sh"" (https://github.com/docker-library/tomcat/blob/master/update.sh)
 ENV GPG_KEYS 05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
 
 ENV TOMCAT_MAJOR 8
 ENV TOMCAT_VERSION 8.5.42
 ENV TOMCAT_SHA512 3e6b38e48d315d142e96f8e3809c86632f3c3903f8751c6602581a587edf840893ff0c737a65fcf9560a495b0118b5b8d60d4d1ce7947fe2abe34a89839b640f
 
 ENV TOMCAT_TGZ_URLS \
 # https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 # if the version is outdated, we might have to pull from the dist/archive :/
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
 
 ENV TOMCAT_ASC_URLS \
 	https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 # not all the mirrors actually carry the .asc files :'(
 	https://www-us.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
 	https://archive.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc
 
 RUN set -eux; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 	for key in $GPG_KEYS; do \
 		gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
 	done; \
 	\
 	success=; \
 	for url in $TOMCAT_TGZ_URLS; do \
 		if curl -fL -o tomcat.tar.gz ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 	echo ""$TOMCAT_SHA512 *tomcat.tar.gz"" | sha512sum --strict --check -; \
 	\
 	success=; \
 	for url in $TOMCAT_ASC_URLS; do \
 		if curl -fL -o tomcat.tar.gz.asc ""$url""; then \
 			success=1; \
 			break; \
 		fi; \
 	done; \
 	[ -n ""$success"" ]; \
 	\
 # http://yum.baseurl.org/wiki/YumDB.html
-	_yumdb_update_reason() { ( set -eu +x; \
-		local reason=""$1""; shift; \
-		local pkg q; \
-		for pkg; do \
-			if q=""$(rpm --query --queryformat '%{HDRID}-%{NVR}-%{ARCH}\n' ""$pkg"" 2>/dev/null)"" && [ -n ""$q"" ]; then \
-				local l=""${pkg%${pkg#?}}""; \
-				local dir=""/var/lib/yum/yumdb/$l/$q""; \
-				if ! [ -d ""$dir"" ]; then \
-					echo ""note: creating $dir""; \
-					mkdir -p ""$dir""; \
-				fi; \
-				rm -f ""$dir/reason""; \
-				echo ""note: updating $dir/reason to $reason""; \
-				echo -n ""$reason"" > ""$dir/reason""; \
-			else \
-				echo >&2 ""error: $pkg does not seem to be installed?""; \
-				return 1; \
-			fi; \
-		done; \
-	) }; \
+	if ! command -v yumdb > /dev/null; then \
+		yum install -y yum-utils; \
+		yumdb set reason dep yum-utils; \
+	fi; \
+	if [ -f /etc/oracle-release ]; then \
+# TODO there's an odd bug on Oracle Linux where installing ""cpp"" (which gets pulled in as a dependency of ""gcc"") and then marking it as automatically-installed will result in the ""filesystem"" package being removed during ""yum autoremove"" (which then fails), so we set it as manually-installed to compensate
+		yumdb set reason user filesystem; \
+	fi; \
 # a helper function to ""yum install"" things, but only if they aren't installed (and to set their ""reason"" to ""dep"" so ""yum autoremove"" can purge them for us)
 	_yum_install_temporary() { ( set -eu +x; \
 		local pkg todo=''; \
 		for pkg; do \
 			if ! rpm --query ""$pkg"" > /dev/null 2>&1; then \
 				todo=""$todo $pkg""; \
 			fi; \
 		done; \
 		if [ -n ""$todo"" ]; then \
 			set -x; \
 			yum install -y $todo; \
-			_yumdb_update_reason 'dep' $todo; \
+			yumdb set reason dep $todo; \
 		fi; \
 	) }; \
 	\
 	_yum_install_temporary gzip tar; \
 	\
 	gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz; \
 	tar -xf tomcat.tar.gz --strip-components=1; \
 	rm bin/*.bat; \
 	rm tomcat.tar.gz*; \
 	command -v gpgconf && gpgconf --kill all || :; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	nativeBuildDir=""$(mktemp -d)""; \
 	tar -xf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1; \
 	_yum_install_temporary apr-devel gcc make openssl-devel; \
 	( \
 		export CATALINA_HOME=""$PWD""; \
 		cd ""$nativeBuildDir/native""; \
 		aprConfig=""$(command -v apr-1-config)""; \
 		./configure \
 			--libdir=""$TOMCAT_NATIVE_LIBDIR"" \
 			--prefix=""$CATALINA_HOME"" \
 			--with-apr=""$aprConfig"" \
 			--with-java-home=""$JAVA_HOME"" \
 			--with-ssl=yes; \
 		make -j ""$(nproc)""; \
 		make install; \
 	); \
 	rm -rf ""$nativeBuildDir""; \
 	rm bin/tomcat-native.tar.gz; \
 	\
 # mark any explicit dependencies as manually installed
 	deps=""$( \
 		find ""$TOMCAT_NATIVE_LIBDIR"" -type f -executable -exec ldd '{}' ';' \
-			| awk '/=>/ { print $(NF-1) }' \
+			| awk '/=>/ && $(NF-1) != ""=>"" { print $(NF-1) }' \
 			| sort -u \
 			| xargs -r rpm --query --whatprovides \
 			| sort -u \
 	)""; \
-	[ -z ""$deps"" ] || _yumdb_update_reason 'user' $deps; \
+	[ -z ""$deps"" ] || yumdb set reason user $deps; \
 	\
 # clean up anything added temporarily and not later marked as necessary
 	yum autoremove -y; \
 	yum clean all; \
 	rm -rf /var/cache/yum; \
 	\
 # sh removes env vars it doesn't support (ones with periods)
 # https://github.com/docker-library/tomcat/issues/77
 	find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env bash|' '{}' +; \
 	\
 # fix permissions (especially for running as non-root)
 # https://github.com/docker-library/tomcat/issues/35
 	chmod -R +rX .; \
 	chmod 777 logs work
 
 # verify Tomcat Native is working properly
 RUN set -e \
 	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
 	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
 	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
 		echo >&2 ""$nativeLines""; \
 		exit 1; \
 	fi
 
 EXPOSE 8080
 CMD [""catalina.sh"", ""run""]
"
49,-,## haskell package versions; can be overriden via context hacks,"diff --git a/7.8/Dockerfile b/7.8/Dockerfile
index 7ed374f..b2eab57 100644
--- a/7.8/Dockerfile
+++ b/7.8/Dockerfile
@@ -1,64 +1,65 @@
 ## Dockerfile for a haskell environment
 FROM       debian:stable
 MAINTAINER Darin Morrison <darinmorrison+docker@gmail.com>
 
 ## disable prompts from apt
 ENV DEBIAN_FRONTEND noninteractive
 
 ## custom apt-get install options
 ENV OPTS_APT        -y --no-install-recommends
 
 ## ensure locale is set during build
 ENV LC_ALL          C.UTF-8
 ENV LANG            C.UTF-8
 ENV LANGUAGE        C.UTF-8
 
 ## ensure locale is set for new logins
 RUN echo    'LC_ALL=C.UTF-8' >> '/etc/default/locale'\
  && echo      'LANG=C.UTF-8' >> '/etc/default/locale'\
  && echo  'LANGUAGE=C.UTF-8' >> '/etc/default/locale'
 
 ## configure apt to use the haskell repository
 ADD http://deb.haskell.org/deb.haskell.org.gpg-key /tmp/deb.haskell.org.gpg-key
 RUN apt-key add /tmp/deb.haskell.org.gpg-key\
  && echo 'deb     http://deb.haskell.org/stable/ ./' >> /etc/apt/sources.list.d/haskell.list\
  && echo 'deb-src http://deb.haskell.org/stable/ ./' >> /etc/apt/sources.list.d/haskell.list
 
 ## set ghc upstream package versions and ghc deb revisions
 ENV VERSION_GHC    7.8.3
 ENV DEB_REV_GHC    -1
 
 ## install ghc
 RUN apt-get update\
  && apt-get install ${OPTS_APT}\
       ghc-7.8.3=""${VERSION_GHC}""""${DEB_REV_GHC}""
 
 ## set upstream package versions for remaining haskell packages
 ENV VERSION_ALEX   3.1.3
 ENV VERSION_CABAL  1.20.0.3
 ENV VERSION_HAPPY  1.19.4
 
 ## set deb revisions for remaining haskell packages
 ENV DEB_REV_ALEX   -1
 ENV DEB_REV_CABAL  -1
 ENV DEB_REV_HAPPY  -1
 
 ## install minimal set of haskell packages
 RUN apt-get update\
  && apt-get install ${OPTS_APT}\
       alex=""${VERSION_ALEX}""""${DEB_REV_ALEX}""\
       cabal-install-1.20=""${VERSION_CABAL}""""${DEB_REV_CABAL}""\
       happy=""${VERSION_HAPPY}""""${DEB_REV_HAPPY}""
 
-## Development Niceties
-RUN apt-get install zlib1g-dev
+## install additional libs typically needed by hackage packages
+RUN apt-get update\
+ && apt-get install ${OPTS_APT} zlib1g-dev
 
 ## link binaries into /usr/local/bin
 RUN find /opt -maxdepth 3 -name bin -type d\
   -exec sh -c\
     'cd {} && ls .\
       | egrep -v ^.*\-[.[:digit:]]+$\
       | xargs -I % ln -s `pwd`/% /usr/local/bin/%' \;
 
 ## run ghci by default unless a command is specified
 CMD [""ghci""]
"
50,-,# TODO use this MD5,"diff --git a/7/apache/Dockerfile b/7/apache/Dockerfile
index b6299c4..1488731 100644
--- a/7/apache/Dockerfile
+++ b/7/apache/Dockerfile
@@ -1,73 +1,74 @@
 # from https://www.drupal.org/docs/8/system-requirements/drupal-8-php-requirements
-FROM php:7.2-apache
+FROM php:7.2-apache-stretch
+# TODO switch to buster once https://github.com/docker-library/php/issues/865 is resolved in a clean way (either in the PHP image or in PHP itself)
 
 # install the PHP extensions we need
 RUN set -eux; \
 	\
 	if command -v a2enmod; then \
 		a2enmod rewrite; \
 	fi; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	\
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		libfreetype6-dev \
 		libjpeg-dev \
 		libpng-dev \
 		libpq-dev \
 		libzip-dev \
 	; \
 	\
 	docker-php-ext-configure gd \
 		--with-freetype-dir=/usr \
 		--with-jpeg-dir=/usr \
 		--with-png-dir=/usr \
 	; \
 	\
 	docker-php-ext-install -j ""$(nproc)"" \
 		gd \
 		opcache \
 		pdo_mysql \
 		pdo_pgsql \
 		zip \
 	; \
 	\
 # reset apt-mark's ""manual"" list so that ""purge --auto-remove"" will remove all build dependencies
 	apt-mark auto '.*' > /dev/null; \
 	apt-mark manual $savedAptMark; \
 	ldd ""$(php -r 'echo ini_get(""extension_dir"");')""/*.so \
 		| awk '/=>/ { print $3 }' \
 		| sort -u \
 		| xargs -r dpkg-query -S \
 		| cut -d: -f1 \
 		| sort -u \
 		| xargs -rt apt-mark manual; \
 	\
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	rm -rf /var/lib/apt/lists/*
 
 # set recommended PHP.ini settings
 # see https://secure.php.net/manual/en/opcache.installation.php
 RUN { \
 		echo 'opcache.memory_consumption=128'; \
 		echo 'opcache.interned_strings_buffer=8'; \
 		echo 'opcache.max_accelerated_files=4000'; \
 		echo 'opcache.revalidate_freq=60'; \
 		echo 'opcache.fast_shutdown=1'; \
 	} > /usr/local/etc/php/conf.d/opcache-recommended.ini
 
 WORKDIR /var/www/html
 
 # https://www.drupal.org/node/3060/release
 ENV DRUPAL_VERSION 7.67
 ENV DRUPAL_MD5 78b1814e55fdaf40e753fd523d059f8d
 
 RUN set -eux; \
 	curl -fSL ""https://ftp.drupal.org/files/projects/drupal-${DRUPAL_VERSION}.tar.gz"" -o drupal.tar.gz; \
 	echo ""${DRUPAL_MD5} *drupal.tar.gz"" | md5sum -c -; \
 	tar -xz --strip-components=1 -f drupal.tar.gz; \
 	rm drupal.tar.gz; \
 	chown -R www-data:www-data sites modules themes
 
 # vim:set ft=dockerfile:
"
51,-,"    # VisualEditor
    # TODO: make submodules shallow clones?","diff --git a/Dockerfile b/Dockerfile
index 6b5ffb3..1051e1e 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,65 +1,67 @@
 FROM debian:sid
 MAINTAINER Gabriel Wicke <gwicke@wikimedia.org>
 
 ENV MEDIAWIKI_VERSION wmf/1.30.0-wmf.2
 
 # XXX: Consider switching to nginx.
 RUN set -x; \
     apt-get update \
     && apt-get install -y --no-install-recommends \
         ca-certificates \
         apache2 \
         libapache2-mod-php7.1 \
         php7.1-mysql \
         php7.1-cli \
         php7.1-gd \
         php7.1-curl \
         php7.1-mbstring \
         php7.1-xml \
         imagemagick \
         netcat \
         git \
     && rm -rf /var/lib/apt/lists/* \
     && rm -rf /var/cache/apt/archives/* \
     && a2enmod rewrite \
     && a2enmod proxy \
     && a2enmod proxy_http \
     # Remove the default Debian index page.
     && rm /var/www/html/index.html
 
 
 # MediaWiki setup
 RUN set -x; \
     mkdir -p /usr/src \
     && git clone \
         --depth 1 \
         -b $MEDIAWIKI_VERSION \
         https://gerrit.wikimedia.org/r/p/mediawiki/core.git \
         /usr/src/mediawiki \
     && cd /usr/src/mediawiki \
     && git submodule update --init skins \
     && git submodule update --init vendor \
     && cd extensions \
     # Extensions
     # TODO: make submodules shallow clones?
     && git submodule update --init --recursive VisualEditor \
     && git submodule update --init --recursive Math \
     && git submodule update --init --recursive EventBus \
     && git submodule update --init --recursive Scribunto \
     && git submodule update --init --recursive ParserFunctions \
     && git submodule update --init --recursive SyntaxHighlight_GeSHi \
     && git submodule update --init --recursive Cite \
     && git submodule update --init --recursive Echo \
-    && git submodule update --init --recursive Flow
+    && git submodule update --init --recursive Flow \
+    && git submodule update --init --recursive PageImages \
+    && git submodule update --init --recursive TextExtracts
 
 
 COPY php.ini /usr/local/etc/php/conf.d/mediawiki.ini
 
 COPY apache/mediawiki.conf /etc/apache2/
 RUN echo ""Include /etc/apache2/mediawiki.conf"" >> /etc/apache2/apache2.conf
 
 COPY docker-entrypoint.sh /entrypoint.sh
 
 EXPOSE 80 443
 ENTRYPOINT [""/entrypoint.sh""]
 CMD [""apachectl"", ""-e"", ""info"", ""-D"", ""FOREGROUND""]
"
52,-,"# FIXME This is a workaround for pytest not found causing builds to fail
# Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722","diff --git a/ros2/nightly/nightly/Dockerfile b/ros2/nightly/nightly/Dockerfile
index f3f5f37..a04e35c 100644
--- a/ros2/nightly/nightly/Dockerfile
+++ b/ros2/nightly/nightly/Dockerfile
@@ -1,121 +1,121 @@
 # This is an auto generated Dockerfile for ros:nightly
 # generated from docker_images_ros2/nightly/create_ros_image.Dockerfile.em
 FROM ubuntu:bionic
 
 # setup timezone
 RUN echo 'Etc/UTC' > /etc/timezone && \
     ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
     apt-get update && apt-get install -q -y tzdata && rm -rf /var/lib/apt/lists/*
 
 # install packages
 RUN apt-get update && apt-get install -q -y \
     bash-completion \
     cmake \
     dirmngr \
     git \
     gnupg2 \
     lsb-release \
     python3-pip \
     wget \
     && rm -rf /var/lib/apt/lists/*
 
 # setup ros2 keys
 RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
 
 # setup sources.list
 RUN echo ""deb http://packages.ros.org/ros2-testing/ubuntu `lsb_release -sc` main"" > /etc/apt/sources.list.d/ros2-testing.list
 
 # install bootstrap tools
 RUN apt-get update && apt-get install --no-install-recommends -y \
     git \
+    python3-colcon-common-extensions \
+    python3-colcon-mixin \
     python3-rosdep \
     python3-vcstool \
     && rm -rf /var/lib/apt/lists/*
 
 # setup environment
 ENV LANG C.UTF-8
 ENV LC_ALL C.UTF-8
 ENV ROSDISTRO_INDEX_URL https://raw.githubusercontent.com/osrf/docker_images/master/ros2/nightly/nightly/index-v4.yaml
 
 # install python packages
 RUN pip3 install -U \
     argcomplete \
-    colcon-common-extensions \
-    colcon-mixin \
     flake8 \
     flake8-blind-except \
     flake8-builtins \
     flake8-class-newline \
     flake8-comprehensions \
     flake8-deprecated \
     flake8-docstrings \
     flake8-import-order \
     flake8-quotes \
     pytest-repeat \
     pytest-rerunfailures
 # This is a workaround for pytest not found causing builds to fail
 # Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
 RUN pip3 freeze | grep pytest \
     && python3 -m pytest --version
 
 # install ros2 packages
 ENV ROS_DISTRO foxy
 RUN mkdir -p /opt/ros/$ROS_DISTRO
 ARG ROS2_BINARY_URL=https://ci.ros2.org/view/packaging/job/packaging_linux/lastSuccessfulBuild/artifact/ws/ros2-package-linux-x86_64.tar.bz2
 RUN wget -q $ROS2_BINARY_URL -O - | \
     tar -xj --strip-components=1 -C /opt/ros/$ROS_DISTRO
 
 # Overwrite setup scripts with ones that point to /opt/ros/$ROS_DISTRO
 RUN mkdir -p /tmp/dir/build \
  && cd /tmp/dir \
  && git clone --depth 1 https://github.com/ros2/ros_workspace.git -b latest \
  && cd /tmp/dir/build \
  && COLCON_CURRENT_PREFIX=/opt/ros/$ROS_DISTRO . /opt/ros/$ROS_DISTRO/local_setup.sh \
  && cmake -DCMAKE_INSTALL_PREFIX=/opt/ros/$ROS_DISTRO ../ros_workspace \
  && make install \
  && rm -r /tmp/dir
 
 # setup colcon mixin and metadata
 RUN colcon mixin add default \
       https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
     colcon mixin update && \
     colcon metadata add default \
       https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml && \
     colcon metadata update
 
 # bootstrap rosdep
 RUN rosdep init
 
 # add custom rosdep rule files
 COPY prereqs.yaml /etc/ros/rosdep/
 RUN echo ""yaml file:///etc/ros/rosdep/prereqs.yaml"" | \
     cat - /etc/ros/rosdep/sources.list.d/20-default.list > temp && \
     mv temp /etc/ros/rosdep/sources.list.d/20-default.list
 RUN rosdep update
 
 # install dependencies
 RUN . /opt/ros/$ROS_DISTRO/setup.sh \
     && apt-get update \
     && rosdep install -y \
     --from-paths /opt/ros/$ROS_DISTRO/share \
     --ignore-src \
     --skip-keys "" \
       cyclonedds \
       libopensplice69 \
       rti-connext-dds-5.3.1"" \
     && rm -rf /var/lib/apt/lists/*
 
 # FIXME Remove this once rosdep detects ROS 2 packages https://github.com/ros-infrastructure/rosdep/issues/660
 # ignore installed rosdep keys
 ENV ROS_PACKAGE_PATH /opt/ros/$ROS_DISTRO/share
 
 # FIXME Remove this once ament_export_interfaces respects COLCON_CURRENT_PREFIX https://github.com/ament/ament_cmake/issues/173
 #Workaround hard coded paths in nightly tarball setup scripts
 ARG UPSTREAM_CI_WS=/home/jenkins-agent/workspace/packaging_linux/ws
 RUN mkdir -p $UPSTREAM_CI_WS && ln -s /opt/ros/$ROS_DISTRO $UPSTREAM_CI_WS/install
 
 # setup entrypoint
 COPY ./ros_entrypoint.sh /
 
 ENTRYPOINT [""/ros_entrypoint.sh""]
 CMD [""bash""]
"
53,-,"# HACK, replacing shell with bash for later docker build commands","diff --git a/sros/kinetic/Dockerfile b/sros/kinetic/Dockerfile
index 7772c03..f26624b 100644
--- a/sros/kinetic/Dockerfile
+++ b/sros/kinetic/Dockerfile
@@ -1,85 +1,89 @@
 # This is a Dockerfile for osrf/sros:kinetic with SROS
 FROM ubuntu:xenial
 
 # install packages
 RUN apt-get update && apt-get install -y --no-install-recommends \
     dirmngr \
     gnupg2 \
     && rm -rf /var/lib/apt/lists/*
 
 # setup keys
 RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
 
 # setup sources.list
 RUN echo ""deb http://packages.ros.org/ros/ubuntu xenial main"" > /etc/apt/sources.list.d/ros-latest.list
 
 # install bootstrap
 #   and dev tools
 RUN apt-get update && \
     apt-get install -y \
         build-essential \
         python-catkin-tools  \
         python-rosdep \
         python-rosinstall-generator \
         python-wstool \
             bash-completion \
             byobu \
             git \
             less \
             tree \
             wget \
             python-pip && \
     rm -rf /var/lib/apt/lists/*
 
 # setup environment
 ENV LANG C.UTF-8
 ENV LC_ALL C.UTF-8
 
 # set envormetn and workspace
 ENV ROS_DISTRO kinetic
 ENV CATKIN_WS=/root/sros_catkin_ws
 RUN mkdir -p $CATKIN_WS/src
 WORKDIR $CATKIN_WS/src
 
 # download sourcecode for sros
 RUN rosinstall_generator \
       ros_comm \
       rospy_tutorials \
       --rosdistro ${ROS_DISTRO} \
       --deps \
       --tar > ${ROS_DISTRO}-ros_comm-wet.rosinstall && \
     wstool init -j8 . ${ROS_DISTRO}-ros_comm-wet.rosinstall && \
     rm -rf ros_comm && \
     git clone -b sros https://github.com/ros/ros_comm && \
     git clone -b sros https://github.com/ros-infrastructure/rospkg ../rospkg
 
+# FIXME renaming manifest.xml is a workaround for rosdep misbehaving when both
+# manifest.xml and package.xml are present
 # install dependencies
-RUN apt-get update && \
+RUN mv roslisp/manifest.xml roslisp/oldmanifest.xml && \
+    apt-get update && \
     rosdep init && \
     rosdep update && \
     rosdep install -y \
       --from-paths . \
       --ignore-src \
       --rosdistro ${ROS_DISTRO} \
       --as-root=apt:false && \
     pip install --upgrade ../rospkg/ && \
+    mv roslisp/oldmanifest.xml roslisp/manifest.xml && \
     rm -rf /var/lib/apt/lists/*
 
 # build repo
 WORKDIR $CATKIN_WS
 ENV TERM xterm
 ENV PYTHONIOENCODING UTF-8
 RUN catkin config --install && \
     catkin build --no-status --summarize
 
 # setup demo bashrc
 RUN echo 'source ""$CATKIN_WS/install/setup.bash""' >> ~/.bashrc
 
 # setup demo config
 COPY ./config /root/.ros/sros/config/
 
 # setup entrypoint
 COPY ./ros_entrypoint.sh /
 
 ENTRYPOINT [""/ros_entrypoint.sh""]
 CMD [""bash""]
"
54,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
# -e AWS_S3_BUCKET=baz \
# -e AWS_ACCESS_KEY=foo \
# -e AWS_SECRET_KEY=bar \
# -e GPG_PASSPHRASE=gloubiboulga \
# -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
# ","diff --git a/Dockerfile b/Dockerfile
index 0f04035ec4..122346c0dd 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,60 +1,64 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 # # Apparmor messes with privileged mode: disable it
 # /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
 #
+# # Mount your source in an interactive container for quick testing:
+# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
+#
+#
 # # Run the test suite:
 # docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker go test -v
 #
 # # Publish a release:
 # docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
 # -e AWS_S3_BUCKET=baz \
 # -e AWS_ACCESS_KEY=foo \
 # -e AWS_SECRET_KEY=bar \
 # -e GPG_PASSPHRASE=gloubiboulga \
 # -lxc-conf=lxc.aa_profile=unconfined -privileged docker hack/release.sh
 # 
 
 docker-version 0.6.1
 from	ubuntu:12.04
 maintainer	Solomon Hykes <solomon@dotcloud.com>
 # Build dependencies
 run	echo 'deb http://archive.ubuntu.com/ubuntu precise main universe' > /etc/apt/sources.list
 run	apt-get update
 run	apt-get install -y -q curl
 run	apt-get install -y -q git
 run	apt-get install -y -q mercurial
 # Install Go
 run	curl -s https://go.googlecode.com/files/go1.1.2.linux-amd64.tar.gz | tar -v -C /usr/local -xz
 env	PATH	/usr/local/go/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
 env	GOPATH	/go
 env	CGO_ENABLED 0
 run	cd /tmp && echo 'package main' > t.go && go test -a -i -v
 # Ubuntu stuff
 run	apt-get install -y -q ruby1.9.3 rubygems libffi-dev
 run	gem install fpm
 run	apt-get install -y -q reprepro dpkg-sig
 # Install s3cmd 1.0.1 (earlier versions don't support env variables in the config)
 run	apt-get install -y -q python-pip
 run	pip install s3cmd
 run	pip install python-magic
 run	/bin/echo -e '[default]\naccess_key=$AWS_ACCESS_KEY\nsecret_key=$AWS_SECRET_KEY\n' > /.s3cfg
 # Runtime dependencies
 run	apt-get install -y -q iptables
 run	apt-get install -y -q lxc
 # Download dependencies
 run	PKG=github.com/kr/pty REV=27435c699;		 git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=github.com/gorilla/context/ REV=708054d61e5; git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=github.com/gorilla/mux/ REV=9b36453141c;	 git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=github.com/dotcloud/tar/ REV=e5ea6bb21a3294;	 git clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && git checkout -f $REV
 run	PKG=code.google.com/p/go.net/ REV=84a4013f96e0;  hg  clone http://$PKG /go/src/$PKG && cd /go/src/$PKG && hg  checkout    $REV
 volume	/var/lib/docker
 workdir	/go/src/github.com/dotcloud/docker
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 entrypoint [""hack/dind""]
 # Upload docker source
 add	.       /go/src/github.com/dotcloud/docker
"
55,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
# # Apparmor messes with privileged mode: disable it
# /etc/init.d/apparmor stop ; /etc/init.d/apparmor teardown
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/dotcloud/docker -privileged -lxc-conf=lxc.aa_profile=unconfined -i -t docker bash
#
#
# # Run the test suite:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined docker hack/make.sh test
#
# # Publish a release:
# docker run -privileged -lxc-conf=lxc.aa_profile=unconfined \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#",
56,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # Publish a release:
# docker run --privileged \
#  -e AWS_S3_BUCKET=baz \
#  -e AWS_ACCESS_KEY=foo \
#  -e AWS_SECRET_KEY=bar \
#  -e GPG_PASSPHRASE=gloubiboulga \
#  docker hack/release.sh
#
# Note: Apparmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#","diff --git a/Dockerfile b/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
57,-,"# see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)","diff --git a/Dockerfile b/Dockerfile
index c52476c637..27608c4f5f 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,254 +1,254 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri ""s/(httpredir|deb).debian.org/$APT_MIRROR/g"" /etc/apt/sources.list
 
 # Add zfs ppa
 COPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/
 RUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	cmake \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	less \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libnl-3-dev \
 	libprotobuf-c0-dev \
 	libprotobuf-dev \
 	libsystemd-journal-dev \
 	libtool \
 	libzfs-dev \
 	mercurial \
 	net-tools \
 	pkg-config \
 	protobuf-compiler \
 	protobuf-c-compiler \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	tar \
 	ubuntu-zfs \
 	vim \
 	vim-common \
 	xfsprogs \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # Install seccomp: the version shipped upstream is too old
 ENV SECCOMP_VERSION 2.3.2
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.7.5
 RUN curl -fsSL ""https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386 \
 	solaris/amd64
 
 # Dependency for golint
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT)
 
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install CRIU for checkpoint/restore support
 ENV CRIU_VERSION 2.12.1
 # Install dependancy packages specific to criu
 RUN apt-get install libnet-dev -y && \
 	mkdir -p /usr/src/criu \
 	&& curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \
 	&& cd /usr/src/criu \
 	&& make \
 	&& make install-criu
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.5.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
 ENV DOCKER_PY_COMMIT 4a08d04aef0595322e1b5ac7c52f28a931da85a5
 # To run integration tests docker-pycreds is required.
 # Before running the integration tests conftest.py is
 # loaded which results in loads auth.py that
 # imports the docker-pycreds module.
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install docker-pycreds==0.2.1 \
 	&& pip install -r test-requirements.txt
 
 # Install yamllint for validating swagger.yaml
 RUN pip install yamllint==1.5.0
 
 # Install go-swagger for validating swagger.yaml
 ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 RUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \
 	&& (cd /go/src/github.com/go-swagger/go-swagger && git checkout -q $GO_SWAGGER_COMMIT) \
 	&& go install -v github.com/go-swagger/go-swagger/cmd/swagger
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
-	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
-	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
-	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
-	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
-# See also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
+	buildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 \
+	busybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f \
+	debian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 \
+	hello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
+# See also ensureFrozenImagesLinux() in ""integration-cli/fixtures_linux_daemon_test.go"" (which needs to be updated when adding images to this list)
 
 # Install tomlv, vndr, runc, containerd, tini, docker-proxy
 # Please edit hack/dockerfile/install-binaries.sh to update them.
 COPY hack/dockerfile/binaries-commits /tmp/binaries-commits
 COPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh
 RUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
58,-,# TODO replace FPM with some very minimal debhelper stuff,
59,-,"# This file describes the standard way to build Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# docker build -t docker .
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # Run the test suite:
# docker run --privileged docker hack/make.sh test-unit test-integration test-docker-py
#
# Note: AppArmor used to mess with privileged mode, but this is no longer
# the case. Therefore, you don't have to disable it anymore.
#",
60,-,# TODO switch to http://packages.ubuntu.com/trusty/python-sphinxcontrib-httpdomain once trusty is released,"diff --git a/docs/Dockerfile b/docs/Dockerfile
index caa291dffb..0b5b33b29f 100644
--- a/docs/Dockerfile
+++ b/docs/Dockerfile
@@ -1,43 +1,45 @@
 #
 # See the top level Makefile in https://github.com/docker/docker for usage.
 #
 FROM docs/base:latest
 MAINTAINER Sven Dowideit <SvenDowideit@docker.com> (@SvenDowideit)
 
 # TODO: need the full repo source to get the git version info
 COPY . /src
 
 # Reset the /docs dir so we can replace the theme meta with the new repo's git info
 RUN git reset --hard
 
 # Then copy the desired docs into the /docs/sources/ dir
-COPY ./docs/sources/ /docs/sources
+COPY ./sources/ /docs/sources
 
 COPY ./VERSION VERSION
 
-COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md
+# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
+#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md
+
 # TODO: don't do this - look at merging the yml file in build.sh
-COPY ./docs/mkdocs.yml mkdocs.yml
-COPY ./docs/s3_website.json s3_website.json
+COPY ./mkdocs.yml mkdocs.yml
+COPY ./s3_website.json s3_website.json
 
 # Docker Swarm
 ADD https://raw.githubusercontent.com/docker/swarm/master/docs/mkdocs.yml /docs/mkdocs-swarm.yml
 ADD https://raw.githubusercontent.com/docker/swarm/master/docs/index.md /docs/sources/swarm/index.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/discovery/README.md /docs/sources/swarm/discovery.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/api/README.md /docs/sources/swarm/API.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/filter/README.md /docs/sources/swarm/scheduler/filter.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/strategy/README.md /docs/sources/swarm/scheduler/strategy.md
 
 # Docker Machine
 ADD https://raw.githubusercontent.com/docker/machine/master/docs/mkdocs.yml /docs/mkdocs-machine.yml
 ADD https://raw.githubusercontent.com/docker/machine/master/docs/index.md /docs/sources/machine/index.md
 
 # Docker Compose
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/mkdocs.yml /docs/mkdocs-compose.yml
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/index.md /docs/sources/compose/index.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/install.md /docs/sources/compose/install.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/cli.md /docs/sources/compose/cli.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/yml.md /docs/sources/compose/yml.md
 
 # Then build everything together, ready for mkdocs
 RUN /docs/build.sh
"
61,-,#### FIXME. Temporarily install docker with proper apparmor handling,"diff --git a/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile b/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
index 953d7c11cc..6762cb4686 100644
--- a/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
+++ b/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
@@ -1,30 +1,35 @@
 # VERSION:        1.5
 # DOCKER-VERSION  0.6.4
 # AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
 # DESCRIPTION:    Build docker nightly release using Docker in Docker.
 # REFERENCES:     This code reuses the excellent implementation of docker in docker
 #                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
 # COMMENTS:
 #   release_credentials.json is a base64 json encoded file containing:
 #       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
 #         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
 #         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
 # TO_BUILD:       docker build -t dockerbuilder .
 # TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh
 
 from docker
 maintainer Daniel Mizyrycki <daniel@dotcloud.com>
 
 # Add docker dependencies and downloading packages
 run echo 'deb http://archive.ubuntu.com/ubuntu precise main universe' > /etc/apt/sources.list
 run apt-get update; apt-get install -y -q wget python2.7
 
 # Add production docker binary
 run wget -q -O /usr/bin/docker http://get.docker.io/builds/Linux/x86_64/docker-latest; chmod +x /usr/bin/docker
 
+#### FIXME. Temporarily install docker and dind with proper apparmor handling
+run wget -q -O /usr/bin/docker http://test.docker.io/test/docker; chmod +x /usr/bin/docker
+run wget -q -O /go/src/github.com/dotcloud/docker/hack/dind http://raw.github.com/jpetazzo/docker/escape-apparmor-confinement/hack/dind
+run chmod +x /go/src/github.com/dotcloud/docker/hack/dind
+
 # Add proto docker builder
 add ./dockerbuild.sh /usr/bin/dockerbuild.sh
 run chmod +x /usr/bin/dockerbuild.sh
 
 # Add release credentials
 add ./release_credentials.json /root/release_credentials.json
"
62,-,"# TODO find a way to make --mirror-only / SSL work with backpan too :(
#RUN cpanm Digest::SHA Module::Signature
# TODO find a way to make --verify work with backpan as well :'(
#ENV PERL_CPANM_OPT $PERL_CPANM_OPT --verify",
63,-,# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/11/jre/slim/Dockerfile b/11/jre/slim/Dockerfile
index 8ba124d..7592298 100644
--- a/11/jre/slim/Dockerfile
+++ b/11/jre/slim/Dockerfile
@@ -1,97 +1,102 @@
 FROM debian:buster-slim
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 # utilities for keeping Debian and OpenJDK CA certificates in sync
 		ca-certificates p11-kit \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-11
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.4
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.4%2B11/OpenJDK11U-jre_
 ENV JAVA_URL_VERSION 11.0.4_11
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		dirmngr \
 		gnupg \
 		wget \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
-	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
-# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# also verify that key was signed by Andrew Haley (the OpenJDK 8 and 11 Updates OpenJDK project lead)
+# (https://github.com/docker-library/openjdk/pull/322#discussion_r286839190)
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
-	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \
+		| tee /dev/stderr \
+		| grep '0xA5CD6035332FA671' \
+		| grep 'Andrew Haley'; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
 	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract \
 		--file openjdk.tgz \
 		--directory ""$JAVA_HOME"" \
 		--strip-components 1 \
 		--no-same-owner \
 	; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # update ""cacerts"" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)
 # see https://github.com/docker-library/openjdk/issues/327
 #     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075
 #     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in
 #     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29
 	{ \
 		echo '#!/usr/bin/env bash'; \
 		echo 'set -Eeuo pipefail'; \
 		echo 'if ! [ -d ""$JAVA_HOME"" ]; then echo >&2 ""error: missing JAVA_HOME environment variable""; exit 1; fi'; \
 # 8-jdk uses ""$JAVA_HOME/jre/lib/security/cacerts"" and 8-jre and 11+ uses ""$JAVA_HOME/lib/security/cacerts"" directly (no ""jre"" directory)
 		echo 'cacertsFile=; for f in ""$JAVA_HOME/lib/security/cacerts"" ""$JAVA_HOME/jre/lib/security/cacerts""; do if [ -e ""$f"" ]; then cacertsFile=""$f""; break; fi; done'; \
 		echo 'if [ -z ""$cacertsFile"" ] || ! [ -f ""$cacertsFile"" ]; then echo >&2 ""error: failed to find cacerts file in $JAVA_HOME""; exit 1; fi'; \
 		echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth ""$cacertsFile""'; \
 	} > /etc/ca-certificates/update.d/docker-openjdk; \
 	chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
 	/etc/ca-certificates/update.d/docker-openjdk; \
 	\
 # https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472
 	find ""$JAVA_HOME/lib"" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
 	ldconfig; \
 	\
 # basic smoke test
 	java --version
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
64,-,# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/8/jdk/Dockerfile b/8/jdk/Dockerfile
index 48c0ba3..c70df07 100644
--- a/8/jdk/Dockerfile
+++ b/8/jdk/Dockerfile
@@ -1,91 +1,96 @@
 FROM buildpack-deps:stretch-scm
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # utilities for keeping Debian and OpenJDK CA certificates in sync
 		ca-certificates p11-kit \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u222
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u222-b10/OpenJDK8U-jdk_
 ENV JAVA_URL_VERSION 8u222b10
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
-	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
-# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# also verify that key was signed by Andrew Haley (the OpenJDK 8 and 11 Updates OpenJDK project lead)
+# (https://github.com/docker-library/openjdk/pull/322#discussion_r286839190)
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
-	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \
+		| tee /dev/stderr \
+		| grep '0xA5CD6035332FA671' \
+		| grep 'Andrew Haley'; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
 	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract \
 		--file openjdk.tgz \
 		--directory ""$JAVA_HOME"" \
 		--strip-components 1 \
 		--no-same-owner \
 	; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # update ""cacerts"" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)
 # see https://github.com/docker-library/openjdk/issues/327
 #     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075
 #     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in
 #     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29
 	{ \
 		echo '#!/usr/bin/env bash'; \
 		echo 'set -Eeuo pipefail'; \
 		echo 'if ! [ -d ""$JAVA_HOME"" ]; then echo >&2 ""error: missing JAVA_HOME environment variable""; exit 1; fi'; \
 # 8-jdk uses ""$JAVA_HOME/jre/lib/security/cacerts"" and 8-jre and 11+ uses ""$JAVA_HOME/lib/security/cacerts"" directly (no ""jre"" directory)
 		echo 'cacertsFile=; for f in ""$JAVA_HOME/lib/security/cacerts"" ""$JAVA_HOME/jre/lib/security/cacerts""; do if [ -e ""$f"" ]; then cacertsFile=""$f""; break; fi; done'; \
 		echo 'if [ -z ""$cacertsFile"" ] || ! [ -f ""$cacertsFile"" ]; then echo >&2 ""error: failed to find cacerts file in $JAVA_HOME""; exit 1; fi'; \
 		echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth ""$cacertsFile""'; \
 	} > /etc/ca-certificates/update.d/docker-openjdk; \
 	chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
 	/etc/ca-certificates/update.d/docker-openjdk; \
 	\
 # https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472
 	find ""$JAVA_HOME/lib"" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
 	ldconfig; \
 	\
 # basic smoke test
 	javac -version; \
 	java -version
"
65,-,# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/8/jdk/slim/Dockerfile b/8/jdk/slim/Dockerfile
index 0917def..610d21b 100644
--- a/8/jdk/slim/Dockerfile
+++ b/8/jdk/slim/Dockerfile
@@ -1,95 +1,100 @@
 FROM debian:buster-slim
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 # utilities for keeping Debian and OpenJDK CA certificates in sync
 		ca-certificates p11-kit \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u222
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u222-b10/OpenJDK8U-jdk_
 ENV JAVA_URL_VERSION 8u222b10
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		dirmngr \
 		gnupg \
 		wget \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
-	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
-# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# also verify that key was signed by Andrew Haley (the OpenJDK 8 and 11 Updates OpenJDK project lead)
+# (https://github.com/docker-library/openjdk/pull/322#discussion_r286839190)
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
-	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \
+		| tee /dev/stderr \
+		| grep '0xA5CD6035332FA671' \
+		| grep 'Andrew Haley'; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
 	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract \
 		--file openjdk.tgz \
 		--directory ""$JAVA_HOME"" \
 		--strip-components 1 \
 		--no-same-owner \
 	; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # update ""cacerts"" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)
 # see https://github.com/docker-library/openjdk/issues/327
 #     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075
 #     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in
 #     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29
 	{ \
 		echo '#!/usr/bin/env bash'; \
 		echo 'set -Eeuo pipefail'; \
 		echo 'if ! [ -d ""$JAVA_HOME"" ]; then echo >&2 ""error: missing JAVA_HOME environment variable""; exit 1; fi'; \
 # 8-jdk uses ""$JAVA_HOME/jre/lib/security/cacerts"" and 8-jre and 11+ uses ""$JAVA_HOME/lib/security/cacerts"" directly (no ""jre"" directory)
 		echo 'cacertsFile=; for f in ""$JAVA_HOME/lib/security/cacerts"" ""$JAVA_HOME/jre/lib/security/cacerts""; do if [ -e ""$f"" ]; then cacertsFile=""$f""; break; fi; done'; \
 		echo 'if [ -z ""$cacertsFile"" ] || ! [ -f ""$cacertsFile"" ]; then echo >&2 ""error: failed to find cacerts file in $JAVA_HOME""; exit 1; fi'; \
 		echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth ""$cacertsFile""'; \
 	} > /etc/ca-certificates/update.d/docker-openjdk; \
 	chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
 	/etc/ca-certificates/update.d/docker-openjdk; \
 	\
 # https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472
 	find ""$JAVA_HOME/lib"" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
 	ldconfig; \
 	\
 # basic smoke test
 	javac -version; \
 	java -version
"
66,-,# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/11/jdk/Dockerfile b/11/jdk/Dockerfile
index 6eb3b0d..83f1549 100644
--- a/11/jdk/Dockerfile
+++ b/11/jdk/Dockerfile
@@ -1,94 +1,99 @@
 FROM buildpack-deps:stretch-scm
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # utilities for keeping Debian and OpenJDK CA certificates in sync
 		ca-certificates p11-kit \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-11
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.4
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.4%2B11/OpenJDK11U-jdk_
 ENV JAVA_URL_VERSION 11.0.4_11
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
-	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
-# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# also verify that key was signed by Andrew Haley (the OpenJDK 8 and 11 Updates OpenJDK project lead)
+# (https://github.com/docker-library/openjdk/pull/322#discussion_r286839190)
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
-	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \
+		| tee /dev/stderr \
+		| grep '0xA5CD6035332FA671' \
+		| grep 'Andrew Haley'; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
 	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract \
 		--file openjdk.tgz \
 		--directory ""$JAVA_HOME"" \
 		--strip-components 1 \
 		--no-same-owner \
 	; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # update ""cacerts"" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)
 # see https://github.com/docker-library/openjdk/issues/327
 #     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075
 #     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in
 #     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29
 	{ \
 		echo '#!/usr/bin/env bash'; \
 		echo 'set -Eeuo pipefail'; \
 		echo 'if ! [ -d ""$JAVA_HOME"" ]; then echo >&2 ""error: missing JAVA_HOME environment variable""; exit 1; fi'; \
 # 8-jdk uses ""$JAVA_HOME/jre/lib/security/cacerts"" and 8-jre and 11+ uses ""$JAVA_HOME/lib/security/cacerts"" directly (no ""jre"" directory)
 		echo 'cacertsFile=; for f in ""$JAVA_HOME/lib/security/cacerts"" ""$JAVA_HOME/jre/lib/security/cacerts""; do if [ -e ""$f"" ]; then cacertsFile=""$f""; break; fi; done'; \
 		echo 'if [ -z ""$cacertsFile"" ] || ! [ -f ""$cacertsFile"" ]; then echo >&2 ""error: failed to find cacerts file in $JAVA_HOME""; exit 1; fi'; \
 		echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth ""$cacertsFile""'; \
 	} > /etc/ca-certificates/update.d/docker-openjdk; \
 	chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
 	/etc/ca-certificates/update.d/docker-openjdk; \
 	\
 # https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472
 	find ""$JAVA_HOME/lib"" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
 	ldconfig; \
 	\
 # basic smoke test
 	javac --version; \
 	java --version
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
67,-,# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/8/jre/Dockerfile b/8/jre/Dockerfile
index 316d4a1..ad35fb7 100644
--- a/8/jre/Dockerfile
+++ b/8/jre/Dockerfile
@@ -1,90 +1,95 @@
 FROM buildpack-deps:stretch-curl
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # utilities for keeping Debian and OpenJDK CA certificates in sync
 		ca-certificates p11-kit \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u222
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u222-b10/OpenJDK8U-jre_
 ENV JAVA_URL_VERSION 8u222b10
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
-	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
-# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# also verify that key was signed by Andrew Haley (the OpenJDK 8 and 11 Updates OpenJDK project lead)
+# (https://github.com/docker-library/openjdk/pull/322#discussion_r286839190)
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
-	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \
+		| tee /dev/stderr \
+		| grep '0xA5CD6035332FA671' \
+		| grep 'Andrew Haley'; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
 	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract \
 		--file openjdk.tgz \
 		--directory ""$JAVA_HOME"" \
 		--strip-components 1 \
 		--no-same-owner \
 	; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # update ""cacerts"" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)
 # see https://github.com/docker-library/openjdk/issues/327
 #     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075
 #     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in
 #     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29
 	{ \
 		echo '#!/usr/bin/env bash'; \
 		echo 'set -Eeuo pipefail'; \
 		echo 'if ! [ -d ""$JAVA_HOME"" ]; then echo >&2 ""error: missing JAVA_HOME environment variable""; exit 1; fi'; \
 # 8-jdk uses ""$JAVA_HOME/jre/lib/security/cacerts"" and 8-jre and 11+ uses ""$JAVA_HOME/lib/security/cacerts"" directly (no ""jre"" directory)
 		echo 'cacertsFile=; for f in ""$JAVA_HOME/lib/security/cacerts"" ""$JAVA_HOME/jre/lib/security/cacerts""; do if [ -e ""$f"" ]; then cacertsFile=""$f""; break; fi; done'; \
 		echo 'if [ -z ""$cacertsFile"" ] || ! [ -f ""$cacertsFile"" ]; then echo >&2 ""error: failed to find cacerts file in $JAVA_HOME""; exit 1; fi'; \
 		echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth ""$cacertsFile""'; \
 	} > /etc/ca-certificates/update.d/docker-openjdk; \
 	chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
 	/etc/ca-certificates/update.d/docker-openjdk; \
 	\
 # https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472
 	find ""$JAVA_HOME/lib"" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
 	ldconfig; \
 	\
 # basic smoke test
 	java -version
"
68,-,# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/11/jdk/slim/Dockerfile b/11/jdk/slim/Dockerfile
index 4e75b3a..a467bb8 100644
--- a/11/jdk/slim/Dockerfile
+++ b/11/jdk/slim/Dockerfile
@@ -1,98 +1,103 @@
 FROM debian:buster-slim
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 # utilities for keeping Debian and OpenJDK CA certificates in sync
 		ca-certificates p11-kit \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-11
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.4
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.4%2B11/OpenJDK11U-jdk_
 ENV JAVA_URL_VERSION 11.0.4_11
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		dirmngr \
 		gnupg \
 		wget \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
-	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
-# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# also verify that key was signed by Andrew Haley (the OpenJDK 8 and 11 Updates OpenJDK project lead)
+# (https://github.com/docker-library/openjdk/pull/322#discussion_r286839190)
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
-	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \
+		| tee /dev/stderr \
+		| grep '0xA5CD6035332FA671' \
+		| grep 'Andrew Haley'; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
 	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract \
 		--file openjdk.tgz \
 		--directory ""$JAVA_HOME"" \
 		--strip-components 1 \
 		--no-same-owner \
 	; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # update ""cacerts"" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)
 # see https://github.com/docker-library/openjdk/issues/327
 #     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075
 #     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in
 #     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29
 	{ \
 		echo '#!/usr/bin/env bash'; \
 		echo 'set -Eeuo pipefail'; \
 		echo 'if ! [ -d ""$JAVA_HOME"" ]; then echo >&2 ""error: missing JAVA_HOME environment variable""; exit 1; fi'; \
 # 8-jdk uses ""$JAVA_HOME/jre/lib/security/cacerts"" and 8-jre and 11+ uses ""$JAVA_HOME/lib/security/cacerts"" directly (no ""jre"" directory)
 		echo 'cacertsFile=; for f in ""$JAVA_HOME/lib/security/cacerts"" ""$JAVA_HOME/jre/lib/security/cacerts""; do if [ -e ""$f"" ]; then cacertsFile=""$f""; break; fi; done'; \
 		echo 'if [ -z ""$cacertsFile"" ] || ! [ -f ""$cacertsFile"" ]; then echo >&2 ""error: failed to find cacerts file in $JAVA_HOME""; exit 1; fi'; \
 		echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth ""$cacertsFile""'; \
 	} > /etc/ca-certificates/update.d/docker-openjdk; \
 	chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
 	/etc/ca-certificates/update.d/docker-openjdk; \
 	\
 # https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472
 	find ""$JAVA_HOME/lib"" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
 	ldconfig; \
 	\
 # basic smoke test
 	javac --version; \
 	java --version
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
69,-,# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/11/jre/Dockerfile b/11/jre/Dockerfile
index 0e53832..ad96985 100644
--- a/11/jre/Dockerfile
+++ b/11/jre/Dockerfile
@@ -1,93 +1,98 @@
 FROM buildpack-deps:stretch-curl
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # utilities for keeping Debian and OpenJDK CA certificates in sync
 		ca-certificates p11-kit \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-11
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.4
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.4%2B11/OpenJDK11U-jre_
 ENV JAVA_URL_VERSION 11.0.4_11
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
-	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
-# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# also verify that key was signed by Andrew Haley (the OpenJDK 8 and 11 Updates OpenJDK project lead)
+# (https://github.com/docker-library/openjdk/pull/322#discussion_r286839190)
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
-	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \
+		| tee /dev/stderr \
+		| grep '0xA5CD6035332FA671' \
+		| grep 'Andrew Haley'; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
 	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract \
 		--file openjdk.tgz \
 		--directory ""$JAVA_HOME"" \
 		--strip-components 1 \
 		--no-same-owner \
 	; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # update ""cacerts"" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)
 # see https://github.com/docker-library/openjdk/issues/327
 #     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075
 #     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in
 #     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29
 	{ \
 		echo '#!/usr/bin/env bash'; \
 		echo 'set -Eeuo pipefail'; \
 		echo 'if ! [ -d ""$JAVA_HOME"" ]; then echo >&2 ""error: missing JAVA_HOME environment variable""; exit 1; fi'; \
 # 8-jdk uses ""$JAVA_HOME/jre/lib/security/cacerts"" and 8-jre and 11+ uses ""$JAVA_HOME/lib/security/cacerts"" directly (no ""jre"" directory)
 		echo 'cacertsFile=; for f in ""$JAVA_HOME/lib/security/cacerts"" ""$JAVA_HOME/jre/lib/security/cacerts""; do if [ -e ""$f"" ]; then cacertsFile=""$f""; break; fi; done'; \
 		echo 'if [ -z ""$cacertsFile"" ] || ! [ -f ""$cacertsFile"" ]; then echo >&2 ""error: failed to find cacerts file in $JAVA_HOME""; exit 1; fi'; \
 		echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth ""$cacertsFile""'; \
 	} > /etc/ca-certificates/update.d/docker-openjdk; \
 	chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
 	/etc/ca-certificates/update.d/docker-openjdk; \
 	\
 # https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472
 	find ""$JAVA_HOME/lib"" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
 	ldconfig; \
 	\
 # basic smoke test
 	java --version
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
70,-,# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/8/jre/slim/Dockerfile b/8/jre/slim/Dockerfile
index b68fd9a..2b3a19a 100644
--- a/8/jre/slim/Dockerfile
+++ b/8/jre/slim/Dockerfile
@@ -1,94 +1,99 @@
 FROM debian:buster-slim
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 # utilities for keeping Debian and OpenJDK CA certificates in sync
 		ca-certificates p11-kit \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u222
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u222-b10/OpenJDK8U-jre_
 ENV JAVA_URL_VERSION 8u222b10
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		dirmngr \
 		gnupg \
 		wget \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
-	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
-# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# also verify that key was signed by Andrew Haley (the OpenJDK 8 and 11 Updates OpenJDK project lead)
+# (https://github.com/docker-library/openjdk/pull/322#discussion_r286839190)
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
-	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \
+		| tee /dev/stderr \
+		| grep '0xA5CD6035332FA671' \
+		| grep 'Andrew Haley'; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
 	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract \
 		--file openjdk.tgz \
 		--directory ""$JAVA_HOME"" \
 		--strip-components 1 \
 		--no-same-owner \
 	; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # update ""cacerts"" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)
 # see https://github.com/docker-library/openjdk/issues/327
 #     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075
 #     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in
 #     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29
 	{ \
 		echo '#!/usr/bin/env bash'; \
 		echo 'set -Eeuo pipefail'; \
 		echo 'if ! [ -d ""$JAVA_HOME"" ]; then echo >&2 ""error: missing JAVA_HOME environment variable""; exit 1; fi'; \
 # 8-jdk uses ""$JAVA_HOME/jre/lib/security/cacerts"" and 8-jre and 11+ uses ""$JAVA_HOME/lib/security/cacerts"" directly (no ""jre"" directory)
 		echo 'cacertsFile=; for f in ""$JAVA_HOME/lib/security/cacerts"" ""$JAVA_HOME/jre/lib/security/cacerts""; do if [ -e ""$f"" ]; then cacertsFile=""$f""; break; fi; done'; \
 		echo 'if [ -z ""$cacertsFile"" ] || ! [ -f ""$cacertsFile"" ]; then echo >&2 ""error: failed to find cacerts file in $JAVA_HOME""; exit 1; fi'; \
 		echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth ""$cacertsFile""'; \
 	} > /etc/ca-certificates/update.d/docker-openjdk; \
 	chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
 	/etc/ca-certificates/update.d/docker-openjdk; \
 	\
 # https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472
 	find ""$JAVA_HOME/lib"" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
 	ldconfig; \
 	\
 # basic smoke test
 	java -version
"
71,-,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf",
72,-,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)",
73,-,"# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)",
74,-,"# set up nsswitch.conf for Go's ""netgo"" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf",
75,-,# TODO aufs-tools,
76,-,# https://github.com/docker/docker/tree/master/hack/dind,
77,-,# TODO ENV DOCKER_SHA256,"diff --git a/17.06-rc/Dockerfile b/17.06-rc/Dockerfile
index bb18886..1539b96 100644
--- a/17.06-rc/Dockerfile
+++ b/17.06-rc/Dockerfile
@@ -1,33 +1,52 @@
 FROM alpine:3.6
 
 RUN apk add --no-cache \
 		ca-certificates
 
 ENV DOCKER_CHANNEL test
-ENV DOCKER_VERSION 17.06.0-ce-rc1
+ENV DOCKER_VERSION 17.06.0-ce-rc2
 # TODO ENV DOCKER_SHA256
+# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
+# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)
 
 RUN set -ex; \
 # why we use ""curl"" instead of ""wget"":
 # + wget -O docker.tgz https://download.docker.com/linux/static/stable/x86_64/docker-17.03.1-ce.tgz
 # Connecting to download.docker.com (54.230.87.253:443)
 # wget: error getting response: Connection reset by peer
 	apk add --no-cache --virtual .fetch-deps \
 		curl \
 		tar \
 	; \
-	curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz""; \
+	\
+# this ""case"" statement is generated via ""update.sh""
+	apkArch=""$(apk --print-arch)""; \
+	case ""$apkArch"" in \
+		x86_64) dockerArch='x86_64' ;; \
+		s390x) dockerArch='s390x' ;; \
+		*) echo >&2 ""error: unsupported architecture ($apkArch)""; exit 1 ;;\
+	esac; \
+	\
+	if ! curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}-${dockerArch}.tgz""; then \
+		if ! curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz""; then \
+			echo >&2 ""error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'""; \
+			exit 1; \
+		fi; \
+	fi; \
+	\
 	tar --extract \
 		--file docker.tgz \
 		--strip-components 1 \
 		--directory /usr/local/bin/ \
 	; \
 	rm docker.tgz; \
+	\
 	apk del .fetch-deps; \
+	\
 	dockerd -v; \
 	docker -v
 
 COPY docker-entrypoint.sh /usr/local/bin/
 
 ENTRYPOINT [""docker-entrypoint.sh""]
 CMD [""sh""]
"
78,-,# TODO aufs-tools,
79,-,# https://github.com/docker/docker/tree/master/hack/dind,
80,-,# TODO ENV DOCKER_SHA256,"diff --git a/17.05/Dockerfile b/17.05/Dockerfile
index 78a3699..35a58fc 100644
--- a/17.05/Dockerfile
+++ b/17.05/Dockerfile
@@ -1,33 +1,51 @@
 FROM alpine:3.5
 
 RUN apk add --no-cache \
 		ca-certificates
 
 ENV DOCKER_CHANNEL edge
 ENV DOCKER_VERSION 17.05.0-ce
 # TODO ENV DOCKER_SHA256
+# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
+# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)
 
 RUN set -ex; \
 # why we use ""curl"" instead of ""wget"":
 # + wget -O docker.tgz https://download.docker.com/linux/static/stable/x86_64/docker-17.03.1-ce.tgz
 # Connecting to download.docker.com (54.230.87.253:443)
 # wget: error getting response: Connection reset by peer
 	apk add --no-cache --virtual .fetch-deps \
 		curl \
 		tar \
 	; \
-	curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz""; \
+	\
+# this ""case"" statement is generated via ""update.sh""
+	apkArch=""$(apk --print-arch)""; \
+	case ""$apkArch"" in \
+		x86_64) dockerArch='x86_64' ;; \
+		*) echo >&2 ""error: unsupported architecture ($apkArch)""; exit 1 ;;\
+	esac; \
+	\
+	if ! curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}-${dockerArch}.tgz""; then \
+		if ! curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz""; then \
+			echo >&2 ""error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'""; \
+			exit 1; \
+		fi; \
+	fi; \
+	\
 	tar --extract \
 		--file docker.tgz \
 		--strip-components 1 \
 		--directory /usr/local/bin/ \
 	; \
 	rm docker.tgz; \
+	\
 	apk del .fetch-deps; \
+	\
 	dockerd -v; \
 	docker -v
 
 COPY docker-entrypoint.sh /usr/local/bin/
 
 ENTRYPOINT [""docker-entrypoint.sh""]
 CMD [""sh""]
"
81,-,# TODO ENV DOCKER_SHA256,"diff --git a/17.03/Dockerfile b/17.03/Dockerfile
index 710ed71..e1c29f6 100644
--- a/17.03/Dockerfile
+++ b/17.03/Dockerfile
@@ -1,33 +1,51 @@
 FROM alpine:3.5
 
 RUN apk add --no-cache \
 		ca-certificates
 
 ENV DOCKER_CHANNEL stable
 ENV DOCKER_VERSION 17.03.1-ce
 # TODO ENV DOCKER_SHA256
+# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
+# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)
 
 RUN set -ex; \
 # why we use ""curl"" instead of ""wget"":
 # + wget -O docker.tgz https://download.docker.com/linux/static/stable/x86_64/docker-17.03.1-ce.tgz
 # Connecting to download.docker.com (54.230.87.253:443)
 # wget: error getting response: Connection reset by peer
 	apk add --no-cache --virtual .fetch-deps \
 		curl \
 		tar \
 	; \
-	curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz""; \
+	\
+# this ""case"" statement is generated via ""update.sh""
+	apkArch=""$(apk --print-arch)""; \
+	case ""$apkArch"" in \
+		x86_64) dockerArch='x86_64' ;; \
+		*) echo >&2 ""error: unsupported architecture ($apkArch)""; exit 1 ;;\
+	esac; \
+	\
+	if ! curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}-${dockerArch}.tgz""; then \
+		if ! curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz""; then \
+			echo >&2 ""error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'""; \
+			exit 1; \
+		fi; \
+	fi; \
+	\
 	tar --extract \
 		--file docker.tgz \
 		--strip-components 1 \
 		--directory /usr/local/bin/ \
 	; \
 	rm docker.tgz; \
+	\
 	apk del .fetch-deps; \
+	\
 	dockerd -v; \
 	docker -v
 
 COPY docker-entrypoint.sh /usr/local/bin/
 
 ENTRYPOINT [""docker-entrypoint.sh""]
 CMD [""sh""]
"
82,-,# TODO ENV DOCKER_SHA256,"diff --git a/17.03-rc/Dockerfile b/17.03-rc/Dockerfile
index 0ca1d78..e4f528d 100644
--- a/17.03-rc/Dockerfile
+++ b/17.03-rc/Dockerfile
@@ -1,33 +1,51 @@
 FROM alpine:3.5
 
 RUN apk add --no-cache \
 		ca-certificates
 
 ENV DOCKER_CHANNEL test
 ENV DOCKER_VERSION 17.03.2-ce-rc1
 # TODO ENV DOCKER_SHA256
+# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
+# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)
 
 RUN set -ex; \
 # why we use ""curl"" instead of ""wget"":
 # + wget -O docker.tgz https://download.docker.com/linux/static/stable/x86_64/docker-17.03.1-ce.tgz
 # Connecting to download.docker.com (54.230.87.253:443)
 # wget: error getting response: Connection reset by peer
 	apk add --no-cache --virtual .fetch-deps \
 		curl \
 		tar \
 	; \
-	curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz""; \
+	\
+# this ""case"" statement is generated via ""update.sh""
+	apkArch=""$(apk --print-arch)""; \
+	case ""$apkArch"" in \
+		x86_64) dockerArch='x86_64' ;; \
+		*) echo >&2 ""error: unsupported architecture ($apkArch)""; exit 1 ;;\
+	esac; \
+	\
+	if ! curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}-${dockerArch}.tgz""; then \
+		if ! curl -fL -o docker.tgz ""https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz""; then \
+			echo >&2 ""error: failed to download 'docker-${DOCKER_VERSION}' from '${DOCKER_CHANNEL}' for '${dockerArch}'""; \
+			exit 1; \
+		fi; \
+	fi; \
+	\
 	tar --extract \
 		--file docker.tgz \
 		--strip-components 1 \
 		--directory /usr/local/bin/ \
 	; \
 	rm docker.tgz; \
+	\
 	apk del .fetch-deps; \
+	\
 	dockerd -v; \
 	docker -v
 
 COPY docker-entrypoint.sh /usr/local/bin/
 
 ENTRYPOINT [""docker-entrypoint.sh""]
 CMD [""sh""]
"
