,type,comment,diff
0,+,"# hack in ""enable_path_check"" disabling to suppress:
#   warning: insecure world writable dir","diff --git a/2.3/stretch/Dockerfile b/2.3/stretch/Dockerfile
index 034e9a7..0daa9f3 100644
--- a/2.3/stretch/Dockerfile
+++ b/2.3/stretch/Dockerfile
@@ -1,75 +1,76 @@
 FROM buildpack-deps:stretch
 
 # skip installing gem documentation
 RUN mkdir -p /usr/local/etc \
 	&& { \
 		echo 'install: --no-document'; \
 		echo 'update: --no-document'; \
 	} >> /usr/local/etc/gemrc
 
 ENV RUBY_MAJOR 2.3
 ENV RUBY_VERSION 2.3.5
 ENV RUBY_DOWNLOAD_SHA256 7d3a7dabb190c2da06c963063342ca9a214bcd26f2158e904f0ec059b065ffda
 ENV RUBYGEMS_VERSION 2.6.14
 ENV BUNDLER_VERSION 1.15.4
 
 # some of ruby's build scripts are written in ruby
 #   we purge system ruby later to make sure our final image uses what we just built
 RUN set -ex \
 	\
 	&& buildDeps=' \
 		bison \
 		dpkg-dev \
 		libgdbm-dev \
 		ruby \
+		libssl1.0-dev \
 	' \
 	&& apt-get update \
 	&& apt-get install -y --no-install-recommends $buildDeps \
 	&& rm -rf /var/lib/apt/lists/* \
 	\
 	&& wget -O ruby.tar.xz ""https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"" \
 	&& echo ""$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz"" | sha256sum -c - \
 	\
 	&& mkdir -p /usr/src/ruby \
 	&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \
 	&& rm ruby.tar.xz \
 	\
 	&& cd /usr/src/ruby \
 	\
 # hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
 #   warning: Insecure world writable dir
 	&& { \
 		echo '#define ENABLE_PATH_CHECK 0'; \
 		echo; \
 		cat file.c; \
 	} > file.c.new \
 	&& mv file.c.new file.c \
 	\
 	&& autoconf \
 	&& gnuArch=""$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"" \
 	&& ./configure \
 		--build=""$gnuArch"" \
 		--disable-install-doc \
 		--enable-shared \
 	&& make -j ""$(nproc)"" \
 	&& make install \
 	\
 	&& apt-get purge -y --auto-remove $buildDeps \
 	&& cd / \
 	&& rm -r /usr/src/ruby \
 	\
 	&& gem update --system ""$RUBYGEMS_VERSION"" \
 	&& gem install bundler --version ""$BUNDLER_VERSION"" --force
 
 # install things globally, for great justice
 # and don't create "".bundle"" in all our apps
 ENV GEM_HOME /usr/local/bundle
 ENV BUNDLE_PATH=""$GEM_HOME"" \
 	BUNDLE_BIN=""$GEM_HOME/bin"" \
 	BUNDLE_SILENCE_ROOT_WARNING=1 \
 	BUNDLE_APP_CONFIG=""$GEM_HOME""
 ENV PATH $BUNDLE_BIN:$PATH
 RUN mkdir -p ""$GEM_HOME"" ""$BUNDLE_BIN"" \
 	&& chmod 777 ""$GEM_HOME"" ""$BUNDLE_BIN""
 
 CMD [ ""irb"" ]
"
1,+,"# hack in ""enable_path_check"" disabling to suppress:
#   warning: insecure world writable dir","diff --git a/2.3/stretch/slim/Dockerfile b/2.3/stretch/slim/Dockerfile
index 821452f..2f22cf2 100644
--- a/2.3/stretch/slim/Dockerfile
+++ b/2.3/stretch/slim/Dockerfile
@@ -1,101 +1,101 @@
 FROM debian:stretch
 
 RUN apt-get update \
 	&& apt-get install -y --no-install-recommends \
 		bzip2 \
 		ca-certificates \
 		libffi-dev \
 		libgdbm3 \
-		libssl-dev \
+		libssl1.0-dev \
 		libyaml-dev \
 		procps \
 		zlib1g-dev \
 	&& rm -rf /var/lib/apt/lists/*
 
 # skip installing gem documentation
 RUN mkdir -p /usr/local/etc \
 	&& { \
 		echo 'install: --no-document'; \
 		echo 'update: --no-document'; \
 	} >> /usr/local/etc/gemrc
 
 ENV RUBY_MAJOR 2.3
 ENV RUBY_VERSION 2.3.5
 ENV RUBY_DOWNLOAD_SHA256 7d3a7dabb190c2da06c963063342ca9a214bcd26f2158e904f0ec059b065ffda
 ENV RUBYGEMS_VERSION 2.6.14
 ENV BUNDLER_VERSION 1.15.4
 
 # some of ruby's build scripts are written in ruby
 #   we purge system ruby later to make sure our final image uses what we just built
 RUN set -ex \
 	\
 	&& buildDeps=' \
 		autoconf \
 		bison \
 		dpkg-dev \
 		gcc \
 		libbz2-dev \
 		libgdbm-dev \
 		libglib2.0-dev \
 		libncurses-dev \
 		libreadline-dev \
 		libxml2-dev \
 		libxslt-dev \
 		make \
 		ruby \
 		wget \
 		xz-utils \
 	' \
 	&& apt-get update \
 	&& apt-get install -y --no-install-recommends $buildDeps \
 	&& rm -rf /var/lib/apt/lists/* \
 	\
 	&& wget -O ruby.tar.xz ""https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz"" \
 	&& echo ""$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz"" | sha256sum -c - \
 	\
 	&& mkdir -p /usr/src/ruby \
 	&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \
 	&& rm ruby.tar.xz \
 	\
 	&& cd /usr/src/ruby \
 	\
 # hack in ""ENABLE_PATH_CHECK"" disabling to suppress:
 #   warning: Insecure world writable dir
 	&& { \
 		echo '#define ENABLE_PATH_CHECK 0'; \
 		echo; \
 		cat file.c; \
 	} > file.c.new \
 	&& mv file.c.new file.c \
 	\
 	&& autoconf \
 	&& gnuArch=""$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"" \
 	&& ./configure \
 		--build=""$gnuArch"" \
 		--disable-install-doc \
 		--enable-shared \
 	&& make -j ""$(nproc)"" \
 	&& make install \
 	\
 	&& dpkg-query --show --showformat '${package}\n' \
 		| grep -P '^libreadline\d+$' \
 		| xargs apt-mark manual \
 	&& apt-get purge -y --auto-remove $buildDeps \
 	&& cd / \
 	&& rm -r /usr/src/ruby \
 	\
 	&& gem update --system ""$RUBYGEMS_VERSION"" \
 	&& gem install bundler --version ""$BUNDLER_VERSION"" --force
 
 # install things globally, for great justice
 # and don't create "".bundle"" in all our apps
 ENV GEM_HOME /usr/local/bundle
 ENV BUNDLE_PATH=""$GEM_HOME"" \
 	BUNDLE_BIN=""$GEM_HOME/bin"" \
 	BUNDLE_SILENCE_ROOT_WARNING=1 \
 	BUNDLE_APP_CONFIG=""$GEM_HOME""
 ENV PATH $BUNDLE_BIN:$PATH
 RUN mkdir -p ""$GEM_HOME"" ""$BUNDLE_BIN"" \
 	&& chmod 777 ""$GEM_HOME"" ""$BUNDLE_BIN""
 
 CMD [ ""irb"" ]
"
2,+,# todo: don't do this - look at merging the yml file in build.sh,"diff --git a/docs/Dockerfile b/docs/Dockerfile
index 4adf6a3e33..b11347fb9d 100644
--- a/docs/Dockerfile
+++ b/docs/Dockerfile
@@ -1,45 +1,55 @@
 #
 # See the top level Makefile in https://github.com/docker/docker for usage.
 #
 FROM docs/base:latest
 MAINTAINER Sven Dowideit <SvenDowideit@docker.com> (@SvenDowideit)
 
 # TODO: need the full repo source to get the git version info
 COPY . /src
 
 # Reset the /docs dir so we can replace the theme meta with the new repo's git info
 RUN git reset --hard
 
 # Then copy the desired docs into the /docs/sources/ dir
 COPY ./sources/ /docs/sources
 
 COPY ./VERSION VERSION
 
 # adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
 #COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md
 
 # TODO: don't do this - look at merging the yml file in build.sh
 COPY ./mkdocs.yml mkdocs.yml
 COPY ./s3_website.json s3_website.json
 
 # Docker Swarm
 #ADD https://raw.githubusercontent.com/docker/swarm/master/docs/mkdocs.yml /docs/mkdocs-swarm.yml
 ADD https://raw.githubusercontent.com/docker/swarm/master/docs/index.md /docs/sources/swarm/index.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/swarm/index.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/discovery/README.md /docs/sources/swarm/discovery.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/swarm/discovery.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/api/README.md /docs/sources/swarm/API.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/swarm/API.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/filter/README.md /docs/sources/swarm/scheduler/filter.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/swarm/scheduler/filter.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/strategy/README.md /docs/sources/swarm/scheduler/strategy.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/swarm/scheduler/strategy.md
 
 # Docker Machine
 #ADD https://raw.githubusercontent.com/docker/machine/master/docs/mkdocs.yml /docs/mkdocs-machine.yml
 ADD https://raw.githubusercontent.com/docker/machine/master/docs/index.md /docs/sources/machine/index.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/machine/index.md
 
 # Docker Compose
 #ADD https://raw.githubusercontent.com/docker/fig/master/docs/mkdocs.yml /docs/mkdocs-compose.yml
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/index.md /docs/sources/compose/index.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/compose/index.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/install.md /docs/sources/compose/install.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/compose/install.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/cli.md /docs/sources/compose/cli.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/compose/cli.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/yml.md /docs/sources/compose/yml.md
+RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/compose/yml.md
 
 # Then build everything together, ready for mkdocs
 RUN /docs/build.sh
"
3,+,"# version:        1.5
# docker-version  0.6.4
# author:         daniel mizyrycki <daniel@dotcloud.com>
# description:    build docker nightly release using docker in docker.
# references:     this code reuses the excellent implementation of docker in docker
#                 made by jerome petazzoni.  https://github.com/jpetazzo/dind
# comments:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""aws_access_key"": ""test_docker_aws_s3_bucket_id"",
#         ""aws_secret_key"": ""test_docker_aws_s3_bucket_key"",
#         ""gpg_passphrase"": ""test_docker_gpg_passphrase_signature"" }
# to_build:       docker build -t dockerbuilder .
# to_release:     docker run -i -t -privileged -e aws_s3_bucket=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh","diff --git a/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile b/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
index 953d7c11cc..6762cb4686 100644
--- a/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
+++ b/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
@@ -1,30 +1,35 @@
 # VERSION:        1.5
 # DOCKER-VERSION  0.6.4
 # AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
 # DESCRIPTION:    Build docker nightly release using Docker in Docker.
 # REFERENCES:     This code reuses the excellent implementation of docker in docker
 #                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
 # COMMENTS:
 #   release_credentials.json is a base64 json encoded file containing:
 #       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
 #         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
 #         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
 # TO_BUILD:       docker build -t dockerbuilder .
 # TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh
 
 from docker
 maintainer Daniel Mizyrycki <daniel@dotcloud.com>
 
 # Add docker dependencies and downloading packages
 run echo 'deb http://archive.ubuntu.com/ubuntu precise main universe' > /etc/apt/sources.list
 run apt-get update; apt-get install -y -q wget python2.7
 
 # Add production docker binary
 run wget -q -O /usr/bin/docker http://get.docker.io/builds/Linux/x86_64/docker-latest; chmod +x /usr/bin/docker
 
+#### FIXME. Temporarily install docker and dind with proper apparmor handling
+run wget -q -O /usr/bin/docker http://test.docker.io/test/docker; chmod +x /usr/bin/docker
+run wget -q -O /go/src/github.com/dotcloud/docker/hack/dind http://raw.github.com/jpetazzo/docker/escape-apparmor-confinement/hack/dind
+run chmod +x /go/src/github.com/dotcloud/docker/hack/dind
+
 # Add proto docker builder
 add ./dockerbuild.sh /usr/bin/dockerbuild.sh
 run chmod +x /usr/bin/dockerbuild.sh
 
 # Add release credentials
 add ./release_credentials.json /root/release_credentials.json
"
4,+,"# version:        1.5
# docker-version  0.6.4
# author:         daniel mizyrycki <daniel@dotcloud.com>
# description:    build docker nightly release using docker in docker.
# references:     this code reuses the excellent implementation of docker in docker
#                 made by jerome petazzoni.  https://github.com/jpetazzo/dind
# comments:
#   release_credentials.json is a base64 json encoded file containing:
#       { ""aws_access_key"": ""test_docker_aws_s3_bucket_id"",
#         ""aws_secret_key"": ""test_docker_aws_s3_bucket_key"",
#         ""gpg_passphrase"": ""test_docker_gpg_passphrase_signature"" }
# to_build:       docker build -t dockerbuilder .
# to_release:     docker run -i -t -privileged -e aws_s3_bucket=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh","diff --git a/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile b/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
index 953d7c11cc..6762cb4686 100644
--- a/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
+++ b/components/engine/hack/infrastructure/docker-ci/nightlyrelease/Dockerfile
@@ -1,30 +1,35 @@
 # VERSION:        1.5
 # DOCKER-VERSION  0.6.4
 # AUTHOR:         Daniel Mizyrycki <daniel@dotcloud.com>
 # DESCRIPTION:    Build docker nightly release using Docker in Docker.
 # REFERENCES:     This code reuses the excellent implementation of docker in docker
 #                 made by Jerome Petazzoni.  https://github.com/jpetazzo/dind
 # COMMENTS:
 #   release_credentials.json is a base64 json encoded file containing:
 #       { ""AWS_ACCESS_KEY"": ""Test_docker_AWS_S3_bucket_id"",
 #         ""AWS_SECRET_KEY"": ""Test_docker_AWS_S3_bucket_key"",
 #         ""GPG_PASSPHRASE"": ""Test_docker_GPG_passphrase_signature"" }
 # TO_BUILD:       docker build -t dockerbuilder .
 # TO_RELEASE:     docker run -i -t -privileged -e AWS_S3_BUCKET=""test.docker.io"" dockerbuilder hack/dind dockerbuild.sh
 
 from docker
 maintainer Daniel Mizyrycki <daniel@dotcloud.com>
 
 # Add docker dependencies and downloading packages
 run echo 'deb http://archive.ubuntu.com/ubuntu precise main universe' > /etc/apt/sources.list
 run apt-get update; apt-get install -y -q wget python2.7
 
 # Add production docker binary
 run wget -q -O /usr/bin/docker http://get.docker.io/builds/Linux/x86_64/docker-latest; chmod +x /usr/bin/docker
 
+#### FIXME. Temporarily install docker and dind with proper apparmor handling
+run wget -q -O /usr/bin/docker http://test.docker.io/test/docker; chmod +x /usr/bin/docker
+run wget -q -O /go/src/github.com/dotcloud/docker/hack/dind http://raw.github.com/jpetazzo/docker/escape-apparmor-confinement/hack/dind
+run chmod +x /go/src/github.com/dotcloud/docker/hack/dind
+
 # Add proto docker builder
 add ./dockerbuild.sh /usr/bin/dockerbuild.sh
 run chmod +x /usr/bin/dockerbuild.sh
 
 # Add release credentials
 add ./release_credentials.json /root/release_credentials.json
"
5,+,# todo: need the full repo source to get the git version info,"diff --git a/components/engine/docs/Dockerfile b/components/engine/docs/Dockerfile
index 0b5b33b29f..4adf6a3e33 100644
--- a/components/engine/docs/Dockerfile
+++ b/components/engine/docs/Dockerfile
@@ -1,45 +1,45 @@
 #
 # See the top level Makefile in https://github.com/docker/docker for usage.
 #
 FROM docs/base:latest
 MAINTAINER Sven Dowideit <SvenDowideit@docker.com> (@SvenDowideit)
 
 # TODO: need the full repo source to get the git version info
 COPY . /src
 
 # Reset the /docs dir so we can replace the theme meta with the new repo's git info
 RUN git reset --hard
 
 # Then copy the desired docs into the /docs/sources/ dir
 COPY ./sources/ /docs/sources
 
 COPY ./VERSION VERSION
 
 # adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
 #COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md
 
 # TODO: don't do this - look at merging the yml file in build.sh
 COPY ./mkdocs.yml mkdocs.yml
 COPY ./s3_website.json s3_website.json
 
 # Docker Swarm
-ADD https://raw.githubusercontent.com/docker/swarm/master/docs/mkdocs.yml /docs/mkdocs-swarm.yml
+#ADD https://raw.githubusercontent.com/docker/swarm/master/docs/mkdocs.yml /docs/mkdocs-swarm.yml
 ADD https://raw.githubusercontent.com/docker/swarm/master/docs/index.md /docs/sources/swarm/index.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/discovery/README.md /docs/sources/swarm/discovery.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/api/README.md /docs/sources/swarm/API.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/filter/README.md /docs/sources/swarm/scheduler/filter.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/strategy/README.md /docs/sources/swarm/scheduler/strategy.md
 
 # Docker Machine
-ADD https://raw.githubusercontent.com/docker/machine/master/docs/mkdocs.yml /docs/mkdocs-machine.yml
+#ADD https://raw.githubusercontent.com/docker/machine/master/docs/mkdocs.yml /docs/mkdocs-machine.yml
 ADD https://raw.githubusercontent.com/docker/machine/master/docs/index.md /docs/sources/machine/index.md
 
 # Docker Compose
-ADD https://raw.githubusercontent.com/docker/fig/master/docs/mkdocs.yml /docs/mkdocs-compose.yml
+#ADD https://raw.githubusercontent.com/docker/fig/master/docs/mkdocs.yml /docs/mkdocs-compose.yml
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/index.md /docs/sources/compose/index.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/install.md /docs/sources/compose/install.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/cli.md /docs/sources/compose/cli.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/yml.md /docs/sources/compose/yml.md
 
 # Then build everything together, ready for mkdocs
 RUN /docs/build.sh
"
6,+,# todo: don't do this - look at merging the yml file in build.sh,"diff --git a/components/engine/docs/Dockerfile b/components/engine/docs/Dockerfile
index 0b5b33b29f..4adf6a3e33 100644
--- a/components/engine/docs/Dockerfile
+++ b/components/engine/docs/Dockerfile
@@ -1,45 +1,45 @@
 #
 # See the top level Makefile in https://github.com/docker/docker for usage.
 #
 FROM docs/base:latest
 MAINTAINER Sven Dowideit <SvenDowideit@docker.com> (@SvenDowideit)
 
 # TODO: need the full repo source to get the git version info
 COPY . /src
 
 # Reset the /docs dir so we can replace the theme meta with the new repo's git info
 RUN git reset --hard
 
 # Then copy the desired docs into the /docs/sources/ dir
 COPY ./sources/ /docs/sources
 
 COPY ./VERSION VERSION
 
 # adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
 #COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md
 
 # TODO: don't do this - look at merging the yml file in build.sh
 COPY ./mkdocs.yml mkdocs.yml
 COPY ./s3_website.json s3_website.json
 
 # Docker Swarm
-ADD https://raw.githubusercontent.com/docker/swarm/master/docs/mkdocs.yml /docs/mkdocs-swarm.yml
+#ADD https://raw.githubusercontent.com/docker/swarm/master/docs/mkdocs.yml /docs/mkdocs-swarm.yml
 ADD https://raw.githubusercontent.com/docker/swarm/master/docs/index.md /docs/sources/swarm/index.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/discovery/README.md /docs/sources/swarm/discovery.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/api/README.md /docs/sources/swarm/API.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/filter/README.md /docs/sources/swarm/scheduler/filter.md
 ADD https://raw.githubusercontent.com/docker/swarm/master/scheduler/strategy/README.md /docs/sources/swarm/scheduler/strategy.md
 
 # Docker Machine
-ADD https://raw.githubusercontent.com/docker/machine/master/docs/mkdocs.yml /docs/mkdocs-machine.yml
+#ADD https://raw.githubusercontent.com/docker/machine/master/docs/mkdocs.yml /docs/mkdocs-machine.yml
 ADD https://raw.githubusercontent.com/docker/machine/master/docs/index.md /docs/sources/machine/index.md
 
 # Docker Compose
-ADD https://raw.githubusercontent.com/docker/fig/master/docs/mkdocs.yml /docs/mkdocs-compose.yml
+#ADD https://raw.githubusercontent.com/docker/fig/master/docs/mkdocs.yml /docs/mkdocs-compose.yml
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/index.md /docs/sources/compose/index.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/install.md /docs/sources/compose/install.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/cli.md /docs/sources/compose/cli.md
 ADD https://raw.githubusercontent.com/docker/fig/master/docs/yml.md /docs/sources/compose/yml.md
 
 # Then build everything together, ready for mkdocs
 RUN /docs/build.sh
"
7,+,"    # extensions
    # todo: make submodules shallow clones?","diff --git a/Dockerfile b/Dockerfile
index 6b5ffb3..1051e1e 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,65 +1,67 @@
 FROM debian:sid
 MAINTAINER Gabriel Wicke <gwicke@wikimedia.org>
 
 ENV MEDIAWIKI_VERSION wmf/1.30.0-wmf.2
 
 # XXX: Consider switching to nginx.
 RUN set -x; \
     apt-get update \
     && apt-get install -y --no-install-recommends \
         ca-certificates \
         apache2 \
         libapache2-mod-php7.1 \
         php7.1-mysql \
         php7.1-cli \
         php7.1-gd \
         php7.1-curl \
         php7.1-mbstring \
         php7.1-xml \
         imagemagick \
         netcat \
         git \
     && rm -rf /var/lib/apt/lists/* \
     && rm -rf /var/cache/apt/archives/* \
     && a2enmod rewrite \
     && a2enmod proxy \
     && a2enmod proxy_http \
     # Remove the default Debian index page.
     && rm /var/www/html/index.html
 
 
 # MediaWiki setup
 RUN set -x; \
     mkdir -p /usr/src \
     && git clone \
         --depth 1 \
         -b $MEDIAWIKI_VERSION \
         https://gerrit.wikimedia.org/r/p/mediawiki/core.git \
         /usr/src/mediawiki \
     && cd /usr/src/mediawiki \
     && git submodule update --init skins \
     && git submodule update --init vendor \
     && cd extensions \
     # Extensions
     # TODO: make submodules shallow clones?
     && git submodule update --init --recursive VisualEditor \
     && git submodule update --init --recursive Math \
     && git submodule update --init --recursive EventBus \
     && git submodule update --init --recursive Scribunto \
     && git submodule update --init --recursive ParserFunctions \
     && git submodule update --init --recursive SyntaxHighlight_GeSHi \
     && git submodule update --init --recursive Cite \
     && git submodule update --init --recursive Echo \
-    && git submodule update --init --recursive Flow
+    && git submodule update --init --recursive Flow \
+    && git submodule update --init --recursive PageImages \
+    && git submodule update --init --recursive TextExtracts
 
 
 COPY php.ini /usr/local/etc/php/conf.d/mediawiki.ini
 
 COPY apache/mediawiki.conf /etc/apache2/
 RUN echo ""Include /etc/apache2/mediawiki.conf"" >> /etc/apache2/apache2.conf
 
 COPY docker-entrypoint.sh /entrypoint.sh
 
 EXPOSE 80 443
 ENTRYPOINT [""/entrypoint.sh""]
 CMD [""apachectl"", ""-e"", ""info"", ""-D"", ""FOREGROUND""]
"
8,+, # todo inbox-api or inbox-start,"diff --git a/nylas/sync-engine/Dockerfile b/nylas/sync-engine/Dockerfile
new file mode 100644
index 0000000..f1e6dff
--- /dev/null
+++ b/nylas/sync-engine/Dockerfile
@@ -0,0 +1,45 @@
+FROM buildpack-deps:jessie-curl
+
+RUN apt-get update && apt-get install -y --no-install-recommends \
+		file \
+		g++ \
+		gcc \
+		git \
+		libffi-dev \
+		liblua5.2-dev \
+		libmysqlclient-dev \
+		libpython-dev \
+		libsodium-dev \
+		libssl-dev \
+		libxslt1-dev \
+		pkg-config \
+		python-pip \
+	&& rm -rf /var/lib/apt/lists/*
+# tell pynacl to use system libsodium
+ENV SODIUM_INSTALL system
+
+WORKDIR /usr/src/sync-engine
+
+#ENV SYNC_VERSION v0.3.0 # 2014 :'(
+ENV SYNC_VERSION 9ed320220f292c0acb360d5ac0158e80ea8b6f03
+
+RUN curl -fSL ""https://github.com/nylas/sync-engine/archive/$SYNC_VERSION.tar.gz"" -o sync.tar.gz \
+	&& tar -xzf sync.tar.gz --strip-components=1 \
+	&& rm sync.tar.gz
+
+# https://github.com/eventable/vobject/issues/2
+RUN sed -i 's/^vobject==0.8.1c/vobject==0.8.2/' requirements.txt
+
+# ugh, NameError: name 'PROTOCOL_SSLv3' is not defined
+RUN sed -i 's/^gevent==1.0.1/gevent==1.1rc3/' requirements.txt
+
+RUN pip install -r requirements.txt
+
+RUN pip install .
+
+COPY config.json secrets.yml /etc/inboxapp/
+
+USER 1000:1000
+COPY entrypoint.sh /usr/local/bin/
+ENTRYPOINT [""entrypoint.sh""]
+CMD [""bash""] # TODO inbox-api or inbox-start
"
9,+,# todo signature? checksum?,"diff --git a/8/jre/windows/windowsservercore-1809/Dockerfile b/8/jre/windows/windowsservercore-1809/Dockerfile
index 8b50962..f693f21 100644
--- a/8/jre/windows/windowsservercore-1809/Dockerfile
+++ b/8/jre/windows/windowsservercore-1809/Dockerfile
@@ -1,48 +1,36 @@
 FROM mcr.microsoft.com/windows/servercore:1809
 
 # $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
 SHELL [""powershell"", ""-Command"", ""$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';""]
 
-# enable TLS 1.2 (Nano Server doesn't support using ""[Net.ServicePointManager]::SecurityProtocol"")
-# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801
-# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12
-RUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \
-	$tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2'; \
-	if (Test-Path $tls12RegBase) { throw ('""{0}"" already exists!' -f $tls12RegBase) }; \
-	New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \
-	New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
-
 ENV JAVA_HOME C:\\openjdk-8
 RUN $newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \
 	Write-Host ('Updating PATH: {0}' -f $newPath); \
 # Nano Server does not have ""[Environment]::SetEnvironmentVariable()""
 	setx /M PATH $newPath
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN $url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \
 	Write-Host ('Downloading {0} ...' -f $url); \
+	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
 	Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \
 # TODO signature? checksum?
 	\
 	Write-Host 'Expanding ...'; \
 	New-Item -ItemType Directory -Path C:\temp | Out-Null; \
 	Expand-Archive openjdk.zip -DestinationPath C:\temp; \
 	Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME; \
 	Remove-Item C:\temp; \
 	\
 	Write-Host 'Removing ...'; \
 	Remove-Item openjdk.zip -Force; \
 	\
 	Write-Host 'Verifying install ...'; \
 	Write-Host '  java -version'; java -version; \
 	\
 	Write-Host 'Complete.'
"
10,+,# todo signature? checksum?,"diff --git a/8/jdk/windows/windowsservercore-1809/Dockerfile b/8/jdk/windows/windowsservercore-1809/Dockerfile
index 862d988..165bdd1 100644
--- a/8/jdk/windows/windowsservercore-1809/Dockerfile
+++ b/8/jdk/windows/windowsservercore-1809/Dockerfile
@@ -1,49 +1,37 @@
 FROM mcr.microsoft.com/windows/servercore:1809
 
 # $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
 SHELL [""powershell"", ""-Command"", ""$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';""]
 
-# enable TLS 1.2 (Nano Server doesn't support using ""[Net.ServicePointManager]::SecurityProtocol"")
-# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801
-# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12
-RUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \
-	$tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2'; \
-	if (Test-Path $tls12RegBase) { throw ('""{0}"" already exists!' -f $tls12RegBase) }; \
-	New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \
-	New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
-
 ENV JAVA_HOME C:\\openjdk-8
 RUN $newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \
 	Write-Host ('Updating PATH: {0}' -f $newPath); \
 # Nano Server does not have ""[Environment]::SetEnvironmentVariable()""
 	setx /M PATH $newPath
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN $url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \
 	Write-Host ('Downloading {0} ...' -f $url); \
+	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
 	Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \
 # TODO signature? checksum?
 	\
 	Write-Host 'Expanding ...'; \
 	New-Item -ItemType Directory -Path C:\temp | Out-Null; \
 	Expand-Archive openjdk.zip -DestinationPath C:\temp; \
 	Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME; \
 	Remove-Item C:\temp; \
 	\
 	Write-Host 'Removing ...'; \
 	Remove-Item openjdk.zip -Force; \
 	\
 	Write-Host 'Verifying install ...'; \
 	Write-Host '  javac -version'; javac -version; \
 	Write-Host '  java -version'; java -version; \
 	\
 	Write-Host 'Complete.'
"
11,+,"# todo strip ""demo"" and ""man"" folders?","diff --git a/8/jdk/Dockerfile b/8/jdk/Dockerfile
index f499420..6780ebe 100644
--- a/8/jdk/Dockerfile
+++ b/8/jdk/Dockerfile
@@ -1,58 +1,59 @@
 FROM buildpack-deps:stretch-scm
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # basic smoke test
 	javac -version; \
 	java -version
"
12,+,# todo find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-april/000951.html is one of the only mentions of it i can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/8/jdk/Dockerfile b/8/jdk/Dockerfile
index f499420..6780ebe 100644
--- a/8/jdk/Dockerfile
+++ b/8/jdk/Dockerfile
@@ -1,58 +1,59 @@
 FROM buildpack-deps:stretch-scm
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # basic smoke test
 	javac -version; \
 	java -version
"
13,+,"# todo strip ""demo"" and ""man"" folders?","diff --git a/8/jdk/slim/Dockerfile b/8/jdk/slim/Dockerfile
index d2d008f..da9f353 100644
--- a/8/jdk/slim/Dockerfile
+++ b/8/jdk/slim/Dockerfile
@@ -1,57 +1,57 @@
 FROM debian:stretch-slim
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
-# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		ca-certificates wget \
 		gnupg dirmngr \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # basic smoke test
 	javac -version; \
 	java -version
"
14,+,# todo find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-april/000951.html is one of the only mentions of it i can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/8/jdk/slim/Dockerfile b/8/jdk/slim/Dockerfile
index d2d008f..da9f353 100644
--- a/8/jdk/slim/Dockerfile
+++ b/8/jdk/slim/Dockerfile
@@ -1,57 +1,57 @@
 FROM debian:stretch-slim
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
-# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		ca-certificates wget \
 		gnupg dirmngr \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # basic smoke test
 	javac -version; \
 	java -version
"
15,+,"# todo strip ""demo"" and ""man"" folders?","diff --git a/11/jdk/Dockerfile b/11/jdk/Dockerfile
index 7c285b3..18c5958 100644
--- a/11/jdk/Dockerfile
+++ b/11/jdk/Dockerfile
@@ -1,61 +1,62 @@
 FROM buildpack-deps:stretch-scm
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-11
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.3
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-
 ENV JAVA_URL_VERSION 11.0.3_7
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # basic smoke test
 	javac --version; \
 	java --version
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
16,+,# todo find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-april/000951.html is one of the only mentions of it i can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/11/jdk/Dockerfile b/11/jdk/Dockerfile
index 7c285b3..18c5958 100644
--- a/11/jdk/Dockerfile
+++ b/11/jdk/Dockerfile
@@ -1,61 +1,62 @@
 FROM buildpack-deps:stretch-scm
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-11
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.3
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-
 ENV JAVA_URL_VERSION 11.0.3_7
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # basic smoke test
 	javac --version; \
 	java --version
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
17,+,"# todo strip ""demo"" and ""man"" folders?","diff --git a/8/jre/Dockerfile b/8/jre/Dockerfile
index c3377ec..125962f 100644
--- a/8/jre/Dockerfile
+++ b/8/jre/Dockerfile
@@ -1,57 +1,58 @@
 FROM buildpack-deps:stretch-curl
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # basic smoke test
 	java -version
"
18,+,# todo find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-april/000951.html is one of the only mentions of it i can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/8/jre/Dockerfile b/8/jre/Dockerfile
index c3377ec..125962f 100644
--- a/8/jre/Dockerfile
+++ b/8/jre/Dockerfile
@@ -1,57 +1,58 @@
 FROM buildpack-deps:stretch-curl
 
 RUN set -eux; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		bzip2 \
 		unzip \
 		xz-utils \
 		\
 # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
 # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
 # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
 		fontconfig libfreetype6 \
 	; \
 	rm -rf /var/lib/apt/lists/*
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 # basic smoke test
 	java -version
"
19,+,# todo signature? checksum?,"diff --git a/8/jdk/windows/windowsservercore-ltsc2016/Dockerfile b/8/jdk/windows/windowsservercore-ltsc2016/Dockerfile
index 0100907..a40a1e8 100644
--- a/8/jdk/windows/windowsservercore-ltsc2016/Dockerfile
+++ b/8/jdk/windows/windowsservercore-ltsc2016/Dockerfile
@@ -1,49 +1,37 @@
 FROM mcr.microsoft.com/windows/servercore:ltsc2016
 
 # $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
 SHELL [""powershell"", ""-Command"", ""$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';""]
 
-# enable TLS 1.2 (Nano Server doesn't support using ""[Net.ServicePointManager]::SecurityProtocol"")
-# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801
-# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12
-RUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \
-	$tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2'; \
-	if (Test-Path $tls12RegBase) { throw ('""{0}"" already exists!' -f $tls12RegBase) }; \
-	New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \
-	New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
-
 ENV JAVA_HOME C:\\openjdk-8
 RUN $newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \
 	Write-Host ('Updating PATH: {0}' -f $newPath); \
 # Nano Server does not have ""[Environment]::SetEnvironmentVariable()""
 	setx /M PATH $newPath
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN $url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \
 	Write-Host ('Downloading {0} ...' -f $url); \
+	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
 	Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \
 # TODO signature? checksum?
 	\
 	Write-Host 'Expanding ...'; \
 	New-Item -ItemType Directory -Path C:\temp | Out-Null; \
 	Expand-Archive openjdk.zip -DestinationPath C:\temp; \
 	Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME; \
 	Remove-Item C:\temp; \
 	\
 	Write-Host 'Removing ...'; \
 	Remove-Item openjdk.zip -Force; \
 	\
 	Write-Host 'Verifying install ...'; \
 	Write-Host '  javac -version'; javac -version; \
 	Write-Host '  java -version'; java -version; \
 	\
 	Write-Host 'Complete.'
"
20,+,"# todo strip ""demo"" and ""man"" folders?","diff --git a/11/jdk/slim/Dockerfile b/11/jdk/slim/Dockerfile
index c365374..574dfa3 100644
--- a/11/jdk/slim/Dockerfile
+++ b/11/jdk/slim/Dockerfile
@@ -1,60 +1,60 @@
 FROM debian:stretch-slim
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-11
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.3
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-
 ENV JAVA_URL_VERSION 11.0.3_7
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
-# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		ca-certificates wget \
 		gnupg dirmngr \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # basic smoke test
 	javac --version; \
 	java --version
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
21,+,# todo find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-april/000951.html is one of the only mentions of it i can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/11/jdk/slim/Dockerfile b/11/jdk/slim/Dockerfile
index c365374..574dfa3 100644
--- a/11/jdk/slim/Dockerfile
+++ b/11/jdk/slim/Dockerfile
@@ -1,60 +1,60 @@
 FROM debian:stretch-slim
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-11
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.3
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-
 ENV JAVA_URL_VERSION 11.0.3_7
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
-# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		ca-certificates wget \
 		gnupg dirmngr \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # basic smoke test
 	javac --version; \
 	java --version
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
22,+,# todo signature? checksum?,"diff --git a/11/jdk/windows/windowsservercore-ltsc2016/Dockerfile b/11/jdk/windows/windowsservercore-ltsc2016/Dockerfile
index e29a2de..64df04f 100644
--- a/11/jdk/windows/windowsservercore-ltsc2016/Dockerfile
+++ b/11/jdk/windows/windowsservercore-ltsc2016/Dockerfile
@@ -1,52 +1,40 @@
 FROM mcr.microsoft.com/windows/servercore:ltsc2016
 
 # $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
 SHELL [""powershell"", ""-Command"", ""$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';""]
 
-# enable TLS 1.2 (Nano Server doesn't support using ""[Net.ServicePointManager]::SecurityProtocol"")
-# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801
-# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12
-RUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \
-	$tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2'; \
-	if (Test-Path $tls12RegBase) { throw ('""{0}"" already exists!' -f $tls12RegBase) }; \
-	New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \
-	New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
-
 ENV JAVA_HOME C:\\openjdk-11
 RUN $newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \
 	Write-Host ('Updating PATH: {0}' -f $newPath); \
 # Nano Server does not have ""[Environment]::SetEnvironmentVariable()""
 	setx /M PATH $newPath
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.3
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-
 ENV JAVA_URL_VERSION 11.0.3_7
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN $url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \
 	Write-Host ('Downloading {0} ...' -f $url); \
+	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
 	Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \
 # TODO signature? checksum?
 	\
 	Write-Host 'Expanding ...'; \
 	New-Item -ItemType Directory -Path C:\temp | Out-Null; \
 	Expand-Archive openjdk.zip -DestinationPath C:\temp; \
 	Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME; \
 	Remove-Item C:\temp; \
 	\
 	Write-Host 'Removing ...'; \
 	Remove-Item openjdk.zip -Force; \
 	\
 	Write-Host 'Verifying install ...'; \
 	Write-Host '  javac --version'; javac --version; \
 	Write-Host '  java --version'; java --version; \
 	\
 	Write-Host 'Complete.'
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
23,+,# todo signature? checksum?,"diff --git a/8/jre/windows/windowsservercore-ltsc2016/Dockerfile b/8/jre/windows/windowsservercore-ltsc2016/Dockerfile
index 857c3aa..deffa49 100644
--- a/8/jre/windows/windowsservercore-ltsc2016/Dockerfile
+++ b/8/jre/windows/windowsservercore-ltsc2016/Dockerfile
@@ -1,48 +1,36 @@
 FROM mcr.microsoft.com/windows/servercore:ltsc2016
 
 # $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
 SHELL [""powershell"", ""-Command"", ""$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';""]
 
-# enable TLS 1.2 (Nano Server doesn't support using ""[Net.ServicePointManager]::SecurityProtocol"")
-# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801
-# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12
-RUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \
-	$tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2'; \
-	if (Test-Path $tls12RegBase) { throw ('""{0}"" already exists!' -f $tls12RegBase) }; \
-	New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \
-	New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
-
 ENV JAVA_HOME C:\\openjdk-8
 RUN $newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \
 	Write-Host ('Updating PATH: {0}' -f $newPath); \
 # Nano Server does not have ""[Environment]::SetEnvironmentVariable()""
 	setx /M PATH $newPath
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN $url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \
 	Write-Host ('Downloading {0} ...' -f $url); \
+	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
 	Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \
 # TODO signature? checksum?
 	\
 	Write-Host 'Expanding ...'; \
 	New-Item -ItemType Directory -Path C:\temp | Out-Null; \
 	Expand-Archive openjdk.zip -DestinationPath C:\temp; \
 	Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME; \
 	Remove-Item C:\temp; \
 	\
 	Write-Host 'Removing ...'; \
 	Remove-Item openjdk.zip -Force; \
 	\
 	Write-Host 'Verifying install ...'; \
 	Write-Host '  java -version'; java -version; \
 	\
 	Write-Host 'Complete.'
"
24,+,# todo signature? checksum?,"diff --git a/11/jdk/windows/windowsservercore-1809/Dockerfile b/11/jdk/windows/windowsservercore-1809/Dockerfile
index 128987e..1e26f46 100644
--- a/11/jdk/windows/windowsservercore-1809/Dockerfile
+++ b/11/jdk/windows/windowsservercore-1809/Dockerfile
@@ -1,52 +1,40 @@
 FROM mcr.microsoft.com/windows/servercore:1809
 
 # $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
 SHELL [""powershell"", ""-Command"", ""$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';""]
 
-# enable TLS 1.2 (Nano Server doesn't support using ""[Net.ServicePointManager]::SecurityProtocol"")
-# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801
-# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12
-RUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \
-	$tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2'; \
-	if (Test-Path $tls12RegBase) { throw ('""{0}"" already exists!' -f $tls12RegBase) }; \
-	New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \
-	New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
-
 ENV JAVA_HOME C:\\openjdk-11
 RUN $newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \
 	Write-Host ('Updating PATH: {0}' -f $newPath); \
 # Nano Server does not have ""[Environment]::SetEnvironmentVariable()""
 	setx /M PATH $newPath
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.3
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-
 ENV JAVA_URL_VERSION 11.0.3_7
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN $url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \
 	Write-Host ('Downloading {0} ...' -f $url); \
+	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
 	Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \
 # TODO signature? checksum?
 	\
 	Write-Host 'Expanding ...'; \
 	New-Item -ItemType Directory -Path C:\temp | Out-Null; \
 	Expand-Archive openjdk.zip -DestinationPath C:\temp; \
 	Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME; \
 	Remove-Item C:\temp; \
 	\
 	Write-Host 'Removing ...'; \
 	Remove-Item openjdk.zip -Force; \
 	\
 	Write-Host 'Verifying install ...'; \
 	Write-Host '  javac --version'; javac --version; \
 	Write-Host '  java --version'; java --version; \
 	\
 	Write-Host 'Complete.'
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
25,+,"# todo strip ""demo"" and ""man"" folders?","diff --git a/8/jre/slim/Dockerfile b/8/jre/slim/Dockerfile
index 01e7eee..e7947ef 100644
--- a/8/jre/slim/Dockerfile
+++ b/8/jre/slim/Dockerfile
@@ -1,56 +1,56 @@
 FROM debian:stretch-slim
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
-# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		ca-certificates wget \
 		gnupg dirmngr \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # basic smoke test
 	java -version
"
26,+,# todo find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-april/000951.html is one of the only mentions of it i can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?,"diff --git a/8/jre/slim/Dockerfile b/8/jre/slim/Dockerfile
index 01e7eee..e7947ef 100644
--- a/8/jre/slim/Dockerfile
+++ b/8/jre/slim/Dockerfile
@@ -1,56 +1,56 @@
 FROM debian:stretch-slim
 
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
 ENV JAVA_HOME /usr/local/openjdk-8
 ENV PATH $JAVA_HOME/bin:$PATH
 
 # backwards compatibility shim
 RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN set -eux; \
 	\
 	dpkgArch=""$(dpkg --print-architecture)""; \
 	case ""$dpkgArch"" in \
 		amd64) upstreamArch='x64' ;; \
-# TODO filter out arm64 for openjdk:8 (https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2B7)
 		arm64) upstreamArch='aarch64' ;; \
 		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
 	esac; \
 	\
 	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
 		ca-certificates wget \
 		gnupg dirmngr \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
 	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
 	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
 	export GNUPGHOME=""$(mktemp -d)""; \
 # TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
 	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
 	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
 	rm -rf ""$GNUPGHOME""; \
 	\
 	mkdir -p ""$JAVA_HOME""; \
 	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
 	rm openjdk.tgz*; \
 	\
 # TODO strip ""demo"" and ""man"" folders?
 	\
 	apt-mark auto '.*' > /dev/null; \
 	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
 	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
 	\
 # basic smoke test
 	java -version
"
27,+,# todo signature? checksum?,"diff --git a/11/jdk/windows/windowsservercore-1803/Dockerfile b/11/jdk/windows/windowsservercore-1803/Dockerfile
index dd2ac97..c4362f3 100644
--- a/11/jdk/windows/windowsservercore-1803/Dockerfile
+++ b/11/jdk/windows/windowsservercore-1803/Dockerfile
@@ -1,52 +1,40 @@
 FROM mcr.microsoft.com/windows/servercore:1803
 
 # $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
 SHELL [""powershell"", ""-Command"", ""$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';""]
 
-# enable TLS 1.2 (Nano Server doesn't support using ""[Net.ServicePointManager]::SecurityProtocol"")
-# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801
-# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12
-RUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \
-	$tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2'; \
-	if (Test-Path $tls12RegBase) { throw ('""{0}"" already exists!' -f $tls12RegBase) }; \
-	New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \
-	New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
-
 ENV JAVA_HOME C:\\openjdk-11
 RUN $newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \
 	Write-Host ('Updating PATH: {0}' -f $newPath); \
 # Nano Server does not have ""[Environment]::SetEnvironmentVariable()""
 	setx /M PATH $newPath
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.3
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-
 ENV JAVA_URL_VERSION 11.0.3_7
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN $url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \
 	Write-Host ('Downloading {0} ...' -f $url); \
+	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
 	Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \
 # TODO signature? checksum?
 	\
 	Write-Host 'Expanding ...'; \
 	New-Item -ItemType Directory -Path C:\temp | Out-Null; \
 	Expand-Archive openjdk.zip -DestinationPath C:\temp; \
 	Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME; \
 	Remove-Item C:\temp; \
 	\
 	Write-Host 'Removing ...'; \
 	Remove-Item openjdk.zip -Force; \
 	\
 	Write-Host 'Verifying install ...'; \
 	Write-Host '  javac --version'; javac --version; \
 	Write-Host '  java --version'; java --version; \
 	\
 	Write-Host 'Complete.'
 
 # ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
"
28,+,# todo signature? checksum?,"diff --git a/8/jre/windows/windowsservercore-1803/Dockerfile b/8/jre/windows/windowsservercore-1803/Dockerfile
index 2c21263..9c56900 100644
--- a/8/jre/windows/windowsservercore-1803/Dockerfile
+++ b/8/jre/windows/windowsservercore-1803/Dockerfile
@@ -1,48 +1,36 @@
 FROM mcr.microsoft.com/windows/servercore:1803
 
 # $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
 SHELL [""powershell"", ""-Command"", ""$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';""]
 
-# enable TLS 1.2 (Nano Server doesn't support using ""[Net.ServicePointManager]::SecurityProtocol"")
-# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801
-# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12
-RUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \
-	$tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2'; \
-	if (Test-Path $tls12RegBase) { throw ('""{0}"" already exists!' -f $tls12RegBase) }; \
-	New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \
-	New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
-
 ENV JAVA_HOME C:\\openjdk-8
 RUN $newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \
 	Write-Host ('Updating PATH: {0}' -f $newPath); \
 # Nano Server does not have ""[Environment]::SetEnvironmentVariable()""
 	setx /M PATH $newPath
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN $url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \
 	Write-Host ('Downloading {0} ...' -f $url); \
+	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
 	Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \
 # TODO signature? checksum?
 	\
 	Write-Host 'Expanding ...'; \
 	New-Item -ItemType Directory -Path C:\temp | Out-Null; \
 	Expand-Archive openjdk.zip -DestinationPath C:\temp; \
 	Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME; \
 	Remove-Item C:\temp; \
 	\
 	Write-Host 'Removing ...'; \
 	Remove-Item openjdk.zip -Force; \
 	\
 	Write-Host 'Verifying install ...'; \
 	Write-Host '  java -version'; java -version; \
 	\
 	Write-Host 'Complete.'
"
29,+,# todo signature? checksum?,"diff --git a/8/jdk/windows/windowsservercore-1803/Dockerfile b/8/jdk/windows/windowsservercore-1803/Dockerfile
index e5f4b43..0ee0b00 100644
--- a/8/jdk/windows/windowsservercore-1803/Dockerfile
+++ b/8/jdk/windows/windowsservercore-1803/Dockerfile
@@ -1,49 +1,37 @@
 FROM mcr.microsoft.com/windows/servercore:1803
 
 # $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
 SHELL [""powershell"", ""-Command"", ""$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';""]
 
-# enable TLS 1.2 (Nano Server doesn't support using ""[Net.ServicePointManager]::SecurityProtocol"")
-# https://docs.microsoft.com/en-us/system-center/vmm/install-tls?view=sc-vmm-1801
-# https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/manage-ssl-protocols-in-ad-fs#enable-tls-12
-RUN Write-Host 'Enabling TLS 1.2 (https://githubengineering.com/crypto-removal-notice/) ...'; \
-	$tls12RegBase = 'HKLM:\\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2'; \
-	if (Test-Path $tls12RegBase) { throw ('""{0}"" already exists!' -f $tls12RegBase) }; \
-	New-Item -Path ('{0}/Client' -f $tls12RegBase) -Force; \
-	New-Item -Path ('{0}/Server' -f $tls12RegBase) -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Client' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'DisabledByDefault' -PropertyType DWORD -Value 0 -Force; \
-	New-ItemProperty -Path ('{0}/Server' -f $tls12RegBase) -Name 'Enabled' -PropertyType DWORD -Value 1 -Force
-
 ENV JAVA_HOME C:\\openjdk-8
 RUN $newPath = ('{0}\bin;{1}' -f $env:JAVA_HOME, $env:PATH); \
 	Write-Host ('Updating PATH: {0}' -f $newPath); \
 # Nano Server does not have ""[Environment]::SetEnvironmentVariable()""
 	setx /M PATH $newPath
 
 # https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 8u212-b04
 ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-
 ENV JAVA_URL_VERSION 8u212b04
 # https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
 RUN $url = ('{0}x64_windows_{1}.zip' -f $env:JAVA_BASE_URL, $env:JAVA_URL_VERSION); \
 	Write-Host ('Downloading {0} ...' -f $url); \
+	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
 	Invoke-WebRequest -Uri $url -OutFile 'openjdk.zip'; \
 # TODO signature? checksum?
 	\
 	Write-Host 'Expanding ...'; \
 	New-Item -ItemType Directory -Path C:\temp | Out-Null; \
 	Expand-Archive openjdk.zip -DestinationPath C:\temp; \
 	Move-Item -Path C:\temp\* -Destination $env:JAVA_HOME; \
 	Remove-Item C:\temp; \
 	\
 	Write-Host 'Removing ...'; \
 	Remove-Item openjdk.zip -Force; \
 	\
 	Write-Host 'Verifying install ...'; \
 	Write-Host '  javac -version'; javac -version; \
 	Write-Host '  java -version'; java -version; \
 	\
 	Write-Host 'Complete.'
"
30,-,"# this file describes the standard way to build docker, using docker
#
# usage:
#
# # assemble the full dev environment. this is slow the first time.
# docker build -t docker .
#
# # mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # publish a release:
# docker run --privileged \
#  -e aws_s3_bucket=baz \
#  -e aws_access_key=foo \
#  -e aws_secret_key=bar \
#  -e gpg_passphrase=gloubiboulga \
#  docker hack/release.sh
#
# note: apparmor used to mess with privileged mode, but this is no longer
# the case. therefore, you don't have to disable it anymore.
#","diff --git a/Dockerfile b/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
31,-,"# this file describes the standard way to build docker, using docker
#
# usage:
#
# # assemble the full dev environment. this is slow the first time.
# docker build -t docker .
#
# # mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
#
# # run the test suite:
# docker run --privileged docker hack/make.sh test
#
# # publish a release:
# docker run --privileged \
#  -e aws_s3_bucket=baz \
#  -e aws_access_key=foo \
#  -e aws_secret_key=bar \
#  -e gpg_passphrase=gloubiboulga \
#  docker hack/release.sh
#
# note: apparmor used to mess with privileged mode, but this is no longer
# the case. therefore, you don't have to disable it anymore.
#","diff --git a/components/engine/Dockerfile b/components/engine/Dockerfile
index 0e425ca819..210db41e7c 100644
--- a/components/engine/Dockerfile
+++ b/components/engine/Dockerfile
@@ -1,265 +1,265 @@
 # This file describes the standard way to build Docker, using docker
 #
 # Usage:
 #
 # # Assemble the full dev environment. This is slow the first time.
 # docker build -t docker .
 #
 # # Mount your source in an interactive container for quick testing:
 # docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash
 #
 # # Run the test suite:
 # docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py
 #
 # # Publish a release:
 # docker run --privileged \
 #  -e AWS_S3_BUCKET=baz \
 #  -e AWS_ACCESS_KEY=foo \
 #  -e AWS_SECRET_KEY=bar \
 #  -e GPG_PASSPHRASE=gloubiboulga \
 #  docker hack/release.sh
 #
 # Note: AppArmor used to mess with privileged mode, but this is no longer
 # the case. Therefore, you don't have to disable it anymore.
 #
 
 FROM debian:jessie
 
 # add zfs ppa
 RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 \
 	|| apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61
 RUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list
 
 
 # allow replacing httpredir mirror
 ARG APT_MIRROR=httpredir.debian.org
 RUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list
 
 # Packaged dependencies
 RUN apt-get update && apt-get install -y \
 	apparmor \
 	apt-utils \
 	aufs-tools \
 	automake \
 	bash-completion \
 	binutils-mingw-w64 \
 	bsdmainutils \
 	btrfs-tools \
 	build-essential \
 	clang \
 	createrepo \
 	curl \
 	dpkg-sig \
 	gcc-mingw-w64 \
 	git \
 	iptables \
 	jq \
 	libapparmor-dev \
 	libcap-dev \
 	libltdl-dev \
 	libsqlite3-dev \
 	libsystemd-journal-dev \
 	libtool \
 	mercurial \
 	net-tools \
 	pkg-config \
 	python-dev \
 	python-mock \
 	python-pip \
 	python-websocket \
 	ubuntu-zfs \
 	xfsprogs \
 	libzfs-dev \
 	tar \
 	zip \
 	--no-install-recommends \
 	&& pip install awscli==1.10.15
 # Get lvm2 source for compiling statically
 ENV LVM2_VERSION 2.02.103
 RUN mkdir -p /usr/local/lvm2 \
 	&& curl -fsSL ""https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz"" \
 		| tar -xzC /usr/local/lvm2 --strip-components=1
 # see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags
 
 # Compile and install lvm2
 RUN cd /usr/local/lvm2 \
 	&& ./configure \
 		--build=""$(gcc -print-multiarch)"" \
 		--enable-static_link \
 	&& make device-mapper \
 	&& make install_device-mapper
 # see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL
 
 # Configure the container for OSX cross compilation
 ENV OSX_SDK MacOSX10.11.sdk
 ENV OSX_CROSS_COMMIT a9317c18a3a457ca0a657f08cc4d0d43c6cf8953
 RUN set -x \
 	&& export OSXCROSS_PATH=""/osxcross"" \
 	&& git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
 	&& ( cd $OSXCROSS_PATH && git checkout -q $OSX_CROSS_COMMIT) \
 	&& curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o ""${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz"" \
 	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
 ENV PATH /osxcross/target/bin:$PATH
 
 # install seccomp: the version shipped in trusty is too old
 ENV SECCOMP_VERSION 2.3.1
 RUN set -x \
 	&& export SECCOMP_PATH=""$(mktemp -d)"" \
 	&& curl -fsSL ""https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz"" \
 		| tar -xzC ""$SECCOMP_PATH"" --strip-components=1 \
 	&& ( \
 		cd ""$SECCOMP_PATH"" \
 		&& ./configure --prefix=/usr/local \
 		&& make \
 		&& make install \
 		&& ldconfig \
 	) \
 	&& rm -rf ""$SECCOMP_PATH""
 
 # Install Go
 # IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines
 #            will need updating, to avoid errors. Ping #docker-maintainers on IRC
 #            with a heads-up.
 ENV GO_VERSION 1.6.3
 RUN curl -fsSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" \
 	| tar -xzC /usr/local
 
 ENV PATH /go/bin:/usr/local/go/bin:$PATH
 ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
 	darwin/amd64 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
 # This has been commented out and kept as reference because we don't support compiling with older Go anymore.
 # ENV GOFMT_VERSION 1.3.3
 # RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt
 
 ENV GO_TOOLS_COMMIT 823804e1ae08dbb14eb807afc7db9993bc9e3cc3
 # Grab Go's cover tool for dead-simple code coverage testing
 # Grab Go's vet tool for examining go code to find suspicious constructs
 # and help prevent errors that the compiler might not catch
 RUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \
 	&& (cd /go/src/golang.org/x/tools && git checkout -q $GO_TOOLS_COMMIT) \
 	&& go install -v golang.org/x/tools/cmd/cover \
 	&& go install -v golang.org/x/tools/cmd/vet
 # Grab Go's lint tool
 ENV GO_LINT_COMMIT 32a87160691b3c96046c0c678fe57c5bef761456
 RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
 # Install two versions of the registry. The first is an older version that
 # only supports schema1 manifests. The second is a newer version that supports
 # both. This allows integration-cli tests to cover push/pull with both schema1
 # and schema2 manifests.
 ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
 	&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
 		go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
 	&& rm -rf ""$GOPATH""
 
 # Install notary and notary-server
 ENV NOTARY_VERSION v0.3.0
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/notary.git ""$GOPATH/src/github.com/docker/notary"" \
 	&& (cd ""$GOPATH/src/github.com/docker/notary"" && git checkout -q ""$NOTARY_VERSION"") \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \
 	&& GOPATH=""$GOPATH/src/github.com/docker/notary/vendor:$GOPATH"" \
 		go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \
 	&& rm -rf ""$GOPATH""
 
 # Get the ""docker-py"" source so we can run their integration tests
-ENV DOCKER_PY_COMMIT 7befe694bd21e3c54bb1d7825270ea4bd6864c13
+ENV DOCKER_PY_COMMIT e2655f658408f9ad1f62abdef3eb6ed43c0cf324
 RUN git clone https://github.com/docker/docker-py.git /docker-py \
 	&& cd /docker-py \
 	&& git checkout -q $DOCKER_PY_COMMIT \
 	&& pip install -r test-requirements.txt
 
 # Set user.email so crosbymichael's in-container merge commits go smoothly
 RUN git config --global user.email 'docker-dummy@example.com'
 
 # Add an unprivileged user to be used for tests which need it
 RUN groupadd -r docker
 RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor pkcs11 seccomp selinux
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
 # Add integration helps to bashrc
 RUN echo ""source $PWD/hack/make/.integration-test-helpers"" >> /etc/bash.bashrc
 
 # Register Docker's bash completion.
 RUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker
 
 # Get useful and necessary Hub images so we can ""docker load"" locally instead of pulling
 COPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/
 RUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images \
 	buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 \
 	busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 \
 	debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e \
 	hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
 # see also ""hack/make/.ensure-frozen-images"" (which needs to be updated any time this list is)
 
 # Download man page generator
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git ""$GOPATH/src/github.com/cpuguy83/go-md2man"" \
 	&& git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git ""$GOPATH/src/github.com/russross/blackfriday"" \
 	&& go get -v -d github.com/cpuguy83/go-md2man \
 	&& go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \
 	&& rm -rf ""$GOPATH""
 
 # Download toml validator
 ENV TOMLV_COMMIT 9baf8a8a9f2ed20a8e54160840c492f937eeaf9a
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/BurntSushi/toml.git ""$GOPATH/src/github.com/BurntSushi/toml"" \
 	&& (cd ""$GOPATH/src/github.com/BurntSushi/toml"" && git checkout -q ""$TOMLV_COMMIT"") \
 	&& go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \
 	&& rm -rf ""$GOPATH""
 
 # Install runc
 ENV RUNC_COMMIT cc29e3dded8e27ba8f65738f40d251c885030a28
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/opencontainers/runc.git ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& cd ""$GOPATH/src/github.com/opencontainers/runc"" \
 	&& git checkout -q ""$RUNC_COMMIT"" \
 	&& make static BUILDTAGS=""seccomp apparmor selinux"" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf ""$GOPATH""
 
 # Install containerd
 ENV CONTAINERD_COMMIT 0ac3cd1be170d180b2baed755e8f0da547ceb267
 RUN set -x \
 	&& export GOPATH=""$(mktemp -d)"" \
 	&& git clone https://github.com/docker/containerd.git ""$GOPATH/src/github.com/docker/containerd"" \
 	&& cd ""$GOPATH/src/github.com/docker/containerd"" \
 	&& git checkout -q ""$CONTAINERD_COMMIT"" \
 	&& make static \
 	&& cp bin/containerd /usr/local/bin/docker-containerd \
 	&& cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \
 	&& cp bin/ctr /usr/local/bin/docker-containerd-ctr \
 	&& rm -rf ""$GOPATH""
 
 # Wrap all commands in the ""docker-in-docker"" script to allow nested containers
 ENTRYPOINT [""hack/dind""]
 
 # Upload docker source
 COPY . /go/src/github.com/docker/docker
"
32,-,"# todo: remove build dependencies
#	rundeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $rundeps; \
#	apk del .build-deps","diff --git a/3.4/alpine/Dockerfile b/3.4/alpine/Dockerfile
index 2e9f1c5..23673d3 100644
--- a/3.4/alpine/Dockerfile
+++ b/3.4/alpine/Dockerfile
@@ -1,102 +1,103 @@
-FROM ruby:2.4-alpine
+FROM ruby:2.4-alpine3.10
 
 # add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
-RUN addgroup -S redmine && adduser -S -G redmine redmine
+RUN addgroup -S redmine && adduser -S -H -G redmine redmine
 
 RUN set -eux; \
 	apk add --no-cache \
 		bash \
 		ca-certificates \
 		su-exec \
 		tini \
 		tzdata \
 		wget \
 		\
 		bzr \
 		git \
 		mercurial \
 		openssh-client \
 		subversion \
 		\
 # https://github.com/docker-library/redmine/issues/132
 # (without ""ghostscript-fonts"" we get ""Magick::ImageMagickError (non-conforming drawing primitive definition `text' @ error/draw.c/DrawImage/3265):"")
 		ghostscript-fonts \
 		imagemagick6 \
 	;
 
 ENV RAILS_ENV production
 WORKDIR /usr/src/redmine
 
 # https://github.com/docker-library/redmine/issues/138#issuecomment-438834176
 # (bundler needs this for running as an arbitrary user)
 ENV HOME /home/redmine
 RUN set -eux; \
+	[ ! -d ""$HOME"" ]; \
 	mkdir -p ""$HOME""; \
 	chown redmine:redmine ""$HOME""; \
 	chmod 1777 ""$HOME""
 
 ENV REDMINE_VERSION 3.4.11
 ENV REDMINE_DOWNLOAD_MD5 796384ff56d335fe21da65acf4dba747
 
 RUN set -eux; \
 	wget -O redmine.tar.gz ""https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz""; \
 	echo ""$REDMINE_DOWNLOAD_MD5 *redmine.tar.gz"" | md5sum -c -; \
 	tar -xf redmine.tar.gz --strip-components=1; \
 	rm redmine.tar.gz files/delete.me log/delete.me; \
 	mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids; \
 	chown -R redmine:redmine ./; \
+# log to STDOUT (https://github.com/docker-library/redmine/issues/108)
+	echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb; \
 # fix permissions for running as an arbitrary user
 	chmod -R ugo=rwX config db sqlite; \
 	find log tmp -type d -exec chmod 1777 '{}' +
 
 RUN set -eux; \
 	\
 	apk add --no-cache --virtual .build-deps \
+		coreutils \
 		freetds-dev \
 		gcc \
 		imagemagick6-dev \
 		make \
 		mariadb-dev \
 		musl-dev \
 		patch \
 		postgresql-dev \
 		sqlite-dev \
 		ttf2ufm \
 		zlib-dev \
-		\
-# tiny_tds 1.0.x requires OpenSSL 1.0
-# see https://github.com/rails-sqlserver/tiny_tds/commit/3269dd3bcfbe4201ab51aa2870a6aaddfcbdfa5d (tiny_tds 1.2.x+ is required for OpenSSL 1.1 support)
-		openssl-dev \
 	; \
-#	su-exec redmine bundle config build.tiny_tds --enable-system-freetds; \
 	\
 	su-exec redmine bundle install --without development test; \
 	for adapter in mysql2 postgresql sqlserver sqlite3; do \
 		echo ""$RAILS_ENV:"" > ./config/database.yml; \
 		echo ""  adapter: $adapter"" >> ./config/database.yml; \
 		su-exec redmine bundle install --without development test; \
 		cp Gemfile.lock ""Gemfile.lock.${adapter}""; \
 	done; \
 	rm ./config/database.yml; \
 # fix permissions for running as an arbitrary user
 	chmod -R ugo=rwX Gemfile.lock ""$GEM_HOME""; \
-	chmod +x /usr/local/bundle/bin/*; \
+# this requires coreutils because ""chmod +X"" in busybox will remove +x on files (and coreutils leaves files alone with +X)
 	rm -rf ~redmine/.bundle; \
+	\
 # https://github.com/naitoh/rbpdf/issues/31
-	rm -f /usr/local/bundle/gems/rbpdf-font-1.19.*/lib/fonts/ttf2ufm/ttf2ufm; \
+	rm /usr/local/bundle/gems/rbpdf-font-1.19.*/lib/fonts/ttf2ufm/ttf2ufm; \
+	\
 	runDeps=""$( \
 		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
 		| tr ',' '\n' \
 		| sort -u \
 		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
 	)""; \
 	apk add --virtual .redmine-rundeps $runDeps; \
 	apk del .build-deps
 
 VOLUME /usr/src/redmine/files
 
 COPY docker-entrypoint.sh /
 ENTRYPOINT [""/docker-entrypoint.sh""]
 
 EXPOSE 3000
 CMD [""rails"", ""server"", ""-b"", ""0.0.0.0""]
"
33,-,"# todo: remove build dependencies
#	rundeps=""$( \
#		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
#		| tr ',' '\n' \
#		| sort -u \
#		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
#	)""; \
#	apk add --virtual .redmine-rundeps $rundeps; \
#	apk del .build-deps","diff --git a/4.0/alpine/Dockerfile b/4.0/alpine/Dockerfile
index 7e256cb..2e3e03d 100644
--- a/4.0/alpine/Dockerfile
+++ b/4.0/alpine/Dockerfile
@@ -1,102 +1,103 @@
-FROM ruby:2.6-alpine
+FROM ruby:2.6-alpine3.10
 
 # add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
-RUN addgroup -S redmine && adduser -S -G redmine redmine
+RUN addgroup -S redmine && adduser -S -H -G redmine redmine
 
 RUN set -eux; \
 	apk add --no-cache \
 		bash \
 		ca-certificates \
 		su-exec \
 		tini \
 		tzdata \
 		wget \
 		\
 		bzr \
 		git \
 		mercurial \
 		openssh-client \
 		subversion \
 		\
 # https://github.com/docker-library/redmine/issues/132
 # (without ""ghostscript-fonts"" we get ""Magick::ImageMagickError (non-conforming drawing primitive definition `text' @ error/draw.c/DrawImage/3265):"")
 		ghostscript-fonts \
 		imagemagick6 \
 	;
 
 ENV RAILS_ENV production
 WORKDIR /usr/src/redmine
 
 # https://github.com/docker-library/redmine/issues/138#issuecomment-438834176
 # (bundler needs this for running as an arbitrary user)
 ENV HOME /home/redmine
 RUN set -eux; \
+	[ ! -d ""$HOME"" ]; \
 	mkdir -p ""$HOME""; \
 	chown redmine:redmine ""$HOME""; \
 	chmod 1777 ""$HOME""
 
 ENV REDMINE_VERSION 4.0.4
 ENV REDMINE_DOWNLOAD_MD5 35a4f60b35fed2b10d14cb12fc8aef50
 
 RUN set -eux; \
 	wget -O redmine.tar.gz ""https://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz""; \
 	echo ""$REDMINE_DOWNLOAD_MD5 *redmine.tar.gz"" | md5sum -c -; \
 	tar -xf redmine.tar.gz --strip-components=1; \
 	rm redmine.tar.gz files/delete.me log/delete.me; \
 	mkdir -p log public/plugin_assets sqlite tmp/pdf tmp/pids; \
 	chown -R redmine:redmine ./; \
+# log to STDOUT (https://github.com/docker-library/redmine/issues/108)
+	echo 'config.logger = Logger.new(STDOUT)' > config/additional_environment.rb; \
 # fix permissions for running as an arbitrary user
 	chmod -R ugo=rwX config db sqlite; \
 	find log tmp -type d -exec chmod 1777 '{}' +
 
 RUN set -eux; \
 	\
 	apk add --no-cache --virtual .build-deps \
+		coreutils \
 		freetds-dev \
 		gcc \
 		imagemagick6-dev \
 		make \
 		mariadb-dev \
 		musl-dev \
 		patch \
 		postgresql-dev \
 		sqlite-dev \
 		ttf2ufm \
 		zlib-dev \
-		\
-# tiny_tds 1.0.x requires OpenSSL 1.0
-# see https://github.com/rails-sqlserver/tiny_tds/commit/3269dd3bcfbe4201ab51aa2870a6aaddfcbdfa5d (tiny_tds 1.2.x+ is required for OpenSSL 1.1 support)
-		openssl-dev \
 	; \
-#	su-exec redmine bundle config build.tiny_tds --enable-system-freetds; \
 	\
 	su-exec redmine bundle install --without development test; \
 	for adapter in mysql2 postgresql sqlserver sqlite3; do \
 		echo ""$RAILS_ENV:"" > ./config/database.yml; \
 		echo ""  adapter: $adapter"" >> ./config/database.yml; \
 		su-exec redmine bundle install --without development test; \
 		cp Gemfile.lock ""Gemfile.lock.${adapter}""; \
 	done; \
 	rm ./config/database.yml; \
 # fix permissions for running as an arbitrary user
 	chmod -R ugo=rwX Gemfile.lock ""$GEM_HOME""; \
-	chmod +x /usr/local/bundle/bin/*; \
+# this requires coreutils because ""chmod +X"" in busybox will remove +x on files (and coreutils leaves files alone with +X)
 	rm -rf ~redmine/.bundle; \
+	\
 # https://github.com/naitoh/rbpdf/issues/31
-	rm -f /usr/local/bundle/gems/rbpdf-font-1.19.*/lib/fonts/ttf2ufm/ttf2ufm; \
+	rm /usr/local/bundle/gems/rbpdf-font-1.19.*/lib/fonts/ttf2ufm/ttf2ufm; \
+	\
 	runDeps=""$( \
 		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/bundle/gems \
 		| tr ',' '\n' \
 		| sort -u \
 		| awk 'system(""[ -e /usr/local/lib/"" $1 "" ]"") == 0 { next } { print ""so:"" $1 }' \
 	)""; \
 	apk add --virtual .redmine-rundeps $runDeps; \
 	apk del .build-deps
 
 VOLUME /usr/src/redmine/files
 
 COPY docker-entrypoint.sh /
 ENTRYPOINT [""/docker-entrypoint.sh""]
 
 EXPOSE 3000
 CMD [""rails"", ""server"", ""-b"", ""0.0.0.0""]
"
34,-, # todo inbox-api or inbox-start,"diff --git a/nylas/sync-engine/Dockerfile b/nylas/sync-engine/Dockerfile
deleted file mode 100644
index fb816bf..0000000
--- a/nylas/sync-engine/Dockerfile
+++ /dev/null
@@ -1,47 +0,0 @@
-FROM buildpack-deps:jessie-curl
-
-RUN apt-get update && apt-get install -y --no-install-recommends \
-		file \
-		g++ \
-		gcc \
-		git \
-		libffi-dev \
-		liblua5.2-dev \
-		libmysqlclient-dev \
-		libpython-dev \
-		libsodium-dev \
-		libssl-dev \
-		libxslt1-dev \
-		pkg-config \
-		python \
-	&& rm -rf /var/lib/apt/lists/*
-# install pip from upstream (since ""python-pip"" is too old)
-RUN wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \
-	&& python get-pip.py --no-cache-dir \
-	&& pip --version \
-	&& rm -f get-pip.py
-# tell pynacl to use system libsodium
-ENV SODIUM_INSTALL system
-
-WORKDIR /usr/src/sync-engine
-
-#ENV SYNC_VERSION v0.3.0 # 2014 :'(
-ENV SYNC_VERSION d715f4c7c2869b1e51f92af47908a9e011ae8aea
-
-RUN curl -fSL ""https://github.com/nylas/sync-engine/archive/$SYNC_VERSION.tar.gz"" -o sync.tar.gz \
-	&& tar -xzf sync.tar.gz --strip-components=1 \
-	&& rm sync.tar.gz
-
-# ugh, NameError: name 'PROTOCOL_SSLv3' is not defined
-RUN sed -i 's/^gevent==1.0.1/gevent==1.1rc3/' requirements.txt
-
-RUN pip install -r requirements.txt
-
-RUN pip install .
-
-COPY config.json secrets.yml /etc/inboxapp/
-
-USER 1000:1000
-COPY entrypoint.sh /usr/local/bin/
-ENTRYPOINT [""entrypoint.sh""]
-CMD [""bash""] # TODO inbox-api or inbox-start
"
35,-,"# fixme this is a workaround for pytest not found causing builds to fail
# following run statements tests for regression of https://github.com/ros2/ros2/issues/722","diff --git a/ros2/nightly/nightly/Dockerfile b/ros2/nightly/nightly/Dockerfile
index f3f5f37..a04e35c 100644
--- a/ros2/nightly/nightly/Dockerfile
+++ b/ros2/nightly/nightly/Dockerfile
@@ -1,121 +1,121 @@
 # This is an auto generated Dockerfile for ros:nightly
 # generated from docker_images_ros2/nightly/create_ros_image.Dockerfile.em
 FROM ubuntu:bionic
 
 # setup timezone
 RUN echo 'Etc/UTC' > /etc/timezone && \
     ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
     apt-get update && apt-get install -q -y tzdata && rm -rf /var/lib/apt/lists/*
 
 # install packages
 RUN apt-get update && apt-get install -q -y \
     bash-completion \
     cmake \
     dirmngr \
     git \
     gnupg2 \
     lsb-release \
     python3-pip \
     wget \
     && rm -rf /var/lib/apt/lists/*
 
 # setup ros2 keys
 RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
 
 # setup sources.list
 RUN echo ""deb http://packages.ros.org/ros2-testing/ubuntu `lsb_release -sc` main"" > /etc/apt/sources.list.d/ros2-testing.list
 
 # install bootstrap tools
 RUN apt-get update && apt-get install --no-install-recommends -y \
     git \
+    python3-colcon-common-extensions \
+    python3-colcon-mixin \
     python3-rosdep \
     python3-vcstool \
     && rm -rf /var/lib/apt/lists/*
 
 # setup environment
 ENV LANG C.UTF-8
 ENV LC_ALL C.UTF-8
 ENV ROSDISTRO_INDEX_URL https://raw.githubusercontent.com/osrf/docker_images/master/ros2/nightly/nightly/index-v4.yaml
 
 # install python packages
 RUN pip3 install -U \
     argcomplete \
-    colcon-common-extensions \
-    colcon-mixin \
     flake8 \
     flake8-blind-except \
     flake8-builtins \
     flake8-class-newline \
     flake8-comprehensions \
     flake8-deprecated \
     flake8-docstrings \
     flake8-import-order \
     flake8-quotes \
     pytest-repeat \
     pytest-rerunfailures
 # This is a workaround for pytest not found causing builds to fail
 # Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
 RUN pip3 freeze | grep pytest \
     && python3 -m pytest --version
 
 # install ros2 packages
 ENV ROS_DISTRO foxy
 RUN mkdir -p /opt/ros/$ROS_DISTRO
 ARG ROS2_BINARY_URL=https://ci.ros2.org/view/packaging/job/packaging_linux/lastSuccessfulBuild/artifact/ws/ros2-package-linux-x86_64.tar.bz2
 RUN wget -q $ROS2_BINARY_URL -O - | \
     tar -xj --strip-components=1 -C /opt/ros/$ROS_DISTRO
 
 # Overwrite setup scripts with ones that point to /opt/ros/$ROS_DISTRO
 RUN mkdir -p /tmp/dir/build \
  && cd /tmp/dir \
  && git clone --depth 1 https://github.com/ros2/ros_workspace.git -b latest \
  && cd /tmp/dir/build \
  && COLCON_CURRENT_PREFIX=/opt/ros/$ROS_DISTRO . /opt/ros/$ROS_DISTRO/local_setup.sh \
  && cmake -DCMAKE_INSTALL_PREFIX=/opt/ros/$ROS_DISTRO ../ros_workspace \
  && make install \
  && rm -r /tmp/dir
 
 # setup colcon mixin and metadata
 RUN colcon mixin add default \
       https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
     colcon mixin update && \
     colcon metadata add default \
       https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml && \
     colcon metadata update
 
 # bootstrap rosdep
 RUN rosdep init
 
 # add custom rosdep rule files
 COPY prereqs.yaml /etc/ros/rosdep/
 RUN echo ""yaml file:///etc/ros/rosdep/prereqs.yaml"" | \
     cat - /etc/ros/rosdep/sources.list.d/20-default.list > temp && \
     mv temp /etc/ros/rosdep/sources.list.d/20-default.list
 RUN rosdep update
 
 # install dependencies
 RUN . /opt/ros/$ROS_DISTRO/setup.sh \
     && apt-get update \
     && rosdep install -y \
     --from-paths /opt/ros/$ROS_DISTRO/share \
     --ignore-src \
     --skip-keys "" \
       cyclonedds \
       libopensplice69 \
       rti-connext-dds-5.3.1"" \
     && rm -rf /var/lib/apt/lists/*
 
 # FIXME Remove this once rosdep detects ROS 2 packages https://github.com/ros-infrastructure/rosdep/issues/660
 # ignore installed rosdep keys
 ENV ROS_PACKAGE_PATH /opt/ros/$ROS_DISTRO/share
 
 # FIXME Remove this once ament_export_interfaces respects COLCON_CURRENT_PREFIX https://github.com/ament/ament_cmake/issues/173
 #Workaround hard coded paths in nightly tarball setup scripts
 ARG UPSTREAM_CI_WS=/home/jenkins-agent/workspace/packaging_linux/ws
 RUN mkdir -p $UPSTREAM_CI_WS && ln -s /opt/ros/$ROS_DISTRO $UPSTREAM_CI_WS/install
 
 # setup entrypoint
 COPY ./ros_entrypoint.sh /
 
 ENTRYPOINT [""/ros_entrypoint.sh""]
 CMD [""bash""]
"
36,-,# todo filter out arm64 for openjdk:8 (https://github.com/adoptopenjdk/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/adoptopenjdk/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2b7),"diff --git a/8/jdk/slim/Dockerfile b/8/jdk/slim/Dockerfile
index 2b0fdc2..8c5d667 100644
--- a/8/jdk/slim/Dockerfile
+++ b/8/jdk/slim/Dockerfile
@@ -1,69 +1,60 @@
-#
-# NOTE: THIS DOCKERFILE IS GENERATED VIA ""update.sh""
-#
-# PLEASE DO NOT EDIT IT DIRECTLY.
-#
-
 FROM debian:stretch-slim
 
-# A few reasons for installing distribution-provided OpenJDK:
-#
-#  1. Oracle.  Licensing prevents us from redistributing the official JDK.
-#
-#  2. Compiling OpenJDK also requires the JDK to be installed, and it gets
-#     really hairy.
-#
-#     For some sample build times, see Debian's buildd logs:
-#       https://buildd.debian.org/status/logs.php?pkg=openjdk-8
-
-RUN apt-get update && apt-get install -y --no-install-recommends \
-		bzip2 \
-		unzip \
-		xz-utils \
-	&& rm -rf /var/lib/apt/lists/*
-
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
-# add a simple script that can auto-detect the appropriate JAVA_HOME value
-# based on whether the JDK or only the JRE is installed
-RUN { \
-		echo '#!/bin/sh'; \
-		echo 'set -e'; \
-		echo; \
-		echo 'dirname ""$(dirname ""$(readlink -f ""$(which javac || which java)"")"")""'; \
-	} > /usr/local/bin/docker-java-home \
-	&& chmod +x /usr/local/bin/docker-java-home
+ENV JAVA_HOME /usr/local/openjdk-8
+ENV PATH $JAVA_HOME/bin:$PATH
 
-# do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe
-RUN ln -svT ""/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)"" /docker-java-home
-ENV JAVA_HOME /docker-java-home
+# backwards compatibility shim
+RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
-ENV JAVA_VERSION 8u212
-ENV JAVA_DEBIAN_VERSION 8u212-b01-1~deb9u1
+# https://adoptopenjdk.net/upstream.html
+ENV JAVA_VERSION 8u212-b04
+ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-
+ENV JAVA_URL_VERSION 8u212b04
+# https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
-RUN set -ex; \
+RUN set -eux; \
 	\
-# deal with slim variants not having man page directories (which causes ""update-alternatives"" to fail)
-	if [ ! -d /usr/share/man/man1 ]; then \
-		mkdir -p /usr/share/man/man1; \
-	fi; \
+	dpkgArch=""$(dpkg --print-architecture)""; \
+	case ""$dpkgArch"" in \
+		amd64) upstreamArch='x64' ;; \
+		arm64) upstreamArch='aarch64' ;; \
+		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
+	esac; \
 	\
+	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
-		openjdk-8-jdk-headless=""$JAVA_DEBIAN_VERSION"" \
+		ca-certificates wget \
+		gnupg dirmngr \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
-# verify that ""docker-java-home"" returns what we expect
-	[ ""$(readlink -f ""$JAVA_HOME"")"" = ""$(docker-java-home)"" ]; \
+	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
+	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
-# update-alternatives so that future installs of other OpenJDK versions don't change /usr/bin/java
-	update-alternatives --get-selections | awk -v home=""$(readlink -f ""$JAVA_HOME"")"" 'index($3, home) == 1 { $2 = ""manual""; print | ""update-alternatives --set-selections"" }'; \
-# ... and verify that it actually worked for one of the alternatives we care about
-	update-alternatives --query java | grep -q 'Status: manual'
-
-# If you're reading this and have any feedback on how this image could be
-# improved, please open an issue or a pull request so we can discuss it!
-#
-#   https://github.com/docker-library/openjdk/issues
+	export GNUPGHOME=""$(mktemp -d)""; \
+# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
+	rm -rf ""$GNUPGHOME""; \
+	\
+	mkdir -p ""$JAVA_HOME""; \
+	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
+	rm openjdk.tgz*; \
+	\
+# TODO strip ""demo"" and ""man"" folders?
+	\
+	apt-mark auto '.*' > /dev/null; \
+	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
+	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
+	\
+# basic smoke test
+	javac -version; \
+	java -version
"
37,-,# todo filter out arm64 for openjdk:8 (https://github.com/adoptopenjdk/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/adoptopenjdk/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2b7),"diff --git a/11/jdk/slim/Dockerfile b/11/jdk/slim/Dockerfile
index b01dd92..b573d9e 100644
--- a/11/jdk/slim/Dockerfile
+++ b/11/jdk/slim/Dockerfile
@@ -1,86 +1,63 @@
-#
-# NOTE: THIS DOCKERFILE IS GENERATED VIA ""update.sh""
-#
-# PLEASE DO NOT EDIT IT DIRECTLY.
-#
-
 FROM debian:stretch-slim
 
-# A few reasons for installing distribution-provided OpenJDK:
-#
-#  1. Oracle.  Licensing prevents us from redistributing the official JDK.
-#
-#  2. Compiling OpenJDK also requires the JDK to be installed, and it gets
-#     really hairy.
-#
-#     For some sample build times, see Debian's buildd logs:
-#       https://buildd.debian.org/status/logs.php?pkg=openjdk-11
-
-RUN apt-get update && apt-get install -y --no-install-recommends \
-		bzip2 \
-		unzip \
-		xz-utils \
-	&& rm -rf /var/lib/apt/lists/*
-
-RUN echo 'deb http://deb.debian.org/debian stretch-backports main' > /etc/apt/sources.list.d/stretch-backports.list
-
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
-# add a simple script that can auto-detect the appropriate JAVA_HOME value
-# based on whether the JDK or only the JRE is installed
-RUN { \
-		echo '#!/bin/sh'; \
-		echo 'set -e'; \
-		echo; \
-		echo 'dirname ""$(dirname ""$(readlink -f ""$(which javac || which java)"")"")""'; \
-	} > /usr/local/bin/docker-java-home \
-	&& chmod +x /usr/local/bin/docker-java-home
+ENV JAVA_HOME /usr/local/openjdk-11
+ENV PATH $JAVA_HOME/bin:$PATH
 
-# do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe
-RUN ln -svT ""/usr/lib/jvm/java-11-openjdk-$(dpkg --print-architecture)"" /docker-java-home
-ENV JAVA_HOME /docker-java-home
+# backwards compatibility shim
+RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
+# https://adoptopenjdk.net/upstream.html
 ENV JAVA_VERSION 11.0.3
-ENV JAVA_DEBIAN_VERSION 11.0.3+1-1~bpo9+2
+ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-
+ENV JAVA_URL_VERSION 11.0.3_7
+# https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
-RUN set -ex; \
+RUN set -eux; \
 	\
-# deal with slim variants not having man page directories (which causes ""update-alternatives"" to fail)
-	if [ ! -d /usr/share/man/man1 ]; then \
-		mkdir -p /usr/share/man/man1; \
-	fi; \
-	\
-# ca-certificates-java does not work on src:openjdk-11 with no-install-recommends: (https://bugs.debian.org/914860, https://bugs.debian.org/775775)
-# /var/lib/dpkg/info/ca-certificates-java.postinst: line 56: java: command not found
-	ln -svT /docker-java-home/bin/java /usr/local/bin/java; \
+	dpkgArch=""$(dpkg --print-architecture)""; \
+	case ""$dpkgArch"" in \
+		amd64) upstreamArch='x64' ;; \
+		arm64) upstreamArch='aarch64' ;; \
+		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
+	esac; \
 	\
+	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
-		openjdk-11-jdk-headless=""$JAVA_DEBIAN_VERSION"" \
+		ca-certificates wget \
+		gnupg dirmngr \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
-	rm -v /usr/local/bin/java; \
+	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
+	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
+	\
+	export GNUPGHOME=""$(mktemp -d)""; \
+# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
+	rm -rf ""$GNUPGHOME""; \
 	\
-# ca-certificates-java does not work on src:openjdk-11: (https://bugs.debian.org/914424, https://bugs.debian.org/894979, https://salsa.debian.org/java-team/ca-certificates-java/commit/813b8c4973e6c4bb273d5d02f8d4e0aa0b226c50#d4b95d176f05e34cd0b718357c532dc5a6d66cd7_54_56)
-	keytool -importkeystore -srckeystore /etc/ssl/certs/java/cacerts -destkeystore /etc/ssl/certs/java/cacerts.jks -deststoretype JKS -srcstorepass changeit -deststorepass changeit -noprompt; \
-	mv /etc/ssl/certs/java/cacerts.jks /etc/ssl/certs/java/cacerts; \
-	/var/lib/dpkg/info/ca-certificates-java.postinst configure; \
+	mkdir -p ""$JAVA_HOME""; \
+	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
+	rm openjdk.tgz*; \
 	\
-# verify that ""docker-java-home"" returns what we expect
-	[ ""$(readlink -f ""$JAVA_HOME"")"" = ""$(docker-java-home)"" ]; \
+# TODO strip ""demo"" and ""man"" folders?
 	\
-# update-alternatives so that future installs of other OpenJDK versions don't change /usr/bin/java
-	update-alternatives --get-selections | awk -v home=""$(readlink -f ""$JAVA_HOME"")"" 'index($3, home) == 1 { $2 = ""manual""; print | ""update-alternatives --set-selections"" }'; \
-# ... and verify that it actually worked for one of the alternatives we care about
-	update-alternatives --query java | grep -q 'Status: manual'
+	apt-mark auto '.*' > /dev/null; \
+	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
+	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
+	\
+# basic smoke test
+	javac --version; \
+	java --version
 
-# https://docs.oracle.com/javase/10/tools/jshell.htm
-# https://en.wikipedia.org/wiki/JShell
+# ""jshell"" is an interactive REPL for Java (see https://en.wikipedia.org/wiki/JShell)
 CMD [""jshell""]
-
-# If you're reading this and have any feedback on how this image could be
-# improved, please open an issue or a pull request so we can discuss it!
-#
-#   https://github.com/docker-library/openjdk/issues
"
38,-,# todo filter out arm64 for openjdk:8 (https://github.com/adoptopenjdk/openjdk8-upstream-binaries/releases/tag/jdk8u212-b04 vs https://github.com/adoptopenjdk/openjdk11-upstream-binaries/releases/tag/jdk-11.0.3%2b7),"diff --git a/8/jre/slim/Dockerfile b/8/jre/slim/Dockerfile
index 80e70e4..03c5cd6 100644
--- a/8/jre/slim/Dockerfile
+++ b/8/jre/slim/Dockerfile
@@ -1,69 +1,59 @@
-#
-# NOTE: THIS DOCKERFILE IS GENERATED VIA ""update.sh""
-#
-# PLEASE DO NOT EDIT IT DIRECTLY.
-#
-
 FROM debian:stretch-slim
 
-# A few reasons for installing distribution-provided OpenJDK:
-#
-#  1. Oracle.  Licensing prevents us from redistributing the official JDK.
-#
-#  2. Compiling OpenJDK also requires the JDK to be installed, and it gets
-#     really hairy.
-#
-#     For some sample build times, see Debian's buildd logs:
-#       https://buildd.debian.org/status/logs.php?pkg=openjdk-8
-
-RUN apt-get update && apt-get install -y --no-install-recommends \
-		bzip2 \
-		unzip \
-		xz-utils \
-	&& rm -rf /var/lib/apt/lists/*
-
 # Default to UTF-8 file.encoding
 ENV LANG C.UTF-8
 
-# add a simple script that can auto-detect the appropriate JAVA_HOME value
-# based on whether the JDK or only the JRE is installed
-RUN { \
-		echo '#!/bin/sh'; \
-		echo 'set -e'; \
-		echo; \
-		echo 'dirname ""$(dirname ""$(readlink -f ""$(which javac || which java)"")"")""'; \
-	} > /usr/local/bin/docker-java-home \
-	&& chmod +x /usr/local/bin/docker-java-home
+ENV JAVA_HOME /usr/local/openjdk-8
+ENV PATH $JAVA_HOME/bin:$PATH
 
-# do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe
-RUN ln -svT ""/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)"" /docker-java-home
-ENV JAVA_HOME /docker-java-home/jre
+# backwards compatibility shim
+RUN { echo '#/bin/sh'; echo 'echo ""$JAVA_HOME""'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ ""$JAVA_HOME"" = ""$(docker-java-home)"" ]
 
-ENV JAVA_VERSION 8u212
-ENV JAVA_DEBIAN_VERSION 8u212-b01-1~deb9u1
+# https://adoptopenjdk.net/upstream.html
+ENV JAVA_VERSION 8u212-b04
+ENV JAVA_BASE_URL https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jre_
+ENV JAVA_URL_VERSION 8u212b04
+# https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246
 
-RUN set -ex; \
+RUN set -eux; \
 	\
-# deal with slim variants not having man page directories (which causes ""update-alternatives"" to fail)
-	if [ ! -d /usr/share/man/man1 ]; then \
-		mkdir -p /usr/share/man/man1; \
-	fi; \
+	dpkgArch=""$(dpkg --print-architecture)""; \
+	case ""$dpkgArch"" in \
+		amd64) upstreamArch='x64' ;; \
+		arm64) upstreamArch='aarch64' ;; \
+		*) echo >&2 ""error: unsupported architecture: $dpkgArch"" ;; \
+	esac; \
 	\
+	savedAptMark=""$(apt-mark showmanual)""; \
 	apt-get update; \
 	apt-get install -y --no-install-recommends \
-		openjdk-8-jre-headless=""$JAVA_DEBIAN_VERSION"" \
+		ca-certificates wget \
+		gnupg dirmngr \
 	; \
 	rm -rf /var/lib/apt/lists/*; \
 	\
-# verify that ""docker-java-home"" returns what we expect
-	[ ""$(readlink -f ""$JAVA_HOME"")"" = ""$(docker-java-home)"" ]; \
+	wget -O openjdk.tgz.asc ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign""; \
+	wget -O openjdk.tgz ""${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz"" --progress=dot:giga; \
 	\
-# update-alternatives so that future installs of other OpenJDK versions don't change /usr/bin/java
-	update-alternatives --get-selections | awk -v home=""$(readlink -f ""$JAVA_HOME"")"" 'index($3, home) == 1 { $2 = ""manual""; print | ""update-alternatives --set-selections"" }'; \
-# ... and verify that it actually worked for one of the alternatives we care about
-	update-alternatives --query java | grep -q 'Status: manual'
-
-# If you're reading this and have any feedback on how this image could be
-# improved, please open an issue or a pull request so we can discuss it!
-#
-#   https://github.com/docker-library/openjdk/issues
+	export GNUPGHOME=""$(mktemp -d)""; \
+# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
+# https://github.com/docker-library/openjdk/pull/322#discussion_r286839190
+	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
+	gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley'; \
+	gpg --batch --verify openjdk.tgz.asc openjdk.tgz; \
+	gpgconf --kill all; \
+	rm -rf ""$GNUPGHOME""; \
+	\
+	mkdir -p ""$JAVA_HOME""; \
+	tar --extract --file openjdk.tgz --directory ""$JAVA_HOME"" --strip-components 1; \
+	rm openjdk.tgz*; \
+	\
+# TODO strip ""demo"" and ""man"" folders?
+	\
+	apt-mark auto '.*' > /dev/null; \
+	[ -z ""$savedAptMark"" ] || apt-mark manual $savedAptMark > /dev/null; \
+	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
+	\
+# basic smoke test
+	java -version
"
